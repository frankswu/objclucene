//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.h"
#include "org/apache/lucene/codecs/blocktree/FieldReader.h"
#include "org/apache/lucene/codecs/blocktree/IntersectTermsEnum.h"
#include "org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/RunAutomaton.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "org/apache/lucene/util/fst/FST.h"

@interface OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame () {
 @public
  OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *ite_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame, ite_, OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *)

@implementation OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame

- (instancetype)initWithOrgApacheLuceneCodecsBlocktreeIntersectTermsEnum:(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *)ite
                                                                 withInt:(jint)ord {
  OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame_initWithOrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_withInt_(self, ite, ord);
  return self;
}

- (void)loadNextFloorBlock {
  JreAssert((numFollowFloorBlocks_ > 0), (JreStrcat("$I", @"nextFloorLabel=", nextFloorLabel_)));
  do {
    fp_ = fpOrig_ + (JreURShift64([((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(floorDataReader_)) readVLong], 1));
    numFollowFloorBlocks_--;
    if (numFollowFloorBlocks_ != 0) {
      nextFloorLabel_ = [floorDataReader_ readByte] & (jint) 0xff;
    }
    else {
      nextFloorLabel_ = 256;
    }
  }
  while (numFollowFloorBlocks_ != 0 && nextFloorLabel_ <= ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(transition_))->min_);
  [self load__WithOrgApacheLuceneUtilBytesRef:nil];
}

- (void)setStateWithInt:(jint)state {
  self->state_ = state;
  transitionIndex_ = 0;
  transitionCount_ = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *) nil_chk(ite_))->automaton_)) getNumTransitionsWithInt:state];
  if (transitionCount_ != 0) {
    [ite_->automaton_ initTransitionWithInt:state withOrgApacheLuceneUtilAutomatonTransition:transition_];
    [ite_->automaton_ getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:transition_];
  }
  else {
    ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(transition_))->min_ = -1;
    transition_->max_ = -1;
  }
}

- (void)load__WithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)frameIndexData {
  if (frameIndexData != nil) {
    [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(floorDataReader_)) resetWithByteArray:frameIndexData->bytes_ withInt:frameIndexData->offset_ withInt:frameIndexData->length_];
    jlong code = [floorDataReader_ readVLong];
    if ((code & OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAG_IS_FLOOR) != 0) {
      numFollowFloorBlocks_ = [floorDataReader_ readVInt];
      nextFloorLabel_ = [floorDataReader_ readByte] & (jint) 0xff;
      if ([((OrgApacheLuceneUtilAutomatonRunAutomaton *) nil_chk(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *) nil_chk(ite_))->runAutomaton_)) isAcceptWithInt:state_] == false && transitionCount_ != 0) {
        JreAssert((transitionIndex_ == 0), (JreStrcat("$I", @"transitionIndex=", transitionIndex_)));
        while (numFollowFloorBlocks_ != 0 && nextFloorLabel_ <= ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(transition_))->min_) {
          fp_ = fpOrig_ + (JreURShift64([floorDataReader_ readVLong], 1));
          numFollowFloorBlocks_--;
          if (numFollowFloorBlocks_ != 0) {
            nextFloorLabel_ = [floorDataReader_ readByte] & (jint) 0xff;
          }
          else {
            nextFloorLabel_ = 256;
          }
        }
      }
    }
  }
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *) nil_chk(ite_))->in_)) seekWithLong:fp_];
  jint code = [ite_->in_ readVInt];
  entCount_ = JreURShift32(code, 1);
  JreAssert((entCount_ > 0), (@"org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame.java:187 condition failed: assert entCount > 0;"));
  isLastInFloor_ = ((code & 1) != 0);
  code = [ite_->in_ readVInt];
  isLeafBlock_ = ((code & 1) != 0);
  jint numBytes = JreURShift32(code, 1);
  if (((IOSByteArray *) nil_chk(suffixBytes_))->size_ < numBytes) {
    JreStrongAssignAndConsume(&suffixBytes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(numBytes, 1)]);
  }
  [ite_->in_ readBytesWithByteArray:suffixBytes_ withInt:0 withInt:numBytes];
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) resetWithByteArray:suffixBytes_ withInt:0 withInt:numBytes];
  numBytes = [ite_->in_ readVInt];
  if (((IOSByteArray *) nil_chk(statBytes_))->size_ < numBytes) {
    JreStrongAssignAndConsume(&statBytes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(numBytes, 1)]);
  }
  [ite_->in_ readBytesWithByteArray:statBytes_ withInt:0 withInt:numBytes];
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(statsReader_)) resetWithByteArray:statBytes_ withInt:0 withInt:numBytes];
  metaDataUpto_ = 0;
  ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(termState_))->termBlockOrd_ = 0;
  nextEnt_ = 0;
  numBytes = [ite_->in_ readVInt];
  if (((IOSByteArray *) nil_chk(bytes_))->size_ < numBytes) {
    JreStrongAssignAndConsume(&bytes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(numBytes, 1)]);
  }
  [ite_->in_ readBytesWithByteArray:bytes_ withInt:0 withInt:numBytes];
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(bytesReader_)) resetWithByteArray:bytes_ withInt:0 withInt:numBytes];
  if (!isLastInFloor_) {
    fpEnd_ = [ite_->in_ getFilePointer];
  }
  isAutoPrefixTerm_ = false;
}

- (jboolean)next {
  if (isLeafBlock_) {
    [self nextLeaf];
    return false;
  }
  else {
    return [self nextNonLeaf];
  }
}

- (void)nextLeaf {
  JreAssert((nextEnt_ != -1 && nextEnt_ < entCount_), (JreStrcat("$I$I$J", @"nextEnt=", nextEnt_, @" entCount=", entCount_, @" fp=", fp_)));
  nextEnt_++;
  suffix_ = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) readVInt];
  startBytePos_ = [suffixesReader_ getPosition];
  [suffixesReader_ skipBytesWithLong:suffix_];
}

- (jboolean)nextNonLeaf {
  JreAssert((nextEnt_ != -1 && nextEnt_ < entCount_), (JreStrcat("$I$I$J", @"nextEnt=", nextEnt_, @" entCount=", entCount_, @" fp=", fp_)));
  nextEnt_++;
  jint code = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) readVInt];
  if (versionAutoPrefix_ == false) {
    suffix_ = JreURShift32(code, 1);
    startBytePos_ = [suffixesReader_ getPosition];
    [suffixesReader_ skipBytesWithLong:suffix_];
    if ((code & 1) == 0) {
      ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(termState_))->termBlockOrd_++;
      return false;
    }
    else {
      lastSubFP_ = fp_ - [suffixesReader_ readVLong];
      return true;
    }
  }
  else {
    suffix_ = JreURShift32(code, 2);
    startBytePos_ = [suffixesReader_ getPosition];
    [suffixesReader_ skipBytesWithLong:suffix_];
    switch (code & 3) {
      case 0:
      isAutoPrefixTerm_ = false;
      ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(termState_))->termBlockOrd_++;
      return false;
      case 1:
      isAutoPrefixTerm_ = false;
      lastSubFP_ = fp_ - [suffixesReader_ readVLong];
      return true;
      case 2:
      floorSuffixLeadStart_ = -1;
      ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(termState_))->termBlockOrd_++;
      floorSuffixLeadEnd_ = [suffixesReader_ readByte] & (jint) 0xff;
      if (floorSuffixLeadEnd_ == (jint) 0xff) {
        floorSuffixLeadEnd_ = -1;
      }
      isAutoPrefixTerm_ = true;
      return false;
      case 3:
      if (suffix_ == 0) {
        JreAssert((ord_ > 0), (@"org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame.java:298 condition failed: assert ord > 0;"));
        OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *parent = IOSObjectArray_Get(nil_chk(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *) nil_chk(ite_))->stack_), ord_ - 1);
        floorSuffixLeadStart_ = IOSByteArray_Get(nil_chk(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(parent))->suffixBytes_), parent->startBytePos_ + parent->suffix_ - 1) & (jint) 0xff;
      }
      else {
        floorSuffixLeadStart_ = IOSByteArray_Get(nil_chk(suffixBytes_), startBytePos_ + suffix_ - 1) & (jint) 0xff;
      }
      ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(termState_))->termBlockOrd_++;
      isAutoPrefixTerm_ = true;
      floorSuffixLeadEnd_ = [suffixesReader_ readByte] & (jint) 0xff;
      return false;
      default:
      JreAssert((false), (@"org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame.java:310 condition failed: assert false;"));
      return false;
    }
  }
}

- (jint)getTermBlockOrd {
  return isLeafBlock_ ? nextEnt_ : ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(termState_))->termBlockOrd_;
}

- (void)decodeMetaData {
  jint limit = [self getTermBlockOrd];
  jboolean absolute = metaDataUpto_ == 0;
  JreAssert((limit > 0), (@"org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame.java:325 condition failed: assert limit > 0;"));
  while (metaDataUpto_ < limit) {
    ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(termState_))->docFreq_ = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(statsReader_)) readVInt];
    if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(((OrgApacheLuceneCodecsBlocktreeFieldReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *) nil_chk(ite_))->fr_))->fieldInfo_)) getIndexOptions] != JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS)) {
      termState_->totalTermFreq_ = termState_->docFreq_ + [statsReader_ readVLong];
    }
    for (jint i = 0; i < ite_->fr_->longsSize_; i++) {
      *IOSLongArray_GetRef(nil_chk(longs_), i) = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(bytesReader_)) readVLong];
    }
    [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader *) nil_chk(ite_->fr_->parent_))->postingsReader_)) decodeTermWithLongArray:longs_ withOrgApacheLuceneStoreDataInput:bytesReader_ withOrgApacheLuceneIndexFieldInfo:ite_->fr_->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:termState_ withBoolean:absolute];
    metaDataUpto_++;
    absolute = false;
  }
  ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(termState_))->termBlockOrd_ = metaDataUpto_;
}

- (void)dealloc {
  RELEASE_(suffixBytes_);
  RELEASE_(suffixesReader_);
  RELEASE_(statBytes_);
  RELEASE_(statsReader_);
  RELEASE_(floorData_);
  RELEASE_(floorDataReader_);
  RELEASE_(transition_);
  RELEASE_(arc_);
  RELEASE_(termState_);
  RELEASE_(longs_);
  RELEASE_(bytes_);
  RELEASE_(bytesReader_);
  RELEASE_(outputPrefix_);
  RELEASE_(ite_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsBlocktreeIntersectTermsEnum:withInt:", "IntersectTermsEnumFrame", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "loadNextFloorBlock", NULL, "V", 0x0, "Ljava.io.IOException;", NULL },
    { "setStateWithInt:", "setState", "V", 0x1, NULL, NULL },
    { "load__WithOrgApacheLuceneUtilBytesRef:", "load", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "next", NULL, "Z", 0x1, NULL, NULL },
    { "nextLeaf", NULL, "V", 0x1, NULL, NULL },
    { "nextNonLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "getTermBlockOrd", NULL, "I", 0x1, NULL, NULL },
    { "decodeMetaData", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ord_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "fp_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "fpOrig_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "fpEnd_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "lastSubFP_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "state_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastState_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "metaDataUpto_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "suffixBytes_", NULL, 0x0, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "suffixesReader_", NULL, 0x10, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "statBytes_", NULL, 0x0, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "statsReader_", NULL, 0x10, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "floorData_", NULL, 0x0, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "floorDataReader_", NULL, 0x10, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "prefix_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "entCount_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "nextEnt_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "isLastInFloor_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isLeafBlock_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "numFollowFloorBlocks_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "nextFloorLabel_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "transition_", NULL, 0x10, "Lorg.apache.lucene.util.automaton.Transition;", NULL, NULL, .constantValue.asLong = 0 },
    { "transitionIndex_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "transitionCount_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "versionAutoPrefix_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "arc_", NULL, 0x0, "Lorg.apache.lucene.util.fst.FST$Arc;", NULL, "Lorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/util/BytesRef;>;", .constantValue.asLong = 0 },
    { "termState_", NULL, 0x10, "Lorg.apache.lucene.codecs.BlockTermState;", NULL, NULL, .constantValue.asLong = 0 },
    { "longs_", NULL, 0x10, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "bytes_", NULL, 0x0, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "bytesReader_", NULL, 0x10, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "outputPrefix_", NULL, 0x0, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "startBytePos_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "suffix_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "floorSuffixLeadStart_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "floorSuffixLeadEnd_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "isAutoPrefixTerm_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "ite_", NULL, 0x12, "Lorg.apache.lucene.codecs.blocktree.IntersectTermsEnum;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame = { 2, "IntersectTermsEnumFrame", "org.apache.lucene.codecs.blocktree", NULL, 0x10, 9, methods, 37, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame;
}

@end

void OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame_initWithOrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_withInt_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *self, OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *ite, jint ord) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->suffixBytes_, [IOSByteArray newArrayWithLength:128]);
  JreStrongAssignAndConsume(&self->suffixesReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  JreStrongAssignAndConsume(&self->statBytes_, [IOSByteArray newArrayWithLength:64]);
  JreStrongAssignAndConsume(&self->statsReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  JreStrongAssignAndConsume(&self->floorData_, [IOSByteArray newArrayWithLength:32]);
  JreStrongAssignAndConsume(&self->floorDataReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  JreStrongAssignAndConsume(&self->transition_, new_OrgApacheLuceneUtilAutomatonTransition_init());
  JreStrongAssignAndConsume(&self->bytes_, [IOSByteArray newArrayWithLength:32]);
  JreStrongAssignAndConsume(&self->bytesReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  JreStrongAssign(&self->ite_, ite);
  self->ord_ = ord;
  JreStrongAssign(&self->termState_, [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeFieldReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *) nil_chk(ite))->fr_))->parent_))->postingsReader_)) newTermState]);
  ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(self->termState_))->totalTermFreq_ = -1;
  JreStrongAssignAndConsume(&self->longs_, [IOSLongArray newArrayWithLength:ite->fr_->longsSize_]);
  self->versionAutoPrefix_ = ite->fr_->parent_->anyAutoPrefixTerms_;
}

OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *new_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame_initWithOrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_withInt_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *ite, jint ord) {
  OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *self = [OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame alloc];
  OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame_initWithOrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_withInt_(self, ite, ord);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame)
