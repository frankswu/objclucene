//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.h"
#include "org/apache/lucene/codecs/blocktree/FieldReader.h"
#include "org/apache/lucene/codecs/blocktree/SegmentTermsEnum.h"
#include "org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "org/apache/lucene/util/fst/Util.h"

@interface OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum () {
 @public
  IOSObjectArray *stack_;
  OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *staticFrame_;
  jint targetBeforeCurrentLength_;
  OrgApacheLuceneStoreByteArrayDataInput *scratchReader_;
  jint validIndexPrefix_;
  jboolean eof_;
  OrgApacheLuceneUtilFstFST_BytesReader *fstReader_;
  IOSObjectArray *arcs_;
}

- (OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *)getFrameWithInt:(jint)ord;

- (OrgApacheLuceneUtilFstFST_Arc *)getArcWithInt:(jint)ord;

- (jboolean)clearEOF;

- (jboolean)setEOF;

- (void)printSeekStateWithJavaIoPrintStream:(JavaIoPrintStream *)outArg;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum, stack_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum, staticFrame_, OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum, scratchReader_, OrgApacheLuceneStoreByteArrayDataInput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum, fstReader_, OrgApacheLuceneUtilFstFST_BytesReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum, arcs_, IOSObjectArray *)

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_getFrameWithInt_(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum *self, jint ord);

__attribute__((unused)) static OrgApacheLuceneUtilFstFST_Arc *OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_getArcWithInt_(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum *self, jint ord);

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_clearEOF(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum *self);

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_setEOF(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum *self);

@implementation OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum

- (instancetype)initWithOrgApacheLuceneCodecsBlocktreeFieldReader:(OrgApacheLuceneCodecsBlocktreeFieldReader *)fr {
  OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktreeFieldReader_(self, fr);
  return self;
}

- (void)initIndexInput {
  if (self->in_ == nil) {
    JreStrongAssign(&self->in_, [((OrgApacheLuceneStoreIndexInput *) nil_chk(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeFieldReader *) nil_chk(fr_))->parent_))->termsIn_)) clone]);
  }
}

- (OrgApacheLuceneCodecsBlocktreeStats *)computeBlockStats {
  OrgApacheLuceneCodecsBlocktreeStats *stats = [new_OrgApacheLuceneCodecsBlocktreeStats_initWithNSString_withNSString_(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeFieldReader *) nil_chk(fr_))->parent_))->segment_, ((OrgApacheLuceneIndexFieldInfo *) nil_chk(fr_->fieldInfo_))->name_) autorelease];
  if (fr_->index_ != nil) {
    stats->indexNumBytes_ = [fr_->index_ ramBytesUsed];
  }
  JreStrongAssign(&currentFrame_, staticFrame_);
  OrgApacheLuceneUtilFstFST_Arc *arc;
  if (fr_->index_ != nil) {
    arc = [fr_->index_ getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:IOSObjectArray_Get(nil_chk(arcs_), 0)];
    JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:135 condition failed: assert arc.isFinal();"));
  }
  else {
    arc = nil;
  }
  JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilBytesRef:fr_->rootCode_ withInt:0]);
  ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_))->fpOrig_ = currentFrame_->fp_;
  [currentFrame_ loadBlock];
  validIndexPrefix_ = 0;
  [stats startBlockWithOrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame:currentFrame_ withBoolean:!currentFrame_->isLastInFloor_];
  while (YES) {
    while (currentFrame_->nextEnt_ == currentFrame_->entCount_) {
      [stats endBlockWithOrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame:currentFrame_];
      if (!currentFrame_->isLastInFloor_) {
        [currentFrame_ loadNextFloorBlock];
        [stats startBlockWithOrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame:currentFrame_ withBoolean:YES];
        break;
      }
      else {
        if (currentFrame_->ord_ == 0) {
          goto break_allTerms;
        }
        jlong lastFP = currentFrame_->fpOrig_;
        JreStrongAssign(&currentFrame_, IOSObjectArray_Get(nil_chk(stack_), currentFrame_->ord_ - 1));
        JreAssert((lastFP == ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_))->lastSubFP_), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:166 condition failed: assert lastFP == currentFrame.lastSubFP;"));
      }
    }
    while (YES) {
      if ([((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_)) next]) {
        JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:nil withLong:currentFrame_->lastSubFP_ withInt:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) length]]);
        ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_))->fpOrig_ = currentFrame_->fp_;
        [currentFrame_ loadBlock];
        [stats startBlockWithOrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame:currentFrame_ withBoolean:!currentFrame_->isLastInFloor_];
      }
      else {
        [stats termWithOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) get]];
        break;
      }
    }
  }
  break_allTerms: ;
  [stats finish];
  JreStrongAssign(&currentFrame_, staticFrame_);
  if (fr_->index_ != nil) {
    arc = [fr_->index_ getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:IOSObjectArray_Get(nil_chk(arcs_), 0)];
    JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:197 condition failed: assert arc.isFinal();"));
  }
  else {
    arc = nil;
  }
  JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilBytesRef:fr_->rootCode_ withInt:0]);
  [((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_)) rewind];
  [currentFrame_ loadBlock];
  validIndexPrefix_ = 0;
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) clear];
  return stats;
}

- (OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *)getFrameWithInt:(jint)ord {
  return OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_getFrameWithInt_(self, ord);
}

- (OrgApacheLuceneUtilFstFST_Arc *)getArcWithInt:(jint)ord {
  return OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_getArcWithInt_(self, ord);
}

- (OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *)pushFrameWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
                                                                    withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)frameData
                                                                                            withInt:(jint)length {
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(scratchReader_)) resetWithByteArray:((OrgApacheLuceneUtilBytesRef *) nil_chk(frameData))->bytes_ withInt:frameData->offset_ withInt:frameData->length_];
  jlong code = [scratchReader_ readVLong];
  jlong fpSeek = JreURShift64(code, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAGS_NUM_BITS);
  OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *f = OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_getFrameWithInt_(self, 1 + ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_))->ord_);
  ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(f))->hasTerms_ = ((code & OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAG_HAS_TERMS) != 0);
  f->hasTermsOrig_ = f->hasTerms_;
  f->isFloor_ = ((code & OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAG_IS_FLOOR) != 0);
  if (f->isFloor_) {
    [f setFloorDataWithOrgApacheLuceneStoreByteArrayDataInput:scratchReader_ withOrgApacheLuceneUtilBytesRef:frameData];
  }
  [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withLong:fpSeek withInt:length];
  return f;
}

- (OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *)pushFrameWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
                                                                                           withLong:(jlong)fp
                                                                                            withInt:(jint)length {
  OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *f = OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_getFrameWithInt_(self, 1 + ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_))->ord_);
  JreStrongAssign(&((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(f))->arc_, arc);
  if (f->fpOrig_ == fp && f->nextEnt_ != -1) {
    if (f->ord_ > targetBeforeCurrentLength_) {
      [f rewind];
    }
    else {
    }
    JreAssert((length == f->prefix_), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:268 condition failed: assert length == f.prefix;"));
  }
  else {
    f->nextEnt_ = -1;
    f->prefix_ = length;
    ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(f->state_))->termBlockOrd_ = 0;
    f->fpOrig_ = f->fp_ = fp;
    f->lastSubFP_ = -1;
  }
  return f;
}

- (jboolean)clearEOF {
  return OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_clearEOF(self);
}

- (jboolean)setEOF {
  return OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_setEOF(self);
}

- (jboolean)seekExactWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target {
  if (((OrgApacheLuceneCodecsBlocktreeFieldReader *) nil_chk(fr_))->index_ == nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"terms index was not loaded") autorelease];
  }
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) growWithInt:1 + ((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->length_];
  JreAssert((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_clearEOF(self)), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:328 condition failed: assert clearEOF();"));
  OrgApacheLuceneUtilFstFST_Arc *arc;
  jint targetUpto;
  OrgApacheLuceneUtilBytesRef *output;
  targetBeforeCurrentLength_ = ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_))->ord_;
  if (currentFrame_ != staticFrame_) {
    arc = IOSObjectArray_Get(nil_chk(arcs_), 0);
    JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:355 condition failed: assert arc.isFinal();"));
    output = arc->output_;
    targetUpto = 0;
    OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *lastFrame = IOSObjectArray_Get(nil_chk(stack_), 0);
    JreAssert((validIndexPrefix_ <= [term_ length]), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:360 condition failed: assert validIndexPrefix <= term.length();"));
    jint targetLimit = JavaLangMath_minWithInt_withInt_(target->length_, validIndexPrefix_);
    jint cmp = 0;
    while (targetUpto < targetLimit) {
      cmp = ([term_ byteAtWithInt:targetUpto] & (jint) 0xFF) - (IOSByteArray_Get(nil_chk(target->bytes_), target->offset_ + targetUpto) & (jint) 0xFF);
      if (cmp != 0) {
        break;
      }
      arc = IOSObjectArray_Get(arcs_, 1 + targetUpto);
      JreAssert((((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->label_ == (IOSByteArray_Get(target->bytes_, target->offset_ + targetUpto) & (jint) 0xFF)), (JreStrcat("$C$C", @"arc.label=", (jchar) arc->label_, @" targetLabel=", (jchar) (IOSByteArray_Get(target->bytes_, target->offset_ + targetUpto) & (jint) 0xFF))));
      if (arc->output_ != JreLoadStatic(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader, NO_OUTPUT_)) {
        output = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader, FST_OUTPUTS_))) addWithId:output withId:arc->output_];
      }
      if ([arc isFinal]) {
        lastFrame = IOSObjectArray_Get(stack_, 1 + ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(lastFrame))->ord_);
      }
      targetUpto++;
    }
    if (cmp == 0) {
      jint targetUptoMid = targetUpto;
      jint targetLimit2 = JavaLangMath_minWithInt_withInt_(target->length_, [term_ length]);
      while (targetUpto < targetLimit2) {
        cmp = ([term_ byteAtWithInt:targetUpto] & (jint) 0xFF) - (IOSByteArray_Get(nil_chk(target->bytes_), target->offset_ + targetUpto) & (jint) 0xFF);
        if (cmp != 0) {
          break;
        }
        targetUpto++;
      }
      if (cmp == 0) {
        cmp = [term_ length] - target->length_;
      }
      targetUpto = targetUptoMid;
    }
    if (cmp < 0) {
      JreStrongAssign(&currentFrame_, lastFrame);
    }
    else if (cmp > 0) {
      targetBeforeCurrentLength_ = ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(lastFrame))->ord_;
      JreStrongAssign(&currentFrame_, lastFrame);
      [currentFrame_ rewind];
    }
    else {
      JreAssert(([term_ length] == target->length_), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:436 condition failed: assert term.length() == target.length;"));
      if (termExists_) {
        return YES;
      }
      else {
      }
    }
  }
  else {
    targetBeforeCurrentLength_ = -1;
    arc = [((OrgApacheLuceneUtilFstFST *) nil_chk(fr_->index_)) getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:IOSObjectArray_Get(nil_chk(arcs_), 0)];
    JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:458 condition failed: assert arc.isFinal();"));
    JreAssert((arc->output_ != nil), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:459 condition failed: assert arc.output != null;"));
    output = arc->output_;
    JreStrongAssign(&currentFrame_, staticFrame_);
    targetUpto = 0;
    JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneUtilFstOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader, FST_OUTPUTS_))) addWithId:output withId:arc->nextFinalOutput_] withInt:0]);
  }
  while (targetUpto < target->length_) {
    jint targetLabel = IOSByteArray_Get(nil_chk(target->bytes_), target->offset_ + targetUpto) & (jint) 0xFF;
    OrgApacheLuceneUtilFstFST_Arc *nextArc = [((OrgApacheLuceneUtilFstFST *) nil_chk(fr_->index_)) findTargetArcWithInt:targetLabel withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_getArcWithInt_(self, 1 + targetUpto) withOrgApacheLuceneUtilFstFST_BytesReader:fstReader_];
    if (nextArc == nil) {
      validIndexPrefix_ = ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_))->prefix_;
      [currentFrame_ scanToFloorFrameWithOrgApacheLuceneUtilBytesRef:target];
      if (!currentFrame_->hasTerms_) {
        termExists_ = NO;
        [term_ setByteAtWithInt:targetUpto withByte:(jbyte) targetLabel];
        [term_ setLengthWithInt:1 + targetUpto];
        return NO;
      }
      [currentFrame_ loadBlock];
      OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *result = [currentFrame_ scanToTermWithOrgApacheLuceneUtilBytesRef:target withBoolean:YES];
      if (result == JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND)) {
        return YES;
      }
      else {
        return NO;
      }
    }
    else {
      arc = nextArc;
      [term_ setByteAtWithInt:targetUpto withByte:(jbyte) targetLabel];
      JreAssert((arc->output_ != nil), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:526 condition failed: assert arc.output != null;"));
      if (arc->output_ != JreLoadStatic(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader, NO_OUTPUT_)) {
        output = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader, FST_OUTPUTS_))) addWithId:output withId:arc->output_];
      }
      targetUpto++;
      if ([arc isFinal]) {
        JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneUtilFstOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader, FST_OUTPUTS_))) addWithId:output withId:arc->nextFinalOutput_] withInt:targetUpto]);
      }
    }
  }
  validIndexPrefix_ = ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_))->prefix_;
  [currentFrame_ scanToFloorFrameWithOrgApacheLuceneUtilBytesRef:target];
  if (!currentFrame_->hasTerms_) {
    termExists_ = NO;
    [term_ setLengthWithInt:targetUpto];
    return NO;
  }
  [currentFrame_ loadBlock];
  OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *result = [currentFrame_ scanToTermWithOrgApacheLuceneUtilBytesRef:target withBoolean:YES];
  if (result == JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND)) {
    return YES;
  }
  else {
    return NO;
  }
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *)seekCeilWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target {
  if (((OrgApacheLuceneCodecsBlocktreeFieldReader *) nil_chk(fr_))->index_ == nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"terms index was not loaded") autorelease];
  }
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) growWithInt:1 + ((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->length_];
  JreAssert((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_clearEOF(self)), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:585 condition failed: assert clearEOF();"));
  OrgApacheLuceneUtilFstFST_Arc *arc;
  jint targetUpto;
  OrgApacheLuceneUtilBytesRef *output;
  targetBeforeCurrentLength_ = ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_))->ord_;
  if (currentFrame_ != staticFrame_) {
    arc = IOSObjectArray_Get(nil_chk(arcs_), 0);
    JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:612 condition failed: assert arc.isFinal();"));
    output = arc->output_;
    targetUpto = 0;
    OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *lastFrame = IOSObjectArray_Get(nil_chk(stack_), 0);
    JreAssert((validIndexPrefix_ <= [term_ length]), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:617 condition failed: assert validIndexPrefix <= term.length();"));
    jint targetLimit = JavaLangMath_minWithInt_withInt_(target->length_, validIndexPrefix_);
    jint cmp = 0;
    while (targetUpto < targetLimit) {
      cmp = ([term_ byteAtWithInt:targetUpto] & (jint) 0xFF) - (IOSByteArray_Get(nil_chk(target->bytes_), target->offset_ + targetUpto) & (jint) 0xFF);
      if (cmp != 0) {
        break;
      }
      arc = IOSObjectArray_Get(arcs_, 1 + targetUpto);
      JreAssert((((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->label_ == (IOSByteArray_Get(target->bytes_, target->offset_ + targetUpto) & (jint) 0xFF)), (JreStrcat("$C$C", @"arc.label=", (jchar) arc->label_, @" targetLabel=", (jchar) (IOSByteArray_Get(target->bytes_, target->offset_ + targetUpto) & (jint) 0xFF))));
      if (arc->output_ != JreLoadStatic(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader, NO_OUTPUT_)) {
        output = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader, FST_OUTPUTS_))) addWithId:output withId:arc->output_];
      }
      if ([arc isFinal]) {
        lastFrame = IOSObjectArray_Get(stack_, 1 + ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(lastFrame))->ord_);
      }
      targetUpto++;
    }
    if (cmp == 0) {
      jint targetUptoMid = targetUpto;
      jint targetLimit2 = JavaLangMath_minWithInt_withInt_(target->length_, [term_ length]);
      while (targetUpto < targetLimit2) {
        cmp = ([term_ byteAtWithInt:targetUpto] & (jint) 0xFF) - (IOSByteArray_Get(nil_chk(target->bytes_), target->offset_ + targetUpto) & (jint) 0xFF);
        if (cmp != 0) {
          break;
        }
        targetUpto++;
      }
      if (cmp == 0) {
        cmp = [term_ length] - target->length_;
      }
      targetUpto = targetUptoMid;
    }
    if (cmp < 0) {
      JreStrongAssign(&currentFrame_, lastFrame);
    }
    else if (cmp > 0) {
      targetBeforeCurrentLength_ = 0;
      JreStrongAssign(&currentFrame_, lastFrame);
      [((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_)) rewind];
    }
    else {
      JreAssert(([term_ length] == target->length_), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:696 condition failed: assert term.length() == target.length;"));
      if (termExists_) {
        return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND);
      }
      else {
      }
    }
  }
  else {
    targetBeforeCurrentLength_ = -1;
    arc = [((OrgApacheLuceneUtilFstFST *) nil_chk(fr_->index_)) getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:IOSObjectArray_Get(nil_chk(arcs_), 0)];
    JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:715 condition failed: assert arc.isFinal();"));
    JreAssert((arc->output_ != nil), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:716 condition failed: assert arc.output != null;"));
    output = arc->output_;
    JreStrongAssign(&currentFrame_, staticFrame_);
    targetUpto = 0;
    JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneUtilFstOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader, FST_OUTPUTS_))) addWithId:output withId:arc->nextFinalOutput_] withInt:0]);
  }
  while (targetUpto < target->length_) {
    jint targetLabel = IOSByteArray_Get(nil_chk(target->bytes_), target->offset_ + targetUpto) & (jint) 0xFF;
    OrgApacheLuceneUtilFstFST_Arc *nextArc = [((OrgApacheLuceneUtilFstFST *) nil_chk(fr_->index_)) findTargetArcWithInt:targetLabel withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_getArcWithInt_(self, 1 + targetUpto) withOrgApacheLuceneUtilFstFST_BytesReader:fstReader_];
    if (nextArc == nil) {
      validIndexPrefix_ = ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_))->prefix_;
      [currentFrame_ scanToFloorFrameWithOrgApacheLuceneUtilBytesRef:target];
      [currentFrame_ loadBlock];
      OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *result = [currentFrame_ scanToTermWithOrgApacheLuceneUtilBytesRef:target withBoolean:NO];
      if (result == JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END)) {
        [term_ copyBytesWithOrgApacheLuceneUtilBytesRef:target];
        termExists_ = NO;
        if ([self next] != nil) {
          return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, NOT_FOUND);
        }
        else {
          return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END);
        }
      }
      else {
        return result;
      }
    }
    else {
      [term_ setByteAtWithInt:targetUpto withByte:(jbyte) targetLabel];
      arc = nextArc;
      JreAssert((arc->output_ != nil), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:784 condition failed: assert arc.output != null;"));
      if (arc->output_ != JreLoadStatic(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader, NO_OUTPUT_)) {
        output = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader, FST_OUTPUTS_))) addWithId:output withId:arc->output_];
      }
      targetUpto++;
      if ([arc isFinal]) {
        JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneUtilFstOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader, FST_OUTPUTS_))) addWithId:output withId:arc->nextFinalOutput_] withInt:targetUpto]);
      }
    }
  }
  validIndexPrefix_ = ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_))->prefix_;
  [currentFrame_ scanToFloorFrameWithOrgApacheLuceneUtilBytesRef:target];
  [currentFrame_ loadBlock];
  OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *result = [currentFrame_ scanToTermWithOrgApacheLuceneUtilBytesRef:target withBoolean:NO];
  if (result == JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END)) {
    [term_ copyBytesWithOrgApacheLuceneUtilBytesRef:target];
    termExists_ = NO;
    if ([self next] != nil) {
      return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, NOT_FOUND);
    }
    else {
      return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END);
    }
  }
  else {
    return result;
  }
}

- (void)printSeekStateWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  if (currentFrame_ == staticFrame_) {
    [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:@"  no prior seek"];
  }
  else {
    [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:@"  prior seek state:"];
    jint ord = 0;
    jboolean isSeekFrame = YES;
    while (YES) {
      OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *f = OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_getFrameWithInt_(self, ord);
      JreAssert((f != nil), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:840 condition failed: assert f != null;"));
      OrgApacheLuceneUtilBytesRef *prefix = [new_OrgApacheLuceneUtilBytesRef_initWithByteArray_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) get]))->bytes_, 0, ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(f))->prefix_) autorelease];
      if (f->nextEnt_ == -1) {
        [outArg printlnWithNSString:JreStrcat("$$$I$J$$I$@$$Z$Z$J$Z$I$I", @"    frame ", (isSeekFrame ? @"(seek)" : @"(next)"), @" ord=", ord, @" fp=", f->fp_, (f->isFloor_ ? (JreStrcat("$JC", @" (fpOrig=", f->fpOrig_, ')')) : @""), @" prefixLen=", f->prefix_, @" prefix=", prefix, (f->nextEnt_ == -1 ? @"" : (JreStrcat("$IC", @" (of ", f->entCount_, ')'))), @" hasTerms=", f->hasTerms_, @" isFloor=", f->isFloor_, @" code=", ((JreLShift64(f->fp_, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAGS_NUM_BITS)) + (f->hasTerms_ ? OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAG_HAS_TERMS : 0) + (f->isFloor_ ? OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAG_IS_FLOOR : 0)), @" isLastInFloor=", f->isLastInFloor_, @" mdUpto=", f->metaDataUpto_, @" tbOrd=", [f getTermBlockOrd])];
      }
      else {
        [outArg printlnWithNSString:JreStrcat("$$$I$J$$I$@$I$$Z$Z$J$J$Z$I$I", @"    frame ", (isSeekFrame ? @"(seek, loaded)" : @"(next, loaded)"), @" ord=", ord, @" fp=", f->fp_, (f->isFloor_ ? (JreStrcat("$JC", @" (fpOrig=", f->fpOrig_, ')')) : @""), @" prefixLen=", f->prefix_, @" prefix=", prefix, @" nextEnt=", f->nextEnt_, (f->nextEnt_ == -1 ? @"" : (JreStrcat("$IC", @" (of ", f->entCount_, ')'))), @" hasTerms=", f->hasTerms_, @" isFloor=", f->isFloor_, @" code=", ((JreLShift64(f->fp_, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAGS_NUM_BITS)) + (f->hasTerms_ ? OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAG_HAS_TERMS : 0) + (f->isFloor_ ? OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAG_IS_FLOOR : 0)), @" lastSubFP=", f->lastSubFP_, @" isLastInFloor=", f->isLastInFloor_, @" mdUpto=", f->metaDataUpto_, @" tbOrd=", [f getTermBlockOrd])];
      }
      if (((OrgApacheLuceneCodecsBlocktreeFieldReader *) nil_chk(fr_))->index_ != nil) {
        JreAssert((!isSeekFrame || f->arc_ != nil), (JreStrcat("$Z$@", @"isSeekFrame=", isSeekFrame, @" f.arc=", f->arc_)));
        if (f->prefix_ > 0 && isSeekFrame && ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(f->arc_))->label_ != ([term_ byteAtWithInt:f->prefix_ - 1] & (jint) 0xFF)) {
          [outArg printlnWithNSString:JreStrcat("$C$C", @"      broken seek state: arc.label=", (jchar) f->arc_->label_, @" vs term byte=", (jchar) ([term_ byteAtWithInt:f->prefix_ - 1] & (jint) 0xFF))];
          @throw [new_JavaLangRuntimeException_initWithNSString_(@"seek state is broken") autorelease];
        }
        OrgApacheLuceneUtilBytesRef *output = OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilBytesRef_(fr_->index_, prefix);
        if (output == nil) {
          [outArg printlnWithNSString:@"      broken seek state: prefix is not final in index"];
          @throw [new_JavaLangRuntimeException_initWithNSString_(@"seek state is broken") autorelease];
        }
        else if (isSeekFrame && !f->isFloor_) {
          OrgApacheLuceneStoreByteArrayDataInput *reader = [new_OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_withInt_withInt_(output->bytes_, output->offset_, output->length_) autorelease];
          jlong codeOrig = [reader readVLong];
          jlong code = (JreLShift64(f->fp_, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAGS_NUM_BITS)) | (f->hasTerms_ ? OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAG_HAS_TERMS : 0) | (f->isFloor_ ? OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAG_IS_FLOOR : 0);
          if (codeOrig != code) {
            [outArg printlnWithNSString:JreStrcat("$J$J", @"      broken seek state: output code=", codeOrig, @" doesn't match frame code=", code)];
            @throw [new_JavaLangRuntimeException_initWithNSString_(@"seek state is broken") autorelease];
          }
        }
      }
      if (f == currentFrame_) {
        break;
      }
      if (f->prefix_ == validIndexPrefix_) {
        isSeekFrame = NO;
      }
      ord++;
    }
  }
}

- (OrgApacheLuceneUtilBytesRef *)next {
  if (in_ == nil) {
    OrgApacheLuceneUtilFstFST_Arc *arc;
    if (((OrgApacheLuceneCodecsBlocktreeFieldReader *) nil_chk(fr_))->index_ != nil) {
      arc = [fr_->index_ getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:IOSObjectArray_Get(nil_chk(arcs_), 0)];
      JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:889 condition failed: assert arc.isFinal();"));
    }
    else {
      arc = nil;
    }
    JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilBytesRef:fr_->rootCode_ withInt:0]);
    [((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_)) loadBlock];
  }
  targetBeforeCurrentLength_ = ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_))->ord_;
  JreAssert((!eof_), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:899 condition failed: assert !eof;"));
  if (currentFrame_ == staticFrame_) {
    jboolean result = [self seekExactWithOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) get]];
    JreAssert((result), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:914 condition failed: assert result;"));
  }
  while (currentFrame_->nextEnt_ == currentFrame_->entCount_) {
    if (!currentFrame_->isLastInFloor_) {
      [currentFrame_ loadNextFloorBlock];
      break;
    }
    else {
      if (currentFrame_->ord_ == 0) {
        JreAssert((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_setEOF(self)), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:927 condition failed: assert setEOF();"));
        [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) clear];
        validIndexPrefix_ = 0;
        [currentFrame_ rewind];
        termExists_ = NO;
        return nil;
      }
      jlong lastFP = currentFrame_->fpOrig_;
      JreStrongAssign(&currentFrame_, IOSObjectArray_Get(nil_chk(stack_), currentFrame_->ord_ - 1));
      if (((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_))->nextEnt_ == -1 || currentFrame_->lastSubFP_ != lastFP) {
        [currentFrame_ scanToFloorFrameWithOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) get]];
        [currentFrame_ loadBlock];
        [currentFrame_ scanToSubBlockWithLong:lastFP];
      }
      validIndexPrefix_ = JavaLangMath_minWithInt_withInt_(validIndexPrefix_, currentFrame_->prefix_);
    }
  }
  while (YES) {
    if ([((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_)) next]) {
      JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:nil withLong:currentFrame_->lastSubFP_ withInt:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) length]]);
      [((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_)) loadBlock];
    }
    else {
      return [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) get];
    }
  }
}

- (OrgApacheLuceneUtilBytesRef *)term {
  JreAssert((!eof_), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:972 condition failed: assert !eof;"));
  return [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) get];
}

- (jint)docFreq {
  JreAssert((!eof_), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:978 condition failed: assert !eof;"));
  [((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  return ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(currentFrame_->state_))->docFreq_;
}

- (jlong)totalTermFreq {
  JreAssert((!eof_), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:987 condition failed: assert !eof;"));
  [((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  return ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(currentFrame_->state_))->totalTermFreq_;
}

- (OrgApacheLuceneIndexPostingsEnum *)postingsWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)reuse
                                                                           withInt:(jint)flags {
  JreAssert((!eof_), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:994 condition failed: assert !eof;"));
  [((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  return [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeFieldReader *) nil_chk(fr_))->parent_))->postingsReader_)) postingsWithOrgApacheLuceneIndexFieldInfo:fr_->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:currentFrame_->state_ withOrgApacheLuceneIndexPostingsEnum:reuse withInt:flags];
}

- (void)seekExactWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target
               withOrgApacheLuceneIndexTermState:(OrgApacheLuceneIndexTermState *)otherState {
  JreAssert((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_clearEOF(self)), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:1010 condition failed: assert clearEOF();"));
  if ([((OrgApacheLuceneUtilBytesRef *) nil_chk(target)) compareToWithId:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) get]] != 0 || !termExists_) {
    JreAssert((otherState != nil && [otherState isKindOfClass:[OrgApacheLuceneCodecsBlockTermState class]]), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:1012 condition failed: assert otherState != null && otherState instanceof BlockTermState;"));
    JreStrongAssign(&currentFrame_, staticFrame_);
    [((OrgApacheLuceneCodecsBlockTermState *) nil_chk(((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_))->state_)) copyFromWithOrgApacheLuceneIndexTermState:otherState];
    [term_ copyBytesWithOrgApacheLuceneUtilBytesRef:target];
    currentFrame_->metaDataUpto_ = [currentFrame_ getTermBlockOrd];
    JreAssert((currentFrame_->metaDataUpto_ > 0), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:1017 condition failed: assert currentFrame.metaDataUpto > 0;"));
    validIndexPrefix_ = 0;
  }
  else {
  }
}

- (OrgApacheLuceneIndexTermState *)termState {
  JreAssert((!eof_), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:1028 condition failed: assert !eof;"));
  [((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  OrgApacheLuceneIndexTermState *ts = [((OrgApacheLuceneCodecsBlockTermState *) nil_chk(currentFrame_->state_)) clone];
  return ts;
}

- (void)seekExactWithLong:(jlong)ord {
  @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
}

- (jlong)ord {
  @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
}

- (void)dealloc {
  RELEASE_(in_);
  RELEASE_(stack_);
  RELEASE_(staticFrame_);
  RELEASE_(currentFrame_);
  RELEASE_(fr_);
  RELEASE_(scratchReader_);
  RELEASE_(term_);
  RELEASE_(fstReader_);
  RELEASE_(arcs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsBlocktreeFieldReader:", "SegmentTermsEnum", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initIndexInput", NULL, "V", 0x0, NULL, NULL },
    { "computeBlockStats", NULL, "Lorg.apache.lucene.codecs.blocktree.Stats;", 0x1, "Ljava.io.IOException;", NULL },
    { "getFrameWithInt:", "getFrame", "Lorg.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame;", 0x2, "Ljava.io.IOException;", NULL },
    { "getArcWithInt:", "getArc", "Lorg.apache.lucene.util.fst.FST$Arc;", 0x2, NULL, NULL },
    { "pushFrameWithOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilBytesRef:withInt:", "pushFrame", "Lorg.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame;", 0x0, "Ljava.io.IOException;", NULL },
    { "pushFrameWithOrgApacheLuceneUtilFstFST_Arc:withLong:withInt:", "pushFrame", "Lorg.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame;", 0x0, "Ljava.io.IOException;", NULL },
    { "clearEOF", NULL, "Z", 0x2, NULL, NULL },
    { "setEOF", NULL, "Z", 0x2, NULL, NULL },
    { "seekExactWithOrgApacheLuceneUtilBytesRef:", "seekExact", "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "seekCeilWithOrgApacheLuceneUtilBytesRef:", "seekCeil", "Lorg.apache.lucene.index.TermsEnum$SeekStatus;", 0x1, "Ljava.io.IOException;", NULL },
    { "printSeekStateWithJavaIoPrintStream:", "printSeekState", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "next", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, "Ljava.io.IOException;", NULL },
    { "term", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, NULL, NULL },
    { "docFreq", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "totalTermFreq", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "postingsWithOrgApacheLuceneIndexPostingsEnum:withInt:", "postings", "Lorg.apache.lucene.index.PostingsEnum;", 0x1, "Ljava.io.IOException;", NULL },
    { "seekExactWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneIndexTermState:", "seekExact", "V", 0x1, NULL, NULL },
    { "termState", NULL, "Lorg.apache.lucene.index.TermState;", 0x1, "Ljava.io.IOException;", NULL },
    { "seekExactWithLong:", "seekExact", "V", 0x1, NULL, NULL },
    { "ord", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "in_", NULL, 0x0, "Lorg.apache.lucene.store.IndexInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "stack_", NULL, 0x2, "[Lorg.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame;", NULL, NULL, .constantValue.asLong = 0 },
    { "staticFrame_", NULL, 0x12, "Lorg.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame;", NULL, NULL, .constantValue.asLong = 0 },
    { "currentFrame_", NULL, 0x0, "Lorg.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame;", NULL, NULL, .constantValue.asLong = 0 },
    { "termExists_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "fr_", NULL, 0x10, "Lorg.apache.lucene.codecs.blocktree.FieldReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "targetBeforeCurrentLength_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "scratchReader_", NULL, 0x12, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "validIndexPrefix_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "eof_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "term_", NULL, 0x10, "Lorg.apache.lucene.util.BytesRefBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "fstReader_", NULL, 0x12, "Lorg.apache.lucene.util.fst.FST$BytesReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "arcs_", NULL, 0x2, "[Lorg.apache.lucene.util.fst.FST$Arc;", NULL, "[Lorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/util/BytesRef;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum = { 2, "SegmentTermsEnum", "org.apache.lucene.codecs.blocktree", NULL, 0x10, 21, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum;
}

@end

void OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktreeFieldReader_(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum *self, OrgApacheLuceneCodecsBlocktreeFieldReader *fr) {
  OrgApacheLuceneIndexTermsEnum_init(self);
  JreStrongAssignAndConsume(&self->scratchReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  JreStrongAssignAndConsume(&self->term_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  JreStrongAssignAndConsume(&self->arcs_, [IOSObjectArray newArrayWithLength:1 type:OrgApacheLuceneUtilFstFST_Arc_class_()]);
  JreStrongAssign(&self->fr_, fr);
  JreStrongAssignAndConsume(&self->stack_, [IOSObjectArray newArrayWithLength:0 type:OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame_class_()]);
  JreStrongAssignAndConsume(&self->staticFrame_, new_OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame_initWithOrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_withInt_(self, -1));
  if (((OrgApacheLuceneCodecsBlocktreeFieldReader *) nil_chk(fr))->index_ == nil) {
    JreStrongAssign(&self->fstReader_, nil);
  }
  else {
    JreStrongAssign(&self->fstReader_, [fr->index_ getBytesReader]);
  }
  for (jint arcIdx = 0; arcIdx < self->arcs_->size_; arcIdx++) {
    IOSObjectArray_SetAndConsume(self->arcs_, arcIdx, new_OrgApacheLuceneUtilFstFST_Arc_init());
  }
  JreStrongAssign(&self->currentFrame_, self->staticFrame_);
  OrgApacheLuceneUtilFstFST_Arc *arc;
  if (fr->index_ != nil) {
    arc = [fr->index_ getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:IOSObjectArray_Get(self->arcs_, 0)];
    JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:96 condition failed: assert arc.isFinal();"));
  }
  else {
    arc = nil;
  }
  self->validIndexPrefix_ = 0;
}

OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum *new_OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktreeFieldReader_(OrgApacheLuceneCodecsBlocktreeFieldReader *fr) {
  OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum *self = [OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum alloc];
  OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktreeFieldReader_(self, fr);
  return self;
}

OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_getFrameWithInt_(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum *self, jint ord) {
  if (ord >= ((IOSObjectArray *) nil_chk(self->stack_))->size_) {
    IOSObjectArray *next = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(1 + ord, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF_)) type:OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->stack_, 0, next, 0, self->stack_->size_);
    for (jint stackOrd = self->stack_->size_; stackOrd < next->size_; stackOrd++) {
      IOSObjectArray_SetAndConsume(next, stackOrd, new_OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame_initWithOrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_withInt_(self, stackOrd));
    }
    JreStrongAssign(&self->stack_, next);
  }
  JreAssert((((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(IOSObjectArray_Get(self->stack_, ord)))->ord_ == ord), (@"org/apache/lucene/codecs/blocktree/SegmentTermsEnum.java:219 condition failed: assert stack[ord].ord == ord;"));
  return IOSObjectArray_Get(self->stack_, ord);
}

OrgApacheLuceneUtilFstFST_Arc *OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_getArcWithInt_(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum *self, jint ord) {
  if (ord >= ((IOSObjectArray *) nil_chk(self->arcs_))->size_) {
    IOSObjectArray *next = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(1 + ord, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF_)) type:OrgApacheLuceneUtilFstFST_Arc_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->arcs_, 0, next, 0, self->arcs_->size_);
    for (jint arcOrd = self->arcs_->size_; arcOrd < next->size_; arcOrd++) {
      IOSObjectArray_SetAndConsume(next, arcOrd, new_OrgApacheLuceneUtilFstFST_Arc_init());
    }
    JreStrongAssign(&self->arcs_, next);
  }
  return IOSObjectArray_Get(self->arcs_, ord);
}

jboolean OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_clearEOF(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum *self) {
  self->eof_ = NO;
  return YES;
}

jboolean OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_setEOF(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum *self) {
  self->eof_ = YES;
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum)
