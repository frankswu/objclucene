//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/codecs/MultiLevelSkipListReader.h"
#include "org/apache/lucene/store/BufferedIndexInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/MathUtil.h"

@interface OrgApacheLuceneCodecsMultiLevelSkipListReader () {
 @public
  jint numberOfSkipLevels_;
  jint numberOfLevelsToBuffer_;
  jint docCount_;
  IOSObjectArray *skipStream_;
  IOSLongArray *skipPointer_;
  IOSIntArray *skipInterval_;
  IOSIntArray *numSkipped_;
  jint lastDoc_;
  IOSLongArray *childPointer_;
  jlong lastChildPointer_;
  jboolean inputIsBuffered_;
  jint skipMultiplier_;
}

- (jboolean)loadNextSkipWithInt:(jint)level;

- (void)loadSkipLevels;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsMultiLevelSkipListReader, skipStream_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsMultiLevelSkipListReader, skipPointer_, IOSLongArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsMultiLevelSkipListReader, skipInterval_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsMultiLevelSkipListReader, numSkipped_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsMultiLevelSkipListReader, childPointer_, IOSLongArray *)

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsMultiLevelSkipListReader_loadNextSkipWithInt_(OrgApacheLuceneCodecsMultiLevelSkipListReader *self, jint level);

__attribute__((unused)) static void OrgApacheLuceneCodecsMultiLevelSkipListReader_loadSkipLevels(OrgApacheLuceneCodecsMultiLevelSkipListReader *self);

@interface OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer : OrgApacheLuceneStoreIndexInput {
 @public
  IOSByteArray *data_;
  jlong pointer_;
  jint pos_;
}

- (instancetype)initWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)input
                                               withInt:(jint)length;

- (void)close;

- (jlong)getFilePointer;

- (jlong)length;

- (jbyte)readByte;

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len;

- (void)seekWithLong:(jlong)pos;

- (OrgApacheLuceneStoreIndexInput *)sliceWithNSString:(NSString *)sliceDescription
                                             withLong:(jlong)offset
                                             withLong:(jlong)length;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer, data_, IOSByteArray *)

__attribute__((unused)) static void OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer_initWithOrgApacheLuceneStoreIndexInput_withInt_(OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer *self, OrgApacheLuceneStoreIndexInput *input, jint length);

__attribute__((unused)) static OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer *new_OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer_initWithOrgApacheLuceneStoreIndexInput_withInt_(OrgApacheLuceneStoreIndexInput *input, jint length) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer)

@implementation OrgApacheLuceneCodecsMultiLevelSkipListReader

- (instancetype)initWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)skipStream
                                               withInt:(jint)maxSkipLevels
                                               withInt:(jint)skipInterval
                                               withInt:(jint)skipMultiplier {
  OrgApacheLuceneCodecsMultiLevelSkipListReader_initWithOrgApacheLuceneStoreIndexInput_withInt_withInt_withInt_(self, skipStream, maxSkipLevels, skipInterval, skipMultiplier);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)skipStream
                                               withInt:(jint)maxSkipLevels
                                               withInt:(jint)skipInterval {
  OrgApacheLuceneCodecsMultiLevelSkipListReader_initWithOrgApacheLuceneStoreIndexInput_withInt_withInt_(self, skipStream, maxSkipLevels, skipInterval);
  return self;
}

- (jint)getDoc {
  return lastDoc_;
}

- (jint)skipToWithInt:(jint)target {
  jint level = 0;
  while (level < numberOfSkipLevels_ - 1 && target > IOSIntArray_Get(nil_chk(skipDoc_), level + 1)) {
    level++;
  }
  while (level >= 0) {
    if (target > IOSIntArray_Get(nil_chk(skipDoc_), level)) {
      if (!OrgApacheLuceneCodecsMultiLevelSkipListReader_loadNextSkipWithInt_(self, level)) {
        continue;
      }
    }
    else {
      if (level > 0 && lastChildPointer_ > [((OrgApacheLuceneStoreIndexInput *) nil_chk(IOSObjectArray_Get(nil_chk(skipStream_), level - 1))) getFilePointer]) {
        [self seekChildWithInt:level - 1];
      }
      level--;
    }
  }
  return IOSIntArray_Get(nil_chk(numSkipped_), 0) - IOSIntArray_Get(nil_chk(skipInterval_), 0) - 1;
}

- (jboolean)loadNextSkipWithInt:(jint)level {
  return OrgApacheLuceneCodecsMultiLevelSkipListReader_loadNextSkipWithInt_(self, level);
}

- (void)seekChildWithInt:(jint)level {
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(IOSObjectArray_Get(nil_chk(skipStream_), level))) seekWithLong:lastChildPointer_];
  *IOSIntArray_GetRef(nil_chk(numSkipped_), level) = IOSIntArray_Get(numSkipped_, level + 1) - IOSIntArray_Get(nil_chk(skipInterval_), level + 1);
  *IOSIntArray_GetRef(nil_chk(skipDoc_), level) = lastDoc_;
  if (level > 0) {
    *IOSLongArray_GetRef(nil_chk(childPointer_), level) = [((OrgApacheLuceneStoreIndexInput *) nil_chk(IOSObjectArray_Get(skipStream_, level))) readVLong] + IOSLongArray_Get(nil_chk(skipPointer_), level - 1);
  }
}

- (void)close {
  for (jint i = 1; i < ((IOSObjectArray *) nil_chk(skipStream_))->size_; i++) {
    if (IOSObjectArray_Get(skipStream_, i) != nil) {
      [((OrgApacheLuceneStoreIndexInput *) nil_chk(IOSObjectArray_Get(skipStream_, i))) close];
    }
  }
}

- (void)init__WithLong:(jlong)skipPointer
               withInt:(jint)df {
  *IOSLongArray_GetRef(nil_chk(self->skipPointer_), 0) = skipPointer;
  self->docCount_ = df;
  JreAssert((skipPointer >= 0 && skipPointer <= [((OrgApacheLuceneStoreIndexInput *) nil_chk(IOSObjectArray_Get(nil_chk(skipStream_), 0))) length]), (JreStrcat("$J$J", @"invalid skip pointer: ", skipPointer, @", length=", [((OrgApacheLuceneStoreIndexInput *) nil_chk(IOSObjectArray_Get(nil_chk(skipStream_), 0))) length])));
  JavaUtilArrays_fillWithIntArray_withInt_(skipDoc_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(numSkipped_, 0);
  JavaUtilArrays_fillWithLongArray_withLong_(childPointer_, 0);
  for (jint i = 1; i < numberOfSkipLevels_; i++) {
    IOSObjectArray_Set(skipStream_, i, nil);
  }
  OrgApacheLuceneCodecsMultiLevelSkipListReader_loadSkipLevels(self);
}

- (void)loadSkipLevels {
  OrgApacheLuceneCodecsMultiLevelSkipListReader_loadSkipLevels(self);
}

- (jint)readSkipDataWithInt:(jint)level
withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)skipStream {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setLastSkipDataWithInt:(jint)level {
  lastDoc_ = IOSIntArray_Get(nil_chk(skipDoc_), level);
  lastChildPointer_ = IOSLongArray_Get(nil_chk(childPointer_), level);
}

- (void)dealloc {
  RELEASE_(skipStream_);
  RELEASE_(skipPointer_);
  RELEASE_(skipInterval_);
  RELEASE_(numSkipped_);
  RELEASE_(skipDoc_);
  RELEASE_(childPointer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneStoreIndexInput:withInt:withInt:withInt:", "MultiLevelSkipListReader", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheLuceneStoreIndexInput:withInt:withInt:", "MultiLevelSkipListReader", NULL, 0x4, NULL, NULL },
    { "getDoc", NULL, "I", 0x1, NULL, NULL },
    { "skipToWithInt:", "skipTo", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "loadNextSkipWithInt:", "loadNextSkip", "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "seekChildWithInt:", "seekChild", "V", 0x4, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "init__WithLong:withInt:", "init", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "loadSkipLevels", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readSkipDataWithInt:withOrgApacheLuceneStoreIndexInput:", "readSkipData", "I", 0x404, "Ljava.io.IOException;", NULL },
    { "setLastSkipDataWithInt:", "setLastSkipData", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "maxNumberOfSkipLevels_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "numberOfSkipLevels_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "numberOfLevelsToBuffer_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "docCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "skipStream_", NULL, 0x2, "[Lorg.apache.lucene.store.IndexInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "skipPointer_", NULL, 0x2, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "skipInterval_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "numSkipped_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "skipDoc_", NULL, 0x4, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastDoc_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "childPointer_", NULL, 0x2, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "lastChildPointer_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "inputIsBuffered_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "skipMultiplier_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer;"};
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsMultiLevelSkipListReader = { 2, "MultiLevelSkipListReader", "org.apache.lucene.codecs", NULL, 0x401, 11, methods, 14, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneCodecsMultiLevelSkipListReader;
}

@end

void OrgApacheLuceneCodecsMultiLevelSkipListReader_initWithOrgApacheLuceneStoreIndexInput_withInt_withInt_withInt_(OrgApacheLuceneCodecsMultiLevelSkipListReader *self, OrgApacheLuceneStoreIndexInput *skipStream, jint maxSkipLevels, jint skipInterval, jint skipMultiplier) {
  NSObject_init(self);
  self->numberOfLevelsToBuffer_ = 1;
  JreStrongAssignAndConsume(&self->skipStream_, [IOSObjectArray newArrayWithLength:maxSkipLevels type:OrgApacheLuceneStoreIndexInput_class_()]);
  JreStrongAssignAndConsume(&self->skipPointer_, [IOSLongArray newArrayWithLength:maxSkipLevels]);
  JreStrongAssignAndConsume(&self->childPointer_, [IOSLongArray newArrayWithLength:maxSkipLevels]);
  JreStrongAssignAndConsume(&self->numSkipped_, [IOSIntArray newArrayWithLength:maxSkipLevels]);
  self->maxNumberOfSkipLevels_ = maxSkipLevels;
  JreStrongAssignAndConsume(&self->skipInterval_, [IOSIntArray newArrayWithLength:maxSkipLevels]);
  self->skipMultiplier_ = skipMultiplier;
  IOSObjectArray_Set(self->skipStream_, 0, skipStream);
  self->inputIsBuffered_ = ([skipStream isKindOfClass:[OrgApacheLuceneStoreBufferedIndexInput class]]);
  *IOSIntArray_GetRef(self->skipInterval_, 0) = skipInterval;
  for (jint i = 1; i < maxSkipLevels; i++) {
    *IOSIntArray_GetRef(self->skipInterval_, i) = IOSIntArray_Get(self->skipInterval_, i - 1) * skipMultiplier;
  }
  JreStrongAssignAndConsume(&self->skipDoc_, [IOSIntArray newArrayWithLength:maxSkipLevels]);
}

void OrgApacheLuceneCodecsMultiLevelSkipListReader_initWithOrgApacheLuceneStoreIndexInput_withInt_withInt_(OrgApacheLuceneCodecsMultiLevelSkipListReader *self, OrgApacheLuceneStoreIndexInput *skipStream, jint maxSkipLevels, jint skipInterval) {
  OrgApacheLuceneCodecsMultiLevelSkipListReader_initWithOrgApacheLuceneStoreIndexInput_withInt_withInt_withInt_(self, skipStream, maxSkipLevels, skipInterval, skipInterval);
}

jboolean OrgApacheLuceneCodecsMultiLevelSkipListReader_loadNextSkipWithInt_(OrgApacheLuceneCodecsMultiLevelSkipListReader *self, jint level) {
  [self setLastSkipDataWithInt:level];
  *IOSIntArray_GetRef(nil_chk(self->numSkipped_), level) += IOSIntArray_Get(nil_chk(self->skipInterval_), level);
  if (IOSIntArray_Get(self->numSkipped_, level) > self->docCount_) {
    *IOSIntArray_GetRef(nil_chk(self->skipDoc_), level) = JavaLangInteger_MAX_VALUE;
    if (self->numberOfSkipLevels_ > level) self->numberOfSkipLevels_ = level;
    return NO;
  }
  *IOSIntArray_GetRef(nil_chk(self->skipDoc_), level) += [self readSkipDataWithInt:level withOrgApacheLuceneStoreIndexInput:IOSObjectArray_Get(nil_chk(self->skipStream_), level)];
  if (level != 0) {
    *IOSLongArray_GetRef(nil_chk(self->childPointer_), level) = [((OrgApacheLuceneStoreIndexInput *) nil_chk(IOSObjectArray_Get(self->skipStream_, level))) readVLong] + IOSLongArray_Get(nil_chk(self->skipPointer_), level - 1);
  }
  return YES;
}

void OrgApacheLuceneCodecsMultiLevelSkipListReader_loadSkipLevels(OrgApacheLuceneCodecsMultiLevelSkipListReader *self) {
  if (self->docCount_ <= IOSIntArray_Get(nil_chk(self->skipInterval_), 0)) {
    self->numberOfSkipLevels_ = 1;
  }
  else {
    self->numberOfSkipLevels_ = 1 + OrgApacheLuceneUtilMathUtil_logWithLong_withInt_(self->docCount_ / IOSIntArray_Get(self->skipInterval_, 0), self->skipMultiplier_);
  }
  if (self->numberOfSkipLevels_ > self->maxNumberOfSkipLevels_) {
    self->numberOfSkipLevels_ = self->maxNumberOfSkipLevels_;
  }
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(IOSObjectArray_Get(nil_chk(self->skipStream_), 0))) seekWithLong:IOSLongArray_Get(nil_chk(self->skipPointer_), 0)];
  jint toBuffer = self->numberOfLevelsToBuffer_;
  for (jint i = self->numberOfSkipLevels_ - 1; i > 0; i--) {
    jlong length = [((OrgApacheLuceneStoreIndexInput *) nil_chk(IOSObjectArray_Get(self->skipStream_, 0))) readVLong];
    *IOSLongArray_GetRef(self->skipPointer_, i) = [((OrgApacheLuceneStoreIndexInput *) nil_chk(IOSObjectArray_Get(self->skipStream_, 0))) getFilePointer];
    if (toBuffer > 0) {
      IOSObjectArray_SetAndConsume(self->skipStream_, i, new_OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer_initWithOrgApacheLuceneStoreIndexInput_withInt_(IOSObjectArray_Get(self->skipStream_, 0), (jint) length));
      toBuffer--;
    }
    else {
      IOSObjectArray_Set(self->skipStream_, i, [((OrgApacheLuceneStoreIndexInput *) nil_chk(IOSObjectArray_Get(self->skipStream_, 0))) clone]);
      if (self->inputIsBuffered_ && length < OrgApacheLuceneStoreBufferedIndexInput_BUFFER_SIZE) {
        [((OrgApacheLuceneStoreBufferedIndexInput *) nil_chk(((OrgApacheLuceneStoreBufferedIndexInput *) check_class_cast(IOSObjectArray_Get(self->skipStream_, i), [OrgApacheLuceneStoreBufferedIndexInput class])))) setBufferSizeWithInt:JavaLangMath_maxWithInt_withInt_(OrgApacheLuceneStoreBufferedIndexInput_MIN_BUFFER_SIZE, (jint) length)];
      }
      [((OrgApacheLuceneStoreIndexInput *) nil_chk(IOSObjectArray_Get(self->skipStream_, 0))) seekWithLong:[((OrgApacheLuceneStoreIndexInput *) nil_chk(IOSObjectArray_Get(self->skipStream_, 0))) getFilePointer] + length];
    }
  }
  *IOSLongArray_GetRef(self->skipPointer_, 0) = [((OrgApacheLuceneStoreIndexInput *) nil_chk(IOSObjectArray_Get(self->skipStream_, 0))) getFilePointer];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsMultiLevelSkipListReader)

@implementation OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer

- (instancetype)initWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)input
                                               withInt:(jint)length {
  OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer_initWithOrgApacheLuceneStoreIndexInput_withInt_(self, input, length);
  return self;
}

- (void)close {
  JreStrongAssign(&data_, nil);
}

- (jlong)getFilePointer {
  return pointer_ + pos_;
}

- (jlong)length {
  return ((IOSByteArray *) nil_chk(data_))->size_;
}

- (jbyte)readByte {
  return IOSByteArray_Get(nil_chk(data_), pos_++);
}

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data_, pos_, b, offset, len);
  pos_ += len;
}

- (void)seekWithLong:(jlong)pos {
  self->pos_ = (jint) (pos - pointer_);
}

- (OrgApacheLuceneStoreIndexInput *)sliceWithNSString:(NSString *)sliceDescription
                                             withLong:(jlong)offset
                                             withLong:(jlong)length {
  @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
}

- (void)dealloc {
  RELEASE_(data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneStoreIndexInput:withInt:", "SkipBuffer", NULL, 0x0, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "getFilePointer", NULL, "J", 0x1, NULL, NULL },
    { "length", NULL, "J", 0x1, NULL, NULL },
    { "readByte", NULL, "B", 0x1, NULL, NULL },
    { "readBytesWithByteArray:withInt:withInt:", "readBytes", "V", 0x1, NULL, NULL },
    { "seekWithLong:", "seek", "V", 0x1, NULL, NULL },
    { "sliceWithNSString:withLong:withLong:", "slice", "Lorg.apache.lucene.store.IndexInput;", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "data_", NULL, 0x2, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "pointer_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "pos_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer = { 2, "SkipBuffer", "org.apache.lucene.codecs", "MultiLevelSkipListReader", 0x1a, 8, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer;
}

@end

void OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer_initWithOrgApacheLuceneStoreIndexInput_withInt_(OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer *self, OrgApacheLuceneStoreIndexInput *input, jint length) {
  OrgApacheLuceneStoreIndexInput_initWithNSString_(self, JreStrcat("$@", @"SkipBuffer on ", input));
  JreStrongAssignAndConsume(&self->data_, [IOSByteArray newArrayWithLength:length]);
  self->pointer_ = [((OrgApacheLuceneStoreIndexInput *) nil_chk(input)) getFilePointer];
  [input readBytesWithByteArray:self->data_ withInt:0 withInt:length];
}

OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer *new_OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer_initWithOrgApacheLuceneStoreIndexInput_withInt_(OrgApacheLuceneStoreIndexInput *input, jint length) {
  OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer *self = [OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer alloc];
  OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer_initWithOrgApacheLuceneStoreIndexInput_withInt_(self, input, length);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsMultiLevelSkipListReader_SkipBuffer)
