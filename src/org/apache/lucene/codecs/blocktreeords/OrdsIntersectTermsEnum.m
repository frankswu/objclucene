//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/codecs/blocktreeords/FSTOrdsOutputs.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsFieldReader.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnumFrame.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/util/automaton/RunAutomaton.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "org/apache/lucene/util/fst/FST.h"

@interface OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum () {
 @public
  IOSObjectArray *stack_;
  IOSObjectArray *arcs_;
  OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *currentFrame_;
  OrgApacheLuceneUtilBytesRef *term_;
  OrgApacheLuceneUtilFstFST_BytesReader *fstReader_;
  OrgApacheLuceneUtilBytesRef *savedStartTerm_;
}

- (jboolean)setSavedStartTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)startTerm;

- (OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *)getFrameWithInt:(jint)ord;

- (OrgApacheLuceneUtilFstFST_Arc *)getArcWithInt:(jint)ord;

- (OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *)pushFrameWithInt:(jint)state;

- (jint)getState;

- (void)seekToStartTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target;

- (void)copyTerm OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum, stack_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum, arcs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum, currentFrame_, OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum, term_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum, fstReader_, OrgApacheLuceneUtilFstFST_BytesReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum, savedStartTerm_, OrgApacheLuceneUtilBytesRef *)

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_setSavedStartTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self, OrgApacheLuceneUtilBytesRef *startTerm);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_getFrameWithInt_(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self, jint ord);

__attribute__((unused)) static OrgApacheLuceneUtilFstFST_Arc *OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_getArcWithInt_(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self, jint ord);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_pushFrameWithInt_(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self, jint state);

__attribute__((unused)) static jint OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_getState(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_seekToStartTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self, OrgApacheLuceneUtilBytesRef *target);

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_copyTerm(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self);

@implementation OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum

- (instancetype)initWithOrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader:(OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *)fr
                        withOrgApacheLuceneUtilAutomatonCompiledAutomaton:(OrgApacheLuceneUtilAutomatonCompiledAutomaton *)compiled
                                          withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)startTerm {
  OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_withOrgApacheLuceneUtilBytesRef_(self, fr, compiled, startTerm);
  return self;
}

- (jboolean)setSavedStartTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)startTerm {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_setSavedStartTermWithOrgApacheLuceneUtilBytesRef_(self, startTerm);
}

- (OrgApacheLuceneIndexTermState *)termState {
  [((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  return [((OrgApacheLuceneCodecsBlockTermState *) nil_chk(currentFrame_->termState_)) clone];
}

- (OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *)getFrameWithInt:(jint)ord {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_getFrameWithInt_(self, ord);
}

- (OrgApacheLuceneUtilFstFST_Arc *)getArcWithInt:(jint)ord {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_getArcWithInt_(self, ord);
}

- (OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *)pushFrameWithInt:(jint)state {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_pushFrameWithInt_(self, state);
}

- (OrgApacheLuceneUtilBytesRef *)term {
  return term_;
}

- (jint)docFreq {
  [((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  return ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(currentFrame_->termState_))->docFreq_;
}

- (jlong)totalTermFreq {
  [((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  return ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(currentFrame_->termState_))->totalTermFreq_;
}

- (OrgApacheLuceneIndexPostingsEnum *)postingsWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)reuse
                                                                           withInt:(jint)flags {
  if (OrgApacheLuceneIndexPostingsEnum_featureRequestedWithInt_withShort_(flags, OrgApacheLuceneIndexDocsAndPositionsEnum_OLD_NULL_SEMANTICS)) {
    if ([((OrgApacheLuceneIndexIndexOptionsEnum *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(fr_))->fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS_AND_POSITIONS)] < 0) {
      return nil;
    }
  }
  [((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  return [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(fr_))->parent_))->postingsReader_)) postingsWithOrgApacheLuceneIndexFieldInfo:fr_->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:currentFrame_->termState_ withOrgApacheLuceneIndexPostingsEnum:reuse withInt:flags];
}

- (jint)getState {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_getState(self);
}

- (void)seekToStartTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target {
  OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_seekToStartTermWithOrgApacheLuceneUtilBytesRef_(self, target);
}

- (OrgApacheLuceneUtilBytesRef *)next {
  while (YES) {
    {
      while (((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *) nil_chk(currentFrame_))->nextEnt_ == currentFrame_->entCount_) {
        if (!currentFrame_->isLastInFloor_) {
          [currentFrame_ loadNextFloorBlock];
        }
        else {
          if (currentFrame_->ord_ == 0) {
            return nil;
          }
          jlong lastFP = currentFrame_->fpOrig_;
          JreStrongAssign(&currentFrame_, IOSObjectArray_Get(nil_chk(stack_), currentFrame_->ord_ - 1));
          JreAssert((((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *) nil_chk(currentFrame_))->lastSubFP_ == lastFP), (@"org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java:330 condition failed: assert currentFrame.lastSubFP == lastFP;"));
        }
      }
      jboolean isSubBlock = [((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *) nil_chk(currentFrame_)) next];
      if (currentFrame_->suffix_ != 0) {
        jint label = IOSByteArray_Get(nil_chk(currentFrame_->suffixBytes_), currentFrame_->startBytePos_) & (jint) 0xff;
        while (label > currentFrame_->curTransitionMax_) {
          if (currentFrame_->transitionIndex_ >= currentFrame_->transitionCount_ - 1) {
            currentFrame_->isLastInFloor_ = YES;
            currentFrame_->nextEnt_ = currentFrame_->entCount_;
            goto continue_nextTerm;
          }
          currentFrame_->transitionIndex_++;
          [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(((OrgApacheLuceneUtilAutomatonCompiledAutomaton *) nil_chk(compiledAutomaton_))->automaton_)) getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:currentFrame_->transition_];
          currentFrame_->curTransitionMax_ = ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(currentFrame_->transition_))->max_;
        }
      }
      if (((OrgApacheLuceneUtilAutomatonCompiledAutomaton *) nil_chk(compiledAutomaton_))->commonSuffixRef_ != nil && !isSubBlock) {
        jint termLen = currentFrame_->prefix_ + currentFrame_->suffix_;
        if (termLen < compiledAutomaton_->commonSuffixRef_->length_) {
          goto continue_nextTerm;
        }
        IOSByteArray *suffixBytes = currentFrame_->suffixBytes_;
        IOSByteArray *commonSuffixBytes = compiledAutomaton_->commonSuffixRef_->bytes_;
        jint lenInPrefix = compiledAutomaton_->commonSuffixRef_->length_ - currentFrame_->suffix_;
        JreAssert((compiledAutomaton_->commonSuffixRef_->offset_ == 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java:380 condition failed: assert compiledAutomaton.commonSuffixRef.offset == 0;"));
        jint suffixBytesPos;
        jint commonSuffixBytesPos = 0;
        if (lenInPrefix > 0) {
          IOSByteArray *termBytes = ((OrgApacheLuceneUtilBytesRef *) nil_chk(term_))->bytes_;
          jint termBytesPos = currentFrame_->prefix_ - lenInPrefix;
          JreAssert((termBytesPos >= 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java:390 condition failed: assert termBytesPos >= 0;"));
          jint termBytesPosEnd = currentFrame_->prefix_;
          while (termBytesPos < termBytesPosEnd) {
            if (IOSByteArray_Get(nil_chk(termBytes), termBytesPos++) != IOSByteArray_Get(nil_chk(commonSuffixBytes), commonSuffixBytesPos++)) {
              goto continue_nextTerm;
            }
          }
          suffixBytesPos = currentFrame_->startBytePos_;
        }
        else {
          suffixBytesPos = currentFrame_->startBytePos_ + currentFrame_->suffix_ - compiledAutomaton_->commonSuffixRef_->length_;
        }
        jint commonSuffixBytesPosEnd = compiledAutomaton_->commonSuffixRef_->length_;
        while (commonSuffixBytesPos < commonSuffixBytesPosEnd) {
          if (IOSByteArray_Get(nil_chk(suffixBytes), suffixBytesPos++) != IOSByteArray_Get(nil_chk(commonSuffixBytes), commonSuffixBytesPos++)) {
            goto continue_nextTerm;
          }
        }
      }
      jint state = currentFrame_->state_;
      for (jint idx = 0; idx < currentFrame_->suffix_; idx++) {
        state = [((OrgApacheLuceneUtilAutomatonRunAutomaton *) nil_chk(runAutomaton_)) stepWithInt:state withInt:IOSByteArray_Get(nil_chk(currentFrame_->suffixBytes_), currentFrame_->startBytePos_ + idx) & (jint) 0xff];
        if (state == -1) {
          goto continue_nextTerm;
        }
        else {
        }
      }
      if (isSubBlock) {
        OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_copyTerm(self);
        JreStrongAssign(&currentFrame_, OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_pushFrameWithInt_(self, state));
      }
      else if ([((OrgApacheLuceneUtilAutomatonRunAutomaton *) nil_chk(runAutomaton_)) isAcceptWithInt:state]) {
        OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_copyTerm(self);
        JreAssert((savedStartTerm_ == nil || [((OrgApacheLuceneUtilBytesRef *) nil_chk(term_)) compareToWithId:savedStartTerm_] > 0), (JreStrcat("$$$$", @"saveStartTerm=", [((OrgApacheLuceneUtilBytesRef *) nil_chk(savedStartTerm_)) utf8ToString], @" term=", [((OrgApacheLuceneUtilBytesRef *) nil_chk(term_)) utf8ToString])));
        return term_;
      }
      else {
      }
    }
    continue_nextTerm: ;
  }
}

- (void)copyTerm {
  OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_copyTerm(self);
}

- (jboolean)seekExactWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text {
  @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
}

- (void)seekExactWithLong:(jlong)ord {
  @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
}

- (jlong)ord {
  @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *)seekCeilWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text {
  @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
}

- (void)dealloc {
  RELEASE_(in_);
  RELEASE_(stack_);
  RELEASE_(arcs_);
  RELEASE_(runAutomaton_);
  RELEASE_(compiledAutomaton_);
  RELEASE_(currentFrame_);
  RELEASE_(term_);
  RELEASE_(fstReader_);
  RELEASE_(fr_);
  RELEASE_(savedStartTerm_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader:withOrgApacheLuceneUtilAutomatonCompiledAutomaton:withOrgApacheLuceneUtilBytesRef:", "OrdsIntersectTermsEnum", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "setSavedStartTermWithOrgApacheLuceneUtilBytesRef:", "setSavedStartTerm", "Z", 0x2, NULL, NULL },
    { "termState", NULL, "Lorg.apache.lucene.index.TermState;", 0x1, "Ljava.io.IOException;", NULL },
    { "getFrameWithInt:", "getFrame", "Lorg.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame;", 0x2, "Ljava.io.IOException;", NULL },
    { "getArcWithInt:", "getArc", "Lorg.apache.lucene.util.fst.FST$Arc;", 0x2, NULL, NULL },
    { "pushFrameWithInt:", "pushFrame", "Lorg.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame;", 0x2, "Ljava.io.IOException;", NULL },
    { "term", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, NULL, NULL },
    { "docFreq", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "totalTermFreq", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "postingsWithOrgApacheLuceneIndexPostingsEnum:withInt:", "postings", "Lorg.apache.lucene.index.PostingsEnum;", 0x1, "Ljava.io.IOException;", NULL },
    { "getState", NULL, "I", 0x2, NULL, NULL },
    { "seekToStartTermWithOrgApacheLuceneUtilBytesRef:", "seekToStartTerm", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "next", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, "Ljava.io.IOException;", NULL },
    { "copyTerm", NULL, "V", 0x2, NULL, NULL },
    { "seekExactWithOrgApacheLuceneUtilBytesRef:", "seekExact", "Z", 0x1, NULL, NULL },
    { "seekExactWithLong:", "seekExact", "V", 0x1, NULL, NULL },
    { "ord", NULL, "J", 0x1, NULL, NULL },
    { "seekCeilWithOrgApacheLuceneUtilBytesRef:", "seekCeil", "Lorg.apache.lucene.index.TermsEnum$SeekStatus;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "in_", NULL, 0x10, "Lorg.apache.lucene.store.IndexInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "stack_", NULL, 0x2, "[Lorg.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame;", NULL, NULL, .constantValue.asLong = 0 },
    { "arcs_", NULL, 0x2, "[Lorg.apache.lucene.util.fst.FST$Arc;", NULL, "[Lorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/codecs/blocktreeords/FSTOrdsOutputs$Output;>;", .constantValue.asLong = 0 },
    { "runAutomaton_", NULL, 0x10, "Lorg.apache.lucene.util.automaton.RunAutomaton;", NULL, NULL, .constantValue.asLong = 0 },
    { "compiledAutomaton_", NULL, 0x10, "Lorg.apache.lucene.util.automaton.CompiledAutomaton;", NULL, NULL, .constantValue.asLong = 0 },
    { "currentFrame_", NULL, 0x2, "Lorg.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame;", NULL, NULL, .constantValue.asLong = 0 },
    { "term_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "fstReader_", NULL, 0x12, "Lorg.apache.lucene.util.fst.FST$BytesReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "fr_", NULL, 0x10, "Lorg.apache.lucene.codecs.blocktreeords.OrdsFieldReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "savedStartTerm_", NULL, 0x2, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum = { 2, "OrdsIntersectTermsEnum", "org.apache.lucene.codecs.blocktreeords", NULL, 0x10, 18, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum;
}

@end

void OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self, OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *fr, OrgApacheLuceneUtilAutomatonCompiledAutomaton *compiled, OrgApacheLuceneUtilBytesRef *startTerm) {
  OrgApacheLuceneIndexTermsEnum_init(self);
  JreStrongAssignAndConsume(&self->arcs_, [IOSObjectArray newArrayWithLength:5 type:OrgApacheLuceneUtilFstFST_Arc_class_()]);
  JreStrongAssignAndConsume(&self->term_, new_OrgApacheLuceneUtilBytesRef_init());
  JreStrongAssign(&self->fr_, fr);
  JreStrongAssign(&self->runAutomaton_, ((OrgApacheLuceneUtilAutomatonCompiledAutomaton *) nil_chk(compiled))->runAutomaton_);
  JreStrongAssign(&self->compiledAutomaton_, compiled);
  JreStrongAssign(&self->in_, [((OrgApacheLuceneStoreIndexInput *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(fr))->parent_))->in_)) clone]);
  JreStrongAssignAndConsume(&self->stack_, [IOSObjectArray newArrayWithLength:5 type:OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame_class_()]);
  for (jint idx = 0; idx < self->stack_->size_; idx++) {
    IOSObjectArray_SetAndConsume(self->stack_, idx, new_OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_withInt_(self, idx));
  }
  for (jint arcIdx = 0; arcIdx < self->arcs_->size_; arcIdx++) {
    IOSObjectArray_SetAndConsume(self->arcs_, arcIdx, new_OrgApacheLuceneUtilFstFST_Arc_init());
  }
  if (fr->index_ == nil) {
    JreStrongAssign(&self->fstReader_, nil);
  }
  else {
    JreStrongAssign(&self->fstReader_, [fr->index_ getBytesReader]);
  }
  OrgApacheLuceneUtilFstFST_Arc *arc = [((OrgApacheLuceneUtilFstFST *) nil_chk(fr->index_)) getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:IOSObjectArray_Get(self->arcs_, 0)];
  JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java:92 condition failed: assert arc.isFinal();"));
  OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *f = IOSObjectArray_Get(self->stack_, 0);
  ((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *) nil_chk(f))->fp_ = f->fpOrig_ = fr->rootBlockFP_;
  f->prefix_ = 0;
  [f setStateWithInt:[((OrgApacheLuceneUtilAutomatonRunAutomaton *) nil_chk(self->runAutomaton_)) getInitialState]];
  JreStrongAssign(&f->arc_, arc);
  JreStrongAssign(&f->outputPrefix_, arc->output_);
  [f load__WithOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:fr->rootCode_];
  JreAssert((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_setSavedStartTermWithOrgApacheLuceneUtilBytesRef_(self, startTerm)), (@"org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java:104 condition failed: assert setSavedStartTerm(startTerm);"));
  JreStrongAssign(&self->currentFrame_, f);
  if (startTerm != nil) {
    OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_seekToStartTermWithOrgApacheLuceneUtilBytesRef_(self, startTerm);
  }
}

OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *new_OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *fr, OrgApacheLuceneUtilAutomatonCompiledAutomaton *compiled, OrgApacheLuceneUtilBytesRef *startTerm) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self = [OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum alloc];
  OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_withOrgApacheLuceneUtilBytesRef_(self, fr, compiled, startTerm);
  return self;
}

jboolean OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_setSavedStartTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self, OrgApacheLuceneUtilBytesRef *startTerm) {
  JreStrongAssign(&self->savedStartTerm_, startTerm == nil ? nil : OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_(startTerm));
  return YES;
}

OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_getFrameWithInt_(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self, jint ord) {
  if (ord >= ((IOSObjectArray *) nil_chk(self->stack_))->size_) {
    IOSObjectArray *next = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(1 + ord, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF_)) type:OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->stack_, 0, next, 0, self->stack_->size_);
    for (jint stackOrd = self->stack_->size_; stackOrd < next->size_; stackOrd++) {
      IOSObjectArray_SetAndConsume(next, stackOrd, new_OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_withInt_(self, stackOrd));
    }
    JreStrongAssign(&self->stack_, next);
  }
  JreAssert((((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *) nil_chk(IOSObjectArray_Get(self->stack_, ord)))->ord_ == ord), (@"org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java:133 condition failed: assert stack[ord].ord == ord;"));
  return IOSObjectArray_Get(self->stack_, ord);
}

OrgApacheLuceneUtilFstFST_Arc *OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_getArcWithInt_(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self, jint ord) {
  if (ord >= ((IOSObjectArray *) nil_chk(self->arcs_))->size_) {
    IOSObjectArray *next = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(1 + ord, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF_)) type:OrgApacheLuceneUtilFstFST_Arc_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->arcs_, 0, next, 0, self->arcs_->size_);
    for (jint arcOrd = self->arcs_->size_; arcOrd < next->size_; arcOrd++) {
      IOSObjectArray_SetAndConsume(next, arcOrd, new_OrgApacheLuceneUtilFstFST_Arc_init());
    }
    JreStrongAssign(&self->arcs_, next);
  }
  return IOSObjectArray_Get(self->arcs_, ord);
}

OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_pushFrameWithInt_(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self, jint state) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *f = OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_getFrameWithInt_(self, self->currentFrame_ == nil ? 0 : 1 + self->currentFrame_->ord_);
  ((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *) nil_chk(f))->fp_ = f->fpOrig_ = ((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->lastSubFP_;
  f->prefix_ = self->currentFrame_->prefix_ + self->currentFrame_->suffix_;
  [f setStateWithInt:state];
  OrgApacheLuceneUtilFstFST_Arc *arc = self->currentFrame_->arc_;
  jint idx = self->currentFrame_->prefix_;
  JreAssert((self->currentFrame_->suffix_ > 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java:164 condition failed: assert currentFrame.suffix > 0;"));
  OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *output = self->currentFrame_->outputPrefix_;
  while (idx < f->prefix_) {
    jint target = IOSByteArray_Get(nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(self->term_))->bytes_), idx) & (jint) 0xff;
    arc = [((OrgApacheLuceneUtilFstFST *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(self->fr_))->index_)) findTargetArcWithInt:target withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_getArcWithInt_(self, 1 + idx) withOrgApacheLuceneUtilFstFST_BytesReader:self->fstReader_];
    JreAssert((arc != nil), (@"org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java:172 condition failed: assert arc != null;"));
    output = [((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) addWithId:output withId:((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_];
    idx++;
  }
  JreStrongAssign(&f->arc_, arc);
  JreStrongAssign(&f->outputPrefix_, output);
  JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java:179 condition failed: assert arc.isFinal();"));
  [f load__WithOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:[((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) addWithId:output withId:arc->nextFinalOutput_]];
  return f;
}

jint OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_getState(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self) {
  jint state = ((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->state_;
  for (jint idx = 0; idx < self->currentFrame_->suffix_; idx++) {
    state = [((OrgApacheLuceneUtilAutomatonRunAutomaton *) nil_chk(self->runAutomaton_)) stepWithInt:state withInt:IOSByteArray_Get(nil_chk(self->currentFrame_->suffixBytes_), self->currentFrame_->startBytePos_ + idx) & (jint) 0xff];
    JreAssert((state != -1), (@"org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java:223 condition failed: assert state != -1;"));
  }
  return state;
}

void OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_seekToStartTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self, OrgApacheLuceneUtilBytesRef *target) {
  JreAssert((((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->ord_ == 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java:234 condition failed: assert currentFrame.ord == 0;"));
  if (((OrgApacheLuceneUtilBytesRef *) nil_chk(self->term_))->length_ < ((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->length_) {
    JreStrongAssign(&self->term_->bytes_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(self->term_->bytes_, target->length_));
  }
  OrgApacheLuceneUtilFstFST_Arc *arc = IOSObjectArray_Get(nil_chk(self->arcs_), 0);
  JreAssert((arc == self->currentFrame_->arc_), (@"org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java:239 condition failed: assert arc == currentFrame.arc;"));
  for (jint idx = 0; idx <= target->length_; idx++) {
    while (YES) {
      jint savePos = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(self->currentFrame_->suffixesReader_)) getPosition];
      jint saveStartBytePos = self->currentFrame_->startBytePos_;
      jint saveSuffix = self->currentFrame_->suffix_;
      jlong saveLastSubFP = self->currentFrame_->lastSubFP_;
      jint saveTermBlockOrd = ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(self->currentFrame_->termState_))->termBlockOrd_;
      jboolean isSubBlock = [self->currentFrame_ next];
      self->term_->length_ = self->currentFrame_->prefix_ + self->currentFrame_->suffix_;
      if (((IOSByteArray *) nil_chk(self->term_->bytes_))->size_ < self->term_->length_) {
        JreStrongAssign(&self->term_->bytes_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(self->term_->bytes_, self->term_->length_));
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->currentFrame_->suffixBytes_, self->currentFrame_->startBytePos_, self->term_->bytes_, self->currentFrame_->prefix_, self->currentFrame_->suffix_);
      if (isSubBlock && OrgApacheLuceneUtilStringHelper_startsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(target, self->term_)) {
        JreStrongAssign(&self->currentFrame_, OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_pushFrameWithInt_(self, OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_getState(self)));
        break;
      }
      else {
        jint cmp = [self->term_ compareToWithId:target];
        if (cmp < 0) {
          if (self->currentFrame_->nextEnt_ == self->currentFrame_->entCount_) {
            if (!self->currentFrame_->isLastInFloor_) {
              [self->currentFrame_ loadNextFloorBlock];
              continue;
            }
            else {
              return;
            }
          }
          continue;
        }
        else if (cmp == 0) {
          return;
        }
        else {
          self->currentFrame_->nextEnt_--;
          self->currentFrame_->lastSubFP_ = saveLastSubFP;
          self->currentFrame_->startBytePos_ = saveStartBytePos;
          self->currentFrame_->suffix_ = saveSuffix;
          [self->currentFrame_->suffixesReader_ setPositionWithInt:savePos];
          self->currentFrame_->termState_->termBlockOrd_ = saveTermBlockOrd;
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->currentFrame_->suffixBytes_, self->currentFrame_->startBytePos_, self->term_->bytes_, self->currentFrame_->prefix_, self->currentFrame_->suffix_);
          self->term_->length_ = self->currentFrame_->prefix_ + self->currentFrame_->suffix_;
          return;
        }
      }
    }
  }
  JreAssert((NO), (@"org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.java:304 condition failed: assert false;"));
}

void OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_copyTerm(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum *self) {
  jint len = ((OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->prefix_ + self->currentFrame_->suffix_;
  if (((IOSByteArray *) nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(self->term_))->bytes_))->size_ < len) {
    JreStrongAssign(&self->term_->bytes_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(self->term_->bytes_, len));
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->currentFrame_->suffixBytes_, self->currentFrame_->startBytePos_, self->term_->bytes_, self->currentFrame_->prefix_, self->currentFrame_->suffix_);
  self->term_->length_ = len;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum)
