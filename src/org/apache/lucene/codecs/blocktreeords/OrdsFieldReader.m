//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsFieldReader.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/blocktreeords/FSTOrdsOutputs.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsFieldReader.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/Accountables.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/util/fst/FST.h"

@implementation OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader

- (instancetype)initWithOrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader:(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader *)parent
                                                 withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                                                                          withLong:(jlong)numTerms
                       withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:(OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *)rootCode
                                                                          withLong:(jlong)sumTotalTermFreq
                                                                          withLong:(jlong)sumDocFreq
                                                                           withInt:(jint)docCount
                                                                          withLong:(jlong)indexStartFP
                                                                           withInt:(jint)longsSize
                                                withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)indexIn
                                                   withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)minTerm
                                                   withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)maxTerm {
  OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(self, parent, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, longsSize, indexIn, minTerm, maxTerm);
  return self;
}

- (OrgApacheLuceneUtilBytesRef *)getMin {
  if (minTerm_ == nil) {
    return [super getMin];
  }
  else {
    return minTerm_;
  }
}

- (OrgApacheLuceneUtilBytesRef *)getMax {
  if (maxTerm_ == nil) {
    return [super getMax];
  }
  else {
    return maxTerm_;
  }
}

- (jboolean)hasFreqs {
  return [((OrgApacheLuceneIndexIndexOptionsEnum *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS)] >= 0;
}

- (jboolean)hasOffsets {
  return [((OrgApacheLuceneIndexIndexOptionsEnum *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)] >= 0;
}

- (jboolean)hasPositions {
  return [((OrgApacheLuceneIndexIndexOptionsEnum *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS_AND_POSITIONS)] >= 0;
}

- (jboolean)hasPayloads {
  return [((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) hasPayloads];
}

- (OrgApacheLuceneIndexTermsEnum *)iterator {
  return [new_OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader_(self) autorelease];
}

- (jlong)size {
  return numTerms_;
}

- (jlong)getSumTotalTermFreq {
  return sumTotalTermFreq_;
}

- (jlong)getSumDocFreq {
  return sumDocFreq_;
}

- (jint)getDocCount {
  return docCount_;
}

- (OrgApacheLuceneIndexTermsEnum *)intersectWithOrgApacheLuceneUtilAutomatonCompiledAutomaton:(OrgApacheLuceneUtilAutomatonCompiledAutomaton *)compiled
                                                              withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)startTerm {
  if (((OrgApacheLuceneUtilAutomatonCompiledAutomaton *) nil_chk(compiled))->type_ != JreLoadStatic(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPEEnum, NORMAL)) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"please use CompiledAutomaton.getTermsEnum instead") autorelease];
  }
  return [new_OrgApacheLuceneCodecsBlocktreeordsOrdsIntersectTermsEnum_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_withOrgApacheLuceneUtilBytesRef_(self, compiled, startTerm) autorelease];
}

- (jlong)ramBytesUsed {
  return ((index_ != nil) ? [index_ ramBytesUsed] : 0);
}

- (id<JavaUtilCollection>)getChildResources {
  if (index_ == nil) {
    return JavaUtilCollections_emptyList();
  }
  else {
    return JavaUtilCollections_singletonWithId_(OrgApacheLuceneUtilAccountables_namedAccountableWithNSString_withOrgApacheLuceneUtilAccountable_(@"term index", index_));
  }
}

- (NSString *)description {
  return JreStrcat("$J$J$J$IC", @"OrdsBlockTreeTerms(terms=", numTerms_, @",postings=", sumDocFreq_, @",positions=", sumTotalTermFreq_, @",docs=", docCount_, ')');
}

- (void)dealloc {
  RELEASE_(fieldInfo_);
  RELEASE_(rootCode_);
  RELEASE_(minTerm_);
  RELEASE_(maxTerm_);
  RELEASE_(parent_);
  RELEASE_(index_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader:withOrgApacheLuceneIndexFieldInfo:withLong:withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:withLong:withLong:withInt:withLong:withInt:withOrgApacheLuceneStoreIndexInput:withOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:", "OrdsFieldReader", NULL, 0x0, "Ljava.io.IOException;", NULL },
    { "getMin", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, "Ljava.io.IOException;", NULL },
    { "getMax", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, "Ljava.io.IOException;", NULL },
    { "hasFreqs", NULL, "Z", 0x1, NULL, NULL },
    { "hasOffsets", NULL, "Z", 0x1, NULL, NULL },
    { "hasPositions", NULL, "Z", 0x1, NULL, NULL },
    { "hasPayloads", NULL, "Z", 0x1, NULL, NULL },
    { "iterator", NULL, "Lorg.apache.lucene.index.TermsEnum;", 0x1, "Ljava.io.IOException;", NULL },
    { "size", NULL, "J", 0x1, NULL, NULL },
    { "getSumTotalTermFreq", NULL, "J", 0x1, NULL, NULL },
    { "getSumDocFreq", NULL, "J", 0x1, NULL, NULL },
    { "getDocCount", NULL, "I", 0x1, NULL, NULL },
    { "intersectWithOrgApacheLuceneUtilAutomatonCompiledAutomaton:withOrgApacheLuceneUtilBytesRef:", "intersect", "Lorg.apache.lucene.index.TermsEnum;", 0x1, "Ljava.io.IOException;", NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "getChildResources", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "numTerms_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldInfo_", NULL, 0x10, "Lorg.apache.lucene.index.FieldInfo;", NULL, NULL, .constantValue.asLong = 0 },
    { "sumTotalTermFreq_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "sumDocFreq_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "docCount_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "indexStartFP_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "rootBlockFP_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "rootCode_", NULL, 0x10, "Lorg.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs$Output;", NULL, NULL, .constantValue.asLong = 0 },
    { "minTerm_", NULL, 0x10, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "maxTerm_", NULL, 0x10, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "longsSize_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "parent_", NULL, 0x10, "Lorg.apache.lucene.codecs.blocktreeords.OrdsBlockTreeTermsReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "index_", NULL, 0x10, "Lorg.apache.lucene.util.fst.FST;", NULL, "Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/codecs/blocktreeords/FSTOrdsOutputs$Output;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader = { 2, "OrdsFieldReader", "org.apache.lucene.codecs.blocktreeords", NULL, 0x10, 16, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader;
}

@end

void OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *self, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader *parent, OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *rootCode, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jlong indexStartFP, jint longsSize, OrgApacheLuceneStoreIndexInput *indexIn, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  OrgApacheLuceneIndexTerms_init(self);
  JreAssert((numTerms > 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsFieldReader.java:58 condition failed: assert numTerms > 0;"));
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  JreStrongAssign(&self->parent_, parent);
  self->numTerms_ = numTerms;
  self->sumTotalTermFreq_ = sumTotalTermFreq;
  self->sumDocFreq_ = sumDocFreq;
  self->docCount_ = docCount;
  self->indexStartFP_ = indexStartFP;
  JreStrongAssign(&self->rootCode_, rootCode);
  self->longsSize_ = longsSize;
  JreStrongAssign(&self->minTerm_, minTerm);
  JreStrongAssign(&self->maxTerm_, maxTerm);
  self->rootBlockFP_ = JreURShift64([((OrgApacheLuceneStoreByteArrayDataInput *) ([new_OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *) nil_chk(rootCode))->bytes_))->bytes_, rootCode->bytes_->offset_, rootCode->bytes_->length_) autorelease])) readVLong], OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAGS_NUM_BITS);
  if (indexIn != nil) {
    OrgApacheLuceneStoreIndexInput *clone = [indexIn clone];
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(clone)) seekWithLong:indexStartFP];
    JreStrongAssignAndConsume(&self->index_, new_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_(clone, JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_)));
  }
  else {
    JreStrongAssign(&self->index_, nil);
  }
}

OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *new_OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader *parent, OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *rootCode, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jlong indexStartFP, jint longsSize, OrgApacheLuceneStoreIndexInput *indexIn, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *self = [OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader alloc];
  OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(self, parent, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, longsSize, indexIn, minTerm, maxTerm);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader)
