//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/codecs/blocktreeords/FSTOrdsOutputs.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsFieldReader.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Util.h"

@class OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput;

@interface OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum () {
 @public
  IOSObjectArray *stack_;
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *staticFrame_;
  jint targetBeforeCurrentLength_;
  OrgApacheLuceneStoreByteArrayDataInput *scratchReader_;
  jint validIndexPrefix_;
  jboolean eof_;
  OrgApacheLuceneUtilFstFST_BytesReader *fstReader_;
  IOSObjectArray *arcs_;
  OrgApacheLuceneUtilFstFST_Arc *arc_;
}

- (OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *)getFrameWithInt:(jint)ord;

- (OrgApacheLuceneUtilFstFST_Arc *)getArcWithInt:(jint)ord;

- (jboolean)clearEOF;

- (jboolean)setEOF;

- (void)printSeekStateWithJavaIoPrintStream:(JavaIoPrintStream *)outArg;

- (OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput *)getByOutputWithLong:(jlong)targetOrd;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum, stack_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum, staticFrame_, OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum, scratchReader_, OrgApacheLuceneStoreByteArrayDataInput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum, fstReader_, OrgApacheLuceneUtilFstFST_BytesReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum, arcs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum, arc_, OrgApacheLuceneUtilFstFST_Arc *)

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getFrameWithInt_(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *self, jint ord);

__attribute__((unused)) static OrgApacheLuceneUtilFstFST_Arc *OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getArcWithInt_(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *self, jint ord);

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_clearEOF(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *self);

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_setEOF(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *self);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput *OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getByOutputWithLong_(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *self, jlong targetOrd);

@interface OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput : NSObject {
 @public
  OrgApacheLuceneUtilIntsRef *input_;
  OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *output_;
}

- (NSString *)description;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput, input_, OrgApacheLuceneUtilIntsRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput, output_, OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput_init(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput *self);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput *new_OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput)

@implementation OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum

- (instancetype)initWithOrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader:(OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *)fr {
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader_(self, fr);
  return self;
}

- (void)initIndexInput {
  if (self->in_ == nil) {
    JreStrongAssign(&self->in_, [((OrgApacheLuceneStoreIndexInput *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(fr_))->parent_))->in_)) clone]);
  }
}

- (OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *)getFrameWithInt:(jint)ord {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getFrameWithInt_(self, ord);
}

- (OrgApacheLuceneUtilFstFST_Arc *)getArcWithInt:(jint)ord {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getArcWithInt_(self, ord);
}

- (OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *)pushFrameWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
                                                withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:(OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *)frameData
                                                                                                    withInt:(jint)length {
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(scratchReader_)) resetWithByteArray:((OrgApacheLuceneUtilBytesRef *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *) nil_chk(frameData))->bytes_))->bytes_ withInt:frameData->bytes_->offset_ withInt:frameData->bytes_->length_];
  jlong code = [scratchReader_ readVLong];
  jlong fpSeek = JreURShift64(code, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAGS_NUM_BITS);
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *f = OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getFrameWithInt_(self, 1 + ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->ord_);
  ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(f))->hasTerms_ = ((code & OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAG_HAS_TERMS) != 0);
  f->hasTermsOrig_ = f->hasTerms_;
  f->isFloor_ = ((code & OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAG_IS_FLOOR) != 0);
  if (f->isFloor_) {
    f->termOrdOrig_ = frameData->startOrd_;
    [f setFloorDataWithOrgApacheLuceneStoreByteArrayDataInput:scratchReader_ withOrgApacheLuceneUtilBytesRef:frameData->bytes_];
  }
  [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withLong:fpSeek withInt:length withLong:frameData->startOrd_];
  return f;
}

- (OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *)pushFrameWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
                                                                                                   withLong:(jlong)fp
                                                                                                    withInt:(jint)length
                                                                                                   withLong:(jlong)termOrd {
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *f = OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getFrameWithInt_(self, 1 + ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->ord_);
  JreStrongAssign(&((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(f))->arc_, arc);
  if (f->fpOrig_ == fp && f->nextEnt_ != -1) {
    if (f->prefix_ > targetBeforeCurrentLength_) {
      [f rewind];
    }
    else {
    }
    JreAssert((length == f->prefix_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:190 condition failed: assert length == f.prefix;"));
    JreAssert((termOrd == f->termOrdOrig_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:191 condition failed: assert termOrd == f.termOrdOrig;"));
  }
  else {
    f->nextEnt_ = -1;
    f->prefix_ = length;
    ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(f->state_))->termBlockOrd_ = 0;
    f->termOrdOrig_ = termOrd;
    f->termOrd_ = termOrd;
    f->fpOrig_ = f->fp_ = fp;
    f->lastSubFP_ = -1;
  }
  return f;
}

- (jboolean)clearEOF {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_clearEOF(self);
}

- (jboolean)setEOF {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_setEOF(self);
}

+ (NSString *)brToStringWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)b {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_brToStringWithOrgApacheLuceneUtilBytesRef_(b);
}

- (jboolean)seekExactWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target {
  if (((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(fr_))->index_ == nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"terms index was not loaded") autorelease];
  }
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) growWithInt:1 + ((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->length_];
  JreAssert((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_clearEOF(self)), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:246 condition failed: assert clearEOF();"));
  OrgApacheLuceneUtilFstFST_Arc *arc;
  jint targetUpto;
  OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *output;
  targetBeforeCurrentLength_ = ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->ord_;
  if (positioned_ && currentFrame_ != staticFrame_) {
    arc = IOSObjectArray_Get(nil_chk(arcs_), 0);
    JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:275 condition failed: assert arc.isFinal();"));
    output = arc->output_;
    targetUpto = 0;
    OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *lastFrame = IOSObjectArray_Get(nil_chk(stack_), 0);
    JreAssert((validIndexPrefix_ <= [term_ length]), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:280 condition failed: assert validIndexPrefix <= term.length();"));
    jint targetLimit = JavaLangMath_minWithInt_withInt_(target->length_, validIndexPrefix_);
    jint cmp = 0;
    while (targetUpto < targetLimit) {
      cmp = ([term_ byteAtWithInt:targetUpto] & (jint) 0xFF) - (IOSByteArray_Get(nil_chk(target->bytes_), target->offset_ + targetUpto) & (jint) 0xFF);
      if (cmp != 0) {
        break;
      }
      arc = IOSObjectArray_Get(arcs_, 1 + targetUpto);
      JreAssert((((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->label_ == (IOSByteArray_Get(target->bytes_, target->offset_ + targetUpto) & (jint) 0xFF)), (JreStrcat("$C$C", @"arc.label=", (jchar) arc->label_, @" targetLabel=", (jchar) (IOSByteArray_Get(target->bytes_, target->offset_ + targetUpto) & (jint) 0xFF))));
      if (arc->output_ != JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, NO_OUTPUT_)) {
        output = [((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) addWithId:output withId:arc->output_];
      }
      if ([arc isFinal]) {
        lastFrame = IOSObjectArray_Get(stack_, 1 + ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(lastFrame))->ord_);
      }
      targetUpto++;
    }
    if (cmp == 0) {
      jint targetUptoMid = targetUpto;
      jint targetLimit2 = JavaLangMath_minWithInt_withInt_(target->length_, [term_ length]);
      while (targetUpto < targetLimit2) {
        cmp = ([term_ byteAtWithInt:targetUpto] & (jint) 0xFF) - (IOSByteArray_Get(nil_chk(target->bytes_), target->offset_ + targetUpto) & (jint) 0xFF);
        if (cmp != 0) {
          break;
        }
        targetUpto++;
      }
      if (cmp == 0) {
        cmp = [term_ length] - target->length_;
      }
      targetUpto = targetUptoMid;
    }
    if (cmp < 0) {
      JreStrongAssign(&currentFrame_, lastFrame);
    }
    else if (cmp > 0) {
      targetBeforeCurrentLength_ = ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(lastFrame))->ord_;
      JreStrongAssign(&currentFrame_, lastFrame);
      [currentFrame_ rewind];
    }
    else {
      JreAssert(([term_ length] == target->length_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:356 condition failed: assert term.length() == target.length;"));
      if (termExists_) {
        return YES;
      }
      else {
      }
    }
  }
  else {
    targetBeforeCurrentLength_ = -1;
    arc = [((OrgApacheLuceneUtilFstFST *) nil_chk(fr_->index_)) getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:IOSObjectArray_Get(nil_chk(arcs_), 0)];
    JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:378 condition failed: assert arc.isFinal();"));
    JreAssert((arc->output_ != nil), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:379 condition failed: assert arc.output != null;"));
    output = arc->output_;
    JreStrongAssign(&currentFrame_, staticFrame_);
    targetUpto = 0;
    JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:[((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) addWithId:output withId:arc->nextFinalOutput_] withInt:0]);
  }
  positioned_ = YES;
  while (targetUpto < target->length_) {
    jint targetLabel = IOSByteArray_Get(nil_chk(target->bytes_), target->offset_ + targetUpto) & (jint) 0xFF;
    OrgApacheLuceneUtilFstFST_Arc *nextArc = [((OrgApacheLuceneUtilFstFST *) nil_chk(fr_->index_)) findTargetArcWithInt:targetLabel withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getArcWithInt_(self, 1 + targetUpto) withOrgApacheLuceneUtilFstFST_BytesReader:fstReader_];
    if (nextArc == nil) {
      validIndexPrefix_ = ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->prefix_;
      [currentFrame_ scanToFloorFrameWithOrgApacheLuceneUtilBytesRef:target];
      if (!currentFrame_->hasTerms_) {
        termExists_ = NO;
        [term_ setByteAtWithInt:targetUpto withByte:(jbyte) targetLabel];
        [term_ setLengthWithInt:1 + targetUpto];
        return NO;
      }
      [currentFrame_ loadBlock];
      OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *result = [currentFrame_ scanToTermWithOrgApacheLuceneUtilBytesRef:target withBoolean:YES];
      if (result == JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND)) {
        return YES;
      }
      else {
        return NO;
      }
    }
    else {
      arc = nextArc;
      [term_ setByteAtWithInt:targetUpto withByte:(jbyte) targetLabel];
      JreAssert((arc->output_ != nil), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:448 condition failed: assert arc.output != null;"));
      if (arc->output_ != JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, NO_OUTPUT_)) {
        output = [((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) addWithId:output withId:arc->output_];
      }
      targetUpto++;
      if ([arc isFinal]) {
        JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:[((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) addWithId:output withId:arc->nextFinalOutput_] withInt:targetUpto]);
      }
    }
  }
  validIndexPrefix_ = ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->prefix_;
  [currentFrame_ scanToFloorFrameWithOrgApacheLuceneUtilBytesRef:target];
  if (!currentFrame_->hasTerms_) {
    termExists_ = NO;
    [term_ setLengthWithInt:targetUpto];
    return NO;
  }
  [currentFrame_ loadBlock];
  OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *result = [currentFrame_ scanToTermWithOrgApacheLuceneUtilBytesRef:target withBoolean:YES];
  if (result == JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND)) {
    return YES;
  }
  else {
    return NO;
  }
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *)seekCeilWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target {
  if (((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(fr_))->index_ == nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"terms index was not loaded") autorelease];
  }
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) growWithInt:1 + ((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->length_];
  JreAssert((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_clearEOF(self)), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:506 condition failed: assert clearEOF();"));
  OrgApacheLuceneUtilFstFST_Arc *arc;
  jint targetUpto;
  OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *output;
  targetBeforeCurrentLength_ = ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->ord_;
  if (positioned_ && currentFrame_ != staticFrame_) {
    arc = IOSObjectArray_Get(nil_chk(arcs_), 0);
    JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:533 condition failed: assert arc.isFinal();"));
    output = arc->output_;
    targetUpto = 0;
    OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *lastFrame = IOSObjectArray_Get(nil_chk(stack_), 0);
    JreAssert((validIndexPrefix_ <= [term_ length]), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:538 condition failed: assert validIndexPrefix <= term.length();"));
    jint targetLimit = JavaLangMath_minWithInt_withInt_(target->length_, validIndexPrefix_);
    jint cmp = 0;
    while (targetUpto < targetLimit) {
      cmp = ([term_ byteAtWithInt:targetUpto] & (jint) 0xFF) - (IOSByteArray_Get(nil_chk(target->bytes_), target->offset_ + targetUpto) & (jint) 0xFF);
      if (cmp != 0) {
        break;
      }
      arc = IOSObjectArray_Get(arcs_, 1 + targetUpto);
      JreAssert((((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->label_ == (IOSByteArray_Get(target->bytes_, target->offset_ + targetUpto) & (jint) 0xFF)), (JreStrcat("$C$C", @"arc.label=", (jchar) arc->label_, @" targetLabel=", (jchar) (IOSByteArray_Get(target->bytes_, target->offset_ + targetUpto) & (jint) 0xFF))));
      if (arc->output_ != JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, NO_OUTPUT_)) {
        output = [((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) addWithId:output withId:arc->output_];
      }
      if ([arc isFinal]) {
        lastFrame = IOSObjectArray_Get(stack_, 1 + ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(lastFrame))->ord_);
      }
      targetUpto++;
    }
    if (cmp == 0) {
      jint targetUptoMid = targetUpto;
      jint targetLimit2 = JavaLangMath_minWithInt_withInt_(target->length_, [term_ length]);
      while (targetUpto < targetLimit2) {
        cmp = ([term_ byteAtWithInt:targetUpto] & (jint) 0xFF) - (IOSByteArray_Get(nil_chk(target->bytes_), target->offset_ + targetUpto) & (jint) 0xFF);
        if (cmp != 0) {
          break;
        }
        targetUpto++;
      }
      if (cmp == 0) {
        cmp = [term_ length] - target->length_;
      }
      targetUpto = targetUptoMid;
    }
    if (cmp < 0) {
      JreStrongAssign(&currentFrame_, lastFrame);
    }
    else if (cmp > 0) {
      targetBeforeCurrentLength_ = 0;
      JreStrongAssign(&currentFrame_, lastFrame);
      [((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_)) rewind];
    }
    else {
      JreAssert(([term_ length] == target->length_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:617 condition failed: assert term.length() == target.length;"));
      if (termExists_) {
        return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND);
      }
      else {
      }
    }
  }
  else {
    targetBeforeCurrentLength_ = -1;
    arc = [((OrgApacheLuceneUtilFstFST *) nil_chk(fr_->index_)) getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:IOSObjectArray_Get(nil_chk(arcs_), 0)];
    JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:636 condition failed: assert arc.isFinal();"));
    JreAssert((arc->output_ != nil), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:637 condition failed: assert arc.output != null;"));
    output = arc->output_;
    JreStrongAssign(&currentFrame_, staticFrame_);
    targetUpto = 0;
    JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:[((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) addWithId:output withId:arc->nextFinalOutput_] withInt:0]);
  }
  positioned_ = YES;
  while (targetUpto < target->length_) {
    jint targetLabel = IOSByteArray_Get(nil_chk(target->bytes_), target->offset_ + targetUpto) & (jint) 0xFF;
    OrgApacheLuceneUtilFstFST_Arc *nextArc = [((OrgApacheLuceneUtilFstFST *) nil_chk(fr_->index_)) findTargetArcWithInt:targetLabel withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getArcWithInt_(self, 1 + targetUpto) withOrgApacheLuceneUtilFstFST_BytesReader:fstReader_];
    if (nextArc == nil) {
      validIndexPrefix_ = ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->prefix_;
      [currentFrame_ scanToFloorFrameWithOrgApacheLuceneUtilBytesRef:target];
      [currentFrame_ loadBlock];
      OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *result = [currentFrame_ scanToTermWithOrgApacheLuceneUtilBytesRef:target withBoolean:NO];
      if (result == JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END)) {
        [term_ copyBytesWithOrgApacheLuceneUtilBytesRef:target];
        termExists_ = NO;
        if ([self next] != nil) {
          return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, NOT_FOUND);
        }
        else {
          return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END);
        }
      }
      else {
        return result;
      }
    }
    else {
      [term_ setByteAtWithInt:targetUpto withByte:(jbyte) targetLabel];
      arc = nextArc;
      JreAssert((arc->output_ != nil), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:706 condition failed: assert arc.output != null;"));
      if (arc->output_ != JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, NO_OUTPUT_)) {
        output = [((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) addWithId:output withId:arc->output_];
      }
      targetUpto++;
      if ([arc isFinal]) {
        JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:[((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) addWithId:output withId:arc->nextFinalOutput_] withInt:targetUpto]);
      }
    }
  }
  validIndexPrefix_ = ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->prefix_;
  [currentFrame_ scanToFloorFrameWithOrgApacheLuceneUtilBytesRef:target];
  [currentFrame_ loadBlock];
  OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *result = [currentFrame_ scanToTermWithOrgApacheLuceneUtilBytesRef:target withBoolean:NO];
  if (result == JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END)) {
    [term_ copyBytesWithOrgApacheLuceneUtilBytesRef:target];
    termExists_ = NO;
    if ([self next] != nil) {
      return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, NOT_FOUND);
    }
    else {
      return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END);
    }
  }
  else {
    return result;
  }
}

- (void)printSeekStateWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  if (currentFrame_ == staticFrame_) {
    [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:@"  no prior seek"];
  }
  else {
    [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:@"  prior seek state:"];
    jint ord = 0;
    jboolean isSeekFrame = YES;
    while (YES) {
      OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *f = OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getFrameWithInt_(self, ord);
      JreAssert((f != nil), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:762 condition failed: assert f != null;"));
      OrgApacheLuceneUtilBytesRef *prefix = [new_OrgApacheLuceneUtilBytesRef_initWithByteArray_withInt_withInt_([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) bytes], 0, ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(f))->prefix_) autorelease];
      if (f->nextEnt_ == -1) {
        [outArg printlnWithNSString:JreStrcat("$$$I$J$$I$$$$Z$Z$J$Z$I$I$J", @"    frame ", (isSeekFrame ? @"(seek)" : @"(next)"), @" ord=", ord, @" fp=", f->fp_, (f->isFloor_ ? (JreStrcat("$JC", @" (fpOrig=", f->fpOrig_, ')')) : @""), @" prefixLen=", f->prefix_, @" prefix=", OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_brToStringWithOrgApacheLuceneUtilBytesRef_(prefix), (f->nextEnt_ == -1 ? @"" : (JreStrcat("$IC", @" (of ", f->entCount_, ')'))), @" hasTerms=", f->hasTerms_, @" isFloor=", f->isFloor_, @" code=", ((JreLShift64(f->fp_, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAGS_NUM_BITS)) + (f->hasTerms_ ? OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAG_HAS_TERMS : 0) + (f->isFloor_ ? OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAG_IS_FLOOR : 0)), @" isLastInFloor=", f->isLastInFloor_, @" mdUpto=", f->metaDataUpto_, @" tbOrd=", [f getTermBlockOrd], @" termOrd=", f->termOrd_)];
      }
      else {
        [outArg printlnWithNSString:JreStrcat("$$$I$J$$I$$$I$$Z$Z$J$J$Z$I$I$J", @"    frame ", (isSeekFrame ? @"(seek, loaded)" : @"(next, loaded)"), @" ord=", ord, @" fp=", f->fp_, (f->isFloor_ ? (JreStrcat("$JC", @" (fpOrig=", f->fpOrig_, ')')) : @""), @" prefixLen=", f->prefix_, @" prefix=", OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_brToStringWithOrgApacheLuceneUtilBytesRef_(prefix), @" nextEnt=", f->nextEnt_, (f->nextEnt_ == -1 ? @"" : (JreStrcat("$IC", @" (of ", f->entCount_, ')'))), @" hasTerms=", f->hasTerms_, @" isFloor=", f->isFloor_, @" code=", ((JreLShift64(f->fp_, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAGS_NUM_BITS)) + (f->hasTerms_ ? OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAG_HAS_TERMS : 0) + (f->isFloor_ ? OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAG_IS_FLOOR : 0)), @" lastSubFP=", f->lastSubFP_, @" isLastInFloor=", f->isLastInFloor_, @" mdUpto=", f->metaDataUpto_, @" tbOrd=", [f getTermBlockOrd], @" termOrd=", f->termOrd_)];
      }
      if (((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(fr_))->index_ != nil) {
        JreAssert((!isSeekFrame || f->arc_ != nil), (JreStrcat("$Z$@", @"isSeekFrame=", isSeekFrame, @" f.arc=", f->arc_)));
        if (f->prefix_ > 0 && isSeekFrame && ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(f->arc_))->label_ != ([term_ byteAtWithInt:f->prefix_ - 1] & (jint) 0xFF)) {
          [outArg printlnWithNSString:JreStrcat("$C$C", @"      broken seek state: arc.label=", (jchar) f->arc_->label_, @" vs term byte=", (jchar) ([term_ byteAtWithInt:f->prefix_ - 1] & (jint) 0xFF))];
          @throw [new_JavaLangRuntimeException_initWithNSString_(@"seek state is broken") autorelease];
        }
        OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *output = OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilBytesRef_(fr_->index_, prefix);
        if (output == nil) {
          [outArg printlnWithNSString:@"      broken seek state: prefix is not final in index"];
          @throw [new_JavaLangRuntimeException_initWithNSString_(@"seek state is broken") autorelease];
        }
        else if (isSeekFrame && !f->isFloor_) {
          OrgApacheLuceneStoreByteArrayDataInput *reader = [new_OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk(output->bytes_))->bytes_, output->bytes_->offset_, output->bytes_->length_) autorelease];
          jlong codeOrig = [reader readVLong];
          jlong code = (JreLShift64(f->fp_, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAGS_NUM_BITS)) | (f->hasTerms_ ? OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAG_HAS_TERMS : 0) | (f->isFloor_ ? OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAG_IS_FLOOR : 0);
          if (codeOrig != code) {
            [outArg printlnWithNSString:JreStrcat("$J$J", @"      broken seek state: output code=", codeOrig, @" doesn't match frame code=", code)];
            @throw [new_JavaLangRuntimeException_initWithNSString_(@"seek state is broken") autorelease];
          }
        }
      }
      if (f == currentFrame_) {
        break;
      }
      if (f->prefix_ == validIndexPrefix_) {
        isSeekFrame = NO;
      }
      ord++;
    }
  }
}

- (OrgApacheLuceneUtilBytesRef *)next {
  if (in_ == nil) {
    OrgApacheLuceneUtilFstFST_Arc *arc;
    if (((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(fr_))->index_ != nil) {
      arc = [fr_->index_ getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:IOSObjectArray_Get(nil_chk(arcs_), 0)];
      JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:812 condition failed: assert arc.isFinal();"));
    }
    else {
      arc = nil;
    }
    JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:fr_->rootCode_ withInt:0]);
    [((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_)) loadBlock];
    positioned_ = YES;
  }
  targetBeforeCurrentLength_ = ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->ord_;
  JreAssert((!eof_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:823 condition failed: assert !eof;"));
  if (currentFrame_ == staticFrame_ || positioned_ == NO) {
    jboolean result = [self seekExactWithOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) get]];
    JreAssert((result), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:838 condition failed: assert result;"));
  }
  while (currentFrame_->nextEnt_ == currentFrame_->entCount_) {
    if (!currentFrame_->isLastInFloor_) {
      [currentFrame_ loadNextFloorBlock];
    }
    else {
      if (currentFrame_->ord_ == 0) {
        JreAssert((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_setEOF(self)), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:849 condition failed: assert setEOF();"));
        [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) setLengthWithInt:0];
        validIndexPrefix_ = 0;
        [currentFrame_ rewind];
        termExists_ = NO;
        positioned_ = NO;
        return nil;
      }
      jlong lastFP = currentFrame_->fpOrig_;
      JreStrongAssign(&currentFrame_, IOSObjectArray_Get(nil_chk(stack_), currentFrame_->ord_ - 1));
      if (((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->nextEnt_ == -1 || currentFrame_->lastSubFP_ != lastFP) {
        [currentFrame_ scanToFloorFrameWithOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) get]];
        [currentFrame_ loadBlock];
        [currentFrame_ scanToSubBlockWithLong:lastFP];
      }
      validIndexPrefix_ = JavaLangMath_minWithInt_withInt_(validIndexPrefix_, currentFrame_->prefix_);
    }
  }
  while (YES) {
    jlong prevTermOrd = ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->termOrd_;
    if ([currentFrame_ next]) {
      JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:nil withLong:currentFrame_->lastSubFP_ withInt:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) length] withLong:prevTermOrd]);
      ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->isFloor_ = NO;
      [currentFrame_ loadBlock];
    }
    else {
      positioned_ = YES;
      return [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) get];
    }
  }
}

- (OrgApacheLuceneUtilBytesRef *)term {
  JreAssert((!eof_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:899 condition failed: assert !eof;"));
  return [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) get];
}

- (jlong)ord {
  JreAssert((!eof_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:905 condition failed: assert !eof;"));
  JreAssert((((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->termOrd_ > 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:906 condition failed: assert currentFrame.termOrd > 0;"));
  return currentFrame_->termOrd_ - 1;
}

- (jint)docFreq {
  JreAssert((!eof_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:912 condition failed: assert !eof;"));
  [((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  return ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(currentFrame_->state_))->docFreq_;
}

- (jlong)totalTermFreq {
  JreAssert((!eof_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:921 condition failed: assert !eof;"));
  [((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  return ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(currentFrame_->state_))->totalTermFreq_;
}

- (OrgApacheLuceneIndexPostingsEnum *)postingsWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)reuse
                                                                           withInt:(jint)flags {
  if (OrgApacheLuceneIndexPostingsEnum_featureRequestedWithInt_withShort_(flags, OrgApacheLuceneIndexDocsAndPositionsEnum_OLD_NULL_SEMANTICS)) {
    if ([((OrgApacheLuceneIndexIndexOptionsEnum *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(fr_))->fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS_AND_POSITIONS)] < 0) {
      return nil;
    }
  }
  JreAssert((!eof_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:936 condition failed: assert !eof;"));
  [((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  return [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(fr_))->parent_))->postingsReader_)) postingsWithOrgApacheLuceneIndexFieldInfo:fr_->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:currentFrame_->state_ withOrgApacheLuceneIndexPostingsEnum:reuse withInt:flags];
}

- (void)seekExactWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target
               withOrgApacheLuceneIndexTermState:(OrgApacheLuceneIndexTermState *)otherState {
  JreAssert((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_clearEOF(self)), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:952 condition failed: assert clearEOF();"));
  if ([((OrgApacheLuceneUtilBytesRef *) nil_chk(target)) compareToWithId:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) get]] != 0 || !termExists_) {
    JreAssert((otherState != nil && [otherState isKindOfClass:[OrgApacheLuceneCodecsBlockTermState class]]), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:954 condition failed: assert otherState != null && otherState instanceof BlockTermState;"));
    OrgApacheLuceneCodecsBlockTermState *blockState = (OrgApacheLuceneCodecsBlockTermState *) check_class_cast(otherState, [OrgApacheLuceneCodecsBlockTermState class]);
    JreStrongAssign(&currentFrame_, staticFrame_);
    [((OrgApacheLuceneCodecsBlockTermState *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->state_)) copyFromWithOrgApacheLuceneIndexTermState:otherState];
    [term_ copyBytesWithOrgApacheLuceneUtilBytesRef:target];
    currentFrame_->metaDataUpto_ = [currentFrame_ getTermBlockOrd];
    currentFrame_->termOrd_ = ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(blockState))->ord_ + 1;
    JreAssert((currentFrame_->metaDataUpto_ > 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:961 condition failed: assert currentFrame.metaDataUpto > 0;"));
    validIndexPrefix_ = 0;
  }
  else {
  }
  positioned_ = YES;
}

- (OrgApacheLuceneIndexTermState *)termState {
  JreAssert((!eof_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:973 condition failed: assert !eof;"));
  [((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  OrgApacheLuceneCodecsBlockTermState *ts = (OrgApacheLuceneCodecsBlockTermState *) check_class_cast([((OrgApacheLuceneCodecsBlockTermState *) nil_chk(currentFrame_->state_)) clone], [OrgApacheLuceneCodecsBlockTermState class]);
  JreAssert((currentFrame_->termOrd_ > 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:976 condition failed: assert currentFrame.termOrd > 0;"));
  ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(ts))->ord_ = currentFrame_->termOrd_ - 1;
  return ts;
}

- (void)seekExactWithLong:(jlong)targetOrd {
  if (targetOrd < 0 || targetOrd >= ((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(fr_))->numTerms_) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J$JC", @"targetOrd out of bounds (got: ", targetOrd, @", numTerms=", ((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(fr_))->numTerms_, ')')) autorelease];
  }
  JreAssert((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_clearEOF(self)), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:989 condition failed: assert clearEOF();"));
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput *io = OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getByOutputWithLong_(self, targetOrd);
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) growWithInt:((OrgApacheLuceneUtilIntsRef *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput *) nil_chk(io))->input_))->length_];
  OrgApacheLuceneUtilFstUtil_toBytesRefWithOrgApacheLuceneUtilIntsRef_withOrgApacheLuceneUtilBytesRefBuilder_(io->input_, term_);
  if (io->input_->length_ == 0) {
    JreStrongAssign(&currentFrame_, staticFrame_);
  }
  else {
    JreStrongAssign(&currentFrame_, OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getFrameWithInt_(self, io->input_->length_ - 1));
  }
  OrgApacheLuceneUtilFstFST_Arc *arc = OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getArcWithInt_(self, io->input_->length_);
  targetBeforeCurrentLength_ = JavaLangInteger_MAX_VALUE;
  JreStrongAssign(&currentFrame_, [self pushFrameWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:io->output_ withInt:io->input_->length_]);
  if (((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(currentFrame_))->termOrd_ > targetOrd) {
    [currentFrame_ rewind];
  }
  [currentFrame_ scanToFloorFrameWithLong:targetOrd];
  [currentFrame_ loadBlock];
  while (currentFrame_->termOrd_ <= targetOrd) {
    [currentFrame_ next];
  }
  JreAssert((currentFrame_->termOrd_ == targetOrd + 1), (JreStrcat("$J$J", @"currentFrame.termOrd=", currentFrame_->termOrd_, @" vs ord=", targetOrd)));
  JreAssert((termExists_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:1020 condition failed: assert termExists;"));
  validIndexPrefix_ = 0;
  positioned_ = NO;
}

- (NSString *)description {
  return JreStrcat("$@C", @"OrdsSegmentTermsEnum(seg=", ((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(fr_))->parent_, ')');
}

- (OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput *)getByOutputWithLong:(jlong)targetOrd {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getByOutputWithLong_(self, targetOrd);
}

- (void)dealloc {
  RELEASE_(in_);
  RELEASE_(stack_);
  RELEASE_(staticFrame_);
  RELEASE_(currentFrame_);
  RELEASE_(fr_);
  RELEASE_(scratchReader_);
  RELEASE_(term_);
  RELEASE_(fstReader_);
  RELEASE_(arcs_);
  RELEASE_(arc_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader:", "OrdsSegmentTermsEnum", NULL, 0x0, "Ljava.io.IOException;", NULL },
    { "initIndexInput", NULL, "V", 0x0, NULL, NULL },
    { "getFrameWithInt:", "getFrame", "Lorg.apache.lucene.codecs.blocktreeords.OrdsSegmentTermsEnumFrame;", 0x2, "Ljava.io.IOException;", NULL },
    { "getArcWithInt:", "getArc", "Lorg.apache.lucene.util.fst.FST$Arc;", 0x2, NULL, NULL },
    { "pushFrameWithOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:withInt:", "pushFrame", "Lorg.apache.lucene.codecs.blocktreeords.OrdsSegmentTermsEnumFrame;", 0x0, "Ljava.io.IOException;", NULL },
    { "pushFrameWithOrgApacheLuceneUtilFstFST_Arc:withLong:withInt:withLong:", "pushFrame", "Lorg.apache.lucene.codecs.blocktreeords.OrdsSegmentTermsEnumFrame;", 0x0, "Ljava.io.IOException;", NULL },
    { "clearEOF", NULL, "Z", 0x2, NULL, NULL },
    { "setEOF", NULL, "Z", 0x2, NULL, NULL },
    { "brToStringWithOrgApacheLuceneUtilBytesRef:", "brToString", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "seekExactWithOrgApacheLuceneUtilBytesRef:", "seekExact", "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "seekCeilWithOrgApacheLuceneUtilBytesRef:", "seekCeil", "Lorg.apache.lucene.index.TermsEnum$SeekStatus;", 0x1, "Ljava.io.IOException;", NULL },
    { "printSeekStateWithJavaIoPrintStream:", "printSeekState", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "next", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, "Ljava.io.IOException;", NULL },
    { "term", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, NULL, NULL },
    { "ord", NULL, "J", 0x1, NULL, NULL },
    { "docFreq", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "totalTermFreq", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "postingsWithOrgApacheLuceneIndexPostingsEnum:withInt:", "postings", "Lorg.apache.lucene.index.PostingsEnum;", 0x1, "Ljava.io.IOException;", NULL },
    { "seekExactWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneIndexTermState:", "seekExact", "V", 0x1, NULL, NULL },
    { "termState", NULL, "Lorg.apache.lucene.index.TermState;", 0x1, "Ljava.io.IOException;", NULL },
    { "seekExactWithLong:", "seekExact", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getByOutputWithLong:", "getByOutput", "Lorg.apache.lucene.codecs.blocktreeords.OrdsSegmentTermsEnum$InputOutput;", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "in_", NULL, 0x0, "Lorg.apache.lucene.store.IndexInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "stack_", NULL, 0x2, "[Lorg.apache.lucene.codecs.blocktreeords.OrdsSegmentTermsEnumFrame;", NULL, NULL, .constantValue.asLong = 0 },
    { "staticFrame_", NULL, 0x12, "Lorg.apache.lucene.codecs.blocktreeords.OrdsSegmentTermsEnumFrame;", NULL, NULL, .constantValue.asLong = 0 },
    { "currentFrame_", NULL, 0x0, "Lorg.apache.lucene.codecs.blocktreeords.OrdsSegmentTermsEnumFrame;", NULL, NULL, .constantValue.asLong = 0 },
    { "termExists_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "fr_", NULL, 0x10, "Lorg.apache.lucene.codecs.blocktreeords.OrdsFieldReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "targetBeforeCurrentLength_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "scratchReader_", NULL, 0x12, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "validIndexPrefix_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "eof_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "term_", NULL, 0x10, "Lorg.apache.lucene.util.BytesRefBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "fstReader_", NULL, 0x12, "Lorg.apache.lucene.util.fst.FST$BytesReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "arcs_", NULL, 0x2, "[Lorg.apache.lucene.util.fst.FST$Arc;", NULL, "[Lorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/codecs/blocktreeords/FSTOrdsOutputs$Output;>;", .constantValue.asLong = 0 },
    { "positioned_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "arc_", NULL, 0x12, "Lorg.apache.lucene.util.fst.FST$Arc;", NULL, "Lorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/codecs/blocktreeords/FSTOrdsOutputs$Output;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.codecs.blocktreeords.OrdsSegmentTermsEnum$InputOutput;"};
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum = { 2, "OrdsSegmentTermsEnum", "org.apache.lucene.codecs.blocktreeords", NULL, 0x11, 23, methods, 15, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum;
}

@end

void OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader_(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *self, OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *fr) {
  OrgApacheLuceneIndexTermsEnum_init(self);
  JreStrongAssignAndConsume(&self->scratchReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  JreStrongAssignAndConsume(&self->term_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  JreStrongAssignAndConsume(&self->arcs_, [IOSObjectArray newArrayWithLength:1 type:OrgApacheLuceneUtilFstFST_Arc_class_()]);
  JreStrongAssignAndConsume(&self->arc_, new_OrgApacheLuceneUtilFstFST_Arc_init());
  JreStrongAssign(&self->fr_, fr);
  JreStrongAssignAndConsume(&self->stack_, [IOSObjectArray newArrayWithLength:0 type:OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_class_()]);
  JreStrongAssignAndConsume(&self->staticFrame_, new_OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_withInt_(self, -1));
  if (((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(fr))->index_ == nil) {
    JreStrongAssign(&self->fstReader_, nil);
  }
  else {
    JreStrongAssign(&self->fstReader_, [fr->index_ getBytesReader]);
  }
  for (jint arcIdx = 0; arcIdx < self->arcs_->size_; arcIdx++) {
    IOSObjectArray_SetAndConsume(self->arcs_, arcIdx, new_OrgApacheLuceneUtilFstFST_Arc_init());
  }
  JreStrongAssign(&self->currentFrame_, self->staticFrame_);
  OrgApacheLuceneUtilFstFST_Arc *arc;
  if (fr->index_ != nil) {
    arc = [fr->index_ getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:IOSObjectArray_Get(self->arcs_, 0)];
    JreAssert(([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:103 condition failed: assert arc.isFinal();"));
  }
  else {
    arc = nil;
  }
  self->validIndexPrefix_ = 0;
}

OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *new_OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader_(OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *fr) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *self = [OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum alloc];
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader_(self, fr);
  return self;
}

OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getFrameWithInt_(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *self, jint ord) {
  if (ord >= ((IOSObjectArray *) nil_chk(self->stack_))->size_) {
    IOSObjectArray *next = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(1 + ord, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF_)) type:OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->stack_, 0, next, 0, self->stack_->size_);
    for (jint stackOrd = self->stack_->size_; stackOrd < next->size_; stackOrd++) {
      IOSObjectArray_SetAndConsume(next, stackOrd, new_OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_withInt_(self, stackOrd));
    }
    JreStrongAssign(&self->stack_, next);
  }
  JreAssert((((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(IOSObjectArray_Get(self->stack_, ord)))->ord_ == ord), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:135 condition failed: assert stack[ord].ord == ord;"));
  return IOSObjectArray_Get(self->stack_, ord);
}

OrgApacheLuceneUtilFstFST_Arc *OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getArcWithInt_(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *self, jint ord) {
  if (ord >= ((IOSObjectArray *) nil_chk(self->arcs_))->size_) {
    IOSObjectArray *next = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(1 + ord, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF_)) type:OrgApacheLuceneUtilFstFST_Arc_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->arcs_, 0, next, 0, self->arcs_->size_);
    for (jint arcOrd = self->arcs_->size_; arcOrd < next->size_; arcOrd++) {
      IOSObjectArray_SetAndConsume(next, arcOrd, new_OrgApacheLuceneUtilFstFST_Arc_init());
    }
    JreStrongAssign(&self->arcs_, next);
  }
  return IOSObjectArray_Get(self->arcs_, ord);
}

jboolean OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_clearEOF(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *self) {
  self->eof_ = NO;
  return YES;
}

jboolean OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_setEOF(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *self) {
  self->eof_ = YES;
  return YES;
}

NSString *OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_brToStringWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *b) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_initialize();
  @try {
    return JreStrcat("$C@", [((OrgApacheLuceneUtilBytesRef *) nil_chk(b)) utf8ToString], ' ', b);
  }
  @catch (JavaLangThrowable *t) {
    return [((OrgApacheLuceneUtilBytesRef *) nil_chk(b)) description];
  }
}

OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput *OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_getByOutputWithLong_(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *self, jlong targetOrd) {
  OrgApacheLuceneUtilIntsRefBuilder *result = [new_OrgApacheLuceneUtilIntsRefBuilder_init() autorelease];
  [((OrgApacheLuceneUtilFstFST *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(self->fr_))->index_)) getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:self->arc_];
  OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *output = ((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *) ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(self->arc_))->output_);
  jint upto = 0;
  jint bestUpto = 0;
  OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *bestOutput = nil;
  while (YES) {
    if ([self->arc_ isFinal]) {
      OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *finalOutput = [((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) addWithId:output withId:self->arc_->nextFinalOutput_];
      if (targetOrd >= ((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *) nil_chk(finalOutput))->startOrd_ && targetOrd <= JavaLangLong_MAX_VALUE - finalOutput->endOrd_) {
        bestOutput = finalOutput;
        bestUpto = upto;
      }
    }
    if (OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(self->arc_)) {
      [result growWithInt:1 + upto];
      [self->fr_->index_ readFirstRealTargetArcWithLong:self->arc_->target_ withOrgApacheLuceneUtilFstFST_Arc:self->arc_ withOrgApacheLuceneUtilFstFST_BytesReader:self->fstReader_];
      if (self->arc_->bytesPerArc_ != 0) {
        jint low = 0;
        jint high = self->arc_->numArcs_ - 1;
        jint mid = 0;
        jboolean found = NO;
        while (low <= high) {
          mid = JreURShift32((low + high), 1);
          [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(self->fstReader_)) setPositionWithLong:self->arc_->posArcsStart_];
          [self->fstReader_ skipBytesWithLong:self->arc_->bytesPerArc_ * mid];
          jbyte flags = [self->fstReader_ readByte];
          [self->fr_->index_ readLabelWithOrgApacheLuceneStoreDataInput:self->fstReader_];
          OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *minArcOutput;
          if ((flags & OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT) != 0) {
            minArcOutput = [JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_) addWithId:output withId:[((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) readWithOrgApacheLuceneStoreDataInput:self->fstReader_]];
          }
          else {
            minArcOutput = output;
          }
          if (targetOrd > JavaLangLong_MAX_VALUE - ((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *) nil_chk(minArcOutput))->endOrd_) {
            low = mid + 1;
          }
          else if (targetOrd < minArcOutput->startOrd_) {
            high = mid - 1;
          }
          else {
            found = YES;
            break;
          }
        }
        if (found) {
          self->arc_->arcIdx_ = mid - 1;
        }
        else {
          [result setLengthWithInt:bestUpto];
          OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput *io = [new_OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput_init() autorelease];
          JreStrongAssign(&io->input_, [result get]);
          JreStrongAssign(&io->output_, bestOutput);
          return io;
        }
        [self->fr_->index_ readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:self->arc_ withOrgApacheLuceneUtilFstFST_BytesReader:self->fstReader_];
        [result setIntAtWithInt:upto++ withInt:self->arc_->label_];
        output = [((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) addWithId:output withId:self->arc_->output_];
      }
      else {
        while (YES) {
          OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *minArcOutput = [((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) addWithId:output withId:self->arc_->output_];
          jlong endOrd = JavaLangLong_MAX_VALUE - ((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *) nil_chk(minArcOutput))->endOrd_;
          if (targetOrd >= minArcOutput->startOrd_ && targetOrd <= endOrd) {
            output = minArcOutput;
            [result setIntAtWithInt:upto++ withInt:self->arc_->label_];
            break;
          }
          else if (targetOrd < endOrd || [self->arc_ isLast]) {
            [result setLengthWithInt:bestUpto];
            OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput *io = [new_OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput_init() autorelease];
            JreStrongAssign(&io->input_, [result get]);
            JreAssert((bestOutput != nil), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.java:1156 condition failed: assert bestOutput != null;"));
            JreStrongAssign(&io->output_, bestOutput);
            return io;
          }
          else {
            [self->fr_->index_ readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:self->arc_ withOrgApacheLuceneUtilFstFST_BytesReader:self->fstReader_];
          }
        }
      }
    }
    else {
      [result setLengthWithInt:bestUpto];
      OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput *io = [new_OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput_init() autorelease];
      JreStrongAssign(&io->input_, [result get]);
      JreStrongAssign(&io->output_, bestOutput);
      return io;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum)

@implementation OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput

- (NSString *)description {
  return JreStrcat("$@$@C", @"InputOutput(input=", input_, @" output=", output_, ')');
}

- (instancetype)init {
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(input_);
  RELEASE_(output_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "input_", NULL, 0x1, "Lorg.apache.lucene.util.IntsRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "output_", NULL, 0x1, "Lorg.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs$Output;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput = { 2, "InputOutput", "org.apache.lucene.codecs.blocktreeords", "OrdsSegmentTermsEnum", 0xa, 2, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput;
}

@end

void OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput_init(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput *self) {
  NSObject_init(self);
}

OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput *new_OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput_init() {
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput *self = [OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput alloc];
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_InputOutput)
