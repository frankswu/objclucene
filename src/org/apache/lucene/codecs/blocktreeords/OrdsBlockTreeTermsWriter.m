//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.h"
#include "org/apache/lucene/codecs/blocktreeords/FSTOrdsOutputs.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/RAMOutputStream.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Util.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

@interface OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter () {
 @public
  OrgApacheLuceneStoreIndexOutput *out_;
  OrgApacheLuceneStoreIndexOutput *indexOut_;
  id<JavaUtilList> fields_;
  OrgApacheLuceneStoreRAMOutputStream *scratchBytes_;
  OrgApacheLuceneUtilIntsRefBuilder *scratchIntsRef_;
  jboolean closed_;
}

+ (void)writeBytesRefWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg
                         withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, out_, OrgApacheLuceneStoreIndexOutput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, indexOut_, OrgApacheLuceneStoreIndexOutput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, fields_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, scratchBytes_, OrgApacheLuceneStoreRAMOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, scratchIntsRef_, OrgApacheLuceneUtilIntsRefBuilder *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneStoreIndexOutput *outArg, OrgApacheLuceneUtilBytesRef *bytes);

@interface OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData : NSObject {
 @public
  OrgApacheLuceneIndexFieldInfo *fieldInfo_;
  OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *rootCode_;
  jlong numTerms_;
  jlong indexStartFP_;
  jlong sumTotalTermFreq_;
  jlong sumDocFreq_;
  jint docCount_;
  jint longsSize_;
  OrgApacheLuceneUtilBytesRef *minTerm_;
  OrgApacheLuceneUtilBytesRef *maxTerm_;
}

- (instancetype)initWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:(OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *)rootCode
                                             withLong:(jlong)numTerms
                                             withLong:(jlong)indexStartFP
                                             withLong:(jlong)sumTotalTermFreq
                                             withLong:(jlong)sumDocFreq
                                              withInt:(jint)docCount
                                              withInt:(jint)longsSize
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)minTerm
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)maxTerm;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData, fieldInfo_, OrgApacheLuceneIndexFieldInfo *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData, rootCode_, OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData, minTerm_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData, maxTerm_, OrgApacheLuceneUtilBytesRef *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData *self, OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *rootCode, jlong numTerms, jlong indexStartFP, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData *new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *rootCode, jlong numTerms, jlong indexStartFP, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData)

@interface OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry : NSObject {
 @public
  jboolean isTerm_;
}

- (instancetype)initWithBoolean:(jboolean)isTerm;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry_initWithBoolean_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry *self, jboolean isTerm);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry *new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry_initWithBoolean_(jboolean isTerm) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry)

@interface OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm : OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry {
 @public
  IOSByteArray *termBytes_;
  OrgApacheLuceneCodecsBlockTermState *state_;
}

- (instancetype)initWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term
            withOrgApacheLuceneCodecsBlockTermState:(OrgApacheLuceneCodecsBlockTermState *)state;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm, termBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm, state_, OrgApacheLuceneCodecsBlockTermState *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *self, OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm)

@interface OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex : NSObject {
 @public
  OrgApacheLuceneUtilFstFST *index_;
  jlong termOrdStart_;
}

- (instancetype)initWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)index
                                         withLong:(jlong)termOrdStart;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex, index_, OrgApacheLuceneUtilFstFST *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex_initWithOrgApacheLuceneUtilFstFST_withLong_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex *self, OrgApacheLuceneUtilFstFST *index, jlong termOrdStart);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex *new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex_initWithOrgApacheLuceneUtilFstFST_withLong_(OrgApacheLuceneUtilFstFST *index, jlong termOrdStart) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex)

@interface OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock : OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry {
 @public
  OrgApacheLuceneUtilBytesRef *prefix_;
  jlong fp_;
  OrgApacheLuceneUtilFstFST *index_;
  id<JavaUtilList> subIndices_;
  jboolean hasTerms_;
  jboolean isFloor_;
  jint floorLeadByte_;
  jlong totFloorTermCount_;
  jlong totalTermCount_;
}

- (instancetype)initWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)prefix
                                           withLong:(jlong)fp
                                        withBoolean:(jboolean)hasTerms
                                           withLong:(jlong)totalTermCount
                                        withBoolean:(jboolean)isFloor
                                            withInt:(jint)floorLeadByte
                                   withJavaUtilList:(id<JavaUtilList>)subIndices;

- (NSString *)description;

- (void)compileIndexWithJavaUtilList:(id<JavaUtilList>)blocks
withOrgApacheLuceneStoreRAMOutputStream:(OrgApacheLuceneStoreRAMOutputStream *)scratchBytes
withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratchIntsRef;

- (void)appendWithOrgApacheLuceneUtilFstBuilder:(OrgApacheLuceneUtilFstBuilder *)builder
                  withOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)subIndex
                                       withLong:(jlong)termOrdOffset
          withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratchIntsRef;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock, prefix_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock, index_, OrgApacheLuceneUtilFstFST *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock, subIndices_, id<JavaUtilList>)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withLong_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *self, OrgApacheLuceneUtilBytesRef *prefix, jlong fp, jboolean hasTerms, jlong totalTermCount, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withLong_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneUtilBytesRef *prefix, jlong fp, jboolean hasTerms, jlong totalTermCount, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock_appendWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstFST_withLong_withOrgApacheLuceneUtilIntsRefBuilder_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *self, OrgApacheLuceneUtilFstBuilder *builder, OrgApacheLuceneUtilFstFST *subIndex, jlong termOrdOffset, OrgApacheLuceneUtilIntsRefBuilder *scratchIntsRef);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock)

@interface OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter () {
 @public
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter *this$0_;
  OrgApacheLuceneIndexFieldInfo *fieldInfo_;
  jint longsSize_;
  jlong numTerms_;
  OrgApacheLuceneUtilBytesRefBuilder *lastTerm_;
  IOSIntArray *prefixStarts_;
  IOSLongArray *longs_;
  id<JavaUtilList> pending_;
  id<JavaUtilList> newBlocks_;
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *firstPendingTerm_;
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *lastPendingTerm_;
  OrgApacheLuceneStoreRAMOutputStream *suffixWriter_;
  OrgApacheLuceneStoreRAMOutputStream *statsWriter_;
  OrgApacheLuceneStoreRAMOutputStream *metaWriter_;
  OrgApacheLuceneStoreRAMOutputStream *bytesWriter_;
}

- (OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *)writeBlockWithInt:(jint)prefixLength
                                                                                   withBoolean:(jboolean)isFloor
                                                                                       withInt:(jint)floorLeadLabel
                                                                                       withInt:(jint)start
                                                                                       withInt:(jint)end
                                                                                   withBoolean:(jboolean)hasTerms
                                                                                   withBoolean:(jboolean)hasSubBlocks;

- (void)pushTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter, this$0_, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter, fieldInfo_, OrgApacheLuceneIndexFieldInfo *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter, lastTerm_, OrgApacheLuceneUtilBytesRefBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter, prefixStarts_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter, longs_, IOSLongArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter, pending_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter, newBlocks_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter, firstPendingTerm_, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter, lastPendingTerm_, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter, suffixWriter_, OrgApacheLuceneStoreRAMOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter, statsWriter_, OrgApacheLuceneStoreRAMOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter, metaWriter_, OrgApacheLuceneStoreRAMOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter, bytesWriter_, OrgApacheLuceneStoreRAMOutputStream *)

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter *self, jint prefixLength, jboolean isFloor, jint floorLeadLabel, jint start, jint end, jboolean hasTerms, jboolean hasSubBlocks);

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter *self, OrgApacheLuceneUtilBytesRef *text);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter)

OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FST_OUTPUTS_;
OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_NO_OUTPUT_;
NSString *OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TERMS_EXTENSION_ = @"tio";
NSString *OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TERMS_CODEC_NAME_ = @"OrdsBlockTreeTerms";
NSString *OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TERMS_INDEX_EXTENSION_ = @"tipo";
NSString *OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TERMS_INDEX_CODEC_NAME_ = @"OrdsBlockTreeIndex";

@implementation OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter

- (instancetype)initWithOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state
                  withOrgApacheLuceneCodecsPostingsWriterBase:(OrgApacheLuceneCodecsPostingsWriterBase *)postingsWriter
                                                      withInt:(jint)minItemsInBlock
                                                      withInt:(jint)maxItemsInBlock {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_(self, state, postingsWriter, minItemsInBlock, maxItemsInBlock);
  return self;
}

- (void)writeWithOrgApacheLuceneIndexFields:(OrgApacheLuceneIndexFields *)fields {
  NSString *lastField = nil;
  for (NSString * __strong field in nil_chk(fields)) {
    JreAssert((lastField == nil || [lastField compareToWithId:field] < 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:221 condition failed: assert lastField == null || lastField.compareTo(field) < 0;"));
    lastField = field;
    OrgApacheLuceneIndexTerms *terms = [fields termsWithNSString:field];
    if (terms == nil) {
      continue;
    }
    OrgApacheLuceneIndexTermsEnum *termsEnum = [((OrgApacheLuceneIndexTerms *) nil_chk(terms)) iterator];
    OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter *termsWriter = [new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(self, [((OrgApacheLuceneIndexFieldInfos *) nil_chk(fieldInfos_)) fieldInfoWithNSString:field]) autorelease];
    while (YES) {
      OrgApacheLuceneUtilBytesRef *term = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) next];
      if (term == nil) {
        break;
      }
      [termsWriter writeWithOrgApacheLuceneUtilBytesRef:term withOrgApacheLuceneIndexTermsEnum:termsEnum];
    }
    [termsWriter finish];
  }
}

+ (jlong)encodeOutputWithLong:(jlong)fp
                  withBoolean:(jboolean)hasTerms
                  withBoolean:(jboolean)isFloor {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_encodeOutputWithLong_withBoolean_withBoolean_(fp, hasTerms, isFloor);
}

+ (NSString *)brToStringWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)b {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_(b);
}

+ (NSString *)brToStringWithByteArray:(IOSByteArray *)b {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_brToStringWithByteArray_(b);
}

- (void)close {
  if (closed_) {
    return;
  }
  closed_ = YES;
  jboolean success = NO;
  @try {
    jlong dirStart = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(out_)) getFilePointer];
    jlong indexDirStart = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(indexOut_)) getFilePointer];
    [out_ writeVIntWithInt:[((id<JavaUtilList>) nil_chk(fields_)) size]];
    for (OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData * __strong field in fields_) {
      [out_ writeVIntWithInt:((OrgApacheLuceneIndexFieldInfo *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData *) nil_chk(field))->fieldInfo_))->number_];
      JreAssert((field->numTerms_ > 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:915 condition failed: assert field.numTerms > 0;"));
      [out_ writeVLongWithLong:field->numTerms_];
      [out_ writeVIntWithInt:((OrgApacheLuceneUtilBytesRef *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *) nil_chk(field->rootCode_))->bytes_))->length_];
      [out_ writeBytesWithByteArray:field->rootCode_->bytes_->bytes_ withInt:field->rootCode_->bytes_->offset_ withInt:field->rootCode_->bytes_->length_];
      if ([field->fieldInfo_ getIndexOptions] != JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS)) {
        [out_ writeVLongWithLong:field->sumTotalTermFreq_];
      }
      [out_ writeVLongWithLong:field->sumDocFreq_];
      [out_ writeVIntWithInt:field->docCount_];
      [out_ writeVIntWithInt:field->longsSize_];
      [indexOut_ writeVLongWithLong:field->indexStartFP_];
      OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(out_, field->minTerm_);
      OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(out_, field->maxTerm_);
    }
    [out_ writeLongWithLong:dirStart];
    OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(out_);
    [indexOut_ writeLongWithLong:indexDirStart];
    OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(indexOut_);
    success = YES;
  }
  @finally {
    if (success) {
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ out_, indexOut_, postingsWriter_ } count:3 type:JavaIoCloseable_class_()]);
    }
    else {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ out_, indexOut_, postingsWriter_ } count:3 type:JavaIoCloseable_class_()]);
    }
  }
}

+ (void)writeBytesRefWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg
                         withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(outArg, bytes);
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(indexOut_);
  RELEASE_(postingsWriter_);
  RELEASE_(fieldInfos_);
  RELEASE_(fields_);
  RELEASE_(scratchBytes_);
  RELEASE_(scratchIntsRef_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FST_OUTPUTS_, new_OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_init());
    JreStrongAssign(&OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_NO_OUTPUT_, [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FST_OUTPUTS_ getNoOutput]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexSegmentWriteState:withOrgApacheLuceneCodecsPostingsWriterBase:withInt:withInt:", "OrdsBlockTreeTermsWriter", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "writeWithOrgApacheLuceneIndexFields:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "encodeOutputWithLong:withBoolean:withBoolean:", "encodeOutput", "J", 0x8, NULL, NULL },
    { "brToStringWithOrgApacheLuceneUtilBytesRef:", "brToString", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "brToStringWithByteArray:", "brToString", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeBytesRefWithOrgApacheLuceneStoreIndexOutput:withOrgApacheLuceneUtilBytesRef:", "writeBytesRef", "V", 0xa, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FST_OUTPUTS_", NULL, 0x18, "Lorg.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs;", &OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FST_OUTPUTS_, NULL, .constantValue.asLong = 0 },
    { "NO_OUTPUT_", NULL, 0x18, "Lorg.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs$Output;", &OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_NO_OUTPUT_, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_MIN_BLOCK_SIZE", "DEFAULT_MIN_BLOCK_SIZE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_DEFAULT_MIN_BLOCK_SIZE },
    { "DEFAULT_MAX_BLOCK_SIZE", "DEFAULT_MAX_BLOCK_SIZE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_DEFAULT_MAX_BLOCK_SIZE },
    { "OUTPUT_FLAGS_NUM_BITS", "OUTPUT_FLAGS_NUM_BITS", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAGS_NUM_BITS },
    { "OUTPUT_FLAGS_MASK", "OUTPUT_FLAGS_MASK", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAGS_MASK },
    { "OUTPUT_FLAG_IS_FLOOR", "OUTPUT_FLAG_IS_FLOOR", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAG_IS_FLOOR },
    { "OUTPUT_FLAG_HAS_TERMS", "OUTPUT_FLAG_HAS_TERMS", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAG_HAS_TERMS },
    { "TERMS_EXTENSION_", NULL, 0x18, "Ljava.lang.String;", &OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TERMS_EXTENSION_, NULL, .constantValue.asLong = 0 },
    { "TERMS_CODEC_NAME_", NULL, 0x18, "Ljava.lang.String;", &OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TERMS_CODEC_NAME_, NULL, .constantValue.asLong = 0 },
    { "VERSION_START", "VERSION_START", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_VERSION_START },
    { "VERSION_CURRENT", "VERSION_CURRENT", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_VERSION_CURRENT },
    { "TERMS_INDEX_EXTENSION_", NULL, 0x18, "Ljava.lang.String;", &OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TERMS_INDEX_EXTENSION_, NULL, .constantValue.asLong = 0 },
    { "TERMS_INDEX_CODEC_NAME_", NULL, 0x18, "Ljava.lang.String;", &OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TERMS_INDEX_CODEC_NAME_, NULL, .constantValue.asLong = 0 },
    { "out_", NULL, 0x12, "Lorg.apache.lucene.store.IndexOutput;", NULL, NULL, .constantValue.asLong = 0 },
    { "indexOut_", NULL, 0x12, "Lorg.apache.lucene.store.IndexOutput;", NULL, NULL, .constantValue.asLong = 0 },
    { "maxDoc_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "minItemsInBlock_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "maxItemsInBlock_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "postingsWriter_", NULL, 0x10, "Lorg.apache.lucene.codecs.PostingsWriterBase;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldInfos_", NULL, 0x10, "Lorg.apache.lucene.index.FieldInfos;", NULL, NULL, .constantValue.asLong = 0 },
    { "fields_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter$FieldMetaData;>;", .constantValue.asLong = 0 },
    { "scratchBytes_", NULL, 0x12, "Lorg.apache.lucene.store.RAMOutputStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "scratchIntsRef_", NULL, 0x12, "Lorg.apache.lucene.util.IntsRefBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "closed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.codecs.blocktreeords.OrdsBlockTreeTermsWriter$FieldMetaData;", "Lorg.apache.lucene.codecs.blocktreeords.OrdsBlockTreeTermsWriter$PendingEntry;", "Lorg.apache.lucene.codecs.blocktreeords.OrdsBlockTreeTermsWriter$PendingTerm;", "Lorg.apache.lucene.codecs.blocktreeords.OrdsBlockTreeTermsWriter$SubIndex;", "Lorg.apache.lucene.codecs.blocktreeords.OrdsBlockTreeTermsWriter$PendingBlock;", "Lorg.apache.lucene.codecs.blocktreeords.OrdsBlockTreeTermsWriter$TermsWriter;"};
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter = { 2, "OrdsBlockTreeTermsWriter", "org.apache.lucene.codecs.blocktreeords", NULL, 0x11, 7, methods, 25, fields, 0, NULL, 6, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter;
}

@end

void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter *self, OrgApacheLuceneIndexSegmentWriteState *state, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter, jint minItemsInBlock, jint maxItemsInBlock) {
  OrgApacheLuceneCodecsFieldsConsumer_init(self);
  JreStrongAssignAndConsume(&self->fields_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->scratchBytes_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssignAndConsume(&self->scratchIntsRef_, new_OrgApacheLuceneUtilIntsRefBuilder_init());
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_validateSettingsWithInt_withInt_(minItemsInBlock, maxItemsInBlock);
  self->maxDoc_ = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentWriteState *) nil_chk(state))->segmentInfo_)) maxDoc];
  NSString *termsFileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(state->segmentInfo_->name_, state->segmentSuffix_, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TERMS_EXTENSION_);
  JreStrongAssign(&self->out_, [((OrgApacheLuceneStoreDirectory *) nil_chk(state->directory_)) createOutputWithNSString:termsFileName withOrgApacheLuceneStoreIOContext:state->context_]);
  jboolean success = NO;
  OrgApacheLuceneStoreIndexOutput *indexOut = nil;
  @try {
    JreStrongAssign(&self->fieldInfos_, state->fieldInfos_);
    self->minItemsInBlock_ = minItemsInBlock;
    self->maxItemsInBlock_ = maxItemsInBlock;
    OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(self->out_, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TERMS_CODEC_NAME_, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_VERSION_CURRENT, [state->segmentInfo_ getId], state->segmentSuffix_);
    NSString *termsIndexFileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(state->segmentInfo_->name_, state->segmentSuffix_, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TERMS_INDEX_EXTENSION_);
    indexOut = [state->directory_ createOutputWithNSString:termsIndexFileName withOrgApacheLuceneStoreIOContext:state->context_];
    OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(indexOut, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TERMS_INDEX_CODEC_NAME_, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_VERSION_CURRENT, [state->segmentInfo_ getId], state->segmentSuffix_);
    JreStrongAssign(&self->postingsWriter_, postingsWriter);
    [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(postingsWriter)) init__WithOrgApacheLuceneStoreIndexOutput:self->out_ withOrgApacheLuceneIndexSegmentWriteState:state];
    success = YES;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->out_, indexOut } count:2 type:JavaIoCloseable_class_()]);
    }
  }
  JreStrongAssign(&self->indexOut_, indexOut);
}

OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter *new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_(OrgApacheLuceneIndexSegmentWriteState *state, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter, jint minItemsInBlock, jint maxItemsInBlock) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter *self = [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter alloc];
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_(self, state, postingsWriter, minItemsInBlock, maxItemsInBlock);
  return self;
}

jlong OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_encodeOutputWithLong_withBoolean_withBoolean_(jlong fp, jboolean hasTerms, jboolean isFloor) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_initialize();
  JreAssert((fp < (JreLShift64(1LL, 62))), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:245 condition failed: assert fp < (1L << 62);"));
  return (JreLShift64(fp, 2)) | (hasTerms ? OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAG_HAS_TERMS : 0) | (isFloor ? OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_OUTPUT_FLAG_IS_FLOOR : 0);
}

NSString *OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *b) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_initialize();
  @try {
    return JreStrcat("$C@", [((OrgApacheLuceneUtilBytesRef *) nil_chk(b)) utf8ToString], ' ', b);
  }
  @catch (JavaLangThrowable *t) {
    return [((OrgApacheLuceneUtilBytesRef *) nil_chk(b)) description];
  }
}

NSString *OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_brToStringWithByteArray_(IOSByteArray *b) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_initialize();
  return OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_([new_OrgApacheLuceneUtilBytesRef_initWithByteArray_(b) autorelease]);
}

void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneStoreIndexOutput *outArg, OrgApacheLuceneUtilBytesRef *bytes) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_initialize();
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(outArg)) writeVIntWithInt:((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes))->length_];
  [outArg writeBytesWithByteArray:bytes->bytes_ withInt:bytes->offset_ withInt:bytes->length_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter)

@implementation OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData

- (instancetype)initWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:(OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *)rootCode
                                             withLong:(jlong)numTerms
                                             withLong:(jlong)indexStartFP
                                             withLong:(jlong)sumTotalTermFreq
                                             withLong:(jlong)sumDocFreq
                                              withInt:(jint)docCount
                                              withInt:(jint)longsSize
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)minTerm
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)maxTerm {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(self, fieldInfo, rootCode, numTerms, indexStartFP, sumTotalTermFreq, sumDocFreq, docCount, longsSize, minTerm, maxTerm);
  return self;
}

- (void)dealloc {
  RELEASE_(fieldInfo_);
  RELEASE_(rootCode_);
  RELEASE_(minTerm_);
  RELEASE_(maxTerm_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexFieldInfo:withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output:withLong:withLong:withLong:withLong:withInt:withInt:withOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:", "FieldMetaData", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fieldInfo_", NULL, 0x11, "Lorg.apache.lucene.index.FieldInfo;", NULL, NULL, .constantValue.asLong = 0 },
    { "rootCode_", NULL, 0x11, "Lorg.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs$Output;", NULL, NULL, .constantValue.asLong = 0 },
    { "numTerms_", NULL, 0x11, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "indexStartFP_", NULL, 0x11, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "sumTotalTermFreq_", NULL, 0x11, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "sumDocFreq_", NULL, 0x11, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "docCount_", NULL, 0x11, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "longsSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "minTerm_", NULL, 0x11, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "maxTerm_", NULL, 0x11, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData = { 2, "FieldMetaData", "org.apache.lucene.codecs.blocktreeords", "OrdsBlockTreeTermsWriter", 0xa, 1, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData;
}

@end

void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData *self, OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *rootCode, jlong numTerms, jlong indexStartFP, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  NSObject_init(self);
  JreAssert((numTerms > 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:153 condition failed: assert numTerms > 0;"));
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  JreAssert((rootCode != nil), (JreStrcat("$$$J", @"field=", ((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo))->name_, @" numTerms=", numTerms)));
  JreStrongAssign(&self->rootCode_, rootCode);
  self->indexStartFP_ = indexStartFP;
  self->numTerms_ = numTerms;
  self->sumTotalTermFreq_ = sumTotalTermFreq;
  self->sumDocFreq_ = sumDocFreq;
  self->docCount_ = docCount;
  self->longsSize_ = longsSize;
  JreStrongAssign(&self->minTerm_, minTerm);
  JreStrongAssign(&self->maxTerm_, maxTerm);
}

OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData *new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *rootCode, jlong numTerms, jlong indexStartFP, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData *self = [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData alloc];
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(self, fieldInfo, rootCode, numTerms, indexStartFP, sumTotalTermFreq, sumDocFreq, docCount, longsSize, minTerm, maxTerm);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData)

@implementation OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry

- (instancetype)initWithBoolean:(jboolean)isTerm {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry_initWithBoolean_(self, isTerm);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:", "PendingEntry", NULL, 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isTerm_", NULL, 0x11, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry = { 2, "PendingEntry", "org.apache.lucene.codecs.blocktreeords", "OrdsBlockTreeTermsWriter", 0xa, 1, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry;
}

@end

void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry_initWithBoolean_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry *self, jboolean isTerm) {
  NSObject_init(self);
  self->isTerm_ = isTerm;
}

OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry *new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry_initWithBoolean_(jboolean isTerm) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry *self = [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry alloc];
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry_initWithBoolean_(self, isTerm);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry)

@implementation OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm

- (instancetype)initWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term
            withOrgApacheLuceneCodecsBlockTermState:(OrgApacheLuceneCodecsBlockTermState *)state {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(self, term, state);
  return self;
}

- (NSString *)description {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_brToStringWithByteArray_(termBytes_);
}

- (void)dealloc {
  RELEASE_(termBytes_);
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneCodecsBlockTermState:", "PendingTerm", NULL, 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "termBytes_", NULL, 0x11, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "state_", NULL, 0x11, "Lorg.apache.lucene.codecs.BlockTermState;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm = { 2, "PendingTerm", "org.apache.lucene.codecs.blocktreeords", "OrdsBlockTreeTermsWriter", 0x1a, 2, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm;
}

@end

void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *self, OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry_initWithBoolean_(self, YES);
  JreStrongAssignAndConsume(&self->termBytes_, [IOSByteArray newArrayWithLength:((OrgApacheLuceneUtilBytesRef *) nil_chk(term))->length_]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(term->bytes_, term->offset_, self->termBytes_, 0, term->length_);
  JreStrongAssign(&self->state_, state);
}

OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *self = [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm alloc];
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(self, term, state);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm)

@implementation OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex

- (instancetype)initWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)index
                                         withLong:(jlong)termOrdStart {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex_initWithOrgApacheLuceneUtilFstFST_withLong_(self, index, termOrdStart);
  return self;
}

- (void)dealloc {
  RELEASE_(index_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneUtilFstFST:withLong:", "SubIndex", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "index_", NULL, 0x11, "Lorg.apache.lucene.util.fst.FST;", NULL, "Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/codecs/blocktreeords/FSTOrdsOutputs$Output;>;", .constantValue.asLong = 0 },
    { "termOrdStart_", NULL, 0x11, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex = { 2, "SubIndex", "org.apache.lucene.codecs.blocktreeords", "OrdsBlockTreeTermsWriter", 0x1a, 1, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex;
}

@end

void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex_initWithOrgApacheLuceneUtilFstFST_withLong_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex *self, OrgApacheLuceneUtilFstFST *index, jlong termOrdStart) {
  NSObject_init(self);
  JreStrongAssign(&self->index_, index);
  self->termOrdStart_ = termOrdStart;
}

OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex *new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex_initWithOrgApacheLuceneUtilFstFST_withLong_(OrgApacheLuceneUtilFstFST *index, jlong termOrdStart) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex *self = [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex alloc];
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex_initWithOrgApacheLuceneUtilFstFST_withLong_(self, index, termOrdStart);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex)

@implementation OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock

- (instancetype)initWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)prefix
                                           withLong:(jlong)fp
                                        withBoolean:(jboolean)hasTerms
                                           withLong:(jlong)totalTermCount
                                        withBoolean:(jboolean)isFloor
                                            withInt:(jint)floorLeadByte
                                   withJavaUtilList:(id<JavaUtilList>)subIndices {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withLong_withBoolean_withInt_withJavaUtilList_(self, prefix, fp, hasTerms, totalTermCount, isFloor, floorLeadByte, subIndices);
  return self;
}

- (NSString *)description {
  return JreStrcat("$$", @"BLOCK: ", OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_(prefix_));
}

- (void)compileIndexWithJavaUtilList:(id<JavaUtilList>)blocks
withOrgApacheLuceneStoreRAMOutputStream:(OrgApacheLuceneStoreRAMOutputStream *)scratchBytes
withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratchIntsRef {
  JreAssert(((isFloor_ && [((id<JavaUtilList>) nil_chk(blocks)) size] > 1) || (isFloor_ == NO && [((id<JavaUtilList>) nil_chk(blocks)) size] == 1)), (JreStrcat("$Z$@", @"isFloor=", isFloor_, @" blocks=", blocks)));
  JreAssert((self == [((id<JavaUtilList>) nil_chk(blocks)) getWithInt:0]), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:336 condition failed: assert this == blocks.get(0);"));
  JreAssert(([((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(scratchBytes)) getFilePointer] == 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:338 condition failed: assert scratchBytes.getFilePointer() == 0;"));
  jlong lastSumTotalTermCount = 0;
  jlong sumTotalTermCount = totalTermCount_;
  [scratchBytes writeVLongWithLong:OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_encodeOutputWithLong_withBoolean_withBoolean_(fp_, hasTerms_, isFloor_)];
  if (isFloor_) {
    [scratchBytes writeVIntWithInt:[blocks size] - 1];
    for (jint i = 1; i < [blocks size]; i++) {
      OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *sub = [blocks getWithInt:i];
      JreAssert((((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *) nil_chk(sub))->floorLeadByte_ != -1), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:350 condition failed: assert sub.floorLeadByte != -1;"));
      [scratchBytes writeByteWithByte:(jbyte) sub->floorLeadByte_];
      [scratchBytes writeVLongWithLong:sumTotalTermCount - lastSumTotalTermCount];
      lastSumTotalTermCount = sumTotalTermCount;
      sumTotalTermCount += sub->totalTermCount_;
      JreAssert((sub->fp_ > fp_), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:359 condition failed: assert sub.fp > fp;"));
      [scratchBytes writeVLongWithLong:(JreLShift64((sub->fp_ - fp_), 1)) | (sub->hasTerms_ ? 1 : 0)];
    }
  }
  OrgApacheLuceneUtilFstBuilder *indexBuilder = [new_OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPEEnum_withInt_withInt_withBoolean_withBoolean_withInt_withOrgApacheLuceneUtilFstOutputs_withBoolean_withFloat_withBoolean_withInt_(JreLoadStatic(OrgApacheLuceneUtilFstFST_INPUT_TYPEEnum, BYTE1), 0, 0, YES, NO, JavaLangInteger_MAX_VALUE, JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_), NO, OrgApacheLuceneUtilPackedPackedInts_COMPACT, YES, 15) autorelease];
  IOSByteArray *bytes = [IOSByteArray arrayWithLength:(jint) [scratchBytes getFilePointer]];
  JreAssert((bytes->size_ > 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:373 condition failed: assert bytes.length > 0;"));
  [scratchBytes writeToWithByteArray:bytes withInt:0];
  [indexBuilder addWithOrgApacheLuceneUtilIntsRef:OrgApacheLuceneUtilFstUtil_toIntsRefWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilIntsRefBuilder_(prefix_, scratchIntsRef) withId:[((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) newOutputWithOrgApacheLuceneUtilBytesRef:[new_OrgApacheLuceneUtilBytesRef_initWithByteArray_withInt_withInt_(bytes, 0, bytes->size_) autorelease] withLong:0 withLong:JavaLangLong_MAX_VALUE - (sumTotalTermCount - 1)]];
  [scratchBytes reset];
  jlong termOrdOffset = 0;
  for (OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock * __strong block in blocks) {
    if (((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *) nil_chk(block))->subIndices_ != nil) {
      for (OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex * __strong subIndex in block->subIndices_) {
        OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock_appendWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstFST_withLong_withOrgApacheLuceneUtilIntsRefBuilder_(self, indexBuilder, ((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex *) nil_chk(subIndex))->index_, termOrdOffset + subIndex->termOrdStart_, scratchIntsRef);
      }
      JreStrongAssign(&block->subIndices_, nil);
    }
    termOrdOffset += block->totalTermCount_;
  }
  totFloorTermCount_ = termOrdOffset;
  JreAssert((sumTotalTermCount == totFloorTermCount_), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:395 condition failed: assert sumTotalTermCount == totFloorTermCount;"));
  JreStrongAssign(&index_, [indexBuilder finish]);
  JreAssert((subIndices_ == nil), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:398 condition failed: assert subIndices == null;"));
}

- (void)appendWithOrgApacheLuceneUtilFstBuilder:(OrgApacheLuceneUtilFstBuilder *)builder
                  withOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)subIndex
                                       withLong:(jlong)termOrdOffset
          withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratchIntsRef {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock_appendWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstFST_withLong_withOrgApacheLuceneUtilIntsRefBuilder_(self, builder, subIndex, termOrdOffset, scratchIntsRef);
}

- (void)dealloc {
  RELEASE_(prefix_);
  RELEASE_(index_);
  RELEASE_(subIndices_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneUtilBytesRef:withLong:withBoolean:withLong:withBoolean:withInt:withJavaUtilList:", "PendingBlock", NULL, 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "compileIndexWithJavaUtilList:withOrgApacheLuceneStoreRAMOutputStream:withOrgApacheLuceneUtilIntsRefBuilder:", "compileIndex", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "appendWithOrgApacheLuceneUtilFstBuilder:withOrgApacheLuceneUtilFstFST:withLong:withOrgApacheLuceneUtilIntsRefBuilder:", "append", "V", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "prefix_", NULL, 0x11, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "fp_", NULL, 0x11, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "index_", NULL, 0x1, "Lorg.apache.lucene.util.fst.FST;", NULL, "Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/codecs/blocktreeords/FSTOrdsOutputs$Output;>;", .constantValue.asLong = 0 },
    { "subIndices_", NULL, 0x1, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter$SubIndex;>;", .constantValue.asLong = 0 },
    { "hasTerms_", NULL, 0x11, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isFloor_", NULL, 0x11, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "floorLeadByte_", NULL, 0x11, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "totFloorTermCount_", NULL, 0x1, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "totalTermCount_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock = { 2, "PendingBlock", "org.apache.lucene.codecs.blocktreeords", "OrdsBlockTreeTermsWriter", 0x1a, 4, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock;
}

@end

void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withLong_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *self, OrgApacheLuceneUtilBytesRef *prefix, jlong fp, jboolean hasTerms, jlong totalTermCount, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry_initWithBoolean_(self, NO);
  JreStrongAssign(&self->prefix_, prefix);
  self->fp_ = fp;
  self->hasTerms_ = hasTerms;
  self->totalTermCount_ = totalTermCount;
  JreAssert((totalTermCount > 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:322 condition failed: assert totalTermCount > 0;"));
  self->isFloor_ = isFloor;
  self->floorLeadByte_ = floorLeadByte;
  JreStrongAssign(&self->subIndices_, subIndices);
}

OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withLong_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneUtilBytesRef *prefix, jlong fp, jboolean hasTerms, jlong totalTermCount, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *self = [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock alloc];
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withLong_withBoolean_withInt_withJavaUtilList_(self, prefix, fp, hasTerms, totalTermCount, isFloor, floorLeadByte, subIndices);
  return self;
}

void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock_appendWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstFST_withLong_withOrgApacheLuceneUtilIntsRefBuilder_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *self, OrgApacheLuceneUtilFstBuilder *builder, OrgApacheLuceneUtilFstFST *subIndex, jlong termOrdOffset, OrgApacheLuceneUtilIntsRefBuilder *scratchIntsRef) {
  OrgApacheLuceneUtilFstBytesRefFSTEnum *subIndexEnum = [new_OrgApacheLuceneUtilFstBytesRefFSTEnum_initWithOrgApacheLuceneUtilFstFST_(subIndex) autorelease];
  OrgApacheLuceneUtilFstBytesRefFSTEnum_InputOutput *indexEnt;
  while ((indexEnt = [subIndexEnum next]) != nil) {
    OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *output = ((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *) ((OrgApacheLuceneUtilFstBytesRefFSTEnum_InputOutput *) nil_chk(indexEnt))->output_);
    OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *newOutput = [((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter, FST_OUTPUTS_))) newOutputWithOrgApacheLuceneUtilBytesRef:((OrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output *) nil_chk(output))->bytes_ withLong:termOrdOffset + output->startOrd_ withLong:output->endOrd_ - termOrdOffset];
    [((OrgApacheLuceneUtilFstBuilder *) nil_chk(builder)) addWithOrgApacheLuceneUtilIntsRef:OrgApacheLuceneUtilFstUtil_toIntsRefWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilIntsRefBuilder_(indexEnt->input_, scratchIntsRef) withId:newOutput];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock)

@implementation OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter

- (void)writeBlocksWithInt:(jint)prefixLength
                   withInt:(jint)count {
  JreAssert((count > 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:464 condition failed: assert count > 0;"));
  JreAssert((prefixLength > 0 || count == [((id<JavaUtilList>) nil_chk(pending_)) size]), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:476 condition failed: assert prefixLength > 0 || count == pending.size();"));
  jint lastSuffixLeadLabel = -1;
  jboolean hasTerms = NO;
  jboolean hasSubBlocks = NO;
  jint start = [((id<JavaUtilList>) nil_chk(pending_)) size] - count;
  jint end = [pending_ size];
  jint nextBlockStart = start;
  jint nextFloorLeadLabel = -1;
  for (jint i = start; i < end; i++) {
    OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry *ent = [pending_ getWithInt:i];
    jint suffixLeadLabel;
    if (((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry *) nil_chk(ent))->isTerm_) {
      OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *term = (OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *) check_class_cast(ent, [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm class]);
      if (((IOSByteArray *) nil_chk(term->termBytes_))->size_ == prefixLength) {
        JreAssert((lastSuffixLeadLabel == -1), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:503 condition failed: assert lastSuffixLeadLabel == -1;"));
        suffixLeadLabel = -1;
      }
      else {
        suffixLeadLabel = IOSByteArray_Get(term->termBytes_, prefixLength) & (jint) 0xff;
      }
    }
    else {
      OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *block = (OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *) check_class_cast(ent, [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock class]);
      JreAssert((((OrgApacheLuceneUtilBytesRef *) nil_chk(block->prefix_))->length_ > prefixLength), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:510 condition failed: assert block.prefix.length > prefixLength;"));
      suffixLeadLabel = IOSByteArray_Get(nil_chk(block->prefix_->bytes_), block->prefix_->offset_ + prefixLength) & (jint) 0xff;
    }
    if (suffixLeadLabel != lastSuffixLeadLabel) {
      jint itemsInBlock = i - nextBlockStart;
      if (itemsInBlock >= this$0_->minItemsInBlock_ && end - nextBlockStart > this$0_->maxItemsInBlock_) {
        jboolean isFloor = itemsInBlock < count;
        [((id<JavaUtilList>) nil_chk(newBlocks_)) addWithId:OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_(self, prefixLength, isFloor, nextFloorLeadLabel, nextBlockStart, i, hasTerms, hasSubBlocks)];
        hasTerms = NO;
        hasSubBlocks = NO;
        nextFloorLeadLabel = suffixLeadLabel;
        nextBlockStart = i;
      }
      lastSuffixLeadLabel = suffixLeadLabel;
    }
    if (ent->isTerm_) {
      hasTerms = YES;
    }
    else {
      hasSubBlocks = YES;
    }
  }
  if (nextBlockStart < end) {
    jint itemsInBlock = end - nextBlockStart;
    jboolean isFloor = itemsInBlock < count;
    [((id<JavaUtilList>) nil_chk(newBlocks_)) addWithId:OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_(self, prefixLength, isFloor, nextFloorLeadLabel, nextBlockStart, end, hasTerms, hasSubBlocks)];
  }
  JreAssert(([((id<JavaUtilList>) nil_chk(newBlocks_)) isEmpty] == NO), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:549 condition failed: assert newBlocks.isEmpty() == false;"));
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *firstBlock = [newBlocks_ getWithInt:0];
  JreAssert((((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *) nil_chk(firstBlock))->isFloor_ || [newBlocks_ size] == 1), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:553 condition failed: assert firstBlock.isFloor || newBlocks.size() == 1;"));
  [firstBlock compileIndexWithJavaUtilList:newBlocks_ withOrgApacheLuceneStoreRAMOutputStream:this$0_->scratchBytes_ withOrgApacheLuceneUtilIntsRefBuilder:this$0_->scratchIntsRef_];
  [((id<JavaUtilList>) nil_chk([pending_ subListWithInt:[pending_ size] - count withInt:[pending_ size]])) clear];
  [pending_ addWithId:firstBlock];
  [newBlocks_ clear];
}

- (OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *)writeBlockWithInt:(jint)prefixLength
                                                                                   withBoolean:(jboolean)isFloor
                                                                                       withInt:(jint)floorLeadLabel
                                                                                       withInt:(jint)start
                                                                                       withInt:(jint)end
                                                                                   withBoolean:(jboolean)hasTerms
                                                                                   withBoolean:(jboolean)hasSubBlocks {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_(self, prefixLength, isFloor, floorLeadLabel, start, end, hasTerms, hasSubBlocks);
}

- (instancetype)initWithOrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter:(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter *)outer$
                                                 withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(self, outer$, fieldInfo);
  return self;
}

- (void)writeWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text
           withOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)termsEnum {
  OrgApacheLuceneCodecsBlockTermState *state = [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(this$0_->postingsWriter_)) writeTermWithOrgApacheLuceneUtilBytesRef:text withOrgApacheLuceneIndexTermsEnum:termsEnum withOrgApacheLuceneUtilFixedBitSet:docsSeen_];
  if (state != nil) {
    JreAssert((state->docFreq_ != 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:787 condition failed: assert state.docFreq != 0;"));
    JreAssert(([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions] == JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS) || state->totalTermFreq_ >= state->docFreq_), (JreStrcat("$@", @"postingsWriter=", this$0_->postingsWriter_)));
    sumDocFreq_ += state->docFreq_;
    sumTotalTermFreq_ += state->totalTermFreq_;
    OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(self, text);
    OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *term = [new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_(text), state) autorelease];
    [((id<JavaUtilList>) nil_chk(pending_)) addWithId:term];
    numTerms_++;
    if (firstPendingTerm_ == nil) {
      JreStrongAssign(&firstPendingTerm_, term);
    }
    JreStrongAssign(&lastPendingTerm_, term);
  }
}

- (void)pushTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(self, text);
}

- (void)finish {
  if (numTerms_ > 0) {
    [self writeBlocksWithInt:0 withInt:[((id<JavaUtilList>) nil_chk(pending_)) size]];
    JreAssert(([pending_ size] == 1 && !((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry *) nil_chk([pending_ getWithInt:0]))->isTerm_), (JreStrcat("$I$@", @"pending.size()=", [pending_ size], @" pending=", pending_)));
    OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *root = (OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *) check_class_cast([pending_ getWithInt:0], [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock class]);
    JreAssert((((OrgApacheLuceneUtilBytesRef *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *) nil_chk(root))->prefix_))->length_ == 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:853 condition failed: assert root.prefix.length == 0;"));
    JreAssert(([((OrgApacheLuceneUtilFstFST *) nil_chk(root->index_)) getEmptyOutput] != nil), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:854 condition failed: assert root.index.getEmptyOutput() != null;"));
    indexStartFP_ = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(this$0_->indexOut_)) getFilePointer];
    [root->index_ saveWithOrgApacheLuceneStoreDataOutput:this$0_->indexOut_];
    JreAssert((firstPendingTerm_ != nil), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:869 condition failed: assert firstPendingTerm != null;"));
    OrgApacheLuceneUtilBytesRef *minTerm = [new_OrgApacheLuceneUtilBytesRef_initWithByteArray_(((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *) nil_chk(firstPendingTerm_))->termBytes_) autorelease];
    JreAssert((lastPendingTerm_ != nil), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:872 condition failed: assert lastPendingTerm != null;"));
    OrgApacheLuceneUtilBytesRef *maxTerm = [new_OrgApacheLuceneUtilBytesRef_initWithByteArray_(((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *) nil_chk(lastPendingTerm_))->termBytes_) autorelease];
    [((id<JavaUtilList>) nil_chk(this$0_->fields_)) addWithId:[new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsBlocktreeordsFSTOrdsOutputs_Output_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(fieldInfo_, [((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *) check_class_cast([pending_ getWithInt:0], [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock class]))))->index_ getEmptyOutput], numTerms_, indexStartFP_, sumTotalTermFreq_, sumDocFreq_, [((OrgApacheLuceneUtilFixedBitSet *) nil_chk(docsSeen_)) cardinality], longsSize_, minTerm, maxTerm) autorelease]];
  }
  else {
    JreAssert(([((OrgApacheLuceneUtilFixedBitSet *) nil_chk(docsSeen_)) cardinality] == 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:885 condition failed: assert docsSeen.cardinality() == 0;"));
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(fieldInfo_);
  RELEASE_(docsSeen_);
  RELEASE_(lastTerm_);
  RELEASE_(prefixStarts_);
  RELEASE_(longs_);
  RELEASE_(pending_);
  RELEASE_(newBlocks_);
  RELEASE_(firstPendingTerm_);
  RELEASE_(lastPendingTerm_);
  RELEASE_(suffixWriter_);
  RELEASE_(statsWriter_);
  RELEASE_(metaWriter_);
  RELEASE_(bytesWriter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "writeBlocksWithInt:withInt:", "writeBlocks", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "writeBlockWithInt:withBoolean:withInt:withInt:withInt:withBoolean:withBoolean:", "writeBlock", "Lorg.apache.lucene.codecs.blocktreeords.OrdsBlockTreeTermsWriter$PendingBlock;", 0x2, "Ljava.io.IOException;", NULL },
    { "initWithOrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter:withOrgApacheLuceneIndexFieldInfo:", "TermsWriter", NULL, 0x0, NULL, NULL },
    { "writeWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneIndexTermsEnum:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "pushTermWithOrgApacheLuceneUtilBytesRef:", "pushTerm", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "finish", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.codecs.blocktreeords.OrdsBlockTreeTermsWriter;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldInfo_", NULL, 0x12, "Lorg.apache.lucene.index.FieldInfo;", NULL, NULL, .constantValue.asLong = 0 },
    { "longsSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "numTerms_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "docsSeen_", NULL, 0x10, "Lorg.apache.lucene.util.FixedBitSet;", NULL, NULL, .constantValue.asLong = 0 },
    { "sumTotalTermFreq_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "sumDocFreq_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "indexStartFP_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "lastTerm_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRefBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "prefixStarts_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "longs_", NULL, 0x12, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "pending_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter$PendingEntry;>;", .constantValue.asLong = 0 },
    { "newBlocks_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter$PendingBlock;>;", .constantValue.asLong = 0 },
    { "firstPendingTerm_", NULL, 0x2, "Lorg.apache.lucene.codecs.blocktreeords.OrdsBlockTreeTermsWriter$PendingTerm;", NULL, NULL, .constantValue.asLong = 0 },
    { "lastPendingTerm_", NULL, 0x2, "Lorg.apache.lucene.codecs.blocktreeords.OrdsBlockTreeTermsWriter$PendingTerm;", NULL, NULL, .constantValue.asLong = 0 },
    { "suffixWriter_", NULL, 0x12, "Lorg.apache.lucene.store.RAMOutputStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "statsWriter_", NULL, 0x12, "Lorg.apache.lucene.store.RAMOutputStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "metaWriter_", NULL, 0x12, "Lorg.apache.lucene.store.RAMOutputStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "bytesWriter_", NULL, 0x12, "Lorg.apache.lucene.store.RAMOutputStream;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter = { 2, "TermsWriter", "org.apache.lucene.codecs.blocktreeords", "OrdsBlockTreeTermsWriter", 0x0, 6, methods, 19, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter;
}

@end

OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter *self, jint prefixLength, jboolean isFloor, jint floorLeadLabel, jint start, jint end, jboolean hasTerms, jboolean hasSubBlocks) {
  JreAssert((end > start), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:573 condition failed: assert end > start;"));
  jlong startFP = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->this$0_->out_)) getFilePointer];
  jboolean hasFloorLeadLabel = isFloor && floorLeadLabel != -1;
  OrgApacheLuceneUtilBytesRef *prefix = [new_OrgApacheLuceneUtilBytesRef_initWithInt_(prefixLength + (hasFloorLeadLabel ? 1 : 0)) autorelease];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->lastTerm_)) bytes], 0, prefix->bytes_, 0, prefixLength);
  prefix->length_ = prefixLength;
  jint numEntries = end - start;
  jint code = JreLShift32(numEntries, 1);
  if (end == [((id<JavaUtilList>) nil_chk(self->pending_)) size]) {
    code |= 1;
  }
  [self->this$0_->out_ writeVIntWithInt:code];
  id<JavaUtilList> subIndices;
  jboolean isLeafBlock = hasSubBlocks == NO;
  jlong totalTermCount;
  jboolean absolute = YES;
  if (isLeafBlock) {
    subIndices = nil;
    for (jint i = start; i < end; i++) {
      OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry *ent = [self->pending_ getWithInt:i];
      JreAssert((((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry *) nil_chk(ent))->isTerm_), (JreStrcat("$I", @"i=", i)));
      OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *term = (OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *) check_class_cast(ent, [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm class]);
      JreAssert((OrgApacheLuceneUtilStringHelper_startsWithWithByteArray_withOrgApacheLuceneUtilBytesRef_(term->termBytes_, prefix)), (JreStrcat("$@$@", @"term.term=", term->termBytes_, @" prefix=", prefix)));
      OrgApacheLuceneCodecsBlockTermState *state = term->state_;
      jint suffix = ((IOSByteArray *) nil_chk(term->termBytes_))->size_ - prefixLength;
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->suffixWriter_)) writeVIntWithInt:suffix];
      [self->suffixWriter_ writeBytesWithByteArray:term->termBytes_ withInt:prefixLength withInt:suffix];
      JreAssert((floorLeadLabel == -1 || (IOSByteArray_Get(term->termBytes_, prefixLength) & (jint) 0xff) >= floorLeadLabel), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:631 condition failed: assert floorLeadLabel == -1 || (term.termBytes[prefixLength] & 0xff) >= floorLeadLabel;"));
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->statsWriter_)) writeVIntWithInt:((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state))->docFreq_];
      if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(self->fieldInfo_)) getIndexOptions] != JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS)) {
        JreAssert((state->totalTermFreq_ >= state->docFreq_), (JreStrcat("J$I", state->totalTermFreq_, @" vs ", state->docFreq_)));
        [self->statsWriter_ writeVLongWithLong:state->totalTermFreq_ - state->docFreq_];
      }
      [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(self->this$0_->postingsWriter_)) encodeTermWithLongArray:self->longs_ withOrgApacheLuceneStoreDataOutput:self->bytesWriter_ withOrgApacheLuceneIndexFieldInfo:self->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:state withBoolean:absolute];
      for (jint pos = 0; pos < self->longsSize_; pos++) {
        JreAssert((IOSLongArray_Get(nil_chk(self->longs_), pos) >= 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:643 condition failed: assert longs[pos] >= 0;"));
        [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->metaWriter_)) writeVLongWithLong:IOSLongArray_Get(self->longs_, pos)];
      }
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->bytesWriter_)) writeToWithOrgApacheLuceneStoreDataOutput:self->metaWriter_];
      [self->bytesWriter_ reset];
      absolute = NO;
    }
    totalTermCount = end - start;
  }
  else {
    subIndices = [new_JavaUtilArrayList_init() autorelease];
    totalTermCount = 0;
    for (jint i = start; i < end; i++) {
      OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry *ent = [self->pending_ getWithInt:i];
      if (((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingEntry *) nil_chk(ent))->isTerm_) {
        OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *term = (OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm *) check_class_cast(ent, [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingTerm class]);
        JreAssert((OrgApacheLuceneUtilStringHelper_startsWithWithByteArray_withOrgApacheLuceneUtilBytesRef_(term->termBytes_, prefix)), (JreStrcat("$@$@", @"term.term=", term->termBytes_, @" prefix=", prefix)));
        OrgApacheLuceneCodecsBlockTermState *state = term->state_;
        jint suffix = ((IOSByteArray *) nil_chk(term->termBytes_))->size_ - prefixLength;
        [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->suffixWriter_)) writeVIntWithInt:JreLShift32(suffix, 1)];
        [self->suffixWriter_ writeBytesWithByteArray:term->termBytes_ withInt:prefixLength withInt:suffix];
        JreAssert((floorLeadLabel == -1 || (IOSByteArray_Get(term->termBytes_, prefixLength) & (jint) 0xff) >= floorLeadLabel), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:674 condition failed: assert floorLeadLabel == -1 || (term.termBytes[prefixLength] & 0xff) >= floorLeadLabel;"));
        [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->statsWriter_)) writeVIntWithInt:((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state))->docFreq_];
        if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(self->fieldInfo_)) getIndexOptions] != JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS)) {
          JreAssert((state->totalTermFreq_ >= state->docFreq_), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:679 condition failed: assert state.totalTermFreq >= state.docFreq;"));
          [self->statsWriter_ writeVLongWithLong:state->totalTermFreq_ - state->docFreq_];
        }
        [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(self->this$0_->postingsWriter_)) encodeTermWithLongArray:self->longs_ withOrgApacheLuceneStoreDataOutput:self->bytesWriter_ withOrgApacheLuceneIndexFieldInfo:self->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:state withBoolean:absolute];
        for (jint pos = 0; pos < self->longsSize_; pos++) {
          JreAssert((IOSLongArray_Get(nil_chk(self->longs_), pos) >= 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:694 condition failed: assert longs[pos] >= 0;"));
          [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->metaWriter_)) writeVLongWithLong:IOSLongArray_Get(self->longs_, pos)];
        }
        [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->bytesWriter_)) writeToWithOrgApacheLuceneStoreDataOutput:self->metaWriter_];
        [self->bytesWriter_ reset];
        absolute = NO;
        totalTermCount++;
      }
      else {
        OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *block = (OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock *) check_class_cast(ent, [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock class]);
        JreAssert((OrgApacheLuceneUtilStringHelper_startsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(block->prefix_, prefix)), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:704 condition failed: assert StringHelper.startsWith(block.prefix, prefix);"));
        jint suffix = ((OrgApacheLuceneUtilBytesRef *) nil_chk(block->prefix_))->length_ - prefixLength;
        JreAssert((suffix > 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:707 condition failed: assert suffix > 0;"));
        [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->suffixWriter_)) writeVIntWithInt:(JreLShift32(suffix, 1)) | 1];
        [self->suffixWriter_ writeBytesWithByteArray:block->prefix_->bytes_ withInt:prefixLength withInt:suffix];
        JreAssert((floorLeadLabel == -1 || (IOSByteArray_Get(nil_chk(block->prefix_->bytes_), prefixLength) & (jint) 0xff) >= floorLeadLabel), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:714 condition failed: assert floorLeadLabel == -1 || (block.prefix.bytes[prefixLength] & 0xff) >= floorLeadLabel;"));
        JreAssert((block->fp_ < startFP), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:716 condition failed: assert block.fp < startFP;"));
        [self->suffixWriter_ writeVLongWithLong:startFP - block->fp_];
        [self->suffixWriter_ writeVLongWithLong:block->totFloorTermCount_];
        [subIndices addWithId:[new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_SubIndex_initWithOrgApacheLuceneUtilFstFST_withLong_(block->index_, totalTermCount) autorelease]];
        totalTermCount += block->totFloorTermCount_;
      }
    }
    JreAssert(([subIndices size] != 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.java:734 condition failed: assert subIndices.size() != 0;"));
  }
  [self->this$0_->out_ writeVIntWithInt:(jint) (JreLShift64([((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->suffixWriter_)) getFilePointer], 1)) | (isLeafBlock ? 1 : 0)];
  [self->suffixWriter_ writeToWithOrgApacheLuceneStoreDataOutput:self->this$0_->out_];
  [self->suffixWriter_ reset];
  [self->this$0_->out_ writeVIntWithInt:(jint) [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->statsWriter_)) getFilePointer]];
  [self->statsWriter_ writeToWithOrgApacheLuceneStoreDataOutput:self->this$0_->out_];
  [self->statsWriter_ reset];
  [self->this$0_->out_ writeVIntWithInt:(jint) [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->metaWriter_)) getFilePointer]];
  [self->metaWriter_ writeToWithOrgApacheLuceneStoreDataOutput:self->this$0_->out_];
  [self->metaWriter_ reset];
  if (hasFloorLeadLabel) {
    *IOSByteArray_GetRef(nil_chk(prefix->bytes_), prefix->length_++) = (jbyte) floorLeadLabel;
  }
  return [new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withLong_withBoolean_withInt_withJavaUtilList_(prefix, startFP, hasTerms, totalTermCount, isFloor, floorLeadLabel, subIndices) autorelease];
}

void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter *self, OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->lastTerm_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  JreStrongAssignAndConsume(&self->prefixStarts_, [IOSIntArray newArrayWithLength:8]);
  JreStrongAssignAndConsume(&self->pending_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->newBlocks_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->suffixWriter_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssignAndConsume(&self->statsWriter_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssignAndConsume(&self->metaWriter_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssignAndConsume(&self->bytesWriter_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  JreStrongAssignAndConsume(&self->docsSeen_, new_OrgApacheLuceneUtilFixedBitSet_initWithInt_(outer$->maxDoc_));
  self->longsSize_ = [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(outer$->postingsWriter_)) setFieldWithOrgApacheLuceneIndexFieldInfo:fieldInfo];
  JreStrongAssignAndConsume(&self->longs_, [IOSLongArray newArrayWithLength:self->longsSize_]);
}

OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter *new_OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter *self = [OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter alloc];
  OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(self, outer$, fieldInfo);
  return self;
}

void OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter *self, OrgApacheLuceneUtilBytesRef *text) {
  jint limit = JavaLangMath_minWithInt_withInt_([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->lastTerm_)) length], ((OrgApacheLuceneUtilBytesRef *) nil_chk(text))->length_);
  jint pos = 0;
  while (pos < limit && [self->lastTerm_ byteAtWithInt:pos] == IOSByteArray_Get(nil_chk(text->bytes_), text->offset_ + pos)) {
    pos++;
  }
  for (jint i = [self->lastTerm_ length] - 1; i >= pos; i--) {
    jint prefixTopSize = [((id<JavaUtilList>) nil_chk(self->pending_)) size] - IOSIntArray_Get(nil_chk(self->prefixStarts_), i);
    if (prefixTopSize >= self->this$0_->minItemsInBlock_) {
      [self writeBlocksWithInt:i + 1 withInt:prefixTopSize];
      *IOSIntArray_GetRef(self->prefixStarts_, i) -= prefixTopSize - 1;
    }
  }
  if (((IOSIntArray *) nil_chk(self->prefixStarts_))->size_ < text->length_) {
    JreStrongAssign(&self->prefixStarts_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(self->prefixStarts_, text->length_));
  }
  for (jint i = pos; i < text->length_; i++) {
    *IOSIntArray_GetRef(nil_chk(self->prefixStarts_), i) = [((id<JavaUtilList>) nil_chk(self->pending_)) size];
  }
  [self->lastTerm_ copyBytesWithOrgApacheLuceneUtilBytesRef:text];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsWriter_TermsWriter)
