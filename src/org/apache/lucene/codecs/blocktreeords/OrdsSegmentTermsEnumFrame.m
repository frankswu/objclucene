//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsFieldReader.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/fst/FST.h"

@interface OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame () {
 @public
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *ste_;
  jint startBytePos_;
  jint suffix_;
  jlong subCode_;
}

- (jboolean)prefixMatchesWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target;

- (void)fillTerm;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame, ste_, OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *)

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_prefixMatchesWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *self, OrgApacheLuceneUtilBytesRef *target);

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_fillTerm(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *self);

@implementation OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame

- (instancetype)initWithOrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum:(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *)ste
                                                                       withInt:(jint)ord {
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_withInt_(self, ste, ord);
  return self;
}

- (void)setFloorDataWithOrgApacheLuceneStoreByteArrayDataInput:(OrgApacheLuceneStoreByteArrayDataInput *)inArg
                               withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)source {
  jint numBytes = ((OrgApacheLuceneUtilBytesRef *) nil_chk(source))->length_ - ([((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(inArg)) getPosition] - source->offset_);
  JreAssert((numBytes > 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:118 condition failed: assert numBytes > 0;"));
  if (numBytes > ((IOSByteArray *) nil_chk(floorData_))->size_) {
    JreStrongAssignAndConsume(&floorData_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(numBytes, 1)]);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(source->bytes_, source->offset_ + [inArg getPosition], floorData_, 0, numBytes);
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(floorDataReader_)) resetWithByteArray:floorData_ withInt:0 withInt:numBytes];
  numFollowFloorBlocks_ = [floorDataReader_ readVInt];
  nextFloorLabel_ = [floorDataReader_ readByte] & (jint) 0xff;
  nextFloorTermOrd_ = termOrdOrig_ + [floorDataReader_ readVLong];
}

- (jint)getTermBlockOrd {
  return isLeafBlock_ ? nextEnt_ : ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_;
}

- (void)loadNextFloorBlock {
  JreAssert((arc_ == nil || isFloor_), (JreStrcat("$@$Z", @"arc=", arc_, @" isFloor=", isFloor_)));
  fp_ = fpEnd_;
  nextEnt_ = -1;
  [self loadBlock];
}

- (void)loadBlock {
  [((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *) nil_chk(ste_)) initIndexInput];
  if (nextEnt_ != -1) {
    return;
  }
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(ste_->in_)) seekWithLong:fp_];
  jint code = [ste_->in_ readVInt];
  entCount_ = JreURShift32(code, 1);
  JreAssert((entCount_ > 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:174 condition failed: assert entCount > 0;"));
  isLastInFloor_ = ((code & 1) != 0);
  JreAssert((arc_ == nil || (isLastInFloor_ || isFloor_)), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:176 condition failed: assert arc == null || (isLastInFloor || isFloor);"));
  code = [ste_->in_ readVInt];
  isLeafBlock_ = ((code & 1) != 0);
  jint numBytes = JreURShift32(code, 1);
  if (((IOSByteArray *) nil_chk(suffixBytes_))->size_ < numBytes) {
    JreStrongAssignAndConsume(&suffixBytes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(numBytes, 1)]);
  }
  [ste_->in_ readBytesWithByteArray:suffixBytes_ withInt:0 withInt:numBytes];
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) resetWithByteArray:suffixBytes_ withInt:0 withInt:numBytes];
  numBytes = [ste_->in_ readVInt];
  if (((IOSByteArray *) nil_chk(statBytes_))->size_ < numBytes) {
    JreStrongAssignAndConsume(&statBytes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(numBytes, 1)]);
  }
  [ste_->in_ readBytesWithByteArray:statBytes_ withInt:0 withInt:numBytes];
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(statsReader_)) resetWithByteArray:statBytes_ withInt:0 withInt:numBytes];
  metaDataUpto_ = 0;
  ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_ = 0;
  nextEnt_ = 0;
  lastSubFP_ = -1;
  numBytes = [ste_->in_ readVInt];
  if (bytes_ == nil) {
    JreStrongAssignAndConsume(&bytes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(numBytes, 1)]);
    JreStrongAssignAndConsume(&bytesReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  }
  else if (bytes_->size_ < numBytes) {
    JreStrongAssignAndConsume(&bytes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(numBytes, 1)]);
  }
  [ste_->in_ readBytesWithByteArray:bytes_ withInt:0 withInt:numBytes];
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(bytesReader_)) resetWithByteArray:bytes_ withInt:0 withInt:numBytes];
  fpEnd_ = [ste_->in_ getFilePointer];
}

- (void)rewind {
  fp_ = fpOrig_;
  termOrd_ = termOrdOrig_;
  nextEnt_ = -1;
  hasTerms_ = hasTermsOrig_;
  if (isFloor_) {
    [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(floorDataReader_)) rewind];
    numFollowFloorBlocks_ = [floorDataReader_ readVInt];
    JreAssert((numFollowFloorBlocks_ > 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:246 condition failed: assert numFollowFloorBlocks > 0;"));
    nextFloorLabel_ = [floorDataReader_ readByte] & (jint) 0xff;
    nextFloorTermOrd_ = termOrdOrig_ + [floorDataReader_ readVLong];
  }
}

- (jboolean)next {
  return isLeafBlock_ ? [self nextLeaf] : [self nextNonLeaf];
}

- (jboolean)nextLeaf {
  JreAssert((nextEnt_ != -1 && nextEnt_ < entCount_), (JreStrcat("$I$I$J$J", @"nextEnt=", nextEnt_, @" entCount=", entCount_, @" fp=", fp_, @" termOrd=", termOrd_)));
  nextEnt_++;
  termOrd_++;
  suffix_ = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) readVInt];
  startBytePos_ = [suffixesReader_ getPosition];
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *) nil_chk(ste_))->term_)) setLengthWithInt:prefix_ + suffix_];
  [ste_->term_ growWithInt:[ste_->term_ length]];
  [suffixesReader_ readBytesWithByteArray:[ste_->term_ bytes] withInt:prefix_ withInt:suffix_];
  ste_->termExists_ = YES;
  return NO;
}

- (jboolean)nextNonLeaf {
  JreAssert((nextEnt_ != -1 && nextEnt_ < entCount_), (JreStrcat("$I$I$J", @"nextEnt=", nextEnt_, @" entCount=", entCount_, @" fp=", fp_)));
  nextEnt_++;
  jint code = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) readVInt];
  suffix_ = JreURShift32(code, 1);
  startBytePos_ = [suffixesReader_ getPosition];
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *) nil_chk(ste_))->term_)) setLengthWithInt:prefix_ + suffix_];
  [ste_->term_ growWithInt:[ste_->term_ length]];
  [suffixesReader_ readBytesWithByteArray:[ste_->term_ bytes] withInt:prefix_ withInt:suffix_];
  if ((code & 1) == 0) {
    ste_->termExists_ = YES;
    subCode_ = 0;
    ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_++;
    termOrd_++;
    return NO;
  }
  else {
    ste_->termExists_ = NO;
    subCode_ = [suffixesReader_ readVLong];
    termOrd_ += [suffixesReader_ readVLong];
    lastSubFP_ = fp_ - subCode_;
    return YES;
  }
}

- (void)scanToFloorFrameWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target {
  if (!isFloor_ || ((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->length_ <= prefix_) {
    return;
  }
  jint targetLabel = IOSByteArray_Get(nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->bytes_), target->offset_ + prefix_) & (jint) 0xFF;
  if (targetLabel < nextFloorLabel_) {
    return;
  }
  JreAssert((numFollowFloorBlocks_ != 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:362 condition failed: assert numFollowFloorBlocks != 0;"));
  jlong newFP = fpOrig_;
  jlong lastFloorTermOrd = nextFloorTermOrd_;
  while (YES) {
    jlong code = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(floorDataReader_)) readVLong];
    newFP = fpOrig_ + (JreURShift64(code, 1));
    hasTerms_ = ((code & 1) != 0);
    isLastInFloor_ = (numFollowFloorBlocks_ == 1);
    numFollowFloorBlocks_--;
    lastFloorTermOrd = nextFloorTermOrd_;
    if (isLastInFloor_) {
      nextFloorLabel_ = 256;
      nextFloorTermOrd_ = JavaLangLong_MAX_VALUE;
      break;
    }
    else {
      nextFloorLabel_ = [floorDataReader_ readByte] & (jint) 0xff;
      nextFloorTermOrd_ += [floorDataReader_ readVLong];
      if (targetLabel < nextFloorLabel_) {
        break;
      }
    }
  }
  if (newFP != fp_) {
    nextEnt_ = -1;
    termOrd_ = lastFloorTermOrd;
    fp_ = newFP;
  }
  else {
  }
}

- (void)scanToFloorFrameWithLong:(jlong)targetOrd {
  if (!isFloor_ || targetOrd < nextFloorTermOrd_) {
    return;
  }
  JreAssert((numFollowFloorBlocks_ != 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:424 condition failed: assert numFollowFloorBlocks != 0;"));
  jlong lastFloorTermOrd = nextFloorTermOrd_;
  jlong newFP = fpOrig_;
  while (YES) {
    jlong code = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(floorDataReader_)) readVLong];
    newFP = fpOrig_ + (JreURShift64(code, 1));
    hasTerms_ = ((code & 1) != 0);
    isLastInFloor_ = (numFollowFloorBlocks_ == 1);
    numFollowFloorBlocks_--;
    lastFloorTermOrd = nextFloorTermOrd_;
    if (isLastInFloor_) {
      nextFloorLabel_ = 256;
      nextFloorTermOrd_ = JavaLangLong_MAX_VALUE;
      break;
    }
    else {
      nextFloorLabel_ = [floorDataReader_ readByte] & (jint) 0xff;
      nextFloorTermOrd_ += [floorDataReader_ readVLong];
      if (targetOrd < nextFloorTermOrd_) {
        break;
      }
    }
  }
  if (newFP != fp_) {
    nextEnt_ = -1;
    termOrd_ = lastFloorTermOrd;
    fp_ = newFP;
  }
  else {
  }
}

- (void)decodeMetaData {
  JreAssert((nextEnt_ >= 0), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:478 condition failed: assert nextEnt >= 0;"));
  jint limit = [self getTermBlockOrd];
  jboolean absolute = metaDataUpto_ == 0;
  JreAssert((limit > 0), (JreStrcat("$I$Z$I", @"limit=", limit, @" isLeafBlock=", isLeafBlock_, @" nextEnt=", nextEnt_)));
  while (metaDataUpto_ < limit) {
    ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->docFreq_ = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(statsReader_)) readVInt];
    if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *) nil_chk(ste_))->fr_))->fieldInfo_)) getIndexOptions] != JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS)) {
      state_->totalTermFreq_ = state_->docFreq_ + [statsReader_ readVLong];
    }
    for (jint i = 0; i < ste_->fr_->longsSize_; i++) {
      *IOSLongArray_GetRef(nil_chk(longs_), i) = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(bytesReader_)) readVLong];
    }
    [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader *) nil_chk(ste_->fr_->parent_))->postingsReader_)) decodeTermWithLongArray:longs_ withOrgApacheLuceneStoreDataInput:bytesReader_ withOrgApacheLuceneIndexFieldInfo:ste_->fr_->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:state_ withBoolean:absolute];
    metaDataUpto_++;
    absolute = NO;
  }
  ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_ = metaDataUpto_;
}

- (jboolean)prefixMatchesWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target {
  return OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_prefixMatchesWithOrgApacheLuceneUtilBytesRef_(self, target);
}

- (void)scanToSubBlockWithLong:(jlong)subFP {
  JreAssert((!isLeafBlock_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:535 condition failed: assert !isLeafBlock;"));
  if (lastSubFP_ == subFP) {
    return;
  }
  JreAssert((subFP < fp_), (JreStrcat("$J$J", @"fp=", fp_, @" subFP=", subFP)));
  jlong targetSubCode = fp_ - subFP;
  while (YES) {
    JreAssert((nextEnt_ < entCount_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:546 condition failed: assert nextEnt < entCount;"));
    nextEnt_++;
    jint code = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) readVInt];
    [suffixesReader_ skipBytesWithLong:isLeafBlock_ ? code : JreURShift32(code, 1)];
    if ((code & 1) != 0) {
      jlong subCode = [suffixesReader_ readVLong];
      termOrd_ += [suffixesReader_ readVLong];
      if (targetSubCode == subCode) {
        lastSubFP_ = subFP;
        return;
      }
    }
    else {
      ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_++;
      termOrd_++;
    }
  }
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *)scanToTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target
                                                                                withBoolean:(jboolean)exactOnly {
  return isLeafBlock_ ? [self scanToTermLeafWithOrgApacheLuceneUtilBytesRef:target withBoolean:exactOnly] : [self scanToTermNonLeafWithOrgApacheLuceneUtilBytesRef:target withBoolean:exactOnly];
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *)scanToTermLeafWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target
                                                                                    withBoolean:(jboolean)exactOnly {
  JreAssert((nextEnt_ != -1), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:583 condition failed: assert nextEnt != -1;"));
  ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *) nil_chk(ste_))->termExists_ = YES;
  subCode_ = 0;
  if (nextEnt_ == entCount_) {
    if (exactOnly) {
      OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_fillTerm(self);
    }
    return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END);
  }
  JreAssert((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_prefixMatchesWithOrgApacheLuceneUtilBytesRef_(self, target)), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:595 condition failed: assert prefixMatches(target);"));
  while (YES) {
    {
      nextEnt_++;
      termOrd_++;
      suffix_ = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) readVInt];
      jint termLen = prefix_ + suffix_;
      startBytePos_ = [suffixesReader_ getPosition];
      [suffixesReader_ skipBytesWithLong:suffix_];
      jint targetLimit = ((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->offset_ + (target->length_ < termLen ? target->length_ : termLen);
      jint targetPos = target->offset_ + prefix_;
      jint bytePos = startBytePos_;
      while (YES) {
        jint cmp;
        jboolean stop;
        if (targetPos < targetLimit) {
          cmp = (IOSByteArray_Get(nil_chk(suffixBytes_), bytePos++) & (jint) 0xFF) - (IOSByteArray_Get(nil_chk(target->bytes_), targetPos++) & (jint) 0xFF);
          stop = NO;
        }
        else {
          JreAssert((targetPos == targetLimit), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:630 condition failed: assert targetPos == targetLimit;"));
          cmp = termLen - target->length_;
          stop = YES;
        }
        if (cmp < 0) {
          if (nextEnt_ == entCount_) {
            if (exactOnly) {
              OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_fillTerm(self);
            }
            goto break_nextTerm;
          }
          else {
            goto continue_nextTerm;
          }
        }
        else if (cmp > 0) {
          OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_fillTerm(self);
          return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, NOT_FOUND);
        }
        else if (stop) {
          JreAssert((ste_->termExists_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:663 condition failed: assert ste.termExists;"));
          OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_fillTerm(self);
          return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND);
        }
      }
    }
    continue_nextTerm: ;
  }
  break_nextTerm: ;
  if (exactOnly) {
    OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_fillTerm(self);
  }
  return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END);
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *)scanToTermNonLeafWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target
                                                                                       withBoolean:(jboolean)exactOnly {
  JreAssert((nextEnt_ != -1), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:697 condition failed: assert nextEnt != -1;"));
  if (nextEnt_ == entCount_) {
    if (exactOnly) {
      OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_fillTerm(self);
      ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *) nil_chk(ste_))->termExists_ = (subCode_ == 0);
    }
    return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END);
  }
  JreAssert((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_prefixMatchesWithOrgApacheLuceneUtilBytesRef_(self, target)), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:707 condition failed: assert prefixMatches(target);"));
  while (YES) {
    {
      nextEnt_++;
      jint code = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) readVInt];
      suffix_ = JreURShift32(code, 1);
      ((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *) nil_chk(ste_))->termExists_ = ((code & 1) == 0);
      jint termLen = prefix_ + suffix_;
      startBytePos_ = [suffixesReader_ getPosition];
      [suffixesReader_ skipBytesWithLong:suffix_];
      jlong prevTermOrd = termOrd_;
      if (ste_->termExists_) {
        ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_++;
        termOrd_++;
        subCode_ = 0;
      }
      else {
        subCode_ = [suffixesReader_ readVLong];
        termOrd_ += [suffixesReader_ readVLong];
        lastSubFP_ = fp_ - subCode_;
      }
      jint targetLimit = ((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->offset_ + (target->length_ < termLen ? target->length_ : termLen);
      jint targetPos = target->offset_ + prefix_;
      jint bytePos = startBytePos_;
      while (YES) {
        jint cmp;
        jboolean stop;
        if (targetPos < targetLimit) {
          cmp = (IOSByteArray_Get(nil_chk(suffixBytes_), bytePos++) & (jint) 0xFF) - (IOSByteArray_Get(nil_chk(target->bytes_), targetPos++) & (jint) 0xFF);
          stop = NO;
        }
        else {
          JreAssert((targetPos == targetLimit), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:753 condition failed: assert targetPos == targetLimit;"));
          cmp = termLen - target->length_;
          stop = YES;
        }
        if (cmp < 0) {
          if (nextEnt_ == entCount_) {
            if (exactOnly) {
              OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_fillTerm(self);
            }
            goto break_nextTerm;
          }
          else {
            goto continue_nextTerm;
          }
        }
        else if (cmp > 0) {
          OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_fillTerm(self);
          if (!exactOnly && !ste_->termExists_) {
            JreStrongAssign(&ste_->currentFrame_, [ste_ pushFrameWithOrgApacheLuceneUtilFstFST_Arc:nil withLong:((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(ste_->currentFrame_))->lastSubFP_ withInt:termLen withLong:prevTermOrd]);
            [((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(ste_->currentFrame_)) loadBlock];
            while ([ste_->currentFrame_ next]) {
              JreStrongAssign(&ste_->currentFrame_, [ste_ pushFrameWithOrgApacheLuceneUtilFstFST_Arc:nil withLong:ste_->currentFrame_->lastSubFP_ withInt:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(ste_->term_)) length] withLong:prevTermOrd]);
              [((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *) nil_chk(ste_->currentFrame_)) loadBlock];
            }
          }
          return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, NOT_FOUND);
        }
        else if (stop) {
          JreAssert((ste_->termExists_), (@"org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame.java:800 condition failed: assert ste.termExists;"));
          OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_fillTerm(self);
          return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND);
        }
      }
    }
    continue_nextTerm: ;
  }
  break_nextTerm: ;
  if (exactOnly) {
    OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_fillTerm(self);
  }
  return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END);
}

- (void)fillTerm {
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_fillTerm(self);
}

- (void)dealloc {
  RELEASE_(arc_);
  RELEASE_(suffixBytes_);
  RELEASE_(suffixesReader_);
  RELEASE_(statBytes_);
  RELEASE_(statsReader_);
  RELEASE_(floorData_);
  RELEASE_(floorDataReader_);
  RELEASE_(state_);
  RELEASE_(longs_);
  RELEASE_(bytes_);
  RELEASE_(bytesReader_);
  RELEASE_(ste_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum:withInt:", "OrdsSegmentTermsEnumFrame", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "setFloorDataWithOrgApacheLuceneStoreByteArrayDataInput:withOrgApacheLuceneUtilBytesRef:", "setFloorData", "V", 0x1, NULL, NULL },
    { "getTermBlockOrd", NULL, "I", 0x1, NULL, NULL },
    { "loadNextFloorBlock", NULL, "V", 0x0, "Ljava.io.IOException;", NULL },
    { "loadBlock", NULL, "V", 0x0, "Ljava.io.IOException;", NULL },
    { "rewind", NULL, "V", 0x0, NULL, NULL },
    { "next", NULL, "Z", 0x1, NULL, NULL },
    { "nextLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "nextNonLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "scanToFloorFrameWithOrgApacheLuceneUtilBytesRef:", "scanToFloorFrame", "V", 0x1, NULL, NULL },
    { "scanToFloorFrameWithLong:", "scanToFloorFrame", "V", 0x1, NULL, NULL },
    { "decodeMetaData", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "prefixMatchesWithOrgApacheLuceneUtilBytesRef:", "prefixMatches", "Z", 0x2, NULL, NULL },
    { "scanToSubBlockWithLong:", "scanToSubBlock", "V", 0x1, NULL, NULL },
    { "scanToTermWithOrgApacheLuceneUtilBytesRef:withBoolean:", "scanToTerm", "Lorg.apache.lucene.index.TermsEnum$SeekStatus;", 0x1, "Ljava.io.IOException;", NULL },
    { "scanToTermLeafWithOrgApacheLuceneUtilBytesRef:withBoolean:", "scanToTermLeaf", "Lorg.apache.lucene.index.TermsEnum$SeekStatus;", 0x1, "Ljava.io.IOException;", NULL },
    { "scanToTermNonLeafWithOrgApacheLuceneUtilBytesRef:withBoolean:", "scanToTermNonLeaf", "Lorg.apache.lucene.index.TermsEnum$SeekStatus;", 0x1, "Ljava.io.IOException;", NULL },
    { "fillTerm", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ord_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "hasTerms_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "hasTermsOrig_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isFloor_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "arc_", NULL, 0x0, "Lorg.apache.lucene.util.fst.FST$Arc;", NULL, "Lorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/codecs/blocktreeords/FSTOrdsOutputs$Output;>;", .constantValue.asLong = 0 },
    { "fp_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "fpOrig_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "fpEnd_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "suffixBytes_", NULL, 0x0, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "suffixesReader_", NULL, 0x10, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "statBytes_", NULL, 0x0, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "statsReader_", NULL, 0x10, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "floorData_", NULL, 0x0, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "floorDataReader_", NULL, 0x10, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "prefix_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "entCount_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "nextEnt_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "termOrdOrig_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "termOrd_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "isLastInFloor_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isLeafBlock_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "lastSubFP_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "nextFloorLabel_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "nextFloorTermOrd_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "numFollowFloorBlocks_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "metaDataUpto_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "state_", NULL, 0x10, "Lorg.apache.lucene.codecs.BlockTermState;", NULL, NULL, .constantValue.asLong = 0 },
    { "longs_", NULL, 0x1, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "bytes_", NULL, 0x1, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "bytesReader_", NULL, 0x0, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "ste_", NULL, 0x12, "Lorg.apache.lucene.codecs.blocktreeords.OrdsSegmentTermsEnum;", NULL, NULL, .constantValue.asLong = 0 },
    { "startBytePos_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "suffix_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "subCode_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame = { 2, "OrdsSegmentTermsEnumFrame", "org.apache.lucene.codecs.blocktreeords", NULL, 0x10, 18, methods, 34, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame;
}

@end

void OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_withInt_(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *self, OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *ste, jint ord) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->suffixBytes_, [IOSByteArray newArrayWithLength:128]);
  JreStrongAssignAndConsume(&self->suffixesReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  JreStrongAssignAndConsume(&self->statBytes_, [IOSByteArray newArrayWithLength:64]);
  JreStrongAssignAndConsume(&self->statsReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  JreStrongAssignAndConsume(&self->floorData_, [IOSByteArray newArrayWithLength:32]);
  JreStrongAssignAndConsume(&self->floorDataReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  JreStrongAssign(&self->ste_, ste);
  self->ord_ = ord;
  JreStrongAssign(&self->state_, [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsBlockTreeTermsReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsFieldReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *) nil_chk(ste))->fr_))->parent_))->postingsReader_)) newTermState]);
  ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(self->state_))->totalTermFreq_ = -1;
  JreStrongAssignAndConsume(&self->longs_, [IOSLongArray newArrayWithLength:ste->fr_->longsSize_]);
}

OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *new_OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_withInt_(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *ste, jint ord) {
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *self = [OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame alloc];
  OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_initWithOrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum_withInt_(self, ste, ord);
  return self;
}

jboolean OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_prefixMatchesWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *self, OrgApacheLuceneUtilBytesRef *target) {
  for (jint bytePos = 0; bytePos < self->prefix_; bytePos++) {
    if (IOSByteArray_Get(nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->bytes_), target->offset_ + bytePos) != [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *) nil_chk(self->ste_))->term_)) byteAtWithInt:bytePos]) {
      return NO;
    }
  }
  return YES;
}

void OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame_fillTerm(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame *self) {
  jint termLength = self->prefix_ + self->suffix_;
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(((OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnum *) nil_chk(self->ste_))->term_)) setLengthWithInt:self->prefix_ + self->suffix_];
  [self->ste_->term_ growWithInt:termLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->suffixBytes_, self->startBytePos_, [self->ste_->term_ bytes], self->prefix_, self->suffix_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeordsOrdsSegmentTermsEnumFrame)
