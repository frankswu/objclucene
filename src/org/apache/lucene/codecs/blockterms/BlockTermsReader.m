//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/codecs/blockterms/BlockTermsReader.h"
#include "org/apache/lucene/codecs/blockterms/BlockTermsWriter.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexReaderBase.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/Accountables.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

@interface OrgApacheLuceneCodecsBlocktermsBlockTermsReader () {
 @public
  OrgApacheLuceneStoreIndexInput *in_;
  OrgApacheLuceneCodecsPostingsReaderBase *postingsReader_;
  JavaUtilTreeMap *fields_;
  OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase *indexReader_;
}

- (void)seekDirWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)input;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader, in_, OrgApacheLuceneStoreIndexInput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader, postingsReader_, OrgApacheLuceneCodecsPostingsReaderBase *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader, fields_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader, indexReader_, OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase *)

static jlong OrgApacheLuceneCodecsBlocktermsBlockTermsReader_BASE_RAM_BYTES_USED_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader, BASE_RAM_BYTES_USED_, jlong)

static jlong OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FIELD_READER_RAM_BYTES_USED_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader, FIELD_READER_RAM_BYTES_USED_, jlong)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktermsBlockTermsReader_seekDirWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader *self, OrgApacheLuceneStoreIndexInput *input);

@interface OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm : NSObject < NSCopying > {
 @public
  NSString *field_;
  OrgApacheLuceneUtilBytesRef *term_;
}

- (instancetype)init;

- (instancetype)initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm:(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *)other;

- (jboolean)isEqual:(id)_other;

- (OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *)clone;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm, term_, OrgApacheLuceneUtilBytesRef *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_init(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *self);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *new_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *self, OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *other);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *new_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *other) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm)

@interface OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader : OrgApacheLuceneIndexTerms < OrgApacheLuceneUtilAccountable > {
 @public
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader *this$0_;
  jlong numTerms_;
  OrgApacheLuceneIndexFieldInfo *fieldInfo_;
  jlong termsStartPointer_;
  jlong sumTotalTermFreq_;
  jlong sumDocFreq_;
  jint docCount_;
  jint longsSize_;
}

- (instancetype)initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader:(OrgApacheLuceneCodecsBlocktermsBlockTermsReader *)outer$
                                      withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                                                               withLong:(jlong)numTerms
                                                               withLong:(jlong)termsStartPointer
                                                               withLong:(jlong)sumTotalTermFreq
                                                               withLong:(jlong)sumDocFreq
                                                                withInt:(jint)docCount
                                                                withInt:(jint)longsSize;

- (jlong)ramBytesUsed;

- (id<JavaUtilCollection>)getChildResources;

- (OrgApacheLuceneIndexTermsEnum *)iterator;

- (jboolean)hasFreqs;

- (jboolean)hasOffsets;

- (jboolean)hasPositions;

- (jboolean)hasPayloads;

- (jlong)size;

- (jlong)getSumTotalTermFreq;

- (jlong)getSumDocFreq;

- (jint)getDocCount;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader, this$0_, OrgApacheLuceneCodecsBlocktermsBlockTermsReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader, fieldInfo_, OrgApacheLuceneIndexFieldInfo *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withLong_withLong_withLong_withInt_withInt_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *self, OrgApacheLuceneCodecsBlocktermsBlockTermsReader *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, jlong termsStartPointer, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *new_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withLong_withLong_withLong_withInt_withInt_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, jlong termsStartPointer, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader)

@interface OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum : OrgApacheLuceneIndexTermsEnum {
 @public
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *this$0_;
  OrgApacheLuceneStoreIndexInput *in_;
  OrgApacheLuceneCodecsBlockTermState *state_;
  jboolean doOrd_;
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *fieldTerm_;
  OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase_FieldIndexEnum *indexEnum_;
  OrgApacheLuceneUtilBytesRefBuilder *term_;
  jboolean indexIsCurrent_;
  jboolean didIndexNext_;
  OrgApacheLuceneUtilBytesRef *nextIndexTerm_;
  jboolean seekPending_;
  IOSByteArray *termSuffixes_;
  OrgApacheLuceneStoreByteArrayDataInput *termSuffixesReader_;
  jint termBlockPrefix_;
  jint blockTermCount_;
  IOSByteArray *docFreqBytes_;
  OrgApacheLuceneStoreByteArrayDataInput *freqReader_;
  jint metaDataUpto_;
  IOSLongArray *longs_;
  IOSByteArray *bytes_;
  OrgApacheLuceneStoreByteArrayDataInput *bytesReader_;
}

- (instancetype)initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader:(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *)outer$;

- (OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *)seekCeilWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target;

- (OrgApacheLuceneUtilBytesRef *)next;

- (OrgApacheLuceneUtilBytesRef *)_next;

- (OrgApacheLuceneUtilBytesRef *)term;

- (jint)docFreq;

- (jlong)totalTermFreq;

- (OrgApacheLuceneIndexPostingsEnum *)postingsWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)reuse
                                                                           withInt:(jint)flags;

- (void)seekExactWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target
               withOrgApacheLuceneIndexTermState:(OrgApacheLuceneIndexTermState *)otherState;

- (OrgApacheLuceneIndexTermState *)termState;

- (void)seekExactWithLong:(jlong)ord;

- (jlong)ord;

- (jboolean)nextBlock;

- (void)decodeMetaData;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum, this$0_, OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum, in_, OrgApacheLuceneStoreIndexInput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum, state_, OrgApacheLuceneCodecsBlockTermState *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum, fieldTerm_, OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum, indexEnum_, OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase_FieldIndexEnum *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum, term_, OrgApacheLuceneUtilBytesRefBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum, nextIndexTerm_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum, termSuffixes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum, termSuffixesReader_, OrgApacheLuceneStoreByteArrayDataInput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum, docFreqBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum, freqReader_, OrgApacheLuceneStoreByteArrayDataInput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum, longs_, IOSLongArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum, bytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum, bytesReader_, OrgApacheLuceneStoreByteArrayDataInput *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum *self, OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *outer$);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum *new_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilBytesRef *OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum__next(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum *self);

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_nextBlock(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_decodeMetaData(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsBlocktermsBlockTermsReader)

@implementation OrgApacheLuceneCodecsBlocktermsBlockTermsReader

- (instancetype)initWithOrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase:(OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase *)indexReader
                                withOrgApacheLuceneCodecsPostingsReaderBase:(OrgApacheLuceneCodecsPostingsReaderBase *)postingsReader
                                   withOrgApacheLuceneIndexSegmentReadState:(OrgApacheLuceneIndexSegmentReadState *)state {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_initWithOrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase_withOrgApacheLuceneCodecsPostingsReaderBase_withOrgApacheLuceneIndexSegmentReadState_(self, indexReader, postingsReader, state);
  return self;
}

- (void)seekDirWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)input {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_seekDirWithOrgApacheLuceneStoreIndexInput_(self, input);
}

- (void)close {
  @try {
    @try {
      if (indexReader_ != nil) {
        [indexReader_ close];
      }
    }
    @finally {
      JreStrongAssign(&indexReader_, nil);
      if (in_ != nil) {
        [in_ close];
      }
    }
  }
  @finally {
    if (postingsReader_ != nil) {
      [postingsReader_ close];
    }
  }
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilSet>) nil_chk(JavaUtilCollections_unmodifiableSetWithJavaUtilSet_([((JavaUtilTreeMap *) nil_chk(fields_)) keySet]))) iterator];
}

- (OrgApacheLuceneIndexTerms *)termsWithNSString:(NSString *)field {
  JreAssert((field != nil), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:208 condition failed: assert field != null;"));
  return [((JavaUtilTreeMap *) nil_chk(fields_)) getWithId:field];
}

- (jint)size {
  return [((JavaUtilTreeMap *) nil_chk(fields_)) size];
}

- (jlong)ramBytesUsed {
  jlong ramBytesUsed = OrgApacheLuceneCodecsBlocktermsBlockTermsReader_BASE_RAM_BYTES_USED_;
  ramBytesUsed += (postingsReader_ != nil) ? [postingsReader_ ramBytesUsed] : 0;
  ramBytesUsed += (indexReader_ != nil) ? [indexReader_ ramBytesUsed] : 0;
  ramBytesUsed += [((JavaUtilTreeMap *) nil_chk(fields_)) size] * 2LL * JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF_);
  for (OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader * __strong reader in nil_chk([fields_ values])) {
    ramBytesUsed += [((OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *) nil_chk(reader)) ramBytesUsed];
  }
  return ramBytesUsed;
}

- (id<JavaUtilCollection>)getChildResources {
  id<JavaUtilList> resources = [new_JavaUtilArrayList_init() autorelease];
  if (indexReader_ != nil) {
    [resources addWithId:OrgApacheLuceneUtilAccountables_namedAccountableWithNSString_withOrgApacheLuceneUtilAccountable_(@"term index", indexReader_)];
  }
  if (postingsReader_ != nil) {
    [resources addWithId:OrgApacheLuceneUtilAccountables_namedAccountableWithNSString_withOrgApacheLuceneUtilAccountable_(@"delegate", postingsReader_)];
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(resources);
}

- (NSString *)description {
  return JreStrcat("$$@$@C", [[self getClass] getSimpleName], @"(index=", indexReader_, @",delegate=", postingsReader_, ')');
}

- (void)checkIntegrity {
  OrgApacheLuceneCodecsCodecUtil_checksumEntireFileWithOrgApacheLuceneStoreIndexInput_(in_);
  [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(postingsReader_)) checkIntegrity];
}

- (void)dealloc {
  RELEASE_(in_);
  RELEASE_(postingsReader_);
  RELEASE_(fields_);
  RELEASE_(indexReader_);
  [super dealloc];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsBlocktermsBlockTermsReader class]) {
    OrgApacheLuceneCodecsBlocktermsBlockTermsReader_BASE_RAM_BYTES_USED_ = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_class_());
    OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FIELD_READER_RAM_BYTES_USED_ = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_class_());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsBlocktermsBlockTermsReader)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase:withOrgApacheLuceneCodecsPostingsReaderBase:withOrgApacheLuceneIndexSegmentReadState:", "BlockTermsReader", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "seekDirWithOrgApacheLuceneStoreIndexInput:", "seekDir", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "termsWithNSString:", "terms", "Lorg.apache.lucene.index.Terms;", 0x1, "Ljava.io.IOException;", NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "getChildResources", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "checkIntegrity", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_RAM_BYTES_USED_", NULL, 0x1a, "J", &OrgApacheLuceneCodecsBlocktermsBlockTermsReader_BASE_RAM_BYTES_USED_, NULL, .constantValue.asLong = 0 },
    { "in_", NULL, 0x12, "Lorg.apache.lucene.store.IndexInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "postingsReader_", NULL, 0x12, "Lorg.apache.lucene.codecs.PostingsReaderBase;", NULL, NULL, .constantValue.asLong = 0 },
    { "fields_", NULL, 0x12, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Ljava/lang/String;Lorg/apache/lucene/codecs/blockterms/BlockTermsReader$FieldReader;>;", .constantValue.asLong = 0 },
    { "indexReader_", NULL, 0x2, "Lorg.apache.lucene.codecs.blockterms.TermsIndexReaderBase;", NULL, NULL, .constantValue.asLong = 0 },
    { "FIELD_READER_RAM_BYTES_USED_", NULL, 0x1a, "J", &OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FIELD_READER_RAM_BYTES_USED_, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.codecs.blockterms.BlockTermsReader$FieldAndTerm;", "Lorg.apache.lucene.codecs.blockterms.BlockTermsReader$FieldReader;"};
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktermsBlockTermsReader = { 2, "BlockTermsReader", "org.apache.lucene.codecs.blockterms", NULL, 0x1, 10, methods, 6, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktermsBlockTermsReader;
}

@end

void OrgApacheLuceneCodecsBlocktermsBlockTermsReader_initWithOrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase_withOrgApacheLuceneCodecsPostingsReaderBase_withOrgApacheLuceneIndexSegmentReadState_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader *self, OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase *indexReader, OrgApacheLuceneCodecsPostingsReaderBase *postingsReader, OrgApacheLuceneIndexSegmentReadState *state) {
  OrgApacheLuceneCodecsFieldsProducer_init(self);
  JreStrongAssignAndConsume(&self->fields_, new_JavaUtilTreeMap_init());
  JreStrongAssign(&self->postingsReader_, postingsReader);
  NSString *filename = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentReadState *) nil_chk(state))->segmentInfo_))->name_, state->segmentSuffix_, OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TERMS_EXTENSION_);
  JreStrongAssign(&self->in_, [((OrgApacheLuceneStoreDirectory *) nil_chk(state->directory_)) openInputWithNSString:filename withOrgApacheLuceneStoreIOContext:state->context_]);
  jboolean success = NO;
  @try {
    OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_withByteArray_withNSString_(self->in_, OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_CODEC_NAME_, OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_VERSION_START, OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_VERSION_CURRENT, [state->segmentInfo_ getId], state->segmentSuffix_);
    [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(postingsReader)) init__WithOrgApacheLuceneStoreIndexInput:self->in_ withOrgApacheLuceneIndexSegmentReadState:state];
    OrgApacheLuceneCodecsCodecUtil_retrieveChecksumWithOrgApacheLuceneStoreIndexInput_(self->in_);
    OrgApacheLuceneCodecsBlocktermsBlockTermsReader_seekDirWithOrgApacheLuceneStoreIndexInput_(self, self->in_);
    jint numFields = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->in_)) readVInt];
    if (numFields < 0) {
      @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I", @"invalid number of fields: ", numFields), self->in_) autorelease];
    }
    for (jint i = 0; i < numFields; i++) {
      jint field = [self->in_ readVInt];
      jlong numTerms = [self->in_ readVLong];
      JreAssert((numTerms >= 0), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:141 condition failed: assert numTerms >= 0;"));
      jlong termsStartPointer = [self->in_ readVLong];
      OrgApacheLuceneIndexFieldInfo *fieldInfo = [((OrgApacheLuceneIndexFieldInfos *) nil_chk(state->fieldInfos_)) fieldInfoWithInt:field];
      jlong sumTotalTermFreq = [((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions] == JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS) ? -1 : [self->in_ readVLong];
      jlong sumDocFreq = [self->in_ readVLong];
      jint docCount = [self->in_ readVInt];
      jint longsSize = [self->in_ readVInt];
      if (docCount < 0 || docCount > [state->segmentInfo_ maxDoc]) {
        @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I$I", @"invalid docCount: ", docCount, @" maxDoc: ", [state->segmentInfo_ maxDoc]), self->in_) autorelease];
      }
      if (sumDocFreq < docCount) {
        @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$J$I", @"invalid sumDocFreq: ", sumDocFreq, @" docCount: ", docCount), self->in_) autorelease];
      }
      if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) {
        @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$J$J", @"invalid sumTotalTermFreq: ", sumTotalTermFreq, @" sumDocFreq: ", sumDocFreq), self->in_) autorelease];
      }
      OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *previous = [self->fields_ putWithId:fieldInfo->name_ withId:[new_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withLong_withLong_withLong_withInt_withInt_(self, fieldInfo, numTerms, termsStartPointer, sumTotalTermFreq, sumDocFreq, docCount, longsSize) autorelease]];
      if (previous != nil) {
        @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$$", @"duplicate fields: ", fieldInfo->name_), self->in_) autorelease];
      }
    }
    success = YES;
  }
  @finally {
    if (!success) {
      [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->in_)) close];
    }
  }
  JreStrongAssign(&self->indexReader_, indexReader);
}

OrgApacheLuceneCodecsBlocktermsBlockTermsReader *new_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_initWithOrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase_withOrgApacheLuceneCodecsPostingsReaderBase_withOrgApacheLuceneIndexSegmentReadState_(OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase *indexReader, OrgApacheLuceneCodecsPostingsReaderBase *postingsReader, OrgApacheLuceneIndexSegmentReadState *state) {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader *self = [OrgApacheLuceneCodecsBlocktermsBlockTermsReader alloc];
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_initWithOrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase_withOrgApacheLuceneCodecsPostingsReaderBase_withOrgApacheLuceneIndexSegmentReadState_(self, indexReader, postingsReader, state);
  return self;
}

void OrgApacheLuceneCodecsBlocktermsBlockTermsReader_seekDirWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader *self, OrgApacheLuceneStoreIndexInput *input) {
  [input seekWithLong:[((OrgApacheLuceneStoreIndexInput *) nil_chk(input)) length] - OrgApacheLuceneCodecsCodecUtil_footerLength() - 8];
  jlong dirOffset = [input readLong];
  [input seekWithLong:dirOffset];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktermsBlockTermsReader)

@implementation OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm

- (instancetype)init {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_init(self);
  return self;
}

- (instancetype)initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm:(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *)other {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_(self, other);
  return self;
}

- (jboolean)isEqual:(id)_other {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *other = (OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *) check_class_cast(_other, [OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm class]);
  return [((NSString *) nil_chk(((OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *) nil_chk(other))->field_)) isEqual:field_] && [((OrgApacheLuceneUtilBytesRef *) nil_chk(term_)) bytesEqualsWithOrgApacheLuceneUtilBytesRef:other->term_];
}

- (OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *)clone {
  return [new_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_(self) autorelease];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(field_)) hash]) * 31 + ((jint) [((OrgApacheLuceneUtilBytesRef *) nil_chk(term_)) hash]);
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(term_);
  [super dealloc];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "FieldAndTerm", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm:", "FieldAndTerm", NULL, 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "clone", NULL, "Lorg.apache.lucene.codecs.blockterms.BlockTermsReader$FieldAndTerm;", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "field_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "term_", NULL, 0x0, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm = { 2, "FieldAndTerm", "org.apache.lucene.codecs.blockterms", "BlockTermsReader", 0xa, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm;
}

@end

void OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_init(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *self) {
  NSObject_init(self);
}

OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *new_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_init() {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *self = [OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm alloc];
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_init(self);
  return self;
}

void OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *self, OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *other) {
  NSObject_init(self);
  JreStrongAssign(&self->field_, ((OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *) nil_chk(other))->field_);
  JreStrongAssign(&self->term_, OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_(other->term_));
}

OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *new_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *other) {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm *self = [OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm alloc];
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_(self, other);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm)

@implementation OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader

- (instancetype)initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader:(OrgApacheLuceneCodecsBlocktermsBlockTermsReader *)outer$
                                      withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                                                               withLong:(jlong)numTerms
                                                               withLong:(jlong)termsStartPointer
                                                               withLong:(jlong)sumTotalTermFreq
                                                               withLong:(jlong)sumDocFreq
                                                                withInt:(jint)docCount
                                                                withInt:(jint)longsSize {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withLong_withLong_withLong_withInt_withInt_(self, outer$, fieldInfo, numTerms, termsStartPointer, sumTotalTermFreq, sumDocFreq, docCount, longsSize);
  return self;
}

- (jlong)ramBytesUsed {
  return JreLoadStatic(OrgApacheLuceneCodecsBlocktermsBlockTermsReader, FIELD_READER_RAM_BYTES_USED_);
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (OrgApacheLuceneIndexTermsEnum *)iterator {
  return [new_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_(self) autorelease];
}

- (jboolean)hasFreqs {
  return [((OrgApacheLuceneIndexIndexOptionsEnum *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS)] >= 0;
}

- (jboolean)hasOffsets {
  return [((OrgApacheLuceneIndexIndexOptionsEnum *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)] >= 0;
}

- (jboolean)hasPositions {
  return [((OrgApacheLuceneIndexIndexOptionsEnum *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS_AND_POSITIONS)] >= 0;
}

- (jboolean)hasPayloads {
  return [((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) hasPayloads];
}

- (jlong)size {
  return numTerms_;
}

- (jlong)getSumTotalTermFreq {
  return sumTotalTermFreq_;
}

- (jlong)getSumDocFreq {
  return sumDocFreq_;
}

- (jint)getDocCount {
  return docCount_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(fieldInfo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader:withOrgApacheLuceneIndexFieldInfo:withLong:withLong:withLong:withLong:withInt:withInt:", "FieldReader", NULL, 0x0, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "getChildResources", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "iterator", NULL, "Lorg.apache.lucene.index.TermsEnum;", 0x1, "Ljava.io.IOException;", NULL },
    { "hasFreqs", NULL, "Z", 0x1, NULL, NULL },
    { "hasOffsets", NULL, "Z", 0x1, NULL, NULL },
    { "hasPositions", NULL, "Z", 0x1, NULL, NULL },
    { "hasPayloads", NULL, "Z", 0x1, NULL, NULL },
    { "size", NULL, "J", 0x1, NULL, NULL },
    { "getSumTotalTermFreq", NULL, "J", 0x1, NULL, NULL },
    { "getSumDocFreq", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "getDocCount", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.codecs.blockterms.BlockTermsReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "numTerms_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldInfo_", NULL, 0x10, "Lorg.apache.lucene.index.FieldInfo;", NULL, NULL, .constantValue.asLong = 0 },
    { "termsStartPointer_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "sumTotalTermFreq_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "sumDocFreq_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "docCount_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "longsSize_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.codecs.blockterms.BlockTermsReader$FieldReader$SegmentTermsEnum;"};
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader = { 2, "FieldReader", "org.apache.lucene.codecs.blockterms", "BlockTermsReader", 0x2, 12, methods, 8, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader;
}

@end

void OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withLong_withLong_withLong_withInt_withInt_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *self, OrgApacheLuceneCodecsBlocktermsBlockTermsReader *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, jlong termsStartPointer, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneIndexTerms_init(self);
  JreAssert((numTerms > 0), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:228 condition failed: assert numTerms > 0;"));
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  self->numTerms_ = numTerms;
  self->termsStartPointer_ = termsStartPointer;
  self->sumTotalTermFreq_ = sumTotalTermFreq;
  self->sumDocFreq_ = sumDocFreq;
  self->docCount_ = docCount;
  self->longsSize_ = longsSize;
}

OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *new_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withLong_withLong_withLong_withInt_withInt_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, jlong termsStartPointer, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize) {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *self = [OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader alloc];
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withLong_withLong_withLong_withInt_withInt_(self, outer$, fieldInfo, numTerms, termsStartPointer, sumTotalTermFreq, sumDocFreq, docCount, longsSize);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader)

@implementation OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum

- (instancetype)initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader:(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *)outer$ {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_(self, outer$);
  return self;
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *)seekCeilWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target {
  if (indexEnum_ == nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"terms index was not loaded") autorelease];
  }
  if (didIndexNext_) {
    if (nextIndexTerm_ == nil) {
    }
    else {
    }
  }
  jboolean doSeek = YES;
  if (indexIsCurrent_) {
    jint cmp = [((id<JavaUtilComparator>) nil_chk(OrgApacheLuceneUtilBytesRef_getUTF8SortedAsUnicodeComparator())) compareWithId:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) get] withId:target];
    if (cmp == 0) {
      return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND);
    }
    else if (cmp < 0) {
      if (!didIndexNext_) {
        if ([((OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase_FieldIndexEnum *) nil_chk(indexEnum_)) next] == -1) {
          JreStrongAssign(&nextIndexTerm_, nil);
        }
        else {
          JreStrongAssign(&nextIndexTerm_, [indexEnum_ term]);
        }
        didIndexNext_ = YES;
      }
      if (nextIndexTerm_ == nil || [((id<JavaUtilComparator>) nil_chk(OrgApacheLuceneUtilBytesRef_getUTF8SortedAsUnicodeComparator())) compareWithId:target withId:nextIndexTerm_] < 0) {
        doSeek = NO;
      }
    }
  }
  if (doSeek) {
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(in_)) seekWithLong:[((OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase_FieldIndexEnum *) nil_chk(indexEnum_)) seekWithOrgApacheLuceneUtilBytesRef:target]];
    jboolean result = OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_nextBlock(self);
    JreAssert((result), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:419 condition failed: assert result;"));
    indexIsCurrent_ = YES;
    didIndexNext_ = NO;
    if (doOrd_) {
      ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->ord_ = [indexEnum_ ord] - 1;
    }
    [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) copyBytesWithOrgApacheLuceneUtilBytesRef:[indexEnum_ term]];
  }
  else {
    if (((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_ == blockTermCount_ && !OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_nextBlock(self)) {
      indexIsCurrent_ = NO;
      return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END);
    }
  }
  seekPending_ = NO;
  jint common = 0;
  while (YES) {
    if (common < termBlockPrefix_) {
      jint cmp = ([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) byteAtWithInt:common] & (jint) 0xFF) - (IOSByteArray_Get(nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->bytes_), target->offset_ + common) & (jint) 0xFF);
      if (cmp < 0) {
        if (((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_ < blockTermCount_) {
          while (state_->termBlockOrd_ < blockTermCount_ - 1) {
            state_->termBlockOrd_++;
            state_->ord_++;
            [termSuffixesReader_ skipBytesWithLong:[((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(termSuffixesReader_)) readVInt]];
          }
          jint suffix = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(termSuffixesReader_)) readVInt];
          [term_ setLengthWithInt:termBlockPrefix_ + suffix];
          [term_ growWithInt:[term_ length]];
          [termSuffixesReader_ readBytesWithByteArray:[term_ bytes] withInt:termBlockPrefix_ withInt:suffix];
        }
        state_->ord_++;
        if (!OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_nextBlock(self)) {
          indexIsCurrent_ = NO;
          return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END);
        }
        common = 0;
      }
      else if (cmp > 0) {
        JreAssert((((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_ == 0), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:491 condition failed: assert state.termBlockOrd == 0;"));
        jint suffix = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(termSuffixesReader_)) readVInt];
        [term_ setLengthWithInt:termBlockPrefix_ + suffix];
        [term_ growWithInt:[term_ length]];
        [termSuffixesReader_ readBytesWithByteArray:[term_ bytes] withInt:termBlockPrefix_ withInt:suffix];
        return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, NOT_FOUND);
      }
      else {
        common++;
      }
      continue;
    }
    while (YES) {
      ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_++;
      state_->ord_++;
      jint suffix = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(termSuffixesReader_)) readVInt];
      jint termLen = termBlockPrefix_ + suffix;
      jint bytePos = [termSuffixesReader_ getPosition];
      jboolean next = NO;
      jint limit = ((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->offset_ + (termLen < target->length_ ? termLen : target->length_);
      jint targetPos = target->offset_ + termBlockPrefix_;
      while (targetPos < limit) {
        jint cmp = (IOSByteArray_Get(nil_chk(termSuffixes_), bytePos++) & (jint) 0xFF) - (IOSByteArray_Get(nil_chk(target->bytes_), targetPos++) & (jint) 0xFF);
        if (cmp < 0) {
          next = YES;
          break;
        }
        else if (cmp > 0) {
          [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) setLengthWithInt:termBlockPrefix_ + suffix];
          [term_ growWithInt:[term_ length]];
          [termSuffixesReader_ readBytesWithByteArray:[term_ bytes] withInt:termBlockPrefix_ withInt:suffix];
          return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, NOT_FOUND);
        }
      }
      if (!next && target->length_ <= termLen) {
        [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) setLengthWithInt:termBlockPrefix_ + suffix];
        [term_ growWithInt:[term_ length]];
        [termSuffixesReader_ readBytesWithByteArray:[term_ bytes] withInt:termBlockPrefix_ withInt:suffix];
        if (target->length_ == termLen) {
          return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND);
        }
        else {
          return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, NOT_FOUND);
        }
      }
      if (state_->termBlockOrd_ == blockTermCount_) {
        [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) setLengthWithInt:termBlockPrefix_ + suffix];
        [term_ growWithInt:[term_ length]];
        [termSuffixesReader_ readBytesWithByteArray:[term_ bytes] withInt:termBlockPrefix_ withInt:suffix];
        break;
      }
      else {
        [termSuffixesReader_ skipBytesWithLong:suffix];
      }
    }
    JreAssert((indexIsCurrent_), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:570 condition failed: assert indexIsCurrent;"));
    if (!OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_nextBlock(self)) {
      indexIsCurrent_ = NO;
      return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END);
    }
    common = 0;
  }
}

- (OrgApacheLuceneUtilBytesRef *)next {
  if (seekPending_) {
    JreAssert((!indexIsCurrent_), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:591 condition failed: assert !indexIsCurrent;"));
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(in_)) seekWithLong:((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->blockFilePointer_];
    jint pendingSeekCount = state_->termBlockOrd_;
    jboolean result = OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_nextBlock(self);
    jlong savOrd = state_->ord_;
    JreAssert((result), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:601 condition failed: assert result;"));
    while (state_->termBlockOrd_ < pendingSeekCount) {
      OrgApacheLuceneUtilBytesRef *nextResult = OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum__next(self);
      JreAssert((nextResult != nil), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:605 condition failed: assert nextResult != null;"));
    }
    seekPending_ = NO;
    state_->ord_ = savOrd;
  }
  return OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum__next(self);
}

- (OrgApacheLuceneUtilBytesRef *)_next {
  return OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum__next(self);
}

- (OrgApacheLuceneUtilBytesRef *)term {
  return [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) get];
}

- (jint)docFreq {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_decodeMetaData(self);
  return ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->docFreq_;
}

- (jlong)totalTermFreq {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_decodeMetaData(self);
  return ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->totalTermFreq_;
}

- (OrgApacheLuceneIndexPostingsEnum *)postingsWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)reuse
                                                                           withInt:(jint)flags {
  if (OrgApacheLuceneIndexPostingsEnum_featureRequestedWithInt_withShort_(flags, OrgApacheLuceneIndexDocsAndPositionsEnum_OLD_NULL_SEMANTICS)) {
    if ([((OrgApacheLuceneIndexIndexOptionsEnum *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(this$0_->fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS_AND_POSITIONS)] < 0) {
      return nil;
    }
  }
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_decodeMetaData(self);
  return [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(this$0_->this$0_->postingsReader_)) postingsWithOrgApacheLuceneIndexFieldInfo:this$0_->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:state_ withOrgApacheLuceneIndexPostingsEnum:reuse withInt:flags];
}

- (void)seekExactWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target
               withOrgApacheLuceneIndexTermState:(OrgApacheLuceneIndexTermState *)otherState {
  JreAssert((otherState != nil && [otherState isKindOfClass:[OrgApacheLuceneCodecsBlockTermState class]]), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:678 condition failed: assert otherState != null && otherState instanceof BlockTermState;"));
  JreAssert((!doOrd_ || ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(((OrgApacheLuceneCodecsBlockTermState *) check_class_cast(otherState, [OrgApacheLuceneCodecsBlockTermState class]))))->ord_ < this$0_->numTerms_), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:679 condition failed: assert !doOrd || ((BlockTermState) otherState).ord < numTerms;"));
  [((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_)) copyFromWithOrgApacheLuceneIndexTermState:otherState];
  seekPending_ = YES;
  indexIsCurrent_ = NO;
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) copyBytesWithOrgApacheLuceneUtilBytesRef:target];
}

- (OrgApacheLuceneIndexTermState *)termState {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_decodeMetaData(self);
  OrgApacheLuceneIndexTermState *ts = [((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_)) clone];
  return ts;
}

- (void)seekExactWithLong:(jlong)ord {
  if (indexEnum_ == nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"terms index was not loaded") autorelease];
  }
  JreAssert((ord < this$0_->numTerms_), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:702 condition failed: assert ord < numTerms;"));
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(in_)) seekWithLong:[((OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase_FieldIndexEnum *) nil_chk(indexEnum_)) seekWithLong:ord]];
  jboolean result = OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_nextBlock(self);
  JreAssert((result), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:711 condition failed: assert result;"));
  indexIsCurrent_ = YES;
  didIndexNext_ = NO;
  seekPending_ = NO;
  ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->ord_ = [indexEnum_ ord] - 1;
  JreAssert((state_->ord_ >= -1), (JreStrcat("$J", @"ord=", state_->ord_)));
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term_)) copyBytesWithOrgApacheLuceneUtilBytesRef:[indexEnum_ term]];
  jint left = (jint) (ord - state_->ord_);
  while (left > 0) {
    OrgApacheLuceneUtilBytesRef *term = OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum__next(self);
    JreAssert((term != nil), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:725 condition failed: assert term != null;"));
    left--;
    JreAssert((indexIsCurrent_), (@"org/apache/lucene/codecs/blockterms/BlockTermsReader.java:727 condition failed: assert indexIsCurrent;"));
  }
}

- (jlong)ord {
  if (!doOrd_) {
    @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
  }
  return ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->ord_;
}

- (jboolean)nextBlock {
  return OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_nextBlock(self);
}

- (void)decodeMetaData {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_decodeMetaData(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(in_);
  RELEASE_(state_);
  RELEASE_(fieldTerm_);
  RELEASE_(indexEnum_);
  RELEASE_(term_);
  RELEASE_(nextIndexTerm_);
  RELEASE_(termSuffixes_);
  RELEASE_(termSuffixesReader_);
  RELEASE_(docFreqBytes_);
  RELEASE_(freqReader_);
  RELEASE_(longs_);
  RELEASE_(bytes_);
  RELEASE_(bytesReader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader:", "SegmentTermsEnum", NULL, 0x1, NULL, NULL },
    { "seekCeilWithOrgApacheLuceneUtilBytesRef:", "seekCeil", "Lorg.apache.lucene.index.TermsEnum$SeekStatus;", 0x1, "Ljava.io.IOException;", NULL },
    { "next", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, "Ljava.io.IOException;", NULL },
    { "_next", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x2, "Ljava.io.IOException;", NULL },
    { "term", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, NULL, NULL },
    { "docFreq", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "totalTermFreq", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "postingsWithOrgApacheLuceneIndexPostingsEnum:withInt:", "postings", "Lorg.apache.lucene.index.PostingsEnum;", 0x1, "Ljava.io.IOException;", NULL },
    { "seekExactWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneIndexTermState:", "seekExact", "V", 0x1, NULL, NULL },
    { "termState", NULL, "Lorg.apache.lucene.index.TermState;", 0x1, "Ljava.io.IOException;", NULL },
    { "seekExactWithLong:", "seekExact", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "ord", NULL, "J", 0x1, NULL, NULL },
    { "nextBlock", NULL, "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "decodeMetaData", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.codecs.blockterms.BlockTermsReader$FieldReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "in_", NULL, 0x12, "Lorg.apache.lucene.store.IndexInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "state_", NULL, 0x12, "Lorg.apache.lucene.codecs.BlockTermState;", NULL, NULL, .constantValue.asLong = 0 },
    { "doOrd_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldTerm_", NULL, 0x12, "Lorg.apache.lucene.codecs.blockterms.BlockTermsReader$FieldAndTerm;", NULL, NULL, .constantValue.asLong = 0 },
    { "indexEnum_", NULL, 0x12, "Lorg.apache.lucene.codecs.blockterms.TermsIndexReaderBase$FieldIndexEnum;", NULL, NULL, .constantValue.asLong = 0 },
    { "term_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRefBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "indexIsCurrent_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "didIndexNext_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "nextIndexTerm_", NULL, 0x2, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "seekPending_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "termSuffixes_", NULL, 0x2, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "termSuffixesReader_", NULL, 0x2, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "termBlockPrefix_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "blockTermCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "docFreqBytes_", NULL, 0x2, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "freqReader_", NULL, 0x12, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "metaDataUpto_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "longs_", NULL, 0x2, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "bytes_", NULL, 0x2, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "bytesReader_", NULL, 0x2, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum = { 2, "SegmentTermsEnum", "org.apache.lucene.codecs.blockterms", "BlockTermsReader$FieldReader", 0x12, 14, methods, 21, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum;
}

@end

void OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum *self, OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneIndexTermsEnum_init(self);
  JreStrongAssignAndConsume(&self->fieldTerm_, new_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldAndTerm_init());
  JreStrongAssignAndConsume(&self->term_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  JreStrongAssignAndConsume(&self->termSuffixesReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  JreStrongAssignAndConsume(&self->freqReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  JreStrongAssign(&self->in_, [((OrgApacheLuceneStoreIndexInput *) nil_chk(outer$->this$0_->in_)) clone]);
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->in_)) seekWithLong:outer$->termsStartPointer_];
  JreStrongAssign(&self->indexEnum_, [((OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase *) nil_chk(outer$->this$0_->indexReader_)) getFieldEnumWithOrgApacheLuceneIndexFieldInfo:outer$->fieldInfo_]);
  self->doOrd_ = [outer$->this$0_->indexReader_ supportsOrd];
  JreStrongAssign(&self->fieldTerm_->field_, ((OrgApacheLuceneIndexFieldInfo *) nil_chk(outer$->fieldInfo_))->name_);
  JreStrongAssign(&self->state_, [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(outer$->this$0_->postingsReader_)) newTermState]);
  ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(self->state_))->totalTermFreq_ = -1;
  self->state_->ord_ = -1;
  JreStrongAssignAndConsume(&self->termSuffixes_, [IOSByteArray newArrayWithLength:128]);
  JreStrongAssignAndConsume(&self->docFreqBytes_, [IOSByteArray newArrayWithLength:64]);
  JreStrongAssignAndConsume(&self->longs_, [IOSLongArray newArrayWithLength:outer$->longsSize_]);
}

OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum *new_OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader *outer$) {
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum *self = [OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum alloc];
  OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_(self, outer$);
  return self;
}

OrgApacheLuceneUtilBytesRef *OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum__next(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum *self) {
  if (((OrgApacheLuceneCodecsBlockTermState *) nil_chk(self->state_))->termBlockOrd_ == self->blockTermCount_ && !OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_nextBlock(self)) {
    self->indexIsCurrent_ = NO;
    return nil;
  }
  jint suffix = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(self->termSuffixesReader_)) readVInt];
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->term_)) setLengthWithInt:self->termBlockPrefix_ + suffix];
  [self->term_ growWithInt:[self->term_ length]];
  [self->termSuffixesReader_ readBytesWithByteArray:[self->term_ bytes] withInt:self->termBlockPrefix_ withInt:suffix];
  self->state_->termBlockOrd_++;
  self->state_->ord_++;
  return [self->term_ get];
}

jboolean OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_nextBlock(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum *self) {
  ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(self->state_))->blockFilePointer_ = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->in_)) getFilePointer];
  self->blockTermCount_ = [self->in_ readVInt];
  if (self->blockTermCount_ == 0) {
    return NO;
  }
  self->termBlockPrefix_ = [self->in_ readVInt];
  jint len = [self->in_ readVInt];
  if (((IOSByteArray *) nil_chk(self->termSuffixes_))->size_ < len) {
    JreStrongAssignAndConsume(&self->termSuffixes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(len, 1)]);
  }
  [self->in_ readBytesWithByteArray:self->termSuffixes_ withInt:0 withInt:len];
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(self->termSuffixesReader_)) resetWithByteArray:self->termSuffixes_ withInt:0 withInt:len];
  len = [self->in_ readVInt];
  if (((IOSByteArray *) nil_chk(self->docFreqBytes_))->size_ < len) {
    JreStrongAssignAndConsume(&self->docFreqBytes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(len, 1)]);
  }
  [self->in_ readBytesWithByteArray:self->docFreqBytes_ withInt:0 withInt:len];
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(self->freqReader_)) resetWithByteArray:self->docFreqBytes_ withInt:0 withInt:len];
  len = [self->in_ readVInt];
  if (self->bytes_ == nil) {
    JreStrongAssignAndConsume(&self->bytes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(len, 1)]);
    JreStrongAssignAndConsume(&self->bytesReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  }
  else if (self->bytes_->size_ < len) {
    JreStrongAssignAndConsume(&self->bytes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(len, 1)]);
  }
  [self->in_ readBytesWithByteArray:self->bytes_ withInt:0 withInt:len];
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(self->bytesReader_)) resetWithByteArray:self->bytes_ withInt:0 withInt:len];
  self->metaDataUpto_ = 0;
  self->state_->termBlockOrd_ = 0;
  self->indexIsCurrent_ = NO;
  return YES;
}

void OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum_decodeMetaData(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum *self) {
  if (!self->seekPending_) {
    jint limit = ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(self->state_))->termBlockOrd_;
    jboolean absolute = self->metaDataUpto_ == 0;
    while (self->metaDataUpto_ < limit) {
      self->state_->docFreq_ = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(self->freqReader_)) readVInt];
      if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(self->this$0_->fieldInfo_)) getIndexOptions] != JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS)) {
        self->state_->totalTermFreq_ = self->state_->docFreq_ + [self->freqReader_ readVLong];
      }
      for (jint i = 0; i < ((IOSLongArray *) nil_chk(self->longs_))->size_; i++) {
        *IOSLongArray_GetRef(self->longs_, i) = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(self->bytesReader_)) readVLong];
      }
      [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(self->this$0_->this$0_->postingsReader_)) decodeTermWithLongArray:self->longs_ withOrgApacheLuceneStoreDataInput:self->bytesReader_ withOrgApacheLuceneIndexFieldInfo:self->this$0_->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:self->state_ withBoolean:absolute];
      self->metaDataUpto_++;
      absolute = NO;
    }
  }
  else {
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktermsBlockTermsReader_FieldReader_SegmentTermsEnum)
