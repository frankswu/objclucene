//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.h"
#include "org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexReaderBase.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/Accountables.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/PagedBytes.h"
#include "org/apache/lucene/util/packed/MonotonicBlockPackedReader.h"

@class OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData;

#define OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_PAGED_BYTES_BITS 15

@interface OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader () {
 @public
  jlong indexInterval_;
  jint packedIntsVersion_;
  jint blocksize_;
  OrgApacheLuceneUtilPagedBytes_Reader *termBytesReader_;
}

- (void)seekDirWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)input;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader, termBytesReader_, OrgApacheLuceneUtilPagedBytes_Reader *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader, PAGED_BYTES_BITS, jint)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_seekDirWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *self, OrgApacheLuceneStoreIndexInput *input);

@interface OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum : OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase_FieldIndexEnum {
 @public
  OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *this$0_;
  OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *fieldIndex_;
  OrgApacheLuceneUtilBytesRef *term_;
  jlong ord_;
}

- (instancetype)initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader:(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *)outer$
     withOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData:(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *)fieldIndex;

- (OrgApacheLuceneUtilBytesRef *)term;

- (jlong)seekWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target;

- (jlong)next;

- (jlong)ord;

- (jlong)seekWithLong:(jlong)ord;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum, this$0_, OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum, fieldIndex_, OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum, term_, OrgApacheLuceneUtilBytesRef *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum_initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_withOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData_(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum *self, OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *outer$, OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *fieldIndex);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum *new_OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum_initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_withOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData_(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *outer$, OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *fieldIndex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum)

@interface OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData : NSObject < OrgApacheLuceneUtilAccountable > {
 @public
  jlong termBytesStart_;
  OrgApacheLuceneUtilPackedMonotonicBlockPackedReader *termOffsets_;
  OrgApacheLuceneUtilPackedMonotonicBlockPackedReader *termsDictOffsets_;
  jlong numIndexTerms_;
  jlong termsStart_;
}

- (instancetype)initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader:(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *)outer$
                                             withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg
                                              withOrgApacheLuceneUtilPagedBytes:(OrgApacheLuceneUtilPagedBytes *)termBytes
                                                                       withLong:(jlong)indexStart
                                                                       withLong:(jlong)termsStart
                                                                       withLong:(jlong)packedIndexStart
                                                                       withLong:(jlong)packedOffsetsStart
                                                                       withLong:(jlong)numIndexTerms;

- (jlong)ramBytesUsed;

- (id<JavaUtilCollection>)getChildResources;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData, termOffsets_, OrgApacheLuceneUtilPackedMonotonicBlockPackedReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData, termsDictOffsets_, OrgApacheLuceneUtilPackedMonotonicBlockPackedReader *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData_initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilPagedBytes_withLong_withLong_withLong_withLong_withLong_(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *self, OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *outer$, OrgApacheLuceneStoreIndexInput *inArg, OrgApacheLuceneUtilPagedBytes *termBytes, jlong indexStart, jlong termsStart, jlong packedIndexStart, jlong packedOffsetsStart, jlong numIndexTerms);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *new_OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData_initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilPagedBytes_withLong_withLong_withLong_withLong_withLong_(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *outer$, OrgApacheLuceneStoreIndexInput *inArg, OrgApacheLuceneUtilPagedBytes *termBytes, jlong indexStart, jlong termsStart, jlong packedIndexStart, jlong packedOffsetsStart, jlong numIndexTerms) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData)

@implementation OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader

- (instancetype)initWithOrgApacheLuceneIndexSegmentReadState:(OrgApacheLuceneIndexSegmentReadState *)state {
  OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_initWithOrgApacheLuceneIndexSegmentReadState_(self, state);
  return self;
}

- (jboolean)supportsOrd {
  return YES;
}

- (OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase_FieldIndexEnum *)getFieldEnumWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  return [new_OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum_initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_withOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData_(self, [((JavaUtilHashMap *) nil_chk(fields_)) getWithId:((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo))->name_]) autorelease];
}

- (void)close {
}

- (void)seekDirWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)input {
  OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_seekDirWithOrgApacheLuceneStoreIndexInput_(self, input);
}

- (jlong)ramBytesUsed {
  jlong sizeInBytes = ((termBytesReader_ != nil) ? [termBytesReader_ ramBytesUsed] : 0);
  for (OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData * __strong entry_ in nil_chk([((JavaUtilHashMap *) nil_chk(fields_)) values])) {
    sizeInBytes += [((OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *) nil_chk(entry_)) ramBytesUsed];
  }
  return sizeInBytes;
}

- (id<JavaUtilCollection>)getChildResources {
  return OrgApacheLuceneUtilAccountables_namedAccountablesWithNSString_withJavaUtilMap_(@"field", fields_);
}

- (NSString *)description {
  return JreStrcat("$$I$JC", [[self getClass] getSimpleName], @"(fields=", [((JavaUtilHashMap *) nil_chk(fields_)) size], @",interval=", indexInterval_, ')');
}

- (void)dealloc {
  RELEASE_(termBytesReader_);
  RELEASE_(fields_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexSegmentReadState:", "FixedGapTermsIndexReader", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "supportsOrd", NULL, "Z", 0x1, NULL, NULL },
    { "getFieldEnumWithOrgApacheLuceneIndexFieldInfo:", "getFieldEnum", "Lorg.apache.lucene.codecs.blockterms.TermsIndexReaderBase$FieldIndexEnum;", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "seekDirWithOrgApacheLuceneStoreIndexInput:", "seekDir", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "getChildResources", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "indexInterval_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "packedIntsVersion_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "blocksize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "PAGED_BYTES_BITS", "PAGED_BYTES_BITS", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_PAGED_BYTES_BITS },
    { "termBytesReader_", NULL, 0x12, "Lorg.apache.lucene.util.PagedBytes$Reader;", NULL, NULL, .constantValue.asLong = 0 },
    { "fields_", NULL, 0x10, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Lorg/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader$FieldIndexData;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.codecs.blockterms.FixedGapTermsIndexReader$IndexEnum;", "Lorg.apache.lucene.codecs.blockterms.FixedGapTermsIndexReader$FieldIndexData;"};
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader = { 2, "FixedGapTermsIndexReader", "org.apache.lucene.codecs.blockterms", NULL, 0x1, 8, methods, 6, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader;
}

@end

void OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_initWithOrgApacheLuceneIndexSegmentReadState_(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *self, OrgApacheLuceneIndexSegmentReadState *state) {
  OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase_init(self);
  JreStrongAssignAndConsume(&self->fields_, new_JavaUtilHashMap_init());
  OrgApacheLuceneUtilPagedBytes *termBytes = [new_OrgApacheLuceneUtilPagedBytes_initWithInt_(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_PAGED_BYTES_BITS) autorelease];
  NSString *fileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentReadState *) nil_chk(state))->segmentInfo_))->name_, state->segmentSuffix_, OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexWriter_TERMS_INDEX_EXTENSION_);
  OrgApacheLuceneStoreIndexInput *in = [((OrgApacheLuceneStoreDirectory *) nil_chk(state->directory_)) openInputWithNSString:fileName withOrgApacheLuceneStoreIOContext:state->context_];
  jboolean success = NO;
  @try {
    OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_withByteArray_withNSString_(in, OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexWriter_CODEC_NAME_, OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexWriter_VERSION_CURRENT, OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexWriter_VERSION_CURRENT, [state->segmentInfo_ getId], state->segmentSuffix_);
    OrgApacheLuceneCodecsCodecUtil_checksumEntireFileWithOrgApacheLuceneStoreIndexInput_(in);
    self->indexInterval_ = [((OrgApacheLuceneStoreIndexInput *) nil_chk(in)) readVInt];
    if (self->indexInterval_ < 1) {
      @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$J", @"invalid indexInterval: ", self->indexInterval_), in) autorelease];
    }
    self->packedIntsVersion_ = [in readVInt];
    self->blocksize_ = [in readVInt];
    OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_seekDirWithOrgApacheLuceneStoreIndexInput_(self, in);
    jint numFields = [in readVInt];
    if (numFields < 0) {
      @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I", @"invalid numFields: ", numFields), in) autorelease];
    }
    for (jint i = 0; i < numFields; i++) {
      jint field = [in readVInt];
      jlong numIndexTerms = [in readVInt];
      if (numIndexTerms < 0) {
        @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$J", @"invalid numIndexTerms: ", numIndexTerms), in) autorelease];
      }
      jlong termsStart = [in readVLong];
      jlong indexStart = [in readVLong];
      jlong packedIndexStart = [in readVLong];
      jlong packedOffsetsStart = [in readVLong];
      if (packedIndexStart < indexStart) {
        @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$J$J$J", @"invalid packedIndexStart: ", packedIndexStart, @" indexStart: ", indexStart, @"numIndexTerms: ", numIndexTerms), in) autorelease];
      }
      OrgApacheLuceneIndexFieldInfo *fieldInfo = [((OrgApacheLuceneIndexFieldInfos *) nil_chk(state->fieldInfos_)) fieldInfoWithInt:field];
      OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *previous = [self->fields_ putWithId:((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo))->name_ withId:[new_OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData_initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilPagedBytes_withLong_withLong_withLong_withLong_withLong_(self, in, termBytes, indexStart, termsStart, packedIndexStart, packedOffsetsStart, numIndexTerms) autorelease]];
      if (previous != nil) {
        @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$$", @"duplicate field: ", fieldInfo->name_), in) autorelease];
      }
    }
    success = YES;
  }
  @finally {
    if (success) {
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ in } count:1 type:JavaIoCloseable_class_()]);
    }
    else {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ in } count:1 type:JavaIoCloseable_class_()]);
    }
    JreStrongAssign(&self->termBytesReader_, [termBytes freezeWithBoolean:YES]);
  }
}

OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *new_OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_initWithOrgApacheLuceneIndexSegmentReadState_(OrgApacheLuceneIndexSegmentReadState *state) {
  OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *self = [OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader alloc];
  OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_initWithOrgApacheLuceneIndexSegmentReadState_(self, state);
  return self;
}

void OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_seekDirWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *self, OrgApacheLuceneStoreIndexInput *input) {
  [input seekWithLong:[((OrgApacheLuceneStoreIndexInput *) nil_chk(input)) length] - OrgApacheLuceneCodecsCodecUtil_footerLength() - 8];
  jlong dirOffset = [input readLong];
  [input seekWithLong:dirOffset];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader)

@implementation OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum

- (instancetype)initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader:(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *)outer$
     withOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData:(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *)fieldIndex {
  OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum_initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_withOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData_(self, outer$, fieldIndex);
  return self;
}

- (OrgApacheLuceneUtilBytesRef *)term {
  return term_;
}

- (jlong)seekWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target {
  jlong lo = 0;
  jlong hi = ((OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *) nil_chk(fieldIndex_))->numIndexTerms_ - 1;
  while (hi >= lo) {
    jlong mid = JreURShift64((lo + hi), 1);
    jlong offset = [((OrgApacheLuceneUtilPackedMonotonicBlockPackedReader *) nil_chk(fieldIndex_->termOffsets_)) getWithLong:mid];
    jint length = (jint) ([fieldIndex_->termOffsets_ getWithLong:1 + mid] - offset);
    [((OrgApacheLuceneUtilPagedBytes_Reader *) nil_chk(this$0_->termBytesReader_)) fillSliceWithOrgApacheLuceneUtilBytesRef:term_ withLong:fieldIndex_->termBytesStart_ + offset withInt:length];
    jint delta = [((OrgApacheLuceneUtilBytesRef *) nil_chk(target)) compareToWithId:term_];
    if (delta < 0) {
      hi = mid - 1;
    }
    else if (delta > 0) {
      lo = mid + 1;
    }
    else {
      JreAssert((mid >= 0), (@"org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.java:161 condition failed: assert mid >= 0;"));
      ord_ = mid * this$0_->indexInterval_;
      return fieldIndex_->termsStart_ + [((OrgApacheLuceneUtilPackedMonotonicBlockPackedReader *) nil_chk(fieldIndex_->termsDictOffsets_)) getWithLong:mid];
    }
  }
  if (hi < 0) {
    JreAssert((hi == -1), (@"org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.java:168 condition failed: assert hi == -1;"));
    hi = 0;
  }
  jlong offset = [((OrgApacheLuceneUtilPackedMonotonicBlockPackedReader *) nil_chk(fieldIndex_->termOffsets_)) getWithLong:hi];
  jint length = (jint) ([fieldIndex_->termOffsets_ getWithLong:1 + hi] - offset);
  [((OrgApacheLuceneUtilPagedBytes_Reader *) nil_chk(this$0_->termBytesReader_)) fillSliceWithOrgApacheLuceneUtilBytesRef:term_ withLong:fieldIndex_->termBytesStart_ + offset withInt:length];
  ord_ = hi * this$0_->indexInterval_;
  return fieldIndex_->termsStart_ + [((OrgApacheLuceneUtilPackedMonotonicBlockPackedReader *) nil_chk(fieldIndex_->termsDictOffsets_)) getWithLong:hi];
}

- (jlong)next {
  jlong idx = 1 + (ord_ / this$0_->indexInterval_);
  if (idx >= ((OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *) nil_chk(fieldIndex_))->numIndexTerms_) {
    return -1;
  }
  ord_ += this$0_->indexInterval_;
  jlong offset = [((OrgApacheLuceneUtilPackedMonotonicBlockPackedReader *) nil_chk(fieldIndex_->termOffsets_)) getWithLong:idx];
  jint length = (jint) ([fieldIndex_->termOffsets_ getWithLong:1 + idx] - offset);
  [((OrgApacheLuceneUtilPagedBytes_Reader *) nil_chk(this$0_->termBytesReader_)) fillSliceWithOrgApacheLuceneUtilBytesRef:term_ withLong:fieldIndex_->termBytesStart_ + offset withInt:length];
  return fieldIndex_->termsStart_ + [((OrgApacheLuceneUtilPackedMonotonicBlockPackedReader *) nil_chk(fieldIndex_->termsDictOffsets_)) getWithLong:idx];
}

- (jlong)ord {
  return ord_;
}

- (jlong)seekWithLong:(jlong)ord {
  jlong idx = ord / this$0_->indexInterval_;
  JreAssert((idx < ((OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *) nil_chk(fieldIndex_))->numIndexTerms_), (@"org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.java:203 condition failed: assert idx < fieldIndex.numIndexTerms;"));
  jlong offset = [((OrgApacheLuceneUtilPackedMonotonicBlockPackedReader *) nil_chk(fieldIndex_->termOffsets_)) getWithLong:idx];
  jint length = (jint) ([fieldIndex_->termOffsets_ getWithLong:1 + idx] - offset);
  [((OrgApacheLuceneUtilPagedBytes_Reader *) nil_chk(this$0_->termBytesReader_)) fillSliceWithOrgApacheLuceneUtilBytesRef:term_ withLong:fieldIndex_->termBytesStart_ + offset withInt:length];
  self->ord_ = idx * this$0_->indexInterval_;
  return fieldIndex_->termsStart_ + [((OrgApacheLuceneUtilPackedMonotonicBlockPackedReader *) nil_chk(fieldIndex_->termsDictOffsets_)) getWithLong:idx];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(fieldIndex_);
  RELEASE_(term_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader:withOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData:", "IndexEnum", NULL, 0x1, NULL, NULL },
    { "term", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, NULL, NULL },
    { "seekWithOrgApacheLuceneUtilBytesRef:", "seek", "J", 0x1, NULL, NULL },
    { "next", NULL, "J", 0x1, NULL, NULL },
    { "ord", NULL, "J", 0x1, NULL, NULL },
    { "seekWithLong:", "seek", "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.codecs.blockterms.FixedGapTermsIndexReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldIndex_", NULL, 0x12, "Lorg.apache.lucene.codecs.blockterms.FixedGapTermsIndexReader$FieldIndexData;", NULL, NULL, .constantValue.asLong = 0 },
    { "term_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "ord_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum = { 2, "IndexEnum", "org.apache.lucene.codecs.blockterms", "FixedGapTermsIndexReader", 0x2, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum;
}

@end

void OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum_initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_withOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData_(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum *self, OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *outer$, OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *fieldIndex) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneCodecsBlocktermsTermsIndexReaderBase_FieldIndexEnum_init(self);
  JreStrongAssignAndConsume(&self->term_, new_OrgApacheLuceneUtilBytesRef_init());
  JreStrongAssign(&self->fieldIndex_, fieldIndex);
}

OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum *new_OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum_initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_withOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData_(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *outer$, OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *fieldIndex) {
  OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum *self = [OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum alloc];
  OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum_initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_withOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData_(self, outer$, fieldIndex);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_IndexEnum)

@implementation OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData

- (instancetype)initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader:(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *)outer$
                                             withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg
                                              withOrgApacheLuceneUtilPagedBytes:(OrgApacheLuceneUtilPagedBytes *)termBytes
                                                                       withLong:(jlong)indexStart
                                                                       withLong:(jlong)termsStart
                                                                       withLong:(jlong)packedIndexStart
                                                                       withLong:(jlong)packedOffsetsStart
                                                                       withLong:(jlong)numIndexTerms {
  OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData_initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilPagedBytes_withLong_withLong_withLong_withLong_withLong_(self, outer$, inArg, termBytes, indexStart, termsStart, packedIndexStart, packedOffsetsStart, numIndexTerms);
  return self;
}

- (jlong)ramBytesUsed {
  return ((termOffsets_ != nil) ? [termOffsets_ ramBytesUsed] : 0) + ((termsDictOffsets_ != nil) ? [termsDictOffsets_ ramBytesUsed] : 0);
}

- (id<JavaUtilCollection>)getChildResources {
  id<JavaUtilList> resources = [new_JavaUtilArrayList_init() autorelease];
  if (termOffsets_ != nil) {
    [resources addWithId:OrgApacheLuceneUtilAccountables_namedAccountableWithNSString_withOrgApacheLuceneUtilAccountable_(@"term lengths", termOffsets_)];
  }
  if (termsDictOffsets_ != nil) {
    [resources addWithId:OrgApacheLuceneUtilAccountables_namedAccountableWithNSString_withOrgApacheLuceneUtilAccountable_(@"offsets", termsDictOffsets_)];
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(resources);
}

- (NSString *)description {
  return JreStrcat("$JC", @"FixedGapTermIndex(indexterms=", numIndexTerms_, ')');
}

- (void)dealloc {
  RELEASE_(termOffsets_);
  RELEASE_(termsDictOffsets_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader:withOrgApacheLuceneStoreIndexInput:withOrgApacheLuceneUtilPagedBytes:withLong:withLong:withLong:withLong:withLong:", "FieldIndexData", NULL, 0x1, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "getChildResources", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "termBytesStart_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "termOffsets_", NULL, 0x10, "Lorg.apache.lucene.util.packed.MonotonicBlockPackedReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "termsDictOffsets_", NULL, 0x10, "Lorg.apache.lucene.util.packed.MonotonicBlockPackedReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "numIndexTerms_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "termsStart_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData = { 2, "FieldIndexData", "org.apache.lucene.codecs.blockterms", "FixedGapTermsIndexReader", 0x12, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData;
}

@end

void OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData_initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilPagedBytes_withLong_withLong_withLong_withLong_withLong_(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *self, OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *outer$, OrgApacheLuceneStoreIndexInput *inArg, OrgApacheLuceneUtilPagedBytes *termBytes, jlong indexStart, jlong termsStart, jlong packedIndexStart, jlong packedOffsetsStart, jlong numIndexTerms) {
  NSObject_init(self);
  self->termsStart_ = termsStart;
  self->termBytesStart_ = [((OrgApacheLuceneUtilPagedBytes *) nil_chk(termBytes)) getPointer];
  OrgApacheLuceneStoreIndexInput *clone = [((OrgApacheLuceneStoreIndexInput *) nil_chk(inArg)) clone];
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(clone)) seekWithLong:indexStart];
  self->numIndexTerms_ = numIndexTerms;
  JreAssert((self->numIndexTerms_ > 0), (JreStrcat("$J", @"numIndexTerms=", numIndexTerms)));
  @try {
    jlong numTermBytes = packedIndexStart - indexStart;
    [termBytes copy__WithOrgApacheLuceneStoreIndexInput:clone withLong:numTermBytes];
    JreStrongAssign(&self->termsDictOffsets_, OrgApacheLuceneUtilPackedMonotonicBlockPackedReader_ofWithOrgApacheLuceneStoreIndexInput_withInt_withInt_withLong_withBoolean_(clone, outer$->packedIntsVersion_, outer$->blocksize_, numIndexTerms, NO));
    JreStrongAssign(&self->termOffsets_, OrgApacheLuceneUtilPackedMonotonicBlockPackedReader_ofWithOrgApacheLuceneStoreIndexInput_withInt_withInt_withLong_withBoolean_(clone, outer$->packedIntsVersion_, outer$->blocksize_, 1 + numIndexTerms, NO));
  }
  @finally {
    [clone close];
  }
}

OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *new_OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData_initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilPagedBytes_withLong_withLong_withLong_withLong_withLong_(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader *outer$, OrgApacheLuceneStoreIndexInput *inArg, OrgApacheLuceneUtilPagedBytes *termBytes, jlong indexStart, jlong termsStart, jlong packedIndexStart, jlong packedOffsetsStart, jlong numIndexTerms) {
  OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData *self = [OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData alloc];
  OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData_initWithOrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilPagedBytes_withLong_withLong_withLong_withLong_withLong_(self, outer$, inArg, termBytes, indexStart, termsStart, packedIndexStart, packedOffsetsStart, numIndexTerms);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktermsFixedGapTermsIndexReader_FieldIndexData)
