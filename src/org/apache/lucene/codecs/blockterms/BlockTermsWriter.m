//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "org/apache/lucene/codecs/blockterms/BlockTermsWriter.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexWriterBase.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/RAMOutputStream.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

@interface OrgApacheLuceneCodecsBlocktermsBlockTermsWriter () {
 @public
  OrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase *termsIndexWriter_;
  jint maxDoc_;
  id<JavaUtilList> fields_;
}

- (OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter *)addFieldWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)field;

- (void)writeTrailerWithLong:(jlong)dirStart;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter, termsIndexWriter_, OrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter, fields_, id<JavaUtilList>)

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter *OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_addFieldWithOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter *self, OrgApacheLuceneIndexFieldInfo *field);

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_writeTrailerWithLong_(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter *self, jlong dirStart);

@interface OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData : NSObject {
 @public
  OrgApacheLuceneIndexFieldInfo *fieldInfo_;
  jlong numTerms_;
  jlong termsStartPointer_;
  jlong sumTotalTermFreq_;
  jlong sumDocFreq_;
  jint docCount_;
  jint longsSize_;
}

- (instancetype)initWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                                             withLong:(jlong)numTerms
                                             withLong:(jlong)termsStartPointer
                                             withLong:(jlong)sumTotalTermFreq
                                             withLong:(jlong)sumDocFreq
                                              withInt:(jint)docCount
                                              withInt:(jint)longsSize;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData, fieldInfo_, OrgApacheLuceneIndexFieldInfo *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withLong_withLong_withLong_withLong_withInt_withInt_(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData *self, OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, jlong termsStartPointer, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData *new_OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withLong_withLong_withLong_withLong_withInt_withInt_(OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, jlong termsStartPointer, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData)

@interface OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry : NSObject {
 @public
  OrgApacheLuceneUtilBytesRefBuilder *term_;
  OrgApacheLuceneCodecsBlockTermState *state_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry, term_, OrgApacheLuceneUtilBytesRefBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry, state_, OrgApacheLuceneCodecsBlockTermState *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry_init(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry *self);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry *new_OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry)

@interface OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter () {
 @public
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter *this$0_;
  OrgApacheLuceneIndexFieldInfo *fieldInfo_;
  OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter_;
  jlong termsStartPointer_;
  jlong numTerms_;
  OrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter *fieldIndexWriter_;
  OrgApacheLuceneUtilFixedBitSet *docsSeen_;
  IOSObjectArray *pendingTerms_;
  jint pendingCount_;
  OrgApacheLuceneUtilBytesRefBuilder *lastPrevTerm_;
  OrgApacheLuceneStoreRAMOutputStream *bytesWriter_;
  OrgApacheLuceneStoreRAMOutputStream *bufferWriter_;
}

- (jint)sharedPrefixWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term1
                    withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term2;

- (void)flushBlock;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter, this$0_, OrgApacheLuceneCodecsBlocktermsBlockTermsWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter, fieldInfo_, OrgApacheLuceneIndexFieldInfo *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter, postingsWriter_, OrgApacheLuceneCodecsPostingsWriterBase *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter, fieldIndexWriter_, OrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter, docsSeen_, OrgApacheLuceneUtilFixedBitSet *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter, pendingTerms_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter, lastPrevTerm_, OrgApacheLuceneUtilBytesRefBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter, bytesWriter_, OrgApacheLuceneStoreRAMOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter, bufferWriter_, OrgApacheLuceneStoreRAMOutputStream *)

__attribute__((unused)) static jint OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_sharedPrefixWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter *self, OrgApacheLuceneUtilBytesRef *term1, OrgApacheLuceneUtilBytesRef *term2);

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_flushBlock(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter *self);

NSString *OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_CODEC_NAME_ = @"BlockTermsWriter";
NSString *OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TERMS_EXTENSION_ = @"tib";

@implementation OrgApacheLuceneCodecsBlocktermsBlockTermsWriter

- (instancetype)initWithOrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase:(OrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase *)termsIndexWriter
                                  withOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state
                                withOrgApacheLuceneCodecsPostingsWriterBase:(OrgApacheLuceneCodecsPostingsWriterBase *)postingsWriter {
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_initWithOrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_withOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_(self, termsIndexWriter, state, postingsWriter);
  return self;
}

- (void)writeWithOrgApacheLuceneIndexFields:(OrgApacheLuceneIndexFields *)fields {
  for (NSString * __strong field in nil_chk(fields)) {
    OrgApacheLuceneIndexTerms *terms = [fields termsWithNSString:field];
    if (terms == nil) {
      continue;
    }
    OrgApacheLuceneIndexTermsEnum *termsEnum = [((OrgApacheLuceneIndexTerms *) nil_chk(terms)) iterator];
    OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter *termsWriter = OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_addFieldWithOrgApacheLuceneIndexFieldInfo_(self, [((OrgApacheLuceneIndexFieldInfos *) nil_chk(fieldInfos_)) fieldInfoWithNSString:field]);
    while (YES) {
      OrgApacheLuceneUtilBytesRef *term = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) next];
      if (term == nil) {
        break;
      }
      [((OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter *) nil_chk(termsWriter)) writeWithOrgApacheLuceneUtilBytesRef:term withOrgApacheLuceneIndexTermsEnum:termsEnum];
    }
    [((OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter *) nil_chk(termsWriter)) finish];
  }
}

- (OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter *)addFieldWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)field {
  return OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_addFieldWithOrgApacheLuceneIndexFieldInfo_(self, field);
}

- (void)close {
  if (out_ != nil) {
    @try {
      jlong dirStart = [out_ getFilePointer];
      [out_ writeVIntWithInt:[((id<JavaUtilList>) nil_chk(fields_)) size]];
      for (OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData * __strong field in fields_) {
        [out_ writeVIntWithInt:((OrgApacheLuceneIndexFieldInfo *) nil_chk(((OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData *) nil_chk(field))->fieldInfo_))->number_];
        [out_ writeVLongWithLong:field->numTerms_];
        [out_ writeVLongWithLong:field->termsStartPointer_];
        if ([field->fieldInfo_ getIndexOptions] != JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS)) {
          [out_ writeVLongWithLong:field->sumTotalTermFreq_];
        }
        [out_ writeVLongWithLong:field->sumDocFreq_];
        [out_ writeVIntWithInt:field->docCount_];
        [out_ writeVIntWithInt:field->longsSize_];
      }
      OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_writeTrailerWithLong_(self, dirStart);
      OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(out_);
    }
    @finally {
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ out_, postingsWriter_, termsIndexWriter_ } count:3 type:JavaIoCloseable_class_()]);
      JreStrongAssign(&out_, nil);
    }
  }
}

- (void)writeTrailerWithLong:(jlong)dirStart {
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_writeTrailerWithLong_(self, dirStart);
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(postingsWriter_);
  RELEASE_(fieldInfos_);
  RELEASE_(currentField_);
  RELEASE_(termsIndexWriter_);
  RELEASE_(fields_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase:withOrgApacheLuceneIndexSegmentWriteState:withOrgApacheLuceneCodecsPostingsWriterBase:", "BlockTermsWriter", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "writeWithOrgApacheLuceneIndexFields:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "addFieldWithOrgApacheLuceneIndexFieldInfo:", "addField", "Lorg.apache.lucene.codecs.blockterms.BlockTermsWriter$TermsWriter;", 0x2, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeTrailerWithLong:", "writeTrailer", "V", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CODEC_NAME_", NULL, 0x18, "Ljava.lang.String;", &OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_CODEC_NAME_, NULL, .constantValue.asLong = 0 },
    { "VERSION_START", "VERSION_START", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_VERSION_START },
    { "VERSION_CURRENT", "VERSION_CURRENT", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_VERSION_CURRENT },
    { "TERMS_EXTENSION_", NULL, 0x18, "Ljava.lang.String;", &OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TERMS_EXTENSION_, NULL, .constantValue.asLong = 0 },
    { "out_", NULL, 0x4, "Lorg.apache.lucene.store.IndexOutput;", NULL, NULL, .constantValue.asLong = 0 },
    { "postingsWriter_", NULL, 0x10, "Lorg.apache.lucene.codecs.PostingsWriterBase;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldInfos_", NULL, 0x10, "Lorg.apache.lucene.index.FieldInfos;", NULL, NULL, .constantValue.asLong = 0 },
    { "currentField_", NULL, 0x0, "Lorg.apache.lucene.index.FieldInfo;", NULL, NULL, .constantValue.asLong = 0 },
    { "termsIndexWriter_", NULL, 0x12, "Lorg.apache.lucene.codecs.blockterms.TermsIndexWriterBase;", NULL, NULL, .constantValue.asLong = 0 },
    { "maxDoc_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "fields_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/codecs/blockterms/BlockTermsWriter$FieldMetaData;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.codecs.blockterms.BlockTermsWriter$FieldMetaData;", "Lorg.apache.lucene.codecs.blockterms.BlockTermsWriter$TermEntry;", "Lorg.apache.lucene.codecs.blockterms.BlockTermsWriter$TermsWriter;"};
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktermsBlockTermsWriter = { 2, "BlockTermsWriter", "org.apache.lucene.codecs.blockterms", NULL, 0x1, 5, methods, 11, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktermsBlockTermsWriter;
}

@end

void OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_initWithOrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_withOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter *self, OrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase *termsIndexWriter, OrgApacheLuceneIndexSegmentWriteState *state, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter) {
  OrgApacheLuceneCodecsFieldsConsumer_init(self);
  JreStrongAssignAndConsume(&self->fields_, new_JavaUtilArrayList_init());
  NSString *termsFileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentWriteState *) nil_chk(state))->segmentInfo_))->name_, state->segmentSuffix_, OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TERMS_EXTENSION_);
  JreStrongAssign(&self->termsIndexWriter_, termsIndexWriter);
  self->maxDoc_ = [state->segmentInfo_ maxDoc];
  JreStrongAssign(&self->out_, [((OrgApacheLuceneStoreDirectory *) nil_chk(state->directory_)) createOutputWithNSString:termsFileName withOrgApacheLuceneStoreIOContext:state->context_]);
  jboolean success = NO;
  @try {
    JreStrongAssign(&self->fieldInfos_, state->fieldInfos_);
    OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(self->out_, OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_CODEC_NAME_, OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_VERSION_CURRENT, [state->segmentInfo_ getId], state->segmentSuffix_);
    JreStrongAssign(&self->currentField_, nil);
    JreStrongAssign(&self->postingsWriter_, postingsWriter);
    [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(postingsWriter)) init__WithOrgApacheLuceneStoreIndexOutput:self->out_ withOrgApacheLuceneIndexSegmentWriteState:state];
    success = YES;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->out_ } count:1 type:JavaIoCloseable_class_()]);
    }
  }
}

OrgApacheLuceneCodecsBlocktermsBlockTermsWriter *new_OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_initWithOrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_withOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_(OrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase *termsIndexWriter, OrgApacheLuceneIndexSegmentWriteState *state, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter) {
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter *self = [OrgApacheLuceneCodecsBlocktermsBlockTermsWriter alloc];
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_initWithOrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_withOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_(self, termsIndexWriter, state, postingsWriter);
  return self;
}

OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter *OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_addFieldWithOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter *self, OrgApacheLuceneIndexFieldInfo *field) {
  JreAssert((self->currentField_ == nil || [((NSString *) nil_chk(self->currentField_->name_)) compareToWithId:((OrgApacheLuceneIndexFieldInfo *) nil_chk(field))->name_] < 0), (@"org/apache/lucene/codecs/blockterms/BlockTermsWriter.java:158 condition failed: assert currentField == null || currentField.name.compareTo(field.name) < 0;"));
  JreStrongAssign(&self->currentField_, field);
  OrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter *fieldIndexWriter = [((OrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase *) nil_chk(self->termsIndexWriter_)) addFieldWithOrgApacheLuceneIndexFieldInfo:field withLong:[((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->out_)) getFilePointer]];
  return [new_OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsWriter_withOrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter_withOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsPostingsWriterBase_(self, fieldIndexWriter, field, self->postingsWriter_) autorelease];
}

void OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_writeTrailerWithLong_(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter *self, jlong dirStart) {
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->out_)) writeLongWithLong:dirStart];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter)

@implementation OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData

- (instancetype)initWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                                             withLong:(jlong)numTerms
                                             withLong:(jlong)termsStartPointer
                                             withLong:(jlong)sumTotalTermFreq
                                             withLong:(jlong)sumDocFreq
                                              withInt:(jint)docCount
                                              withInt:(jint)longsSize {
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withLong_withLong_withLong_withLong_withInt_withInt_(self, fieldInfo, numTerms, termsStartPointer, sumTotalTermFreq, sumDocFreq, docCount, longsSize);
  return self;
}

- (void)dealloc {
  RELEASE_(fieldInfo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexFieldInfo:withLong:withLong:withLong:withLong:withInt:withInt:", "FieldMetaData", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fieldInfo_", NULL, 0x11, "Lorg.apache.lucene.index.FieldInfo;", NULL, NULL, .constantValue.asLong = 0 },
    { "numTerms_", NULL, 0x11, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "termsStartPointer_", NULL, 0x11, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "sumTotalTermFreq_", NULL, 0x11, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "sumDocFreq_", NULL, 0x11, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "docCount_", NULL, 0x11, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "longsSize_", NULL, 0x11, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData = { 2, "FieldMetaData", "org.apache.lucene.codecs.blockterms", "BlockTermsWriter", 0xa, 1, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData;
}

@end

void OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withLong_withLong_withLong_withLong_withInt_withInt_(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData *self, OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, jlong termsStartPointer, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize) {
  NSObject_init(self);
  JreAssert((numTerms > 0), (@"org/apache/lucene/codecs/blockterms/BlockTermsWriter.java:88 condition failed: assert numTerms > 0;"));
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  self->termsStartPointer_ = termsStartPointer;
  self->numTerms_ = numTerms;
  self->sumTotalTermFreq_ = sumTotalTermFreq;
  self->sumDocFreq_ = sumDocFreq;
  self->docCount_ = docCount;
  self->longsSize_ = longsSize;
}

OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData *new_OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withLong_withLong_withLong_withLong_withInt_withInt_(OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, jlong termsStartPointer, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize) {
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData *self = [OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData alloc];
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withLong_withLong_withLong_withLong_withInt_withInt_(self, fieldInfo, numTerms, termsStartPointer, sumTotalTermFreq, sumDocFreq, docCount, longsSize);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData)

@implementation OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry

- (instancetype)init {
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(term_);
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "term_", NULL, 0x11, "Lorg.apache.lucene.util.BytesRefBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "state_", NULL, 0x1, "Lorg.apache.lucene.codecs.BlockTermState;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry = { 2, "TermEntry", "org.apache.lucene.codecs.blockterms", "BlockTermsWriter", 0xa, 1, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry;
}

@end

void OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry_init(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->term_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
}

OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry *new_OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry_init() {
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry *self = [OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry alloc];
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry)

@implementation OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter

- (instancetype)initWithOrgApacheLuceneCodecsBlocktermsBlockTermsWriter:(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter *)outer$
    withOrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter:(OrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter *)fieldIndexWriter
                                      withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                            withOrgApacheLuceneCodecsPostingsWriterBase:(OrgApacheLuceneCodecsPostingsWriterBase *)postingsWriter {
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsWriter_withOrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter_withOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsPostingsWriterBase_(self, outer$, fieldIndexWriter, fieldInfo, postingsWriter);
  return self;
}

- (void)writeWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text
           withOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)termsEnum {
  OrgApacheLuceneCodecsBlockTermState *state = [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(postingsWriter_)) writeTermWithOrgApacheLuceneUtilBytesRef:text withOrgApacheLuceneIndexTermsEnum:termsEnum withOrgApacheLuceneUtilFixedBitSet:docsSeen_];
  if (state == nil) {
    return;
  }
  sumDocFreq_ += ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state))->docFreq_;
  sumTotalTermFreq_ += state->totalTermFreq_;
  JreAssert((state->docFreq_ > 0), (@"org/apache/lucene/codecs/blockterms/BlockTermsWriter.java:245 condition failed: assert state.docFreq > 0;"));
  OrgApacheLuceneCodecsTermStats *stats = [new_OrgApacheLuceneCodecsTermStats_initWithInt_withLong_(state->docFreq_, state->totalTermFreq_) autorelease];
  jboolean isIndexTerm = [((OrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter *) nil_chk(fieldIndexWriter_)) checkIndexTermWithOrgApacheLuceneUtilBytesRef:text withOrgApacheLuceneCodecsTermStats:stats];
  if (isIndexTerm) {
    if (pendingCount_ > 0) {
      OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_flushBlock(self);
    }
    [fieldIndexWriter_ addWithOrgApacheLuceneUtilBytesRef:text withOrgApacheLuceneCodecsTermStats:stats withLong:[((OrgApacheLuceneStoreIndexOutput *) nil_chk(this$0_->out_)) getFilePointer]];
  }
  if (((IOSObjectArray *) nil_chk(pendingTerms_))->size_ == pendingCount_) {
    JreStrongAssign(&pendingTerms_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(pendingTerms_, OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(pendingCount_ + 1, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF_))));
    for (jint i = pendingCount_; i < ((IOSObjectArray *) nil_chk(pendingTerms_))->size_; i++) {
      IOSObjectArray_SetAndConsume(pendingTerms_, i, new_OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry_init());
    }
  }
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry *te = IOSObjectArray_Get(nil_chk(pendingTerms_), pendingCount_);
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(((OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry *) nil_chk(te))->term_)) copyBytesWithOrgApacheLuceneUtilBytesRef:text];
  JreStrongAssign(&te->state_, state);
  pendingCount_++;
  numTerms_++;
}

- (void)finish {
  if (pendingCount_ > 0) {
    OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_flushBlock(self);
  }
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(this$0_->out_)) writeVIntWithInt:0];
  [((OrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter *) nil_chk(fieldIndexWriter_)) finishWithLong:[this$0_->out_ getFilePointer]];
  if (numTerms_ > 0) {
    [((id<JavaUtilList>) nil_chk(this$0_->fields_)) addWithId:[new_OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withLong_withLong_withLong_withLong_withInt_withInt_(fieldInfo_, numTerms_, termsStartPointer_, [((OrgApacheLuceneIndexIndexOptionsEnum *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS)] >= 0 ? sumTotalTermFreq_ : -1, sumDocFreq_, [((OrgApacheLuceneUtilFixedBitSet *) nil_chk(docsSeen_)) cardinality], longsSize_) autorelease]];
  }
}

- (jint)sharedPrefixWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term1
                    withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term2 {
  return OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_sharedPrefixWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(self, term1, term2);
}

- (void)flushBlock {
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_flushBlock(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(fieldInfo_);
  RELEASE_(postingsWriter_);
  RELEASE_(fieldIndexWriter_);
  RELEASE_(docsSeen_);
  RELEASE_(pendingTerms_);
  RELEASE_(lastPrevTerm_);
  RELEASE_(bytesWriter_);
  RELEASE_(bufferWriter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsBlocktermsBlockTermsWriter:withOrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter:withOrgApacheLuceneIndexFieldInfo:withOrgApacheLuceneCodecsPostingsWriterBase:", "TermsWriter", NULL, 0x0, NULL, NULL },
    { "writeWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneIndexTermsEnum:", "write", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "finish", NULL, "V", 0x0, "Ljava.io.IOException;", NULL },
    { "sharedPrefixWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:", "sharedPrefix", "I", 0x2, NULL, NULL },
    { "flushBlock", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.codecs.blockterms.BlockTermsWriter;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldInfo_", NULL, 0x12, "Lorg.apache.lucene.index.FieldInfo;", NULL, NULL, .constantValue.asLong = 0 },
    { "postingsWriter_", NULL, 0x12, "Lorg.apache.lucene.codecs.PostingsWriterBase;", NULL, NULL, .constantValue.asLong = 0 },
    { "termsStartPointer_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "numTerms_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldIndexWriter_", NULL, 0x12, "Lorg.apache.lucene.codecs.blockterms.TermsIndexWriterBase$FieldWriter;", NULL, NULL, .constantValue.asLong = 0 },
    { "docsSeen_", NULL, 0x12, "Lorg.apache.lucene.util.FixedBitSet;", NULL, NULL, .constantValue.asLong = 0 },
    { "sumTotalTermFreq_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "sumDocFreq_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "docCount_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "longsSize_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "pendingTerms_", NULL, 0x2, "[Lorg.apache.lucene.codecs.blockterms.BlockTermsWriter$TermEntry;", NULL, NULL, .constantValue.asLong = 0 },
    { "pendingCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastPrevTerm_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRefBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "bytesWriter_", NULL, 0x12, "Lorg.apache.lucene.store.RAMOutputStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "bufferWriter_", NULL, 0x12, "Lorg.apache.lucene.store.RAMOutputStream;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter = { 2, "TermsWriter", "org.apache.lucene.codecs.blockterms", "BlockTermsWriter", 0x0, 5, methods, 16, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter;
}

@end

void OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsWriter_withOrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter_withOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsPostingsWriterBase_(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter *self, OrgApacheLuceneCodecsBlocktermsBlockTermsWriter *outer$, OrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter *fieldIndexWriter, OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->lastPrevTerm_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  JreStrongAssignAndConsume(&self->bytesWriter_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssignAndConsume(&self->bufferWriter_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  JreStrongAssign(&self->fieldIndexWriter_, fieldIndexWriter);
  JreStrongAssignAndConsume(&self->docsSeen_, new_OrgApacheLuceneUtilFixedBitSet_initWithInt_(outer$->maxDoc_));
  JreStrongAssignAndConsume(&self->pendingTerms_, [IOSObjectArray newArrayWithLength:32 type:OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry_class_()]);
  for (jint i = 0; i < self->pendingTerms_->size_; i++) {
    IOSObjectArray_SetAndConsume(self->pendingTerms_, i, new_OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry_init());
  }
  self->termsStartPointer_ = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(outer$->out_)) getFilePointer];
  JreStrongAssign(&self->postingsWriter_, postingsWriter);
  self->longsSize_ = [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(postingsWriter)) setFieldWithOrgApacheLuceneIndexFieldInfo:fieldInfo];
}

OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter *new_OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsWriter_withOrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter_withOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsPostingsWriterBase_(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter *outer$, OrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter *fieldIndexWriter, OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter) {
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter *self = [OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter alloc];
  OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktermsBlockTermsWriter_withOrgApacheLuceneCodecsBlocktermsTermsIndexWriterBase_FieldWriter_withOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsPostingsWriterBase_(self, outer$, fieldIndexWriter, fieldInfo, postingsWriter);
  return self;
}

jint OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_sharedPrefixWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter *self, OrgApacheLuceneUtilBytesRef *term1, OrgApacheLuceneUtilBytesRef *term2) {
  JreAssert((((OrgApacheLuceneUtilBytesRef *) nil_chk(term1))->offset_ == 0), (@"org/apache/lucene/codecs/blockterms/BlockTermsWriter.java:297 condition failed: assert term1.offset == 0;"));
  JreAssert((((OrgApacheLuceneUtilBytesRef *) nil_chk(term2))->offset_ == 0), (@"org/apache/lucene/codecs/blockterms/BlockTermsWriter.java:298 condition failed: assert term2.offset == 0;"));
  jint pos1 = 0;
  jint pos1End = pos1 + JavaLangMath_minWithInt_withInt_(term1->length_, term2->length_);
  jint pos2 = 0;
  while (pos1 < pos1End) {
    if (IOSByteArray_Get(nil_chk(term1->bytes_), pos1) != IOSByteArray_Get(term2->bytes_, pos2)) {
      return pos1;
    }
    pos1++;
    pos2++;
  }
  return pos1;
}

void OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_flushBlock(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter *self) {
  jint commonPrefix = OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_sharedPrefixWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(self, [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->lastPrevTerm_)) get], [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(((OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry *) nil_chk(IOSObjectArray_Get(nil_chk(self->pendingTerms_), 0)))->term_)) get]);
  for (jint termCount = 1; termCount < self->pendingCount_; termCount++) {
    commonPrefix = JavaLangMath_minWithInt_withInt_(commonPrefix, OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter_sharedPrefixWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(self, [self->lastPrevTerm_ get], [((OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry *) nil_chk(IOSObjectArray_Get(self->pendingTerms_, termCount)))->term_ get]));
  }
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->this$0_->out_)) writeVIntWithInt:self->pendingCount_];
  [self->this$0_->out_ writeVIntWithInt:commonPrefix];
  for (jint termCount = 0; termCount < self->pendingCount_; termCount++) {
    jint suffix = [((OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry *) nil_chk(IOSObjectArray_Get(self->pendingTerms_, termCount)))->term_ length] - commonPrefix;
    [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->bytesWriter_)) writeVIntWithInt:suffix];
    [self->bytesWriter_ writeBytesWithByteArray:[((OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry *) nil_chk(IOSObjectArray_Get(self->pendingTerms_, termCount)))->term_ bytes] withInt:commonPrefix withInt:suffix];
  }
  [self->this$0_->out_ writeVIntWithInt:(jint) [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->bytesWriter_)) getFilePointer]];
  [self->bytesWriter_ writeToWithOrgApacheLuceneStoreDataOutput:self->this$0_->out_];
  [self->bytesWriter_ reset];
  for (jint termCount = 0; termCount < self->pendingCount_; termCount++) {
    OrgApacheLuceneCodecsBlockTermState *state = ((OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry *) nil_chk(IOSObjectArray_Get(self->pendingTerms_, termCount)))->state_;
    JreAssert((state != nil), (@"org/apache/lucene/codecs/blockterms/BlockTermsWriter.java:348 condition failed: assert state != null;"));
    [self->bytesWriter_ writeVIntWithInt:((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state))->docFreq_];
    if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(self->fieldInfo_)) getIndexOptions] != JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS)) {
      [self->bytesWriter_ writeVLongWithLong:state->totalTermFreq_ - state->docFreq_];
    }
  }
  [self->this$0_->out_ writeVIntWithInt:(jint) [self->bytesWriter_ getFilePointer]];
  [self->bytesWriter_ writeToWithOrgApacheLuceneStoreDataOutput:self->this$0_->out_];
  [self->bytesWriter_ reset];
  IOSLongArray *longs = [IOSLongArray arrayWithLength:self->longsSize_];
  jboolean absolute = YES;
  for (jint termCount = 0; termCount < self->pendingCount_; termCount++) {
    OrgApacheLuceneCodecsBlockTermState *state = ((OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry *) nil_chk(IOSObjectArray_Get(self->pendingTerms_, termCount)))->state_;
    [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(self->postingsWriter_)) encodeTermWithLongArray:longs withOrgApacheLuceneStoreDataOutput:self->bufferWriter_ withOrgApacheLuceneIndexFieldInfo:self->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:state withBoolean:absolute];
    for (jint i = 0; i < self->longsSize_; i++) {
      [self->bytesWriter_ writeVLongWithLong:IOSLongArray_Get(longs, i)];
    }
    [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->bufferWriter_)) writeToWithOrgApacheLuceneStoreDataOutput:self->bytesWriter_];
    [self->bufferWriter_ reset];
    absolute = NO;
  }
  [self->this$0_->out_ writeVIntWithInt:(jint) [self->bytesWriter_ getFilePointer]];
  [self->bytesWriter_ writeToWithOrgApacheLuceneStoreDataOutput:self->this$0_->out_];
  [self->bytesWriter_ reset];
  [self->lastPrevTerm_ copyBytesWithOrgApacheLuceneUtilBytesRefBuilder:((OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermEntry *) nil_chk(IOSObjectArray_Get(self->pendingTerms_, self->pendingCount_ - 1)))->term_];
  self->pendingCount_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktermsBlockTermsWriter_TermsWriter)
