//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/apache/lucene/codecs/memory/FSTTermOutputs.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/fst/Outputs.h"

@interface OrgApacheLuceneCodecsMemoryFSTTermOutputs () {
 @public
  jboolean hasPos_;
  jint longsSize_;
}

@end

static OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *OrgApacheLuceneCodecsMemoryFSTTermOutputs_NO_OUTPUT_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneCodecsMemoryFSTTermOutputs, NO_OUTPUT_, OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)

static jlong OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_BASE_RAM_BYTES_USED_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData, BASE_RAM_BYTES_USED_, jlong)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsMemoryFSTTermOutputs)

@implementation OrgApacheLuceneCodecsMemoryFSTTermOutputs

- (instancetype)initWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                                              withInt:(jint)longsSize {
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_initWithOrgApacheLuceneIndexFieldInfo_withInt_(self, fieldInfo, longsSize);
  return self;
}

- (jlong)ramBytesUsedWithId:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)output {
  return [((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(output)) ramBytesUsed];
}

- (OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)commonWithId:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)t1
                                                              withId:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)t2 {
  if (t1 == OrgApacheLuceneCodecsMemoryFSTTermOutputs_NO_OUTPUT_ || t2 == OrgApacheLuceneCodecsMemoryFSTTermOutputs_NO_OUTPUT_) {
    return OrgApacheLuceneCodecsMemoryFSTTermOutputs_NO_OUTPUT_;
  }
  JreAssert((((IOSLongArray *) nil_chk(((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(t1))->longs_))->size_ == ((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(t2))->longs_->size_), (@"org/apache/lucene/codecs/memory/FSTTermOutputs.java:155 condition failed: assert t1.longs.length == t2.longs.length;"));
  IOSLongArray *min = t1->longs_, *max = t2->longs_;
  jint pos = 0;
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *ret;
  while (pos < longsSize_ && IOSLongArray_Get(min, pos) == IOSLongArray_Get(max, pos)) {
    pos++;
  }
  if (pos < longsSize_) {
    if (IOSLongArray_Get(min, pos) > IOSLongArray_Get(max, pos)) {
      min = t2->longs_;
      max = t1->longs_;
    }
    while (pos < longsSize_ && IOSLongArray_Get(min, pos) <= IOSLongArray_Get(max, pos)) {
      pos++;
    }
    if (pos < longsSize_ || OrgApacheLuceneCodecsMemoryFSTTermOutputs_allZeroWithLongArray_(min)) {
      ret = OrgApacheLuceneCodecsMemoryFSTTermOutputs_NO_OUTPUT_;
    }
    else {
      ret = [new_OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_initWithLongArray_withByteArray_withInt_withLong_(min, nil, 0, -1) autorelease];
    }
  }
  else {
    if (OrgApacheLuceneCodecsMemoryFSTTermOutputs_statsEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_(t1, t2) && OrgApacheLuceneCodecsMemoryFSTTermOutputs_bytesEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_(t1, t2)) {
      ret = t1;
    }
    else if (OrgApacheLuceneCodecsMemoryFSTTermOutputs_allZeroWithLongArray_(min)) {
      ret = OrgApacheLuceneCodecsMemoryFSTTermOutputs_NO_OUTPUT_;
    }
    else {
      ret = [new_OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_initWithLongArray_withByteArray_withInt_withLong_(min, nil, 0, -1) autorelease];
    }
  }
  return ret;
}

- (OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)subtractWithId:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)t1
                                                                withId:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)t2 {
  if (t2 == OrgApacheLuceneCodecsMemoryFSTTermOutputs_NO_OUTPUT_) {
    return t1;
  }
  JreAssert((((IOSLongArray *) nil_chk(((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(t1))->longs_))->size_ == ((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(t2))->longs_->size_), (@"org/apache/lucene/codecs/memory/FSTTermOutputs.java:198 condition failed: assert t1.longs.length == t2.longs.length;"));
  jint pos = 0;
  jlong diff = 0;
  IOSLongArray *share = [IOSLongArray arrayWithLength:longsSize_];
  while (pos < longsSize_) {
    *IOSLongArray_GetRef(share, pos) = IOSLongArray_Get(t1->longs_, pos) - IOSLongArray_Get(t2->longs_, pos);
    diff += IOSLongArray_Get(share, pos);
    pos++;
  }
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *ret;
  if (diff == 0 && OrgApacheLuceneCodecsMemoryFSTTermOutputs_statsEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_(t1, t2) && OrgApacheLuceneCodecsMemoryFSTTermOutputs_bytesEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_(t1, t2)) {
    ret = OrgApacheLuceneCodecsMemoryFSTTermOutputs_NO_OUTPUT_;
  }
  else {
    ret = [new_OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_initWithLongArray_withByteArray_withInt_withLong_(share, t1->bytes_, t1->docFreq_, t1->totalTermFreq_) autorelease];
  }
  return ret;
}

- (OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)addWithId:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)t1
                                                           withId:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)t2 {
  if (t1 == OrgApacheLuceneCodecsMemoryFSTTermOutputs_NO_OUTPUT_) {
    return t2;
  }
  else if (t2 == OrgApacheLuceneCodecsMemoryFSTTermOutputs_NO_OUTPUT_) {
    return t1;
  }
  JreAssert((((IOSLongArray *) nil_chk(((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(t1))->longs_))->size_ == ((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(t2))->longs_->size_), (@"org/apache/lucene/codecs/memory/FSTTermOutputs.java:233 condition failed: assert t1.longs.length == t2.longs.length;"));
  jint pos = 0;
  IOSLongArray *accum = [IOSLongArray arrayWithLength:longsSize_];
  while (pos < longsSize_) {
    *IOSLongArray_GetRef(accum, pos) = IOSLongArray_Get(t1->longs_, pos) + IOSLongArray_Get(t2->longs_, pos);
    pos++;
  }
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *ret;
  if (t2->bytes_ != nil || t2->docFreq_ > 0) {
    ret = [new_OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_initWithLongArray_withByteArray_withInt_withLong_(accum, t2->bytes_, t2->docFreq_, t2->totalTermFreq_) autorelease];
  }
  else {
    ret = [new_OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_initWithLongArray_withByteArray_withInt_withLong_(accum, t1->bytes_, t1->docFreq_, t1->totalTermFreq_) autorelease];
  }
  return ret;
}

- (void)writeWithId:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)data
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  JreAssert((hasPos_ || ((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(data))->totalTermFreq_ == -1), (@"org/apache/lucene/codecs/memory/FSTTermOutputs.java:255 condition failed: assert hasPos || data.totalTermFreq == -1;"));
  jint bit0 = OrgApacheLuceneCodecsMemoryFSTTermOutputs_allZeroWithLongArray_(((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(data))->longs_) ? 0 : 1;
  jint bit1 = JreLShift32(((data->bytes_ == nil || data->bytes_->size_ == 0) ? 0 : 1), 1);
  jint bit2 = JreLShift32(((data->docFreq_ == 0) ? 0 : 1), 2);
  jint bits = bit0 | bit1 | bit2;
  if (bit1 > 0) {
    if (((IOSByteArray *) nil_chk(data->bytes_))->size_ < 32) {
      bits |= (JreLShift32(data->bytes_->size_, 3));
      [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) bits];
    }
    else {
      [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) bits];
      [outArg writeVIntWithInt:data->bytes_->size_];
    }
  }
  else {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) bits];
  }
  if (bit0 > 0) {
    for (jint pos = 0; pos < longsSize_; pos++) {
      [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVLongWithLong:IOSLongArray_Get(nil_chk(data->longs_), pos)];
    }
  }
  if (bit1 > 0) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeBytesWithByteArray:data->bytes_ withInt:0 withInt:((IOSByteArray *) nil_chk(data->bytes_))->size_];
  }
  if (bit2 > 0) {
    if (hasPos_) {
      if (data->docFreq_ == data->totalTermFreq_) {
        [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVIntWithInt:(JreLShift32(data->docFreq_, 1)) | 1];
      }
      else {
        [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVIntWithInt:(JreLShift32(data->docFreq_, 1))];
        [outArg writeVLongWithLong:data->totalTermFreq_ - data->docFreq_];
      }
    }
    else {
      [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVIntWithInt:data->docFreq_];
    }
  }
}

- (OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)readWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  IOSLongArray *longs = [IOSLongArray arrayWithLength:longsSize_];
  IOSByteArray *bytes = nil;
  jint docFreq = 0;
  jlong totalTermFreq = -1;
  jint bits = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readByte] & (jint) 0xff;
  jint bit0 = bits & 1;
  jint bit1 = bits & 2;
  jint bit2 = bits & 4;
  jint bytesSize = (JreURShift32(bits, 3));
  if (bit1 > 0 && bytesSize == 0) {
    bytesSize = [inArg readVInt];
  }
  if (bit0 > 0) {
    for (jint pos = 0; pos < longsSize_; pos++) {
      *IOSLongArray_GetRef(longs, pos) = [inArg readVLong];
    }
  }
  if (bit1 > 0) {
    bytes = [IOSByteArray arrayWithLength:bytesSize];
    [inArg readBytesWithByteArray:bytes withInt:0 withInt:bytesSize];
  }
  if (bit2 > 0) {
    jint code = [inArg readVInt];
    if (hasPos_) {
      totalTermFreq = docFreq = JreURShift32(code, 1);
      if ((code & 1) == 0) {
        totalTermFreq += [inArg readVLong];
      }
    }
    else {
      docFreq = code;
    }
  }
  return [new_OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_initWithLongArray_withByteArray_withInt_withLong_(longs, bytes, docFreq, totalTermFreq) autorelease];
}

- (void)skipOutputWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  jint bits = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readByte] & (jint) 0xff;
  jint bit0 = bits & 1;
  jint bit1 = bits & 2;
  jint bit2 = bits & 4;
  jint bytesSize = (JreURShift32(bits, 3));
  if (bit1 > 0 && bytesSize == 0) {
    bytesSize = [inArg readVInt];
  }
  if (bit0 > 0) {
    for (jint pos = 0; pos < longsSize_; pos++) {
      [inArg readVLong];
    }
  }
  if (bit1 > 0) {
    [inArg skipBytesWithLong:bytesSize];
  }
  if (bit2 > 0) {
    jint code = [inArg readVInt];
    if (hasPos_ && (code & 1) == 0) {
      [inArg readVLong];
    }
  }
}

- (OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)getNoOutput {
  return OrgApacheLuceneCodecsMemoryFSTTermOutputs_NO_OUTPUT_;
}

- (NSString *)outputToStringWithId:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)data {
  return [((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(data)) description];
}

+ (jboolean)statsEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)t1
                      withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)t2 {
  return OrgApacheLuceneCodecsMemoryFSTTermOutputs_statsEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_(t1, t2);
}

+ (jboolean)bytesEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)t1
                      withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)t2 {
  return OrgApacheLuceneCodecsMemoryFSTTermOutputs_bytesEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_(t1, t2);
}

+ (jboolean)longsEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)t1
                      withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData:(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *)t2 {
  return OrgApacheLuceneCodecsMemoryFSTTermOutputs_longsEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_(t1, t2);
}

+ (jboolean)allZeroWithLongArray:(IOSLongArray *)l {
  return OrgApacheLuceneCodecsMemoryFSTTermOutputs_allZeroWithLongArray_(l);
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsMemoryFSTTermOutputs class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneCodecsMemoryFSTTermOutputs_NO_OUTPUT_, new_OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsMemoryFSTTermOutputs)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexFieldInfo:withInt:", "FSTTermOutputs", NULL, 0x4, NULL, NULL },
    { "ramBytesUsedWithId:", "ramBytesUsed", "J", 0x1, NULL, NULL },
    { "commonWithId:withId:", "common", "Lorg.apache.lucene.codecs.memory.FSTTermOutputs$TermData;", 0x1, NULL, NULL },
    { "subtractWithId:withId:", "subtract", "Lorg.apache.lucene.codecs.memory.FSTTermOutputs$TermData;", 0x1, NULL, NULL },
    { "addWithId:withId:", "add", "Lorg.apache.lucene.codecs.memory.FSTTermOutputs$TermData;", 0x1, NULL, NULL },
    { "writeWithId:withOrgApacheLuceneStoreDataOutput:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readWithOrgApacheLuceneStoreDataInput:", "read", "Lorg.apache.lucene.codecs.memory.FSTTermOutputs$TermData;", 0x1, "Ljava.io.IOException;", NULL },
    { "skipOutputWithOrgApacheLuceneStoreDataInput:", "skipOutput", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "getNoOutput", NULL, "Lorg.apache.lucene.codecs.memory.FSTTermOutputs$TermData;", 0x1, NULL, NULL },
    { "outputToStringWithId:", "outputToString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "statsEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData:withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData:", "statsEqual", "Z", 0x8, NULL, NULL },
    { "bytesEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData:withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData:", "bytesEqual", "Z", 0x8, NULL, NULL },
    { "longsEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData:withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData:", "longsEqual", "Z", 0x8, NULL, NULL },
    { "allZeroWithLongArray:", "allZero", "Z", 0x8, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NO_OUTPUT_", NULL, 0x1a, "Lorg.apache.lucene.codecs.memory.FSTTermOutputs$TermData;", &OrgApacheLuceneCodecsMemoryFSTTermOutputs_NO_OUTPUT_, NULL, .constantValue.asLong = 0 },
    { "hasPos_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "longsSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Lorg.apache.lucene.codecs.memory.FSTTermOutputs$TermData;"};
  static const char *inner_classes[] = {"Lorg.apache.lucene.codecs.memory.FSTTermOutputs$TermData;"};
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsMemoryFSTTermOutputs = { 2, "FSTTermOutputs", "org.apache.lucene.codecs.memory", NULL, 0x0, 14, methods, 3, fields, 1, superclass_type_args, 1, inner_classes, NULL, "Lorg/apache/lucene/util/fst/Outputs<Lorg/apache/lucene/codecs/memory/FSTTermOutputs$TermData;>;" };
  return &_OrgApacheLuceneCodecsMemoryFSTTermOutputs;
}

@end

void OrgApacheLuceneCodecsMemoryFSTTermOutputs_initWithOrgApacheLuceneIndexFieldInfo_withInt_(OrgApacheLuceneCodecsMemoryFSTTermOutputs *self, OrgApacheLuceneIndexFieldInfo *fieldInfo, jint longsSize) {
  OrgApacheLuceneUtilFstOutputs_init(self);
  self->hasPos_ = ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions] != JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS));
  self->longsSize_ = longsSize;
}

OrgApacheLuceneCodecsMemoryFSTTermOutputs *new_OrgApacheLuceneCodecsMemoryFSTTermOutputs_initWithOrgApacheLuceneIndexFieldInfo_withInt_(OrgApacheLuceneIndexFieldInfo *fieldInfo, jint longsSize) {
  OrgApacheLuceneCodecsMemoryFSTTermOutputs *self = [OrgApacheLuceneCodecsMemoryFSTTermOutputs alloc];
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_initWithOrgApacheLuceneIndexFieldInfo_withInt_(self, fieldInfo, longsSize);
  return self;
}

jboolean OrgApacheLuceneCodecsMemoryFSTTermOutputs_statsEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *t1, OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *t2) {
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_initialize();
  return ((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(t1))->docFreq_ == ((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(t2))->docFreq_ && t1->totalTermFreq_ == t2->totalTermFreq_;
}

jboolean OrgApacheLuceneCodecsMemoryFSTTermOutputs_bytesEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *t1, OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *t2) {
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_initialize();
  if (((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(t1))->bytes_ == nil && ((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(t2))->bytes_ == nil) {
    return YES;
  }
  return t1->bytes_ != nil && ((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(t2))->bytes_ != nil && JavaUtilArrays_equalsWithByteArray_withByteArray_(t1->bytes_, t2->bytes_);
}

jboolean OrgApacheLuceneCodecsMemoryFSTTermOutputs_longsEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *t1, OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *t2) {
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_initialize();
  if (((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(t1))->longs_ == nil && ((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(t2))->longs_ == nil) {
    return YES;
  }
  return t1->longs_ != nil && ((OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) nil_chk(t2))->longs_ != nil && JavaUtilArrays_equalsWithLongArray_withLongArray_(t1->longs_, t2->longs_);
}

jboolean OrgApacheLuceneCodecsMemoryFSTTermOutputs_allZeroWithLongArray_(IOSLongArray *l) {
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_initialize();
  for (jint i = 0; i < ((IOSLongArray *) nil_chk(l))->size_; i++) {
    if (IOSLongArray_Get(l, i) != 0) {
      return NO;
    }
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsMemoryFSTTermOutputs)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData)

@implementation OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData

- (instancetype)init {
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_init(self);
  return self;
}

- (instancetype)initWithLongArray:(IOSLongArray *)longs
                    withByteArray:(IOSByteArray *)bytes
                          withInt:(jint)docFreq
                         withLong:(jlong)totalTermFreq {
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_initWithLongArray_withByteArray_withInt_withLong_(self, longs, bytes, docFreq, totalTermFreq);
  return self;
}

- (jlong)ramBytesUsed {
  jlong ramBytesUsed = OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_BASE_RAM_BYTES_USED_;
  if (longs_ != nil) {
    ramBytesUsed += OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithLongArray_(longs_);
  }
  if (bytes_ != nil) {
    ramBytesUsed += OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithByteArray_(bytes_);
  }
  return ramBytesUsed;
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (NSUInteger)hash {
  jint hash_ = 0;
  if (longs_ != nil) {
    jint end = longs_->size_;
    for (jint i = 0; i < end; i++) {
      hash_ -= IOSLongArray_Get(longs_, i);
    }
  }
  if (bytes_ != nil) {
    hash_ = -hash_;
    jint end = bytes_->size_;
    for (jint i = 0; i < end; i++) {
      hash_ += IOSByteArray_Get(bytes_, i);
    }
  }
  hash_ += docFreq_ + totalTermFreq_;
  return hash_;
}

- (NSString *)description {
  return JreStrcat("$$$$$I$J", @"FSTTermOutputs$TermData longs=", JavaUtilArrays_toStringWithLongArray_(longs_), @" bytes=", JavaUtilArrays_toStringWithByteArray_(bytes_), @" docFreq=", docFreq_, @" totalTermFreq=", totalTermFreq_);
}

- (jboolean)isEqual:(id)other_ {
  if (other_ == self) {
    return YES;
  }
  else if (!([other_ isKindOfClass:[OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData class]])) {
    return NO;
  }
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *other = (OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *) check_class_cast(other_, [OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData class]);
  return OrgApacheLuceneCodecsMemoryFSTTermOutputs_statsEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_(self, other) && OrgApacheLuceneCodecsMemoryFSTTermOutputs_longsEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_(self, other) && OrgApacheLuceneCodecsMemoryFSTTermOutputs_bytesEqualWithOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_withOrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_(self, other);
}

- (void)dealloc {
  RELEASE_(longs_);
  RELEASE_(bytes_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData class]) {
    OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_BASE_RAM_BYTES_USED_ = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_class_());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TermData", NULL, 0x0, NULL, NULL },
    { "initWithLongArray:withByteArray:withInt:withLong:", "TermData", NULL, 0x0, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "getChildResources", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_RAM_BYTES_USED_", NULL, 0x1a, "J", &OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_BASE_RAM_BYTES_USED_, NULL, .constantValue.asLong = 0 },
    { "longs_", NULL, 0x0, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "bytes_", NULL, 0x0, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "docFreq_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "totalTermFreq_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData = { 2, "TermData", "org.apache.lucene.codecs.memory", "FSTTermOutputs", 0x8, 7, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData;
}

@end

void OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_init(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *self) {
  NSObject_init(self);
  JreStrongAssign(&self->longs_, nil);
  JreStrongAssign(&self->bytes_, nil);
  self->docFreq_ = 0;
  self->totalTermFreq_ = -1;
}

OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *new_OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_init() {
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *self = [OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData alloc];
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_init(self);
  return self;
}

void OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_initWithLongArray_withByteArray_withInt_withLong_(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *self, IOSLongArray *longs, IOSByteArray *bytes, jint docFreq, jlong totalTermFreq) {
  NSObject_init(self);
  JreStrongAssign(&self->longs_, longs);
  JreStrongAssign(&self->bytes_, bytes);
  self->docFreq_ = docFreq;
  self->totalTermFreq_ = totalTermFreq;
}

OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *new_OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_initWithLongArray_withByteArray_withInt_withLong_(IOSLongArray *longs, IOSByteArray *bytes, jint docFreq, jlong totalTermFreq) {
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData *self = [OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData alloc];
  OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData_initWithLongArray_withByteArray_withInt_withLong_(self, longs, bytes, docFreq, totalTermFreq);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsMemoryFSTTermOutputs_TermData)
