//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/MultiLevelSkipListWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/RAMOutputStream.h"
#include "org/apache/lucene/util/MathUtil.h"

@interface OrgApacheLuceneCodecsMultiLevelSkipListWriter () {
 @public
  jint skipInterval_;
  jint skipMultiplier_;
  IOSObjectArray *skipBuffer_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsMultiLevelSkipListWriter, skipBuffer_, IOSObjectArray *)

@implementation OrgApacheLuceneCodecsMultiLevelSkipListWriter

- (instancetype)initWithInt:(jint)skipInterval
                    withInt:(jint)skipMultiplier
                    withInt:(jint)maxSkipLevels
                    withInt:(jint)df {
  OrgApacheLuceneCodecsMultiLevelSkipListWriter_initWithInt_withInt_withInt_withInt_(self, skipInterval, skipMultiplier, maxSkipLevels, df);
  return self;
}

- (void)init__ {
  JreStrongAssignAndConsume(&skipBuffer_, [IOSObjectArray newArrayWithLength:numberOfSkipLevels_ type:OrgApacheLuceneStoreRAMOutputStream_class_()]);
  for (jint i = 0; i < numberOfSkipLevels_; i++) {
    IOSObjectArray_SetAndConsume(skipBuffer_, i, new_OrgApacheLuceneStoreRAMOutputStream_init());
  }
}

- (void)resetSkip {
  if (skipBuffer_ == nil) {
    [self init__];
  }
  else {
    for (jint i = 0; i < skipBuffer_->size_; i++) {
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(skipBuffer_, i))) reset];
    }
  }
}

- (void)writeSkipDataWithInt:(jint)level
withOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)skipBuffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)bufferSkipWithInt:(jint)df {
  JreAssert((df % skipInterval_ == 0), (@"org/apache/lucene/codecs/MultiLevelSkipListWriter.java:128 condition failed: assert df % skipInterval == 0;"));
  jint numLevels = 1;
  df /= skipInterval_;
  while ((df % skipMultiplier_) == 0 && numLevels < numberOfSkipLevels_) {
    numLevels++;
    df /= skipMultiplier_;
  }
  jlong childPointer = 0;
  for (jint level = 0; level < numLevels; level++) {
    [self writeSkipDataWithInt:level withOrgApacheLuceneStoreIndexOutput:IOSObjectArray_Get(nil_chk(skipBuffer_), level)];
    jlong newChildPointer = [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(skipBuffer_, level))) getFilePointer];
    if (level != 0) {
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(skipBuffer_, level))) writeVLongWithLong:childPointer];
    }
    childPointer = newChildPointer;
  }
}

- (jlong)writeSkipWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)output {
  jlong skipPointer = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(output)) getFilePointer];
  if (skipBuffer_ == nil || skipBuffer_->size_ == 0) return skipPointer;
  for (jint level = numberOfSkipLevels_ - 1; level > 0; level--) {
    jlong length = [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(nil_chk(skipBuffer_), level))) getFilePointer];
    if (length > 0) {
      [output writeVLongWithLong:length];
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(skipBuffer_, level))) writeToWithOrgApacheLuceneStoreDataOutput:output];
    }
  }
  [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(nil_chk(skipBuffer_), 0))) writeToWithOrgApacheLuceneStoreDataOutput:output];
  return skipPointer;
}

- (void)dealloc {
  RELEASE_(skipBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:withInt:", "MultiLevelSkipListWriter", NULL, 0x4, NULL, NULL },
    { "init__", "init", "V", 0x4, NULL, NULL },
    { "resetSkip", NULL, "V", 0x4, NULL, NULL },
    { "writeSkipDataWithInt:withOrgApacheLuceneStoreIndexOutput:", "writeSkipData", "V", 0x404, "Ljava.io.IOException;", NULL },
    { "bufferSkipWithInt:", "bufferSkip", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeSkipWithOrgApacheLuceneStoreIndexOutput:", "writeSkip", "J", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "numberOfSkipLevels_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "skipInterval_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "skipMultiplier_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "skipBuffer_", NULL, 0x2, "[Lorg.apache.lucene.store.RAMOutputStream;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsMultiLevelSkipListWriter = { 2, "MultiLevelSkipListWriter", "org.apache.lucene.codecs", NULL, 0x401, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsMultiLevelSkipListWriter;
}

@end

void OrgApacheLuceneCodecsMultiLevelSkipListWriter_initWithInt_withInt_withInt_withInt_(OrgApacheLuceneCodecsMultiLevelSkipListWriter *self, jint skipInterval, jint skipMultiplier, jint maxSkipLevels, jint df) {
  NSObject_init(self);
  self->skipInterval_ = skipInterval;
  self->skipMultiplier_ = skipMultiplier;
  if (df <= skipInterval) {
    self->numberOfSkipLevels_ = 1;
  }
  else {
    self->numberOfSkipLevels_ = 1 + OrgApacheLuceneUtilMathUtil_logWithLong_withInt_(df / skipInterval, skipMultiplier);
  }
  if (self->numberOfSkipLevels_ > maxSkipLevels) {
    self->numberOfSkipLevels_ = maxSkipLevels;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsMultiLevelSkipListWriter)
