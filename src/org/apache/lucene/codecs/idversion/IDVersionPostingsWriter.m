//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/codecs/PushPostingsWriterBase.h"
#include "org/apache/lucene/codecs/idversion/IDVersionPostingsFormat.h"
#include "org/apache/lucene/codecs/idversion/IDVersionPostingsWriter.h"
#include "org/apache/lucene/codecs/idversion/IDVersionTermState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"

@interface OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter () {
 @public
  jint lastPosition_;
  jlong lastVersion_;
  id<OrgApacheLuceneUtilBits> liveDocs_;
  jlong lastEncodedVersion_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter, liveDocs_, id<OrgApacheLuceneUtilBits>)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter)

NSString *OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter_TERMS_CODEC_ = @"IDVersionPostingsWriterTerms";
OrgApacheLuceneCodecsIdversionIDVersionTermState *OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter_emptyState_;

@implementation OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter

- (instancetype)initWithOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)liveDocs {
  OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter_initWithOrgApacheLuceneUtilBits_(self, liveDocs);
  return self;
}

- (OrgApacheLuceneCodecsBlockTermState *)newTermState {
  return [new_OrgApacheLuceneCodecsIdversionIDVersionTermState_init() autorelease];
}

- (void)init__WithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)termsOut
        withOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state {
  OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(termsOut, OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter_TERMS_CODEC_, OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter_VERSION_CURRENT, [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentWriteState *) nil_chk(state))->segmentInfo_)) getId], state->segmentSuffix_);
}

- (jint)setFieldWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  [super setFieldWithOrgApacheLuceneIndexFieldInfo:fieldInfo];
  if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions] != JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS_AND_POSITIONS)) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS") autorelease];
  }
  if ([fieldInfo hasVectors]) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"field cannot index term vectors: CheckIndex will report this as index corruption") autorelease];
  }
  JreStrongAssign(&lastState_, OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter_emptyState_);
  return 0;
}

- (void)startTerm {
  lastDocID_ = -1;
}

- (void)startDocWithInt:(jint)docID
                withInt:(jint)termDocFreq {
  if (liveDocs_ != nil && [liveDocs_ getWithInt:docID] == false) {
    return;
  }
  if (lastDocID_ != -1) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"term appears in more than one document") autorelease];
  }
  if (termDocFreq != 1) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"term appears more than once in the document") autorelease];
  }
  lastDocID_ = docID;
  lastPosition_ = -1;
  lastVersion_ = -1;
}

- (void)addPositionWithInt:(jint)position
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)payload
                   withInt:(jint)startOffset
                   withInt:(jint)endOffset {
  if (lastDocID_ == -1) {
    return;
  }
  if (lastPosition_ != -1) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"term appears more than once in document") autorelease];
  }
  lastPosition_ = position;
  if (payload == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"token doens't have a payload") autorelease];
  }
  if (((OrgApacheLuceneUtilBytesRef *) nil_chk(payload))->length_ != 8) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"payload.length != 8 (got ", payload->length_, ')')) autorelease];
  }
  lastVersion_ = OrgApacheLuceneCodecsIdversionIDVersionPostingsFormat_bytesToLongWithOrgApacheLuceneUtilBytesRef_(payload);
  if (lastVersion_ < OrgApacheLuceneCodecsIdversionIDVersionPostingsFormat_MIN_VERSION) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J$J$@C", @"version must be >= MIN_VERSION=", OrgApacheLuceneCodecsIdversionIDVersionPostingsFormat_MIN_VERSION, @" (got: ", lastVersion_, @"; payload=", payload, ')')) autorelease];
  }
  if (lastVersion_ > OrgApacheLuceneCodecsIdversionIDVersionPostingsFormat_MAX_VERSION) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J$J$@C", @"version must be <= MAX_VERSION=", OrgApacheLuceneCodecsIdversionIDVersionPostingsFormat_MAX_VERSION, @" (got: ", lastVersion_, @"; payload=", payload, ')')) autorelease];
  }
}

- (void)finishDoc {
  if (lastDocID_ == -1) {
    return;
  }
  if (lastPosition_ == -1) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"missing addPosition") autorelease];
  }
}

- (void)finishTermWithOrgApacheLuceneCodecsBlockTermState:(OrgApacheLuceneCodecsBlockTermState *)_state {
  if (lastDocID_ == -1) {
    return;
  }
  OrgApacheLuceneCodecsIdversionIDVersionTermState *state = (OrgApacheLuceneCodecsIdversionIDVersionTermState *) check_class_cast(_state, [OrgApacheLuceneCodecsIdversionIDVersionTermState class]);
  JreAssert((((OrgApacheLuceneCodecsIdversionIDVersionTermState *) nil_chk(state))->docFreq_ > 0), (@"org/apache/lucene/codecs/idversion/IDVersionPostingsWriter.java:146 condition failed: assert state.docFreq > 0;"));
  state->docID_ = lastDocID_;
  state->idVersion_ = lastVersion_;
}

- (void)encodeTermWithLongArray:(IOSLongArray *)longs
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
withOrgApacheLuceneCodecsBlockTermState:(OrgApacheLuceneCodecsBlockTermState *)_state
                    withBoolean:(jboolean)absolute {
  OrgApacheLuceneCodecsIdversionIDVersionTermState *state = (OrgApacheLuceneCodecsIdversionIDVersionTermState *) check_class_cast(_state, [OrgApacheLuceneCodecsIdversionIDVersionTermState class]);
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVIntWithInt:((OrgApacheLuceneCodecsIdversionIDVersionTermState *) nil_chk(state))->docID_];
  if (absolute) {
    [outArg writeVLongWithLong:state->idVersion_];
  }
  else {
    jlong delta = state->idVersion_ - lastEncodedVersion_;
    [outArg writeZLongWithLong:delta];
  }
  lastEncodedVersion_ = state->idVersion_;
}

- (void)close {
}

- (void)dealloc {
  RELEASE_(lastState_);
  RELEASE_(liveDocs_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter_emptyState_, new_OrgApacheLuceneCodecsIdversionIDVersionTermState_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneUtilBits:", "IDVersionPostingsWriter", NULL, 0x1, NULL, NULL },
    { "newTermState", NULL, "Lorg.apache.lucene.codecs.BlockTermState;", 0x1, NULL, NULL },
    { "init__WithOrgApacheLuceneStoreIndexOutput:withOrgApacheLuceneIndexSegmentWriteState:", "init", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "setFieldWithOrgApacheLuceneIndexFieldInfo:", "setField", "I", 0x1, NULL, NULL },
    { "startTerm", NULL, "V", 0x1, NULL, NULL },
    { "startDocWithInt:withInt:", "startDoc", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "addPositionWithInt:withOrgApacheLuceneUtilBytesRef:withInt:withInt:", "addPosition", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "finishDoc", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "finishTermWithOrgApacheLuceneCodecsBlockTermState:", "finishTerm", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "encodeTermWithLongArray:withOrgApacheLuceneStoreDataOutput:withOrgApacheLuceneIndexFieldInfo:withOrgApacheLuceneCodecsBlockTermState:withBoolean:", "encodeTerm", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TERMS_CODEC_", NULL, 0x18, "Ljava.lang.String;", &OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter_TERMS_CODEC_, NULL, .constantValue.asLong = 0 },
    { "VERSION_START", "VERSION_START", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter_VERSION_START },
    { "VERSION_CURRENT", "VERSION_CURRENT", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter_VERSION_CURRENT },
    { "emptyState_", NULL, 0x18, "Lorg.apache.lucene.codecs.idversion.IDVersionTermState;", &OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter_emptyState_, NULL, .constantValue.asLong = 0 },
    { "lastState_", NULL, 0x0, "Lorg.apache.lucene.codecs.idversion.IDVersionTermState;", NULL, NULL, .constantValue.asLong = 0 },
    { "lastDocID_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastPosition_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastVersion_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "liveDocs_", NULL, 0x12, "Lorg.apache.lucene.util.Bits;", NULL, NULL, .constantValue.asLong = 0 },
    { "lastEncodedVersion_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter = { 2, "IDVersionPostingsWriter", "org.apache.lucene.codecs.idversion", NULL, 0x10, 11, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter;
}

@end

void OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter_initWithOrgApacheLuceneUtilBits_(OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter *self, id<OrgApacheLuceneUtilBits> liveDocs) {
  OrgApacheLuceneCodecsPushPostingsWriterBase_init(self);
  JreStrongAssign(&self->liveDocs_, liveDocs);
}

OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter *new_OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter_initWithOrgApacheLuceneUtilBits_(id<OrgApacheLuceneUtilBits> liveDocs) {
  OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter *self = [OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter alloc];
  OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter_initWithOrgApacheLuceneUtilBits_(self, liveDocs);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter)
