//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/codecs/compressing/Decompressor.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "org/apache/lucene/util/packed/BlockPackedReaderIterator.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

@interface OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader () {
 @public
  OrgApacheLuceneIndexFieldInfos *fieldInfos_;
  jint version__;
  jint packedIntsVersion_;
  OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode_;
  OrgApacheLuceneCodecsCompressingDecompressor *decompressor_;
  jint chunkSize_;
  jint numDocs_;
  jboolean closed_;
  OrgApacheLuceneUtilPackedBlockPackedReaderIterator *reader_;
  jlong numChunks_;
  jlong numDirtyChunks_;
  jlong maxPointer_;
}

- (instancetype)initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader:(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *)reader;

- (void)ensureOpen;

- (IOSObjectArray *)positionIndexWithInt:(jint)skip
                                 withInt:(jint)numFields
withOrgApacheLuceneUtilPackedPackedInts_Reader:(OrgApacheLuceneUtilPackedPackedInts_Reader *)numTerms
                            withIntArray:(IOSIntArray *)termFreqs;

- (IOSObjectArray *)readPositionsWithInt:(jint)skip
                                 withInt:(jint)numFields
withOrgApacheLuceneUtilPackedPackedInts_Reader:(OrgApacheLuceneUtilPackedPackedInts_Reader *)flags
withOrgApacheLuceneUtilPackedPackedInts_Reader:(OrgApacheLuceneUtilPackedPackedInts_Reader *)numTerms
                            withIntArray:(IOSIntArray *)termFreqs
                                 withInt:(jint)flag
                                 withInt:(jint)totalPositions
                           withIntArray2:(IOSObjectArray *)positionIndex;

+ (jint)sumWithIntArray:(IOSIntArray *)arr;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader, fieldInfos_, OrgApacheLuceneIndexFieldInfos *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader, compressionMode_, OrgApacheLuceneCodecsCompressingCompressionMode *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader, decompressor_, OrgApacheLuceneCodecsCompressingDecompressor *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader, reader_, OrgApacheLuceneUtilPackedBlockPackedReaderIterator *)

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *self, OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *reader);

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *reader) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_ensureOpen(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *self);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_positionIndexWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Reader_withIntArray_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *self, jint skip, jint numFields, OrgApacheLuceneUtilPackedPackedInts_Reader *numTerms, IOSIntArray *termFreqs);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_readPositionsWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Reader_withOrgApacheLuceneUtilPackedPackedInts_Reader_withIntArray_withInt_withInt_withIntArray2_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *self, jint skip, jint numFields, OrgApacheLuceneUtilPackedPackedInts_Reader *flags, OrgApacheLuceneUtilPackedPackedInts_Reader *numTerms, IOSIntArray *termFreqs, jint flag, jint totalPositions, IOSObjectArray *positionIndex);

__attribute__((unused)) static jint OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_sumWithIntArray_(IOSIntArray *arr);

@interface OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields : OrgApacheLuceneIndexFields {
 @public
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *this$0_;
  IOSIntArray *fieldNums_, *fieldFlags_, *fieldNumOffs_, *numTerms_, *fieldLengths_;
  IOSObjectArray *prefixLengths_, *suffixLengths_, *termFreqs_, *positionIndex_, *positions_, *startOffsets_, *lengths_, *payloadIndex_;
  OrgApacheLuceneUtilBytesRef *suffixBytes_, *payloadBytes_;
}

- (instancetype)initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader:(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *)outer$
                                                                        withIntArray:(IOSIntArray *)fieldNums
                                                                        withIntArray:(IOSIntArray *)fieldFlags
                                                                        withIntArray:(IOSIntArray *)fieldNumOffs
                                                                        withIntArray:(IOSIntArray *)numTerms
                                                                        withIntArray:(IOSIntArray *)fieldLengths
                                                                       withIntArray2:(IOSObjectArray *)prefixLengths
                                                                       withIntArray2:(IOSObjectArray *)suffixLengths
                                                                       withIntArray2:(IOSObjectArray *)termFreqs
                                                                       withIntArray2:(IOSObjectArray *)positionIndex
                                                                       withIntArray2:(IOSObjectArray *)positions
                                                                       withIntArray2:(IOSObjectArray *)startOffsets
                                                                       withIntArray2:(IOSObjectArray *)lengths
                                                     withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)payloadBytes
                                                                       withIntArray2:(IOSObjectArray *)payloadIndex
                                                     withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)suffixBytes;

- (id<JavaUtilIterator>)iterator;

- (OrgApacheLuceneIndexTerms *)termsWithNSString:(NSString *)field;

- (jint)size;


@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, this$0_, OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, fieldNums_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, fieldFlags_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, fieldNumOffs_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, numTerms_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, fieldLengths_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, prefixLengths_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, suffixLengths_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, termFreqs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, positionIndex_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, positions_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, startOffsets_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, lengths_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, payloadIndex_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, suffixBytes_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields, payloadBytes_, OrgApacheLuceneUtilBytesRef *)

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withOrgApacheLuceneUtilBytesRef_withIntArray2_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields *self, OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *outer$, IOSIntArray *fieldNums, IOSIntArray *fieldFlags, IOSIntArray *fieldNumOffs, IOSIntArray *numTerms, IOSIntArray *fieldLengths, IOSObjectArray *prefixLengths, IOSObjectArray *suffixLengths, IOSObjectArray *termFreqs, IOSObjectArray *positionIndex, IOSObjectArray *positions, IOSObjectArray *startOffsets, IOSObjectArray *lengths, OrgApacheLuceneUtilBytesRef *payloadBytes, IOSObjectArray *payloadIndex, OrgApacheLuceneUtilBytesRef *suffixBytes);

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withOrgApacheLuceneUtilBytesRef_withIntArray2_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *outer$, IOSIntArray *fieldNums, IOSIntArray *fieldFlags, IOSIntArray *fieldNumOffs, IOSIntArray *numTerms, IOSIntArray *fieldLengths, IOSObjectArray *prefixLengths, IOSObjectArray *suffixLengths, IOSObjectArray *termFreqs, IOSObjectArray *positionIndex, IOSObjectArray *positions, IOSObjectArray *startOffsets, IOSObjectArray *lengths, OrgApacheLuceneUtilBytesRef *payloadBytes, IOSObjectArray *payloadIndex, OrgApacheLuceneUtilBytesRef *suffixBytes) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields)

@interface OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1 : NSObject < JavaUtilIterator > {
 @public
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields *this$0_;
  jint i_;
}

- (jboolean)hasNext;

- (NSString *)next;

- (void)remove;

- (instancetype)initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields:(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1, this$0_, OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields *)

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1 *self, OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields *outer$);

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1 *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1)

@interface OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms : OrgApacheLuceneIndexTerms {
 @public
  jint numTerms_, flags_;
  IOSIntArray *prefixLengths_, *suffixLengths_, *termFreqs_, *positionIndex_, *positions_, *startOffsets_, *lengths_, *payloadIndex_;
  OrgApacheLuceneUtilBytesRef *termBytes_, *payloadBytes_;
}

- (instancetype)initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader:(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *)outer$
                                                                             withInt:(jint)numTerms
                                                                             withInt:(jint)flags
                                                                        withIntArray:(IOSIntArray *)prefixLengths
                                                                        withIntArray:(IOSIntArray *)suffixLengths
                                                                        withIntArray:(IOSIntArray *)termFreqs
                                                                        withIntArray:(IOSIntArray *)positionIndex
                                                                        withIntArray:(IOSIntArray *)positions
                                                                        withIntArray:(IOSIntArray *)startOffsets
                                                                        withIntArray:(IOSIntArray *)lengths
                                                                        withIntArray:(IOSIntArray *)payloadIndex
                                                     withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)payloadBytes
                                                     withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)termBytes;

- (OrgApacheLuceneIndexTermsEnum *)iterator;

- (jlong)size;

- (jlong)getSumTotalTermFreq;

- (jlong)getSumDocFreq;

- (jint)getDocCount;

- (jboolean)hasFreqs;

- (jboolean)hasOffsets;

- (jboolean)hasPositions;

- (jboolean)hasPayloads;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms, prefixLengths_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms, suffixLengths_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms, termFreqs_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms, positionIndex_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms, positions_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms, startOffsets_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms, lengths_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms, payloadIndex_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms, termBytes_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms, payloadBytes_, OrgApacheLuceneUtilBytesRef *)

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_withInt_withInt_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms *self, OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *outer$, jint numTerms, jint flags, IOSIntArray *prefixLengths, IOSIntArray *suffixLengths, IOSIntArray *termFreqs, IOSIntArray *positionIndex, IOSIntArray *positions, IOSIntArray *startOffsets, IOSIntArray *lengths, IOSIntArray *payloadIndex, OrgApacheLuceneUtilBytesRef *payloadBytes, OrgApacheLuceneUtilBytesRef *termBytes);

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_withInt_withInt_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *outer$, jint numTerms, jint flags, IOSIntArray *prefixLengths, IOSIntArray *suffixLengths, IOSIntArray *termFreqs, IOSIntArray *positionIndex, IOSIntArray *positions, IOSIntArray *startOffsets, IOSIntArray *lengths, IOSIntArray *payloadIndex, OrgApacheLuceneUtilBytesRef *payloadBytes, OrgApacheLuceneUtilBytesRef *termBytes) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms)

@interface OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum : OrgApacheLuceneIndexTermsEnum {
 @public
  jint numTerms_, startPos_, ord_;
  IOSIntArray *prefixLengths_, *suffixLengths_, *termFreqs_, *positionIndex_, *positions_, *startOffsets_, *lengths_, *payloadIndex_;
  OrgApacheLuceneStoreByteArrayDataInput *in_;
  OrgApacheLuceneUtilBytesRef *payloads_;
  OrgApacheLuceneUtilBytesRef *term_;
}

- (instancetype)init;

- (void)resetWithInt:(jint)numTerms
             withInt:(jint)flags
        withIntArray:(IOSIntArray *)prefixLengths
        withIntArray:(IOSIntArray *)suffixLengths
        withIntArray:(IOSIntArray *)termFreqs
        withIntArray:(IOSIntArray *)positionIndex
        withIntArray:(IOSIntArray *)positions
        withIntArray:(IOSIntArray *)startOffsets
        withIntArray:(IOSIntArray *)lengths
        withIntArray:(IOSIntArray *)payloadIndex
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)payloads
withOrgApacheLuceneStoreByteArrayDataInput:(OrgApacheLuceneStoreByteArrayDataInput *)inArg;

- (void)reset;

- (OrgApacheLuceneUtilBytesRef *)next;

- (OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *)seekCeilWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text;

- (OrgApacheLuceneUtilBytesRef *)term;

- (jlong)ord;

- (jint)docFreq;

- (jlong)totalTermFreq;

- (OrgApacheLuceneIndexPostingsEnum *)postingsWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)reuse
                                                                           withInt:(jint)flags;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum, prefixLengths_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum, suffixLengths_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum, termFreqs_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum, positionIndex_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum, positions_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum, startOffsets_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum, lengths_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum, payloadIndex_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum, in_, OrgApacheLuceneStoreByteArrayDataInput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum, payloads_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum, term_, OrgApacheLuceneUtilBytesRef *)

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum_init(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum *self);

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum)

@interface OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum : OrgApacheLuceneIndexPostingsEnum {
 @public
  jint doc_;
  jint termFreq_;
  jint positionIndex_;
  IOSIntArray *positions_;
  IOSIntArray *startOffsets_;
  IOSIntArray *lengths_;
  OrgApacheLuceneUtilBytesRef *payload_;
  IOSIntArray *payloadIndex_;
  jint basePayloadOffset_;
  jint i_;
}

- (instancetype)init;

- (void)resetWithInt:(jint)freq
             withInt:(jint)positionIndex
        withIntArray:(IOSIntArray *)positions
        withIntArray:(IOSIntArray *)startOffsets
        withIntArray:(IOSIntArray *)lengths
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)payloads
        withIntArray:(IOSIntArray *)payloadIndex;

- (void)checkDoc;

- (void)checkPosition;

- (jint)nextPosition;

- (jint)startOffset;

- (jint)endOffset;

- (OrgApacheLuceneUtilBytesRef *)getPayload;

- (jint)freq;

- (jint)docID;

- (jint)nextDoc;

- (jint)advanceWithInt:(jint)target;

- (jlong)cost;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum, positions_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum, startOffsets_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum, lengths_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum, payload_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum, payloadIndex_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_init(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum *self);

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_checkDoc(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_checkPosition(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum)

@implementation OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader

- (instancetype)initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader:(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *)reader {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_(self, reader);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)d
                  withOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si
                                         withNSString:(NSString *)segmentSuffix
                   withOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fn
                    withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context
                                         withNSString:(NSString *)formatName
  withOrgApacheLuceneCodecsCompressingCompressionMode:(OrgApacheLuceneCodecsCompressingCompressionMode *)compressionMode {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_(self, d, si, segmentSuffix, fn, context, formatName, compressionMode);
  return self;
}

- (OrgApacheLuceneCodecsCompressingCompressionMode *)getCompressionMode {
  return compressionMode_;
}

- (jint)getChunkSize {
  return chunkSize_;
}

- (jint)getPackedIntsVersion {
  return packedIntsVersion_;
}

- (jint)getVersion {
  return version__;
}

- (OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexReader *)getIndexReader {
  return indexReader_;
}

- (OrgApacheLuceneStoreIndexInput *)getVectorsStream {
  return vectorsStream_;
}

- (jlong)getMaxPointer {
  return maxPointer_;
}

- (jlong)getNumChunks {
  return numChunks_;
}

- (jlong)getNumDirtyChunks {
  return numDirtyChunks_;
}

- (void)ensureOpen {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_ensureOpen(self);
}

- (void)close {
  if (!closed_) {
    OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ vectorsStream_ } count:1 type:JavaIoCloseable_class_()]);
    closed_ = YES;
  }
}

- (OrgApacheLuceneCodecsTermVectorsReader *)clone {
  return [new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_(self) autorelease];
}

- (OrgApacheLuceneIndexFields *)getWithInt:(jint)doc {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_ensureOpen(self);
  {
    jlong startPointer = [((OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexReader *) nil_chk(indexReader_)) getStartPointerWithInt:doc];
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(vectorsStream_)) seekWithLong:startPointer];
  }
  jint docBase = [vectorsStream_ readVInt];
  jint chunkDocs = [vectorsStream_ readVInt];
  if (doc < docBase || doc >= docBase + chunkDocs || docBase + chunkDocs > numDocs_) {
    @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I$I$I", @"docBase=", docBase, @",chunkDocs=", chunkDocs, @",doc=", doc), vectorsStream_) autorelease];
  }
  jint skip;
  jint numFields;
  jint totalFields;
  if (chunkDocs == 1) {
    skip = 0;
    numFields = totalFields = [vectorsStream_ readVInt];
  }
  else {
    [((OrgApacheLuceneUtilPackedBlockPackedReaderIterator *) nil_chk(reader_)) resetWithOrgApacheLuceneStoreDataInput:vectorsStream_ withLong:chunkDocs];
    jint sum = 0;
    for (jint i = docBase; i < doc; ++i) {
      sum += [reader_ next];
    }
    skip = sum;
    numFields = (jint) [reader_ next];
    sum += numFields;
    for (jint i = doc + 1; i < docBase + chunkDocs; ++i) {
      sum += [reader_ next];
    }
    totalFields = sum;
  }
  if (numFields == 0) {
    return nil;
  }
  IOSIntArray *fieldNums;
  {
    jint token = [vectorsStream_ readByte] & (jint) 0xFF;
    JreAssert((token != 0), (@"org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java:292 condition failed: assert token != 0;"));
    jint bitsPerFieldNum = token & (jint) 0x1F;
    jint totalDistinctFields = JreURShift32(token, 5);
    if (totalDistinctFields == (jint) 0x07) {
      totalDistinctFields += [vectorsStream_ readVInt];
    }
    ++totalDistinctFields;
    id<OrgApacheLuceneUtilPackedPackedInts_ReaderIterator> it = OrgApacheLuceneUtilPackedPackedInts_getReaderIteratorNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_withInt_(vectorsStream_, JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED), packedIntsVersion_, totalDistinctFields, bitsPerFieldNum, 1);
    fieldNums = [IOSIntArray arrayWithLength:totalDistinctFields];
    for (jint i = 0; i < totalDistinctFields; ++i) {
      *IOSIntArray_GetRef(fieldNums, i) = (jint) [((id<OrgApacheLuceneUtilPackedPackedInts_ReaderIterator>) nil_chk(it)) next];
    }
  }
  IOSIntArray *fieldNumOffs = [IOSIntArray arrayWithLength:numFields];
  OrgApacheLuceneUtilPackedPackedInts_Reader *flags;
  {
    jint bitsPerOff = OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(fieldNums->size_ - 1);
    OrgApacheLuceneUtilPackedPackedInts_Reader *allFieldNumOffs = OrgApacheLuceneUtilPackedPackedInts_getReaderNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_(vectorsStream_, JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED), packedIntsVersion_, totalFields, bitsPerOff);
    {
      OrgApacheLuceneUtilPackedPackedInts_Reader *fieldFlags;
      OrgApacheLuceneUtilPackedPackedInts_Mutable *f;
      switch ([vectorsStream_ readVInt]) {
        case 0:
        fieldFlags = OrgApacheLuceneUtilPackedPackedInts_getReaderNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_(vectorsStream_, JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED), packedIntsVersion_, fieldNums->size_, JreLoadStatic(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, FLAGS_BITS_));
        f = OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withFloat_(totalFields, JreLoadStatic(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, FLAGS_BITS_), OrgApacheLuceneUtilPackedPackedInts_COMPACT);
        for (jint i = 0; i < totalFields; ++i) {
          jint fieldNumOff = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(allFieldNumOffs)) getWithInt:i];
          JreAssert((fieldNumOff >= 0 && fieldNumOff < fieldNums->size_), (@"org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java:318 condition failed: assert fieldNumOff >= 0 && fieldNumOff < fieldNums.length;"));
          jint fgs = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(fieldFlags)) getWithInt:fieldNumOff];
          [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(f)) setWithInt:i withLong:fgs];
        }
        flags = f;
        break;
        case 1:
        flags = OrgApacheLuceneUtilPackedPackedInts_getReaderNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_(vectorsStream_, JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED), packedIntsVersion_, totalFields, JreLoadStatic(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, FLAGS_BITS_));
        break;
        default:
        @throw [new_JavaLangAssertionError_init() autorelease];
      }
    }
    for (jint i = 0; i < numFields; ++i) {
      *IOSIntArray_GetRef(fieldNumOffs, i) = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(allFieldNumOffs)) getWithInt:skip + i];
    }
  }
  OrgApacheLuceneUtilPackedPackedInts_Reader *numTerms;
  jint totalTerms;
  {
    jint bitsRequired = [vectorsStream_ readVInt];
    numTerms = OrgApacheLuceneUtilPackedPackedInts_getReaderNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_(vectorsStream_, JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED), packedIntsVersion_, totalFields, bitsRequired);
    jint sum = 0;
    for (jint i = 0; i < totalFields; ++i) {
      sum += [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:i];
    }
    totalTerms = sum;
  }
  jint docOff = 0, docLen = 0, totalLen;
  IOSIntArray *fieldLengths = [IOSIntArray arrayWithLength:numFields];
  IOSObjectArray *prefixLengths = [IOSObjectArray arrayWithLength:numFields type:IOSClass_intArray(1)];
  IOSObjectArray *suffixLengths = [IOSObjectArray arrayWithLength:numFields type:IOSClass_intArray(1)];
  {
    [((OrgApacheLuceneUtilPackedBlockPackedReaderIterator *) nil_chk(reader_)) resetWithOrgApacheLuceneStoreDataInput:vectorsStream_ withLong:totalTerms];
    jint toSkip = 0;
    for (jint i = 0; i < skip; ++i) {
      toSkip += [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:i];
    }
    [reader_ skipWithLong:toSkip];
    for (jint i = 0; i < numFields; ++i) {
      jint termCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:skip + i];
      IOSIntArray *fieldPrefixLengths = [IOSIntArray arrayWithLength:termCount];
      IOSObjectArray_Set(prefixLengths, i, fieldPrefixLengths);
      for (jint j = 0; j < termCount; ) {
        OrgApacheLuceneUtilLongsRef *next = [reader_ nextWithInt:termCount - j];
        for (jint k = 0; k < ((OrgApacheLuceneUtilLongsRef *) nil_chk(next))->length_; ++k) {
          *IOSIntArray_GetRef(fieldPrefixLengths, j++) = (jint) IOSLongArray_Get(nil_chk(next->longs_), next->offset_ + k);
        }
      }
    }
    [reader_ skipWithLong:totalTerms - [reader_ ord]];
    [reader_ resetWithOrgApacheLuceneStoreDataInput:vectorsStream_ withLong:totalTerms];
    toSkip = 0;
    for (jint i = 0; i < skip; ++i) {
      for (jint j = 0; j < [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:i]; ++j) {
        docOff += [reader_ next];
      }
    }
    for (jint i = 0; i < numFields; ++i) {
      jint termCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:skip + i];
      IOSIntArray *fieldSuffixLengths = [IOSIntArray arrayWithLength:termCount];
      IOSObjectArray_Set(suffixLengths, i, fieldSuffixLengths);
      for (jint j = 0; j < termCount; ) {
        OrgApacheLuceneUtilLongsRef *next = [reader_ nextWithInt:termCount - j];
        for (jint k = 0; k < ((OrgApacheLuceneUtilLongsRef *) nil_chk(next))->length_; ++k) {
          *IOSIntArray_GetRef(fieldSuffixLengths, j++) = (jint) IOSLongArray_Get(nil_chk(next->longs_), next->offset_ + k);
        }
      }
      *IOSIntArray_GetRef(fieldLengths, i) = OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_sumWithIntArray_(IOSObjectArray_Get(suffixLengths, i));
      docLen += IOSIntArray_Get(fieldLengths, i);
    }
    totalLen = docOff + docLen;
    for (jint i = skip + numFields; i < totalFields; ++i) {
      for (jint j = 0; j < [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:i]; ++j) {
        totalLen += [reader_ next];
      }
    }
  }
  IOSIntArray *termFreqs = [IOSIntArray arrayWithLength:totalTerms];
  {
    [reader_ resetWithOrgApacheLuceneStoreDataInput:vectorsStream_ withLong:totalTerms];
    for (jint i = 0; i < totalTerms; ) {
      OrgApacheLuceneUtilLongsRef *next = [reader_ nextWithInt:totalTerms - i];
      for (jint k = 0; k < ((OrgApacheLuceneUtilLongsRef *) nil_chk(next))->length_; ++k) {
        *IOSIntArray_GetRef(termFreqs, i++) = 1 + (jint) IOSLongArray_Get(nil_chk(next->longs_), next->offset_ + k);
      }
    }
  }
  jint totalPositions = 0, totalOffsets = 0, totalPayloads = 0;
  for (jint i = 0, termIndex = 0; i < totalFields; ++i) {
    jint f = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(flags)) getWithInt:i];
    jint termCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:i];
    for (jint j = 0; j < termCount; ++j) {
      jint freq = IOSIntArray_Get(termFreqs, termIndex++);
      if ((f & OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_POSITIONS) != 0) {
        totalPositions += freq;
      }
      if ((f & OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_OFFSETS) != 0) {
        totalOffsets += freq;
      }
      if ((f & OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_PAYLOADS) != 0) {
        totalPayloads += freq;
      }
    }
    JreAssert((i != totalFields - 1 || termIndex == totalTerms), (JreStrcat("ICI", termIndex, ' ', totalTerms)));
  }
  IOSObjectArray *positionIndex = OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_positionIndexWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Reader_withIntArray_(self, skip, numFields, numTerms, termFreqs);
  IOSObjectArray *positions, *startOffsets, *lengths;
  if (totalPositions > 0) {
    positions = OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_readPositionsWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Reader_withOrgApacheLuceneUtilPackedPackedInts_Reader_withIntArray_withInt_withInt_withIntArray2_(self, skip, numFields, flags, numTerms, termFreqs, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_POSITIONS, totalPositions, positionIndex);
  }
  else {
    positions = [IOSObjectArray arrayWithLength:numFields type:IOSClass_intArray(1)];
  }
  if (totalOffsets > 0) {
    IOSFloatArray *charsPerTerm = [IOSFloatArray arrayWithLength:fieldNums->size_];
    for (jint i = 0; i < charsPerTerm->size_; ++i) {
      *IOSFloatArray_GetRef(charsPerTerm, i) = JavaLangFloat_intBitsToFloatWithInt_([vectorsStream_ readInt]);
    }
    startOffsets = OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_readPositionsWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Reader_withOrgApacheLuceneUtilPackedPackedInts_Reader_withIntArray_withInt_withInt_withIntArray2_(self, skip, numFields, flags, numTerms, termFreqs, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_OFFSETS, totalOffsets, positionIndex);
    lengths = OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_readPositionsWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Reader_withOrgApacheLuceneUtilPackedPackedInts_Reader_withIntArray_withInt_withInt_withIntArray2_(self, skip, numFields, flags, numTerms, termFreqs, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_OFFSETS, totalOffsets, positionIndex);
    for (jint i = 0; i < numFields; ++i) {
      IOSIntArray *fStartOffsets = IOSObjectArray_Get(nil_chk(startOffsets), i);
      IOSIntArray *fPositions = IOSObjectArray_Get(nil_chk(positions), i);
      if (fStartOffsets != nil && fPositions != nil) {
        jfloat fieldCharsPerTerm = IOSFloatArray_Get(charsPerTerm, IOSIntArray_Get(fieldNumOffs, i));
        for (jint j = 0; j < ((IOSIntArray *) nil_chk(IOSObjectArray_Get(startOffsets, i)))->size_; ++j) {
          *IOSIntArray_GetRef(fStartOffsets, j) += JreFpToInt((fieldCharsPerTerm * IOSIntArray_Get(fPositions, j)));
        }
      }
      if (fStartOffsets != nil) {
        IOSIntArray *fPrefixLengths = IOSObjectArray_Get(prefixLengths, i);
        IOSIntArray *fSuffixLengths = IOSObjectArray_Get(suffixLengths, i);
        IOSIntArray *fLengths = IOSObjectArray_Get(nil_chk(lengths), i);
        for (jint j = 0, end = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:skip + i]; j < end; ++j) {
          jint termLength = IOSIntArray_Get(nil_chk(fPrefixLengths), j) + IOSIntArray_Get(nil_chk(fSuffixLengths), j);
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(lengths, i)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(positionIndex), i)), j)) += termLength;
          for (jint k = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(positionIndex, i)), j) + 1; k < IOSIntArray_Get(nil_chk(IOSObjectArray_Get(positionIndex, i)), j + 1); ++k) {
            *IOSIntArray_GetRef(fStartOffsets, k) += IOSIntArray_Get(fStartOffsets, k - 1);
            *IOSIntArray_GetRef(nil_chk(fLengths), k) += termLength;
          }
        }
      }
    }
  }
  else {
    startOffsets = lengths = [IOSObjectArray arrayWithLength:numFields type:IOSClass_intArray(1)];
  }
  if (totalPositions > 0) {
    for (jint i = 0; i < numFields; ++i) {
      IOSIntArray *fPositions = IOSObjectArray_Get(nil_chk(positions), i);
      IOSIntArray *fpositionIndex = IOSObjectArray_Get(nil_chk(positionIndex), i);
      if (fPositions != nil) {
        for (jint j = 0, end = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:skip + i]; j < end; ++j) {
          for (jint k = IOSIntArray_Get(nil_chk(fpositionIndex), j) + 1; k < IOSIntArray_Get(fpositionIndex, j + 1); ++k) {
            *IOSIntArray_GetRef(fPositions, k) += IOSIntArray_Get(fPositions, k - 1);
          }
        }
      }
    }
  }
  IOSObjectArray *payloadIndex = [IOSObjectArray arrayWithLength:numFields type:IOSClass_intArray(1)];
  jint totalPayloadLength = 0;
  jint payloadOff = 0;
  jint payloadLen = 0;
  if (totalPayloads > 0) {
    [reader_ resetWithOrgApacheLuceneStoreDataInput:vectorsStream_ withLong:totalPayloads];
    jint termIndex = 0;
    for (jint i = 0; i < skip; ++i) {
      jint f = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(flags)) getWithInt:i];
      jint termCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:i];
      if ((f & OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_PAYLOADS) != 0) {
        for (jint j = 0; j < termCount; ++j) {
          jint freq = IOSIntArray_Get(termFreqs, termIndex + j);
          for (jint k = 0; k < freq; ++k) {
            jint l = (jint) [reader_ next];
            payloadOff += l;
          }
        }
      }
      termIndex += termCount;
    }
    totalPayloadLength = payloadOff;
    for (jint i = 0; i < numFields; ++i) {
      jint f = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(flags)) getWithInt:skip + i];
      jint termCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:skip + i];
      if ((f & OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_PAYLOADS) != 0) {
        jint totalFreq = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(positionIndex), i)), termCount);
        IOSObjectArray_SetAndConsume(payloadIndex, i, [IOSIntArray newArrayWithLength:totalFreq + 1]);
        jint posIdx = 0;
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(payloadIndex, i)), posIdx) = payloadLen;
        for (jint j = 0; j < termCount; ++j) {
          jint freq = IOSIntArray_Get(termFreqs, termIndex + j);
          for (jint k = 0; k < freq; ++k) {
            jint payloadLength = (jint) [reader_ next];
            payloadLen += payloadLength;
            *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(payloadIndex, i)), posIdx + 1) = payloadLen;
            ++posIdx;
          }
        }
        JreAssert((posIdx == totalFreq), (@"org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java:539 condition failed: assert posIdx == totalFreq;"));
      }
      termIndex += termCount;
    }
    totalPayloadLength += payloadLen;
    for (jint i = skip + numFields; i < totalFields; ++i) {
      jint f = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(flags)) getWithInt:i];
      jint termCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:i];
      if ((f & OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_PAYLOADS) != 0) {
        for (jint j = 0; j < termCount; ++j) {
          jint freq = IOSIntArray_Get(termFreqs, termIndex + j);
          for (jint k = 0; k < freq; ++k) {
            totalPayloadLength += [reader_ next];
          }
        }
      }
      termIndex += termCount;
    }
    JreAssert((termIndex == totalTerms), (JreStrcat("ICI", termIndex, ' ', totalTerms)));
  }
  OrgApacheLuceneUtilBytesRef *suffixBytes = [new_OrgApacheLuceneUtilBytesRef_init() autorelease];
  [((OrgApacheLuceneCodecsCompressingDecompressor *) nil_chk(decompressor_)) decompressWithOrgApacheLuceneStoreDataInput:vectorsStream_ withInt:totalLen + totalPayloadLength withInt:docOff + payloadOff withInt:docLen + payloadLen withOrgApacheLuceneUtilBytesRef:suffixBytes];
  suffixBytes->length_ = docLen;
  OrgApacheLuceneUtilBytesRef *payloadBytes = [new_OrgApacheLuceneUtilBytesRef_initWithByteArray_withInt_withInt_(suffixBytes->bytes_, suffixBytes->offset_ + docLen, payloadLen) autorelease];
  IOSIntArray *fieldFlags = [IOSIntArray arrayWithLength:numFields];
  for (jint i = 0; i < numFields; ++i) {
    *IOSIntArray_GetRef(fieldFlags, i) = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(flags)) getWithInt:skip + i];
  }
  IOSIntArray *fieldNumTerms = [IOSIntArray arrayWithLength:numFields];
  for (jint i = 0; i < numFields; ++i) {
    *IOSIntArray_GetRef(fieldNumTerms, i) = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:skip + i];
  }
  IOSObjectArray *fieldTermFreqs = [IOSObjectArray arrayWithLength:numFields type:IOSClass_intArray(1)];
  {
    jint termIdx = 0;
    for (jint i = 0; i < skip; ++i) {
      termIdx += [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:i];
    }
    for (jint i = 0; i < numFields; ++i) {
      jint termCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:skip + i];
      IOSObjectArray_SetAndConsume(fieldTermFreqs, i, [IOSIntArray newArrayWithLength:termCount]);
      for (jint j = 0; j < termCount; ++j) {
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(fieldTermFreqs, i)), j) = IOSIntArray_Get(termFreqs, termIdx++);
      }
    }
  }
  JreAssert((OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_sumWithIntArray_(fieldLengths) == docLen), (JreStrcat("I$I", OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_sumWithIntArray_(fieldLengths), @" != ", docLen)));
  return [new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withOrgApacheLuceneUtilBytesRef_withIntArray2_withOrgApacheLuceneUtilBytesRef_(self, fieldNums, fieldFlags, fieldNumOffs, fieldNumTerms, fieldLengths, prefixLengths, suffixLengths, fieldTermFreqs, positionIndex, positions, startOffsets, lengths, payloadBytes, payloadIndex, suffixBytes) autorelease];
}

- (IOSObjectArray *)positionIndexWithInt:(jint)skip
                                 withInt:(jint)numFields
withOrgApacheLuceneUtilPackedPackedInts_Reader:(OrgApacheLuceneUtilPackedPackedInts_Reader *)numTerms
                            withIntArray:(IOSIntArray *)termFreqs {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_positionIndexWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Reader_withIntArray_(self, skip, numFields, numTerms, termFreqs);
}

- (IOSObjectArray *)readPositionsWithInt:(jint)skip
                                 withInt:(jint)numFields
withOrgApacheLuceneUtilPackedPackedInts_Reader:(OrgApacheLuceneUtilPackedPackedInts_Reader *)flags
withOrgApacheLuceneUtilPackedPackedInts_Reader:(OrgApacheLuceneUtilPackedPackedInts_Reader *)numTerms
                            withIntArray:(IOSIntArray *)termFreqs
                                 withInt:(jint)flag
                                 withInt:(jint)totalPositions
                           withIntArray2:(IOSObjectArray *)positionIndex {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_readPositionsWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Reader_withOrgApacheLuceneUtilPackedPackedInts_Reader_withIntArray_withInt_withInt_withIntArray2_(self, skip, numFields, flags, numTerms, termFreqs, flag, totalPositions, positionIndex);
}

+ (jint)sumWithIntArray:(IOSIntArray *)arr {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_sumWithIntArray_(arr);
}

- (jlong)ramBytesUsed {
  return [((OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexReader *) nil_chk(indexReader_)) ramBytesUsed];
}

- (void)checkIntegrity {
  OrgApacheLuceneCodecsCodecUtil_checksumEntireFileWithOrgApacheLuceneStoreIndexInput_(vectorsStream_);
}

- (NSString *)description {
  return JreStrcat("$$@$IC", [[self getClass] getSimpleName], @"(mode=", compressionMode_, @",chunksize=", chunkSize_, ')');
}

- (void)dealloc {
  RELEASE_(fieldInfos_);
  RELEASE_(indexReader_);
  RELEASE_(vectorsStream_);
  RELEASE_(compressionMode_);
  RELEASE_(decompressor_);
  RELEASE_(reader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader:", "CompressingTermVectorsReader", NULL, 0x2, NULL, NULL },
    { "initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexSegmentInfo:withNSString:withOrgApacheLuceneIndexFieldInfos:withOrgApacheLuceneStoreIOContext:withNSString:withOrgApacheLuceneCodecsCompressingCompressionMode:", "CompressingTermVectorsReader", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "getCompressionMode", NULL, "Lorg.apache.lucene.codecs.compressing.CompressionMode;", 0x0, NULL, NULL },
    { "getChunkSize", NULL, "I", 0x0, NULL, NULL },
    { "getPackedIntsVersion", NULL, "I", 0x0, NULL, NULL },
    { "getVersion", NULL, "I", 0x0, NULL, NULL },
    { "getIndexReader", NULL, "Lorg.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader;", 0x0, NULL, NULL },
    { "getVectorsStream", NULL, "Lorg.apache.lucene.store.IndexInput;", 0x0, NULL, NULL },
    { "getMaxPointer", NULL, "J", 0x0, NULL, NULL },
    { "getNumChunks", NULL, "J", 0x0, NULL, NULL },
    { "getNumDirtyChunks", NULL, "J", 0x0, NULL, NULL },
    { "ensureOpen", NULL, "V", 0x2, "Lorg.apache.lucene.store.AlreadyClosedException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "clone", NULL, "Lorg.apache.lucene.codecs.TermVectorsReader;", 0x1, NULL, NULL },
    { "getWithInt:", "get", "Lorg.apache.lucene.index.Fields;", 0x1, "Ljava.io.IOException;", NULL },
    { "positionIndexWithInt:withInt:withOrgApacheLuceneUtilPackedPackedInts_Reader:withIntArray:", "positionIndex", "[[I", 0x2, NULL, NULL },
    { "readPositionsWithInt:withInt:withOrgApacheLuceneUtilPackedPackedInts_Reader:withOrgApacheLuceneUtilPackedPackedInts_Reader:withIntArray:withInt:withInt:withIntArray2:", "readPositions", "[[I", 0x2, "Ljava.io.IOException;", NULL },
    { "sumWithIntArray:", "sum", "I", 0xa, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "checkIntegrity", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fieldInfos_", NULL, 0x12, "Lorg.apache.lucene.index.FieldInfos;", NULL, NULL, .constantValue.asLong = 0 },
    { "indexReader_", NULL, 0x10, "Lorg.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "vectorsStream_", NULL, 0x10, "Lorg.apache.lucene.store.IndexInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "version__", "version", 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "packedIntsVersion_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "compressionMode_", NULL, 0x12, "Lorg.apache.lucene.codecs.compressing.CompressionMode;", NULL, NULL, .constantValue.asLong = 0 },
    { "decompressor_", NULL, 0x12, "Lorg.apache.lucene.codecs.compressing.Decompressor;", NULL, NULL, .constantValue.asLong = 0 },
    { "chunkSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "numDocs_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "closed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "reader_", NULL, 0x12, "Lorg.apache.lucene.util.packed.BlockPackedReaderIterator;", NULL, NULL, .constantValue.asLong = 0 },
    { "numChunks_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "numDirtyChunks_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "maxPointer_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields;", "Lorg.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms;", "Lorg.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum;", "Lorg.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum;"};
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader = { 2, "CompressingTermVectorsReader", "org.apache.lucene.codecs.compressing", NULL, 0x11, 21, methods, 14, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader;
}

@end

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *self, OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *reader) {
  OrgApacheLuceneCodecsTermVectorsReader_init(self);
  JreStrongAssign(&self->fieldInfos_, ((OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *) nil_chk(reader))->fieldInfos_);
  JreStrongAssign(&self->vectorsStream_, [((OrgApacheLuceneStoreIndexInput *) nil_chk(reader->vectorsStream_)) clone]);
  JreStrongAssign(&self->indexReader_, [((OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexReader *) nil_chk(reader->indexReader_)) clone]);
  self->packedIntsVersion_ = reader->packedIntsVersion_;
  JreStrongAssign(&self->compressionMode_, reader->compressionMode_);
  JreStrongAssign(&self->decompressor_, [((OrgApacheLuceneCodecsCompressingDecompressor *) nil_chk(reader->decompressor_)) clone]);
  self->chunkSize_ = reader->chunkSize_;
  self->numDocs_ = reader->numDocs_;
  JreStrongAssignAndConsume(&self->reader_, new_OrgApacheLuceneUtilPackedBlockPackedReaderIterator_initWithOrgApacheLuceneStoreDataInput_withInt_withInt_withLong_(self->vectorsStream_, self->packedIntsVersion_, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_PACKED_BLOCK_SIZE, 0));
  self->version__ = reader->version__;
  self->numChunks_ = reader->numChunks_;
  self->numDirtyChunks_ = reader->numDirtyChunks_;
  self->maxPointer_ = reader->maxPointer_;
  self->closed_ = NO;
}

OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *reader) {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *self = [OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader alloc];
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_(self, reader);
  return self;
}

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *self, OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneIndexSegmentInfo *si, NSString *segmentSuffix, OrgApacheLuceneIndexFieldInfos *fn, OrgApacheLuceneStoreIOContext *context, NSString *formatName, OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode) {
  OrgApacheLuceneCodecsTermVectorsReader_init(self);
  JreStrongAssign(&self->compressionMode_, compressionMode);
  NSString *segment = ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si))->name_;
  jboolean success = NO;
  JreStrongAssign(&self->fieldInfos_, fn);
  self->numDocs_ = [si maxDoc];
  jint version_ = -1;
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexReader *indexReader = nil;
  jlong maxPointer = -1;
  NSString *indexName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(segment, segmentSuffix, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VECTORS_INDEX_EXTENSION_);
  {
    JavaLangThrowable *__mainException = nil;
    OrgApacheLuceneStoreChecksumIndexInput *input = [((OrgApacheLuceneStoreDirectory *) nil_chk(d)) openChecksumInputWithNSString:indexName withOrgApacheLuceneStoreIOContext:context];
    @try {
      JavaLangThrowable *priorE = nil;
      @try {
        NSString *codecNameIdx = JreStrcat("$$", formatName, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_CODEC_SFX_IDX_);
        version_ = OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_withByteArray_withNSString_(input, codecNameIdx, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VERSION_START, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VERSION_CURRENT, [si getId], segmentSuffix);
        JreAssert((OrgApacheLuceneCodecsCodecUtil_indexHeaderLengthWithNSString_withNSString_(codecNameIdx, segmentSuffix) == [((OrgApacheLuceneStoreChecksumIndexInput *) nil_chk(input)) getFilePointer]), (@"org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java:127 condition failed: assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == input.getFilePointer();"));
        indexReader = [new_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexReader_initWithOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneIndexSegmentInfo_(input, si) autorelease];
        maxPointer = [input readVLong];
      }
      @catch (JavaLangThrowable *exception) {
        priorE = exception;
      }
      @finally {
        OrgApacheLuceneCodecsCodecUtil_checkFooterWithOrgApacheLuceneStoreChecksumIndexInput_withJavaLangThrowable_(input, priorE);
      }
    }
    @finally {
      @try {
        [input close];
      }
      @catch (JavaLangThrowable *e) {
        if (__mainException) {
          [__mainException addSuppressedWithJavaLangThrowable:e];
        } else {
          __mainException = e;
        }
      }
      if (__mainException) {
        @throw __mainException;
      }
    }
  }
  self->version__ = version_;
  JreStrongAssign(&self->indexReader_, indexReader);
  self->maxPointer_ = maxPointer;
  @try {
    NSString *vectorsStreamFN = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(segment, segmentSuffix, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VECTORS_EXTENSION_);
    JreStrongAssign(&self->vectorsStream_, [((OrgApacheLuceneStoreDirectory *) nil_chk(d)) openInputWithNSString:vectorsStreamFN withOrgApacheLuceneStoreIOContext:context]);
    NSString *codecNameDat = JreStrcat("$$", formatName, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_CODEC_SFX_DAT_);
    jint version2 = OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_withByteArray_withNSString_(self->vectorsStream_, codecNameDat, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VERSION_START, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VERSION_CURRENT, [si getId], segmentSuffix);
    if (version_ != version2) {
      @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I$I", @"Version mismatch between stored fields index and data: ", version_, @" != ", version2), self->vectorsStream_) autorelease];
    }
    JreAssert((OrgApacheLuceneCodecsCodecUtil_indexHeaderLengthWithNSString_withNSString_(codecNameDat, segmentSuffix) == [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->vectorsStream_)) getFilePointer]), (@"org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java:150 condition failed: assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == vectorsStream.getFilePointer();"));
    jlong pos = [self->vectorsStream_ getFilePointer];
    if (version_ >= OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VERSION_CHUNK_STATS) {
      [self->vectorsStream_ seekWithLong:maxPointer];
      self->numChunks_ = [self->vectorsStream_ readVLong];
      self->numDirtyChunks_ = [self->vectorsStream_ readVLong];
      if (self->numDirtyChunks_ > self->numChunks_) {
        @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$J$J", @"invalid chunk counts: dirty=", self->numDirtyChunks_, @", total=", self->numChunks_), self->vectorsStream_) autorelease];
      }
    }
    else {
      self->numChunks_ = self->numDirtyChunks_ = -1;
    }
    OrgApacheLuceneCodecsCodecUtil_retrieveChecksumWithOrgApacheLuceneStoreIndexInput_(self->vectorsStream_);
    [self->vectorsStream_ seekWithLong:pos];
    self->packedIntsVersion_ = [self->vectorsStream_ readVInt];
    self->chunkSize_ = [self->vectorsStream_ readVInt];
    JreStrongAssign(&self->decompressor_, [((OrgApacheLuceneCodecsCompressingCompressionMode *) nil_chk(compressionMode)) newDecompressor]);
    JreStrongAssignAndConsume(&self->reader_, new_OrgApacheLuceneUtilPackedBlockPackedReaderIterator_initWithOrgApacheLuceneStoreDataInput_withInt_withInt_withLong_(self->vectorsStream_, self->packedIntsVersion_, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_PACKED_BLOCK_SIZE, 0));
    success = YES;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self } count:1 type:JavaIoCloseable_class_()]);
    }
  }
}

OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneIndexSegmentInfo *si, NSString *segmentSuffix, OrgApacheLuceneIndexFieldInfos *fn, OrgApacheLuceneStoreIOContext *context, NSString *formatName, OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode) {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *self = [OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader alloc];
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_(self, d, si, segmentSuffix, fn, context, formatName, compressionMode);
  return self;
}

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_ensureOpen(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *self) {
  if (self->closed_) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(@"this FieldsReader is closed") autorelease];
  }
}

IOSObjectArray *OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_positionIndexWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Reader_withIntArray_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *self, jint skip, jint numFields, OrgApacheLuceneUtilPackedPackedInts_Reader *numTerms, IOSIntArray *termFreqs) {
  IOSObjectArray *positionIndex = [IOSObjectArray arrayWithLength:numFields type:IOSClass_intArray(1)];
  jint termIndex = 0;
  for (jint i = 0; i < skip; ++i) {
    jint termCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:i];
    termIndex += termCount;
  }
  for (jint i = 0; i < numFields; ++i) {
    jint termCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:skip + i];
    IOSObjectArray_SetAndConsume(positionIndex, i, [IOSIntArray newArrayWithLength:termCount + 1]);
    for (jint j = 0; j < termCount; ++j) {
      jint freq = IOSIntArray_Get(nil_chk(termFreqs), termIndex + j);
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(positionIndex, i)), j + 1) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(positionIndex, i)), j) + freq;
    }
    termIndex += termCount;
  }
  return positionIndex;
}

IOSObjectArray *OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_readPositionsWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Reader_withOrgApacheLuceneUtilPackedPackedInts_Reader_withIntArray_withInt_withInt_withIntArray2_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *self, jint skip, jint numFields, OrgApacheLuceneUtilPackedPackedInts_Reader *flags, OrgApacheLuceneUtilPackedPackedInts_Reader *numTerms, IOSIntArray *termFreqs, jint flag, jint totalPositions, IOSObjectArray *positionIndex) {
  IOSObjectArray *positions = [IOSObjectArray arrayWithLength:numFields type:IOSClass_intArray(1)];
  [((OrgApacheLuceneUtilPackedBlockPackedReaderIterator *) nil_chk(self->reader_)) resetWithOrgApacheLuceneStoreDataInput:self->vectorsStream_ withLong:totalPositions];
  jint toSkip = 0;
  jint termIndex = 0;
  for (jint i = 0; i < skip; ++i) {
    jint f = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(flags)) getWithInt:i];
    jint termCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:i];
    if ((f & flag) != 0) {
      for (jint j = 0; j < termCount; ++j) {
        jint freq = IOSIntArray_Get(nil_chk(termFreqs), termIndex + j);
        toSkip += freq;
      }
    }
    termIndex += termCount;
  }
  [self->reader_ skipWithLong:toSkip];
  for (jint i = 0; i < numFields; ++i) {
    jint f = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(flags)) getWithInt:skip + i];
    jint termCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(numTerms)) getWithInt:skip + i];
    if ((f & flag) != 0) {
      jint totalFreq = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(positionIndex), i)), termCount);
      IOSIntArray *fieldPositions = [IOSIntArray arrayWithLength:totalFreq];
      IOSObjectArray_Set(positions, i, fieldPositions);
      for (jint j = 0; j < totalFreq; ) {
        OrgApacheLuceneUtilLongsRef *nextPositions = [self->reader_ nextWithInt:totalFreq - j];
        for (jint k = 0; k < ((OrgApacheLuceneUtilLongsRef *) nil_chk(nextPositions))->length_; ++k) {
          *IOSIntArray_GetRef(fieldPositions, j++) = (jint) IOSLongArray_Get(nil_chk(nextPositions->longs_), nextPositions->offset_ + k);
        }
      }
    }
    termIndex += termCount;
  }
  [self->reader_ skipWithLong:totalPositions - [self->reader_ ord]];
  return positions;
}

jint OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_sumWithIntArray_(IOSIntArray *arr) {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_initialize();
  jint sum = 0;
  {
    IOSIntArray *a__ = arr;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint el = *b__++;
      sum += el;
    }
  }
  return sum;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader)

@implementation OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields

- (instancetype)initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader:(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *)outer$
                                                                        withIntArray:(IOSIntArray *)fieldNums
                                                                        withIntArray:(IOSIntArray *)fieldFlags
                                                                        withIntArray:(IOSIntArray *)fieldNumOffs
                                                                        withIntArray:(IOSIntArray *)numTerms
                                                                        withIntArray:(IOSIntArray *)fieldLengths
                                                                       withIntArray2:(IOSObjectArray *)prefixLengths
                                                                       withIntArray2:(IOSObjectArray *)suffixLengths
                                                                       withIntArray2:(IOSObjectArray *)termFreqs
                                                                       withIntArray2:(IOSObjectArray *)positionIndex
                                                                       withIntArray2:(IOSObjectArray *)positions
                                                                       withIntArray2:(IOSObjectArray *)startOffsets
                                                                       withIntArray2:(IOSObjectArray *)lengths
                                                     withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)payloadBytes
                                                                       withIntArray2:(IOSObjectArray *)payloadIndex
                                                     withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)suffixBytes {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withOrgApacheLuceneUtilBytesRef_withIntArray2_withOrgApacheLuceneUtilBytesRef_(self, outer$, fieldNums, fieldFlags, fieldNumOffs, numTerms, fieldLengths, prefixLengths, suffixLengths, termFreqs, positionIndex, positions, startOffsets, lengths, payloadBytes, payloadIndex, suffixBytes);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return [new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_(self) autorelease];
}

- (OrgApacheLuceneIndexTerms *)termsWithNSString:(NSString *)field {
  OrgApacheLuceneIndexFieldInfo *fieldInfo = [((OrgApacheLuceneIndexFieldInfos *) nil_chk(this$0_->fieldInfos_)) fieldInfoWithNSString:field];
  if (fieldInfo == nil) {
    return nil;
  }
  jint idx = -1;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(fieldNumOffs_))->size_; ++i) {
    if (IOSIntArray_Get(nil_chk(fieldNums_), IOSIntArray_Get(fieldNumOffs_, i)) == ((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo))->number_) {
      idx = i;
      break;
    }
  }
  if (idx == -1 || IOSIntArray_Get(nil_chk(numTerms_), idx) == 0) {
    return nil;
  }
  jint fieldOff = 0, fieldLen = -1;
  for (jint i = 0; i < fieldNumOffs_->size_; ++i) {
    if (i < idx) {
      fieldOff += IOSIntArray_Get(nil_chk(fieldLengths_), i);
    }
    else {
      fieldLen = IOSIntArray_Get(nil_chk(fieldLengths_), i);
      break;
    }
  }
  JreAssert((fieldLen >= 0), (@"org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java:737 condition failed: assert fieldLen >= 0;"));
  return [new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_withInt_withInt_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(this$0_, IOSIntArray_Get(nil_chk(numTerms_), idx), IOSIntArray_Get(nil_chk(fieldFlags_), idx), IOSObjectArray_Get(nil_chk(prefixLengths_), idx), IOSObjectArray_Get(nil_chk(suffixLengths_), idx), IOSObjectArray_Get(nil_chk(termFreqs_), idx), IOSObjectArray_Get(nil_chk(positionIndex_), idx), IOSObjectArray_Get(nil_chk(positions_), idx), IOSObjectArray_Get(nil_chk(startOffsets_), idx), IOSObjectArray_Get(nil_chk(lengths_), idx), IOSObjectArray_Get(nil_chk(payloadIndex_), idx), payloadBytes_, [new_OrgApacheLuceneUtilBytesRef_initWithByteArray_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk(suffixBytes_))->bytes_, suffixBytes_->offset_ + fieldOff, fieldLen) autorelease]) autorelease];
}

- (jint)size {
  return ((IOSIntArray *) nil_chk(fieldNumOffs_))->size_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(fieldNums_);
  RELEASE_(fieldFlags_);
  RELEASE_(fieldNumOffs_);
  RELEASE_(numTerms_);
  RELEASE_(fieldLengths_);
  RELEASE_(prefixLengths_);
  RELEASE_(suffixLengths_);
  RELEASE_(termFreqs_);
  RELEASE_(positionIndex_);
  RELEASE_(positions_);
  RELEASE_(startOffsets_);
  RELEASE_(lengths_);
  RELEASE_(payloadIndex_);
  RELEASE_(suffixBytes_);
  RELEASE_(payloadBytes_);
  [super dealloc];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader:withIntArray:withIntArray:withIntArray:withIntArray:withIntArray:withIntArray2:withIntArray2:withIntArray2:withIntArray2:withIntArray2:withIntArray2:withIntArray2:withOrgApacheLuceneUtilBytesRef:withIntArray2:withOrgApacheLuceneUtilBytesRef:", "TVFields", NULL, 0x1, NULL, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "termsWithNSString:", "terms", "Lorg.apache.lucene.index.Terms;", 0x1, "Ljava.io.IOException;", NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.codecs.compressing.CompressingTermVectorsReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldNums_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldFlags_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldNumOffs_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "numTerms_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldLengths_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "prefixLengths_", NULL, 0x12, "[[I", NULL, NULL, .constantValue.asLong = 0 },
    { "suffixLengths_", NULL, 0x12, "[[I", NULL, NULL, .constantValue.asLong = 0 },
    { "termFreqs_", NULL, 0x12, "[[I", NULL, NULL, .constantValue.asLong = 0 },
    { "positionIndex_", NULL, 0x12, "[[I", NULL, NULL, .constantValue.asLong = 0 },
    { "positions_", NULL, 0x12, "[[I", NULL, NULL, .constantValue.asLong = 0 },
    { "startOffsets_", NULL, 0x12, "[[I", NULL, NULL, .constantValue.asLong = 0 },
    { "lengths_", NULL, 0x12, "[[I", NULL, NULL, .constantValue.asLong = 0 },
    { "payloadIndex_", NULL, 0x12, "[[I", NULL, NULL, .constantValue.asLong = 0 },
    { "suffixBytes_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "payloadBytes_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields = { 2, "TVFields", "org.apache.lucene.codecs.compressing", "CompressingTermVectorsReader", 0x2, 4, methods, 16, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields;
}

@end

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withOrgApacheLuceneUtilBytesRef_withIntArray2_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields *self, OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *outer$, IOSIntArray *fieldNums, IOSIntArray *fieldFlags, IOSIntArray *fieldNumOffs, IOSIntArray *numTerms, IOSIntArray *fieldLengths, IOSObjectArray *prefixLengths, IOSObjectArray *suffixLengths, IOSObjectArray *termFreqs, IOSObjectArray *positionIndex, IOSObjectArray *positions, IOSObjectArray *startOffsets, IOSObjectArray *lengths, OrgApacheLuceneUtilBytesRef *payloadBytes, IOSObjectArray *payloadIndex, OrgApacheLuceneUtilBytesRef *suffixBytes) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneIndexFields_init(self);
  JreStrongAssign(&self->fieldNums_, fieldNums);
  JreStrongAssign(&self->fieldFlags_, fieldFlags);
  JreStrongAssign(&self->fieldNumOffs_, fieldNumOffs);
  JreStrongAssign(&self->numTerms_, numTerms);
  JreStrongAssign(&self->fieldLengths_, fieldLengths);
  JreStrongAssign(&self->prefixLengths_, prefixLengths);
  JreStrongAssign(&self->suffixLengths_, suffixLengths);
  JreStrongAssign(&self->termFreqs_, termFreqs);
  JreStrongAssign(&self->positionIndex_, positionIndex);
  JreStrongAssign(&self->positions_, positions);
  JreStrongAssign(&self->startOffsets_, startOffsets);
  JreStrongAssign(&self->lengths_, lengths);
  JreStrongAssign(&self->payloadBytes_, payloadBytes);
  JreStrongAssign(&self->payloadIndex_, payloadIndex);
  JreStrongAssign(&self->suffixBytes_, suffixBytes);
}

OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withOrgApacheLuceneUtilBytesRef_withIntArray2_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *outer$, IOSIntArray *fieldNums, IOSIntArray *fieldFlags, IOSIntArray *fieldNumOffs, IOSIntArray *numTerms, IOSIntArray *fieldLengths, IOSObjectArray *prefixLengths, IOSObjectArray *suffixLengths, IOSObjectArray *termFreqs, IOSObjectArray *positionIndex, IOSObjectArray *positions, IOSObjectArray *startOffsets, IOSObjectArray *lengths, OrgApacheLuceneUtilBytesRef *payloadBytes, IOSObjectArray *payloadIndex, OrgApacheLuceneUtilBytesRef *suffixBytes) {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields *self = [OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields alloc];
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withIntArray2_withOrgApacheLuceneUtilBytesRef_withIntArray2_withOrgApacheLuceneUtilBytesRef_(self, outer$, fieldNums, fieldFlags, fieldNumOffs, numTerms, fieldLengths, prefixLengths, suffixLengths, termFreqs, positionIndex, positions, startOffsets, lengths, payloadBytes, payloadIndex, suffixBytes);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields)

@implementation OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1

- (jboolean)hasNext {
  return i_ < ((IOSIntArray *) nil_chk(this$0_->fieldNumOffs_))->size_;
}

- (NSString *)next {
  if (![self hasNext]) {
    @throw [new_JavaUtilNoSuchElementException_init() autorelease];
  }
  jint fieldNum = IOSIntArray_Get(nil_chk(this$0_->fieldNums_), IOSIntArray_Get(nil_chk(this$0_->fieldNumOffs_), i_++));
  return ((OrgApacheLuceneIndexFieldInfo *) nil_chk([((OrgApacheLuceneIndexFieldInfos *) nil_chk(this$0_->this$0_->fieldInfos_)) fieldInfoWithInt:fieldNum]))->name_;
}

- (void)remove {
  @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
}

- (instancetype)initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields:(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields *)outer$ {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields;", NULL, NULL, .constantValue.asLong = 0 },
    { "i_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields", "iterator" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1 = { 2, "", "org.apache.lucene.codecs.compressing", "CompressingTermVectorsReader$TVFields", 0x8008, 4, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/String;>;" };
  return &_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1;
}

@end

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1 *self, OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->i_ = 0;
}

OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1 *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields *outer$) {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1 *self = [OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1 alloc];
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVFields_$1)

@implementation OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms

- (instancetype)initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader:(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *)outer$
                                                                             withInt:(jint)numTerms
                                                                             withInt:(jint)flags
                                                                        withIntArray:(IOSIntArray *)prefixLengths
                                                                        withIntArray:(IOSIntArray *)suffixLengths
                                                                        withIntArray:(IOSIntArray *)termFreqs
                                                                        withIntArray:(IOSIntArray *)positionIndex
                                                                        withIntArray:(IOSIntArray *)positions
                                                                        withIntArray:(IOSIntArray *)startOffsets
                                                                        withIntArray:(IOSIntArray *)lengths
                                                                        withIntArray:(IOSIntArray *)payloadIndex
                                                     withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)payloadBytes
                                                     withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)termBytes {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_withInt_withInt_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(self, outer$, numTerms, flags, prefixLengths, suffixLengths, termFreqs, positionIndex, positions, startOffsets, lengths, payloadIndex, payloadBytes, termBytes);
  return self;
}

- (OrgApacheLuceneIndexTermsEnum *)iterator {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum *termsEnum = [new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum_init() autorelease];
  [termsEnum resetWithInt:numTerms_ withInt:flags_ withIntArray:prefixLengths_ withIntArray:suffixLengths_ withIntArray:termFreqs_ withIntArray:positionIndex_ withIntArray:positions_ withIntArray:startOffsets_ withIntArray:lengths_ withIntArray:payloadIndex_ withOrgApacheLuceneUtilBytesRef:payloadBytes_ withOrgApacheLuceneStoreByteArrayDataInput:[new_OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk(termBytes_))->bytes_, termBytes_->offset_, termBytes_->length_) autorelease]];
  return termsEnum;
}

- (jlong)size {
  return numTerms_;
}

- (jlong)getSumTotalTermFreq {
  return -1LL;
}

- (jlong)getSumDocFreq {
  return numTerms_;
}

- (jint)getDocCount {
  return 1;
}

- (jboolean)hasFreqs {
  return YES;
}

- (jboolean)hasOffsets {
  return (flags_ & OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_OFFSETS) != 0;
}

- (jboolean)hasPositions {
  return (flags_ & OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_POSITIONS) != 0;
}

- (jboolean)hasPayloads {
  return (flags_ & OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_PAYLOADS) != 0;
}

- (void)dealloc {
  RELEASE_(prefixLengths_);
  RELEASE_(suffixLengths_);
  RELEASE_(termFreqs_);
  RELEASE_(positionIndex_);
  RELEASE_(positions_);
  RELEASE_(startOffsets_);
  RELEASE_(lengths_);
  RELEASE_(payloadIndex_);
  RELEASE_(termBytes_);
  RELEASE_(payloadBytes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader:withInt:withInt:withIntArray:withIntArray:withIntArray:withIntArray:withIntArray:withIntArray:withIntArray:withIntArray:withOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:", "TVTerms", NULL, 0x0, NULL, NULL },
    { "iterator", NULL, "Lorg.apache.lucene.index.TermsEnum;", 0x1, "Ljava.io.IOException;", NULL },
    { "size", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "getSumTotalTermFreq", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "getSumDocFreq", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "getDocCount", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "hasFreqs", NULL, "Z", 0x1, NULL, NULL },
    { "hasOffsets", NULL, "Z", 0x1, NULL, NULL },
    { "hasPositions", NULL, "Z", 0x1, NULL, NULL },
    { "hasPayloads", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "numTerms_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "flags_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "prefixLengths_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "suffixLengths_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "termFreqs_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "positionIndex_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "positions_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "startOffsets_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "lengths_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "payloadIndex_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "termBytes_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "payloadBytes_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms = { 2, "TVTerms", "org.apache.lucene.codecs.compressing", "CompressingTermVectorsReader", 0x2, 10, methods, 12, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms;
}

@end

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_withInt_withInt_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms *self, OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *outer$, jint numTerms, jint flags, IOSIntArray *prefixLengths, IOSIntArray *suffixLengths, IOSIntArray *termFreqs, IOSIntArray *positionIndex, IOSIntArray *positions, IOSIntArray *startOffsets, IOSIntArray *lengths, IOSIntArray *payloadIndex, OrgApacheLuceneUtilBytesRef *payloadBytes, OrgApacheLuceneUtilBytesRef *termBytes) {
  OrgApacheLuceneIndexTerms_init(self);
  self->numTerms_ = numTerms;
  self->flags_ = flags;
  JreStrongAssign(&self->prefixLengths_, prefixLengths);
  JreStrongAssign(&self->suffixLengths_, suffixLengths);
  JreStrongAssign(&self->termFreqs_, termFreqs);
  JreStrongAssign(&self->positionIndex_, positionIndex);
  JreStrongAssign(&self->positions_, positions);
  JreStrongAssign(&self->startOffsets_, startOffsets);
  JreStrongAssign(&self->lengths_, lengths);
  JreStrongAssign(&self->payloadIndex_, payloadIndex);
  JreStrongAssign(&self->payloadBytes_, payloadBytes);
  JreStrongAssign(&self->termBytes_, termBytes);
}

OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_withInt_withInt_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *outer$, jint numTerms, jint flags, IOSIntArray *prefixLengths, IOSIntArray *suffixLengths, IOSIntArray *termFreqs, IOSIntArray *positionIndex, IOSIntArray *positions, IOSIntArray *startOffsets, IOSIntArray *lengths, IOSIntArray *payloadIndex, OrgApacheLuceneUtilBytesRef *payloadBytes, OrgApacheLuceneUtilBytesRef *termBytes) {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms *self = [OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms alloc];
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_withInt_withInt_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withIntArray_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(self, outer$, numTerms, flags, prefixLengths, suffixLengths, termFreqs, positionIndex, positions, startOffsets, lengths, payloadIndex, payloadBytes, termBytes);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTerms)

@implementation OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum

- (instancetype)init {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum_init(self);
  return self;
}

- (void)resetWithInt:(jint)numTerms
             withInt:(jint)flags
        withIntArray:(IOSIntArray *)prefixLengths
        withIntArray:(IOSIntArray *)suffixLengths
        withIntArray:(IOSIntArray *)termFreqs
        withIntArray:(IOSIntArray *)positionIndex
        withIntArray:(IOSIntArray *)positions
        withIntArray:(IOSIntArray *)startOffsets
        withIntArray:(IOSIntArray *)lengths
        withIntArray:(IOSIntArray *)payloadIndex
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)payloads
withOrgApacheLuceneStoreByteArrayDataInput:(OrgApacheLuceneStoreByteArrayDataInput *)inArg {
  self->numTerms_ = numTerms;
  JreStrongAssign(&self->prefixLengths_, prefixLengths);
  JreStrongAssign(&self->suffixLengths_, suffixLengths);
  JreStrongAssign(&self->termFreqs_, termFreqs);
  JreStrongAssign(&self->positionIndex_, positionIndex);
  JreStrongAssign(&self->positions_, positions);
  JreStrongAssign(&self->startOffsets_, startOffsets);
  JreStrongAssign(&self->lengths_, lengths);
  JreStrongAssign(&self->payloadIndex_, payloadIndex);
  JreStrongAssign(&self->payloads_, payloads);
  JreStrongAssign(&self->in_, inArg);
  startPos_ = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(inArg)) getPosition];
  [self reset];
}

- (void)reset {
  ((OrgApacheLuceneUtilBytesRef *) nil_chk(term_))->length_ = 0;
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(in_)) setPositionWithInt:startPos_];
  ord_ = -1;
}

- (OrgApacheLuceneUtilBytesRef *)next {
  if (ord_ == numTerms_ - 1) {
    return nil;
  }
  else {
    JreAssert((ord_ < numTerms_), (@"org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.java:867 condition failed: assert ord < numTerms;"));
    ++ord_;
  }
  ((OrgApacheLuceneUtilBytesRef *) nil_chk(term_))->offset_ = 0;
  term_->length_ = IOSIntArray_Get(nil_chk(prefixLengths_), ord_) + IOSIntArray_Get(nil_chk(suffixLengths_), ord_);
  if (term_->length_ > ((IOSByteArray *) nil_chk(term_->bytes_))->size_) {
    JreStrongAssign(&term_->bytes_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(term_->bytes_, term_->length_));
  }
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(in_)) readBytesWithByteArray:term_->bytes_ withInt:IOSIntArray_Get(prefixLengths_, ord_) withInt:IOSIntArray_Get(suffixLengths_, ord_)];
  return term_;
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *)seekCeilWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text {
  if (ord_ < numTerms_ && ord_ >= 0) {
    jint cmp = [((OrgApacheLuceneUtilBytesRef *) nil_chk([self term])) compareToWithId:text];
    if (cmp == 0) {
      return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND);
    }
    else if (cmp > 0) {
      [self reset];
    }
  }
  while (YES) {
    OrgApacheLuceneUtilBytesRef *term = [self next];
    if (term == nil) {
      return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END);
    }
    jint cmp = [((OrgApacheLuceneUtilBytesRef *) nil_chk(term)) compareToWithId:text];
    if (cmp > 0) {
      return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, NOT_FOUND);
    }
    else if (cmp == 0) {
      return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND);
    }
  }
}

- (OrgApacheLuceneUtilBytesRef *)term {
  return term_;
}

- (jlong)ord {
  @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
}

- (jint)docFreq {
  return 1;
}

- (jlong)totalTermFreq {
  return IOSIntArray_Get(nil_chk(termFreqs_), ord_);
}

- (OrgApacheLuceneIndexPostingsEnum *)postingsWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)reuse
                                                                           withInt:(jint)flags {
  if (OrgApacheLuceneIndexPostingsEnum_featureRequestedWithInt_withShort_(flags, OrgApacheLuceneIndexDocsAndPositionsEnum_OLD_NULL_SEMANTICS)) {
    if (positions_ == nil && startOffsets_ == nil) {
      return nil;
    }
  }
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum *docsEnum;
  if (reuse != nil && [reuse isKindOfClass:[OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum class]]) {
    docsEnum = (OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum *) check_class_cast(reuse, [OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum class]);
  }
  else {
    docsEnum = [new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_init() autorelease];
  }
  [((OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum *) nil_chk(docsEnum)) resetWithInt:IOSIntArray_Get(nil_chk(termFreqs_), ord_) withInt:IOSIntArray_Get(nil_chk(positionIndex_), ord_) withIntArray:positions_ withIntArray:startOffsets_ withIntArray:lengths_ withOrgApacheLuceneUtilBytesRef:payloads_ withIntArray:payloadIndex_];
  return docsEnum;
}

- (void)dealloc {
  RELEASE_(prefixLengths_);
  RELEASE_(suffixLengths_);
  RELEASE_(termFreqs_);
  RELEASE_(positionIndex_);
  RELEASE_(positions_);
  RELEASE_(startOffsets_);
  RELEASE_(lengths_);
  RELEASE_(payloadIndex_);
  RELEASE_(in_);
  RELEASE_(payloads_);
  RELEASE_(term_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TVTermsEnum", NULL, 0x2, NULL, NULL },
    { "resetWithInt:withInt:withIntArray:withIntArray:withIntArray:withIntArray:withIntArray:withIntArray:withIntArray:withIntArray:withOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneStoreByteArrayDataInput:", "reset", "V", 0x0, NULL, NULL },
    { "reset", NULL, "V", 0x0, NULL, NULL },
    { "next", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, "Ljava.io.IOException;", NULL },
    { "seekCeilWithOrgApacheLuceneUtilBytesRef:", "seekCeil", "Lorg.apache.lucene.index.TermsEnum$SeekStatus;", 0x1, "Ljava.io.IOException;", NULL },
    { "term", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, "Ljava.io.IOException;", NULL },
    { "ord", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "docFreq", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "totalTermFreq", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "postingsWithOrgApacheLuceneIndexPostingsEnum:withInt:", "postings", "Lorg.apache.lucene.index.PostingsEnum;", 0x11, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "numTerms_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "startPos_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "ord_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "prefixLengths_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "suffixLengths_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "termFreqs_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "positionIndex_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "positions_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "startOffsets_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "lengths_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "payloadIndex_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "in_", NULL, 0x2, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "payloads_", NULL, 0x2, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "term_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum = { 2, "TVTermsEnum", "org.apache.lucene.codecs.compressing", "CompressingTermVectorsReader", 0xa, 10, methods, 14, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum;
}

@end

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum_init(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum *self) {
  OrgApacheLuceneIndexTermsEnum_init(self);
  JreStrongAssignAndConsume(&self->term_, new_OrgApacheLuceneUtilBytesRef_initWithInt_(16));
}

OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum_init() {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum *self = [OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum alloc];
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVTermsEnum)

@implementation OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum

- (instancetype)init {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_init(self);
  return self;
}

- (void)resetWithInt:(jint)freq
             withInt:(jint)positionIndex
        withIntArray:(IOSIntArray *)positions
        withIntArray:(IOSIntArray *)startOffsets
        withIntArray:(IOSIntArray *)lengths
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)payloads
        withIntArray:(IOSIntArray *)payloadIndex {
  self->termFreq_ = freq;
  self->positionIndex_ = positionIndex;
  JreStrongAssign(&self->positions_, positions);
  JreStrongAssign(&self->startOffsets_, startOffsets);
  JreStrongAssign(&self->lengths_, lengths);
  self->basePayloadOffset_ = ((OrgApacheLuceneUtilBytesRef *) nil_chk(payloads))->offset_;
  JreStrongAssign(&((OrgApacheLuceneUtilBytesRef *) nil_chk(self->payload_))->bytes_, payloads->bytes_);
  payload_->offset_ = payload_->length_ = 0;
  JreStrongAssign(&self->payloadIndex_, payloadIndex);
  doc_ = i_ = -1;
}

- (void)checkDoc {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_checkDoc(self);
}

- (void)checkPosition {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_checkPosition(self);
}

- (jint)nextPosition {
  if (doc_ != 0) {
    @throw [new_JavaLangIllegalStateException_init() autorelease];
  }
  else if (i_ >= termFreq_ - 1) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"Read past last position") autorelease];
  }
  ++i_;
  if (payloadIndex_ != nil) {
    ((OrgApacheLuceneUtilBytesRef *) nil_chk(payload_))->offset_ = basePayloadOffset_ + IOSIntArray_Get(payloadIndex_, positionIndex_ + i_);
    payload_->length_ = IOSIntArray_Get(payloadIndex_, positionIndex_ + i_ + 1) - IOSIntArray_Get(payloadIndex_, positionIndex_ + i_);
  }
  if (positions_ == nil) {
    return -1;
  }
  else {
    return IOSIntArray_Get(positions_, positionIndex_ + i_);
  }
}

- (jint)startOffset {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_checkPosition(self);
  if (startOffsets_ == nil) {
    return -1;
  }
  else {
    return IOSIntArray_Get(startOffsets_, positionIndex_ + i_);
  }
}

- (jint)endOffset {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_checkPosition(self);
  if (startOffsets_ == nil) {
    return -1;
  }
  else {
    return IOSIntArray_Get(startOffsets_, positionIndex_ + i_) + IOSIntArray_Get(nil_chk(lengths_), positionIndex_ + i_);
  }
}

- (OrgApacheLuceneUtilBytesRef *)getPayload {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_checkPosition(self);
  if (payloadIndex_ == nil || ((OrgApacheLuceneUtilBytesRef *) nil_chk(payload_))->length_ == 0) {
    return nil;
  }
  else {
    return payload_;
  }
}

- (jint)freq {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_checkDoc(self);
  return termFreq_;
}

- (jint)docID {
  return doc_;
}

- (jint)nextDoc {
  if (doc_ == -1) {
    return (doc_ = 0);
  }
  else {
    return (doc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS);
  }
}

- (jint)advanceWithInt:(jint)target {
  return [self slowAdvanceWithInt:target];
}

- (jlong)cost {
  return 1;
}

- (void)dealloc {
  RELEASE_(positions_);
  RELEASE_(startOffsets_);
  RELEASE_(lengths_);
  RELEASE_(payload_);
  RELEASE_(payloadIndex_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TVPostingsEnum", NULL, 0x0, NULL, NULL },
    { "resetWithInt:withInt:withIntArray:withIntArray:withIntArray:withOrgApacheLuceneUtilBytesRef:withIntArray:", "reset", "V", 0x1, NULL, NULL },
    { "checkDoc", NULL, "V", 0x2, NULL, NULL },
    { "checkPosition", NULL, "V", 0x2, NULL, NULL },
    { "nextPosition", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "startOffset", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "endOffset", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "getPayload", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, "Ljava.io.IOException;", NULL },
    { "freq", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "docID", NULL, "I", 0x1, NULL, NULL },
    { "nextDoc", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "advanceWithInt:", "advance", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "cost", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "doc_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "termFreq_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "positionIndex_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "positions_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "startOffsets_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "lengths_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "payload_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "payloadIndex_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "basePayloadOffset_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "i_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum = { 2, "TVPostingsEnum", "org.apache.lucene.codecs.compressing", "CompressingTermVectorsReader", 0xa, 13, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum;
}

@end

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_init(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum *self) {
  OrgApacheLuceneIndexPostingsEnum_init(self);
  self->doc_ = -1;
  JreStrongAssignAndConsume(&self->payload_, new_OrgApacheLuceneUtilBytesRef_init());
}

OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_init() {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum *self = [OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum alloc];
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_init(self);
  return self;
}

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_checkDoc(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum *self) {
  if (self->doc_ == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"DocsEnum exhausted") autorelease];
  }
  else if (self->doc_ == -1) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"DocsEnum not started") autorelease];
  }
}

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_checkPosition(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum *self) {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum_checkDoc(self);
  if (self->i_ < 0) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"Position enum not started") autorelease];
  }
  else if (self->i_ >= self->termFreq_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"Read past last position") autorelease];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader_TVPostingsEnum)
