//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/Short.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/codecs/compressing/Compressor.h"
#include "org/apache/lucene/codecs/compressing/MatchingReaders.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/GrowableByteArrayDataOutput.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/UnicodeUtil.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

@interface OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter () {
 @public
  NSString *segment_;
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *indexWriter_;
  OrgApacheLuceneStoreIndexOutput *fieldsStream_;
  OrgApacheLuceneCodecsCompressingCompressor *compressor_;
  OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode_;
  jint chunkSize_;
  jint maxDocsPerChunk_;
  OrgApacheLuceneUtilGrowableByteArrayDataOutput *bufferedDocs_;
  IOSIntArray *numStoredFields_;
  IOSIntArray *endOffsets_;
  jint docBase_;
  jint numBufferedDocs_;
  jlong numChunks_;
  jlong numDirtyChunks_;
  jint numStoredFieldsInDoc_;
}

+ (void)saveIntsWithIntArray:(IOSIntArray *)values
                     withInt:(jint)length
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg;

- (void)writeHeaderWithInt:(jint)docBase
                   withInt:(jint)numBufferedDocs
              withIntArray:(IOSIntArray *)numStoredFields
              withIntArray:(IOSIntArray *)lengths
               withBoolean:(jboolean)sliced;

- (jboolean)triggerFlush;

- (void)flush;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter, segment_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter, indexWriter_, OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter, fieldsStream_, OrgApacheLuceneStoreIndexOutput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter, compressor_, OrgApacheLuceneCodecsCompressingCompressor *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter, compressionMode_, OrgApacheLuceneCodecsCompressingCompressionMode *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter, bufferedDocs_, OrgApacheLuceneUtilGrowableByteArrayDataOutput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter, numStoredFields_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter, endOffsets_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_saveIntsWithIntArray_withInt_withOrgApacheLuceneStoreDataOutput_(IOSIntArray *values, jint length, OrgApacheLuceneStoreDataOutput *outArg);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_writeHeaderWithInt_withInt_withIntArray_withIntArray_withBoolean_(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter *self, jint docBase, jint numBufferedDocs, IOSIntArray *numStoredFields, IOSIntArray *lengths, jboolean sliced);

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_triggerFlush(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_flush(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter *self);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter)

NSString *OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_FIELDS_EXTENSION = @"fdt";
NSString *OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_FIELDS_INDEX_EXTENSION = @"fdx";
jint OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_TYPE_BITS;
jint OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_TYPE_MASK;
NSString *OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_CODEC_SFX_IDX = @"Index";
NSString *OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_CODEC_SFX_DAT = @"Data";
jint OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NEGATIVE_ZERO_FLOAT;
jlong OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NEGATIVE_ZERO_DOUBLE;
NSString *OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_BULK_MERGE_ENABLED_SYSPROP;
jboolean OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_BULK_MERGE_ENABLED;

@implementation OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter

+ (NSString *)FIELDS_EXTENSION {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_FIELDS_EXTENSION;
}

+ (NSString *)FIELDS_INDEX_EXTENSION {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_FIELDS_INDEX_EXTENSION;
}

+ (jint)STRING {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_STRING;
}

+ (jint)BYTE_ARR {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_BYTE_ARR;
}

+ (jint)NUMERIC_INT {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NUMERIC_INT;
}

+ (jint)NUMERIC_FLOAT {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NUMERIC_FLOAT;
}

+ (jint)NUMERIC_LONG {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NUMERIC_LONG;
}

+ (jint)NUMERIC_DOUBLE {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NUMERIC_DOUBLE;
}

+ (jint)TYPE_BITS {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_TYPE_BITS;
}

+ (jint)TYPE_MASK {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_TYPE_MASK;
}

+ (NSString *)CODEC_SFX_IDX {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_CODEC_SFX_IDX;
}

+ (NSString *)CODEC_SFX_DAT {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_CODEC_SFX_DAT;
}

+ (jint)VERSION_START {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_VERSION_START;
}

+ (jint)VERSION_CHUNK_STATS {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_VERSION_CHUNK_STATS;
}

+ (jint)VERSION_CURRENT {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_VERSION_CURRENT;
}

+ (jint)NEGATIVE_ZERO_FLOAT {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NEGATIVE_ZERO_FLOAT;
}

+ (jlong)NEGATIVE_ZERO_DOUBLE {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NEGATIVE_ZERO_DOUBLE;
}

+ (jlong)SECOND {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_SECOND;
}

+ (jlong)HOUR {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_HOUR;
}

+ (jlong)DAY {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_DAY;
}

+ (jint)SECOND_ENCODING {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_SECOND_ENCODING;
}

+ (jint)HOUR_ENCODING {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_HOUR_ENCODING;
}

+ (jint)DAY_ENCODING {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_DAY_ENCODING;
}

+ (NSString *)BULK_MERGE_ENABLED_SYSPROP {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_BULK_MERGE_ENABLED_SYSPROP;
}

+ (jboolean)BULK_MERGE_ENABLED {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_BULK_MERGE_ENABLED;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                  withOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si
                                         withNSString:(NSString *)segmentSuffix
                    withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context
                                         withNSString:(NSString *)formatName
  withOrgApacheLuceneCodecsCompressingCompressionMode:(OrgApacheLuceneCodecsCompressingCompressionMode *)compressionMode
                                              withInt:(jint)chunkSize
                                              withInt:(jint)maxDocsPerChunk
                                              withInt:(jint)blockSize {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_(self, directory, si, segmentSuffix, context, formatName, compressionMode, chunkSize, maxDocsPerChunk, blockSize);
  return self;
}

- (void)close {
  @try {
    OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ fieldsStream_, indexWriter_ } count:2 type:JavaIoCloseable_class_()]);
  }
  @finally {
    JreStrongAssign(&fieldsStream_, nil);
    JreStrongAssign(&indexWriter_, nil);
  }
}

- (void)startDocument {
}

- (void)finishDocument {
  if (numBufferedDocs_ == ((IOSIntArray *) nil_chk(self->numStoredFields_))->size_) {
    jint newLength = OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(numBufferedDocs_ + 1, 4);
    JreStrongAssign(&self->numStoredFields_, JavaUtilArrays_copyOfWithIntArray_withInt_(self->numStoredFields_, newLength));
    JreStrongAssign(&endOffsets_, JavaUtilArrays_copyOfWithIntArray_withInt_(endOffsets_, newLength));
  }
  *IOSIntArray_GetRef(nil_chk(self->numStoredFields_), numBufferedDocs_) = numStoredFieldsInDoc_;
  numStoredFieldsInDoc_ = 0;
  *IOSIntArray_GetRef(nil_chk(endOffsets_), numBufferedDocs_) = ((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(bufferedDocs_))->length_;
  ++numBufferedDocs_;
  if (OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_triggerFlush(self)) {
    OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_flush(self);
  }
}

+ (void)saveIntsWithIntArray:(IOSIntArray *)values
                     withInt:(jint)length
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_saveIntsWithIntArray_withInt_withOrgApacheLuceneStoreDataOutput_(values, length, outArg);
}

- (void)writeHeaderWithInt:(jint)docBase
                   withInt:(jint)numBufferedDocs
              withIntArray:(IOSIntArray *)numStoredFields
              withIntArray:(IOSIntArray *)lengths
               withBoolean:(jboolean)sliced {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_writeHeaderWithInt_withInt_withIntArray_withIntArray_withBoolean_(self, docBase, numBufferedDocs, numStoredFields, lengths, sliced);
}

- (jboolean)triggerFlush {
  return OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_triggerFlush(self);
}

- (void)flush {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_flush(self);
}

- (void)writeFieldWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)info
             withOrgApacheLuceneIndexIndexableField:(id<OrgApacheLuceneIndexIndexableField>)field {
  ++numStoredFieldsInDoc_;
  jint bits = 0;
  OrgApacheLuceneUtilBytesRef *bytes;
  NSString *string;
  NSNumber *number = [((id<OrgApacheLuceneIndexIndexableField>) nil_chk(field)) numericValue];
  if (number != nil) {
    if ([number isKindOfClass:[JavaLangByte class]] || [number isKindOfClass:[JavaLangShort class]] || [number isKindOfClass:[JavaLangInteger class]]) {
      bits = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NUMERIC_INT;
    }
    else if ([number isKindOfClass:[JavaLangLong class]]) {
      bits = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NUMERIC_LONG;
    }
    else if ([number isKindOfClass:[JavaLangFloat class]]) {
      bits = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NUMERIC_FLOAT;
    }
    else if ([number isKindOfClass:[JavaLangDouble class]]) {
      bits = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NUMERIC_DOUBLE;
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"cannot store numeric type ", [number getClass]));
    }
    string = nil;
    bytes = nil;
  }
  else {
    bytes = [field binaryValue];
    if (bytes != nil) {
      bits = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_BYTE_ARR;
      string = nil;
    }
    else {
      bits = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_STRING;
      string = [field stringValue];
      if (string == nil) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"field ", [field name], @" is stored but does not have binaryValue, stringValue nor numericValue"));
      }
    }
  }
  jlong infoAndBits = (JreLShift64(((jlong) ((OrgApacheLuceneIndexFieldInfo *) nil_chk(info))->number_), OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_TYPE_BITS)) | bits;
  [((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(bufferedDocs_)) writeVLongWithLong:infoAndBits];
  if (bytes != nil) {
    [bufferedDocs_ writeVIntWithInt:bytes->length_];
    [bufferedDocs_ writeBytesWithByteArray:bytes->bytes_ withInt:bytes->offset_ withInt:bytes->length_];
  }
  else if (string != nil) {
    JreStrongAssign(&scratchBytes_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(scratchBytes_, ((jint) [string length]) * OrgApacheLuceneUtilUnicodeUtil_MAX_UTF8_BYTES_PER_CHAR));
    jint length = OrgApacheLuceneUtilUnicodeUtil_UTF16toUTF8WithJavaLangCharSequence_withInt_withInt_withByteArray_(string, 0, ((jint) [string length]), scratchBytes_);
    [bufferedDocs_ writeVIntWithInt:length];
    [bufferedDocs_ writeBytesWithByteArray:scratchBytes_ withInt:length];
  }
  else {
    if ([number isKindOfClass:[JavaLangByte class]] || [number isKindOfClass:[JavaLangShort class]] || [number isKindOfClass:[JavaLangInteger class]]) {
      [bufferedDocs_ writeZIntWithInt:[((NSNumber *) nil_chk(number)) intValue]];
    }
    else if ([number isKindOfClass:[JavaLangLong class]]) {
      OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_writeTLongWithOrgApacheLuceneStoreDataOutput_withLong_(bufferedDocs_, [((NSNumber *) nil_chk(number)) longLongValue]);
    }
    else if ([number isKindOfClass:[JavaLangFloat class]]) {
      OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_writeZFloatWithOrgApacheLuceneStoreDataOutput_withFloat_(bufferedDocs_, [((NSNumber *) nil_chk(number)) floatValue]);
    }
    else if ([number isKindOfClass:[JavaLangDouble class]]) {
      OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_writeZDoubleWithOrgApacheLuceneStoreDataOutput_withDouble_(bufferedDocs_, [((NSNumber *) nil_chk(number)) doubleValue]);
    }
    else {
      @throw create_JavaLangAssertionError_initWithId_(@"Cannot get here");
    }
  }
}

+ (void)writeZFloatWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                            withFloat:(jfloat)f {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_writeZFloatWithOrgApacheLuceneStoreDataOutput_withFloat_(outArg, f);
}

+ (void)writeZDoubleWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                            withDouble:(jdouble)d {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_writeZDoubleWithOrgApacheLuceneStoreDataOutput_withDouble_(outArg, d);
}

+ (void)writeTLongWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                            withLong:(jlong)l {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_writeTLongWithOrgApacheLuceneStoreDataOutput_withLong_(outArg, l);
}

- (void)finishWithOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fis
                                         withInt:(jint)numDocs {
  if (numBufferedDocs_ > 0) {
    OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_flush(self);
    numDirtyChunks_++;
  }
  else {
    JreAssert((((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(bufferedDocs_))->length_ == 0), (@"org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java:473 condition failed: assert bufferedDocs.length == 0;"));
  }
  if (docBase_ != numDocs) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"Wrote ", docBase_, @" docs, finish called with numDocs=", numDocs));
  }
  [((OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *) nil_chk(indexWriter_)) finishWithInt:numDocs withLong:[((OrgApacheLuceneStoreIndexOutput *) nil_chk(fieldsStream_)) getFilePointer]];
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(fieldsStream_)) writeVLongWithLong:numChunks_];
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(fieldsStream_)) writeVLongWithLong:numDirtyChunks_];
  OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(fieldsStream_);
  JreAssert((((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(bufferedDocs_))->length_ == 0), (@"org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java:482 condition failed: assert bufferedDocs.length == 0;"));
}

- (jint)mergeWithOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState {
  jint docCount = 0;
  jint numReaders = ((IOSIntArray *) nil_chk(((OrgApacheLuceneIndexMergeState *) nil_chk(mergeState))->maxDocs_))->size_;
  OrgApacheLuceneCodecsCompressingMatchingReaders *matching = create_OrgApacheLuceneCodecsCompressingMatchingReaders_initWithOrgApacheLuceneIndexMergeState_(mergeState);
  for (jint readerIndex = 0; readerIndex < numReaders; readerIndex++) {
    OrgApacheLuceneCodecsStoredFieldsWriter_MergeVisitor *visitor = create_OrgApacheLuceneCodecsStoredFieldsWriter_MergeVisitor_initWithOrgApacheLuceneCodecsStoredFieldsWriter_withOrgApacheLuceneIndexMergeState_withInt_(self, mergeState, readerIndex);
    OrgApacheLuceneCodecsCompressingCompressingStoredFieldsReader *matchingFieldsReader = nil;
    if (IOSBooleanArray_Get(nil_chk(matching->matchingReaders_), readerIndex)) {
      OrgApacheLuceneCodecsStoredFieldsReader *fieldsReader = IOSObjectArray_Get(nil_chk(mergeState->storedFieldsReaders_), readerIndex);
      if (fieldsReader != nil && [fieldsReader isKindOfClass:[OrgApacheLuceneCodecsCompressingCompressingStoredFieldsReader class]]) {
        matchingFieldsReader = (OrgApacheLuceneCodecsCompressingCompressingStoredFieldsReader *) cast_chk(fieldsReader, [OrgApacheLuceneCodecsCompressingCompressingStoredFieldsReader class]);
      }
    }
    jint maxDoc = IOSIntArray_Get(mergeState->maxDocs_, readerIndex);
    id<OrgApacheLuceneUtilBits> liveDocs = IOSObjectArray_Get(nil_chk(mergeState->liveDocs_), readerIndex);
    if (matchingFieldsReader == nil || [matchingFieldsReader getVersion] != OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_VERSION_CURRENT || OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_BULK_MERGE_ENABLED == false) {
      OrgApacheLuceneCodecsStoredFieldsReader *storedFieldsReader = IOSObjectArray_Get(nil_chk(mergeState->storedFieldsReaders_), readerIndex);
      if (storedFieldsReader != nil) {
        [storedFieldsReader checkIntegrity];
      }
      for (jint docID = 0; docID < maxDoc; docID++) {
        if (liveDocs != nil && [liveDocs getWithInt:docID] == false) {
          continue;
        }
        [self startDocument];
        [((OrgApacheLuceneCodecsStoredFieldsReader *) nil_chk(storedFieldsReader)) visitDocumentWithInt:docID withOrgApacheLuceneIndexStoredFieldVisitor:visitor];
        [self finishDocument];
        ++docCount;
      }
    }
    else if ([matchingFieldsReader getCompressionMode] == compressionMode_ && [matchingFieldsReader getChunkSize] == chunkSize_ && [matchingFieldsReader getPackedIntsVersion] == OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT && liveDocs == nil && ![self tooDirtyWithOrgApacheLuceneCodecsCompressingCompressingStoredFieldsReader:matchingFieldsReader]) {
      JreAssert(([matchingFieldsReader getVersion] == OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_VERSION_CURRENT), (@"org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java:544 condition failed: assert matchingFieldsReader.getVersion() == VERSION_CURRENT;"));
      [matchingFieldsReader checkIntegrity];
      if (numBufferedDocs_ > 0) {
        OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_flush(self);
        numDirtyChunks_++;
      }
      OrgApacheLuceneStoreIndexInput *rawDocs = [matchingFieldsReader getFieldsStream];
      OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexReader *index = [matchingFieldsReader getIndexReader];
      [((OrgApacheLuceneStoreIndexInput *) nil_chk(rawDocs)) seekWithLong:[((OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexReader *) nil_chk(index)) getStartPointerWithInt:0]];
      jint docID = 0;
      while (docID < maxDoc) {
        jint base = [rawDocs readVInt];
        if (base != docID) {
          @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I$I", @"invalid state: base=", base, @", docID=", docID), rawDocs);
        }
        jint code = [rawDocs readVInt];
        jint bufferedDocs = JreURShift32(code, 1);
        [((OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *) nil_chk(indexWriter_)) writeIndexWithInt:bufferedDocs withLong:[((OrgApacheLuceneStoreIndexOutput *) nil_chk(fieldsStream_)) getFilePointer]];
        [((OrgApacheLuceneStoreIndexOutput *) nil_chk(fieldsStream_)) writeVIntWithInt:docBase_];
        [((OrgApacheLuceneStoreIndexOutput *) nil_chk(fieldsStream_)) writeVIntWithInt:code];
        docID += bufferedDocs;
        docBase_ += bufferedDocs;
        docCount += bufferedDocs;
        if (docID > maxDoc) {
          @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I$I$I", @"invalid state: base=", base, @", count=", bufferedDocs, @", maxDoc=", maxDoc), rawDocs);
        }
        jlong end;
        if (docID == maxDoc) {
          end = [matchingFieldsReader getMaxPointer];
        }
        else {
          end = [index getStartPointerWithInt:docID];
        }
        [((OrgApacheLuceneStoreIndexOutput *) nil_chk(fieldsStream_)) copyBytesWithOrgApacheLuceneStoreDataInput:rawDocs withLong:end - [rawDocs getFilePointer]];
      }
      if ([rawDocs getFilePointer] != [matchingFieldsReader getMaxPointer]) {
        @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$J$J", @"invalid state: pos=", [rawDocs getFilePointer], @", max=", [matchingFieldsReader getMaxPointer]), rawDocs);
      }
      numChunks_ += [matchingFieldsReader getNumChunks];
      numDirtyChunks_ += [matchingFieldsReader getNumDirtyChunks];
    }
    else {
      JreAssert(([matchingFieldsReader getVersion] == OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_VERSION_CURRENT), (@"org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java:605 condition failed: assert matchingFieldsReader.getVersion() == VERSION_CURRENT;"));
      [matchingFieldsReader checkIntegrity];
      for (jint docID = 0; docID < maxDoc; docID++) {
        if (liveDocs != nil && [liveDocs getWithInt:docID] == false) {
          continue;
        }
        OrgApacheLuceneCodecsCompressingCompressingStoredFieldsReader_SerializedDocument *doc = [matchingFieldsReader documentWithInt:docID];
        [self startDocument];
        [((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(bufferedDocs_)) copyBytesWithOrgApacheLuceneStoreDataInput:((OrgApacheLuceneCodecsCompressingCompressingStoredFieldsReader_SerializedDocument *) nil_chk(doc))->in_ withLong:doc->length_];
        numStoredFieldsInDoc_ = doc->numStoredFields_;
        [self finishDocument];
        ++docCount;
      }
    }
  }
  [self finishWithOrgApacheLuceneIndexFieldInfos:mergeState->mergeFieldInfos_ withInt:docCount];
  return docCount;
}

- (jboolean)tooDirtyWithOrgApacheLuceneCodecsCompressingCompressingStoredFieldsReader:(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsReader *)candidate {
  return [((OrgApacheLuceneCodecsCompressingCompressingStoredFieldsReader *) nil_chk(candidate)) getNumDirtyChunks] > 1024 || [candidate getNumDirtyChunks] * 100 > [candidate getNumChunks];
}

- (void)dealloc {
  RELEASE_(segment_);
  RELEASE_(indexWriter_);
  RELEASE_(fieldsStream_);
  RELEASE_(compressor_);
  RELEASE_(compressionMode_);
  RELEASE_(bufferedDocs_);
  RELEASE_(numStoredFields_);
  RELEASE_(endOffsets_);
  RELEASE_(scratchBytes_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter class]) {
    OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_TYPE_BITS = OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NUMERIC_DOUBLE);
    OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_TYPE_MASK = (jint) OrgApacheLuceneUtilPackedPackedInts_maxValueWithInt_(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_TYPE_BITS);
    OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NEGATIVE_ZERO_FLOAT = JavaLangFloat_floatToIntBitsWithFloat_(-0.0f);
    OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NEGATIVE_ZERO_DOUBLE = JavaLangDouble_doubleToLongBitsWithDouble_(-0.0);
    JreStrongAssign(&OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_BULK_MERGE_ENABLED_SYSPROP, JreStrcat("$$", [OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_class_() getName], @".enableBulkMerge"));
    {
      jboolean v = true;
      @try {
        v = JavaLangBoolean_parseBooleanWithNSString_(JavaLangSystem_getPropertyWithNSString_withNSString_(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_BULK_MERGE_ENABLED_SYSPROP, @"true"));
      }
      @catch (JavaLangSecurityException *ignored) {
      }
      OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_BULK_MERGE_ENABLED = v;
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexSegmentInfo:withNSString:withOrgApacheLuceneStoreIOContext:withNSString:withOrgApacheLuceneCodecsCompressingCompressionMode:withInt:withInt:withInt:", "CompressingStoredFieldsWriter", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "startDocument", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "finishDocument", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "saveIntsWithIntArray:withInt:withOrgApacheLuceneStoreDataOutput:", "saveInts", "V", 0xa, "Ljava.io.IOException;", NULL },
    { "writeHeaderWithInt:withInt:withIntArray:withIntArray:withBoolean:", "writeHeader", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "triggerFlush", NULL, "Z", 0x2, NULL, NULL },
    { "flush", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "writeFieldWithOrgApacheLuceneIndexFieldInfo:withOrgApacheLuceneIndexIndexableField:", "writeField", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeZFloatWithOrgApacheLuceneStoreDataOutput:withFloat:", "writeZFloat", "V", 0x8, "Ljava.io.IOException;", NULL },
    { "writeZDoubleWithOrgApacheLuceneStoreDataOutput:withDouble:", "writeZDouble", "V", 0x8, "Ljava.io.IOException;", NULL },
    { "writeTLongWithOrgApacheLuceneStoreDataOutput:withLong:", "writeTLong", "V", 0x8, "Ljava.io.IOException;", NULL },
    { "finishWithOrgApacheLuceneIndexFieldInfos:withInt:", "finish", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "mergeWithOrgApacheLuceneIndexMergeState:", "merge", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "tooDirtyWithOrgApacheLuceneCodecsCompressingCompressingStoredFieldsReader:", "tooDirty", "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FIELDS_EXTENSION", "FIELDS_EXTENSION", 0x19, "Ljava.lang.String;", &OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_FIELDS_EXTENSION, NULL, .constantValue.asLong = 0 },
    { "FIELDS_INDEX_EXTENSION", "FIELDS_INDEX_EXTENSION", 0x19, "Ljava.lang.String;", &OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_FIELDS_INDEX_EXTENSION, NULL, .constantValue.asLong = 0 },
    { "STRING", "STRING", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_STRING },
    { "BYTE_ARR", "BYTE_ARR", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_BYTE_ARR },
    { "NUMERIC_INT", "NUMERIC_INT", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NUMERIC_INT },
    { "NUMERIC_FLOAT", "NUMERIC_FLOAT", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NUMERIC_FLOAT },
    { "NUMERIC_LONG", "NUMERIC_LONG", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NUMERIC_LONG },
    { "NUMERIC_DOUBLE", "NUMERIC_DOUBLE", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NUMERIC_DOUBLE },
    { "TYPE_BITS", "TYPE_BITS", 0x18, "I", &OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_TYPE_BITS, NULL, .constantValue.asLong = 0 },
    { "TYPE_MASK", "TYPE_MASK", 0x18, "I", &OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_TYPE_MASK, NULL, .constantValue.asLong = 0 },
    { "CODEC_SFX_IDX", "CODEC_SFX_IDX", 0x18, "Ljava.lang.String;", &OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_CODEC_SFX_IDX, NULL, .constantValue.asLong = 0 },
    { "CODEC_SFX_DAT", "CODEC_SFX_DAT", 0x18, "Ljava.lang.String;", &OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_CODEC_SFX_DAT, NULL, .constantValue.asLong = 0 },
    { "VERSION_START", "VERSION_START", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_VERSION_START },
    { "VERSION_CHUNK_STATS", "VERSION_CHUNK_STATS", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_VERSION_CHUNK_STATS },
    { "VERSION_CURRENT", "VERSION_CURRENT", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_VERSION_CURRENT },
    { "segment_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "indexWriter_", NULL, 0x2, "Lorg.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldsStream_", NULL, 0x2, "Lorg.apache.lucene.store.IndexOutput;", NULL, NULL, .constantValue.asLong = 0 },
    { "compressor_", NULL, 0x12, "Lorg.apache.lucene.codecs.compressing.Compressor;", NULL, NULL, .constantValue.asLong = 0 },
    { "compressionMode_", NULL, 0x12, "Lorg.apache.lucene.codecs.compressing.CompressionMode;", NULL, NULL, .constantValue.asLong = 0 },
    { "chunkSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "maxDocsPerChunk_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "bufferedDocs_", NULL, 0x12, "Lorg.apache.lucene.util.GrowableByteArrayDataOutput;", NULL, NULL, .constantValue.asLong = 0 },
    { "numStoredFields_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "endOffsets_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "docBase_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "numBufferedDocs_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "numChunks_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "numDirtyChunks_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "numStoredFieldsInDoc_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "scratchBytes_", NULL, 0x0, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "NEGATIVE_ZERO_FLOAT", "NEGATIVE_ZERO_FLOAT", 0x18, "I", &OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NEGATIVE_ZERO_FLOAT, NULL, .constantValue.asLong = 0 },
    { "NEGATIVE_ZERO_DOUBLE", "NEGATIVE_ZERO_DOUBLE", 0x18, "J", &OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NEGATIVE_ZERO_DOUBLE, NULL, .constantValue.asLong = 0 },
    { "SECOND", "SECOND", 0x18, "J", NULL, NULL, .constantValue.asLong = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_SECOND },
    { "HOUR", "HOUR", 0x18, "J", NULL, NULL, .constantValue.asLong = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_HOUR },
    { "DAY", "DAY", 0x18, "J", NULL, NULL, .constantValue.asLong = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_DAY },
    { "SECOND_ENCODING", "SECOND_ENCODING", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_SECOND_ENCODING },
    { "HOUR_ENCODING", "HOUR_ENCODING", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_HOUR_ENCODING },
    { "DAY_ENCODING", "DAY_ENCODING", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_DAY_ENCODING },
    { "BULK_MERGE_ENABLED_SYSPROP", "BULK_MERGE_ENABLED_SYSPROP", 0x18, "Ljava.lang.String;", &OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_BULK_MERGE_ENABLED_SYSPROP, NULL, .constantValue.asLong = 0 },
    { "BULK_MERGE_ENABLED", "BULK_MERGE_ENABLED", 0x18, "Z", &OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_BULK_MERGE_ENABLED, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter = { 2, "CompressingStoredFieldsWriter", "org.apache.lucene.codecs.compressing", NULL, 0x11, 15, methods, 41, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter;
}

@end

void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter *self, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfo *si, NSString *segmentSuffix, OrgApacheLuceneStoreIOContext *context, NSString *formatName, OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode, jint chunkSize, jint maxDocsPerChunk, jint blockSize) {
  OrgApacheLuceneCodecsStoredFieldsWriter_init(self);
  JreStrongAssignAndConsume(&self->scratchBytes_, [IOSByteArray newArrayWithLength:16]);
  JreAssert((directory != nil), (@"org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java:97 condition failed: assert directory != null;"));
  JreStrongAssign(&self->segment_, ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si))->name_);
  JreStrongAssign(&self->compressionMode_, compressionMode);
  JreStrongAssign(&self->compressor_, [((OrgApacheLuceneCodecsCompressingCompressionMode *) nil_chk(compressionMode)) newCompressor]);
  self->chunkSize_ = chunkSize;
  self->maxDocsPerChunk_ = maxDocsPerChunk;
  self->docBase_ = 0;
  JreStrongAssignAndConsume(&self->bufferedDocs_, new_OrgApacheLuceneUtilGrowableByteArrayDataOutput_initWithInt_(chunkSize));
  JreStrongAssignAndConsume(&self->numStoredFields_, [IOSIntArray newArrayWithLength:16]);
  JreStrongAssignAndConsume(&self->endOffsets_, [IOSIntArray newArrayWithLength:16]);
  self->numBufferedDocs_ = 0;
  jboolean success = false;
  OrgApacheLuceneStoreIndexOutput *indexStream = [((OrgApacheLuceneStoreDirectory *) nil_chk(directory)) createOutputWithNSString:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(self->segment_, segmentSuffix, OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_FIELDS_INDEX_EXTENSION) withOrgApacheLuceneStoreIOContext:context];
  @try {
    JreStrongAssign(&self->fieldsStream_, [directory createOutputWithNSString:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(self->segment_, segmentSuffix, OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_FIELDS_EXTENSION) withOrgApacheLuceneStoreIOContext:context]);
    NSString *codecNameIdx = JreStrcat("$$", formatName, OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_CODEC_SFX_IDX);
    NSString *codecNameDat = JreStrcat("$$", formatName, OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_CODEC_SFX_DAT);
    OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(indexStream, codecNameIdx, OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_VERSION_CURRENT, [si getId], segmentSuffix);
    OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(self->fieldsStream_, codecNameDat, OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_VERSION_CURRENT, [si getId], segmentSuffix);
    JreAssert((OrgApacheLuceneCodecsCodecUtil_indexHeaderLengthWithNSString_withNSString_(codecNameDat, segmentSuffix) == [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->fieldsStream_)) getFilePointer]), (@"org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java:120 condition failed: assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();"));
    JreAssert((OrgApacheLuceneCodecsCodecUtil_indexHeaderLengthWithNSString_withNSString_(codecNameIdx, segmentSuffix) == [((OrgApacheLuceneStoreIndexOutput *) nil_chk(indexStream)) getFilePointer]), (@"org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java:121 condition failed: assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();"));
    JreStrongAssignAndConsume(&self->indexWriter_, new_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_initWithOrgApacheLuceneStoreIndexOutput_withInt_(indexStream, blockSize));
    indexStream = nil;
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->fieldsStream_)) writeVIntWithInt:chunkSize];
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->fieldsStream_)) writeVIntWithInt:OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT];
    success = true;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->fieldsStream_, indexStream, self->indexWriter_ } count:3 type:JavaIoCloseable_class_()]);
    }
  }
}

OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter *new_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_(OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfo *si, NSString *segmentSuffix, OrgApacheLuceneStoreIOContext *context, NSString *formatName, OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode, jint chunkSize, jint maxDocsPerChunk, jint blockSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_, directory, si, segmentSuffix, context, formatName, compressionMode, chunkSize, maxDocsPerChunk, blockSize)
}

OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter *create_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_(OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfo *si, NSString *segmentSuffix, OrgApacheLuceneStoreIOContext *context, NSString *formatName, OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode, jint chunkSize, jint maxDocsPerChunk, jint blockSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_, directory, si, segmentSuffix, context, formatName, compressionMode, chunkSize, maxDocsPerChunk, blockSize)
}

void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_saveIntsWithIntArray_withInt_withOrgApacheLuceneStoreDataOutput_(IOSIntArray *values, jint length, OrgApacheLuceneStoreDataOutput *outArg) {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_initialize();
  JreAssert((length > 0), (@"org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java:170 condition failed: assert length > 0;"));
  if (length == 1) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVIntWithInt:IOSIntArray_Get(nil_chk(values), 0)];
  }
  else {
    jboolean allEqual = true;
    for (jint i = 1; i < length; ++i) {
      if (IOSIntArray_Get(nil_chk(values), i) != IOSIntArray_Get(values, 0)) {
        allEqual = false;
        break;
      }
    }
    if (allEqual) {
      [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVIntWithInt:0];
      [outArg writeVIntWithInt:IOSIntArray_Get(nil_chk(values), 0)];
    }
    else {
      jlong max = 0;
      for (jint i = 0; i < length; ++i) {
        max |= IOSIntArray_Get(nil_chk(values), i);
      }
      jint bitsRequired = OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(max);
      [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVIntWithInt:bitsRequired];
      OrgApacheLuceneUtilPackedPackedInts_Writer *w = OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(outArg, JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED), length, bitsRequired, 1);
      for (jint i = 0; i < length; ++i) {
        [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(w)) addWithLong:IOSIntArray_Get(nil_chk(values), i)];
      }
      [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(w)) finish];
    }
  }
}

void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_writeHeaderWithInt_withInt_withIntArray_withIntArray_withBoolean_(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter *self, jint docBase, jint numBufferedDocs, IOSIntArray *numStoredFields, IOSIntArray *lengths, jboolean sliced) {
  jint slicedBit = sliced ? 1 : 0;
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->fieldsStream_)) writeVIntWithInt:docBase];
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->fieldsStream_)) writeVIntWithInt:(JreLShift32((numBufferedDocs), 1)) | slicedBit];
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_saveIntsWithIntArray_withInt_withOrgApacheLuceneStoreDataOutput_(numStoredFields, numBufferedDocs, self->fieldsStream_);
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_saveIntsWithIntArray_withInt_withOrgApacheLuceneStoreDataOutput_(lengths, numBufferedDocs, self->fieldsStream_);
}

jboolean OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_triggerFlush(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter *self) {
  return ((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(self->bufferedDocs_))->length_ >= self->chunkSize_ || self->numBufferedDocs_ >= self->maxDocsPerChunk_;
}

void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_flush(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter *self) {
  [((OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *) nil_chk(self->indexWriter_)) writeIndexWithInt:self->numBufferedDocs_ withLong:[((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->fieldsStream_)) getFilePointer]];
  IOSIntArray *lengths = self->endOffsets_;
  for (jint i = self->numBufferedDocs_ - 1; i > 0; --i) {
    *IOSIntArray_GetRef(nil_chk(lengths), i) = IOSIntArray_Get(nil_chk(self->endOffsets_), i) - IOSIntArray_Get(self->endOffsets_, i - 1);
    JreAssert((IOSIntArray_Get(lengths, i) >= 0), (@"org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.java:226 condition failed: assert lengths[i] >= 0;"));
  }
  jboolean sliced = ((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(self->bufferedDocs_))->length_ >= 2 * self->chunkSize_;
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_writeHeaderWithInt_withInt_withIntArray_withIntArray_withBoolean_(self, self->docBase_, self->numBufferedDocs_, self->numStoredFields_, lengths, sliced);
  if (sliced) {
    for (jint compressed = 0; compressed < self->bufferedDocs_->length_; compressed += self->chunkSize_) {
      [((OrgApacheLuceneCodecsCompressingCompressor *) nil_chk(self->compressor_)) compressWithByteArray:self->bufferedDocs_->bytes_ withInt:compressed withInt:JavaLangMath_minWithInt_withInt_(self->chunkSize_, self->bufferedDocs_->length_ - compressed) withOrgApacheLuceneStoreDataOutput:self->fieldsStream_];
    }
  }
  else {
    [((OrgApacheLuceneCodecsCompressingCompressor *) nil_chk(self->compressor_)) compressWithByteArray:self->bufferedDocs_->bytes_ withInt:0 withInt:self->bufferedDocs_->length_ withOrgApacheLuceneStoreDataOutput:self->fieldsStream_];
  }
  self->docBase_ += self->numBufferedDocs_;
  self->numBufferedDocs_ = 0;
  self->bufferedDocs_->length_ = 0;
  self->numChunks_++;
}

void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_writeZFloatWithOrgApacheLuceneStoreDataOutput_withFloat_(OrgApacheLuceneStoreDataOutput *outArg, jfloat f) {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_initialize();
  jint intVal = JreFpToInt(f);
  jint floatBits = JavaLangFloat_floatToIntBitsWithFloat_(f);
  if (f == intVal && intVal >= -1 && intVal <= (jint) 0x7D && floatBits != OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NEGATIVE_ZERO_FLOAT) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) ((jint) 0x80 | (1 + intVal))];
  }
  else if ((JreURShift32(floatBits, 31)) == 0) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeIntWithInt:floatBits];
  }
  else {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) (jint) 0xFF];
    [outArg writeIntWithInt:floatBits];
  }
}

void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_writeZDoubleWithOrgApacheLuceneStoreDataOutput_withDouble_(OrgApacheLuceneStoreDataOutput *outArg, jdouble d) {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_initialize();
  jint intVal = JreFpToInt(d);
  jlong doubleBits = JavaLangDouble_doubleToLongBitsWithDouble_(d);
  if (d == intVal && intVal >= -1 && intVal <= (jint) 0x7C && doubleBits != OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_NEGATIVE_ZERO_DOUBLE) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) ((jint) 0x80 | (intVal + 1))];
    return;
  }
  else if (d == (jfloat) d) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) (jint) 0xFE];
    [outArg writeIntWithInt:JavaLangFloat_floatToIntBitsWithFloat_((jfloat) d)];
  }
  else if ((JreURShift64(doubleBits, 63)) == 0) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeLongWithLong:doubleBits];
  }
  else {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) (jint) 0xFF];
    [outArg writeLongWithLong:doubleBits];
  }
}

void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_writeTLongWithOrgApacheLuceneStoreDataOutput_withLong_(OrgApacheLuceneStoreDataOutput *outArg, jlong l) {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_initialize();
  jint header;
  if (l % OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_SECOND != 0) {
    header = 0;
  }
  else if (l % OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_DAY == 0) {
    header = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_DAY_ENCODING;
    l /= OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_DAY;
  }
  else if (l % OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_HOUR == 0) {
    header = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_HOUR_ENCODING;
    l /= OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_HOUR;
  }
  else {
    header = OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_SECOND_ENCODING;
    l /= OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_SECOND;
  }
  jlong zigZagL = OrgApacheLuceneUtilBitUtil_zigZagEncodeWithLong_(l);
  header |= (zigZagL & (jint) 0x1F);
  jlong upperBits = JreURShift64(zigZagL, 5);
  if (upperBits != 0) {
    header |= (jint) 0x20;
  }
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) header];
  if (upperBits != 0) {
    [outArg writeVLongWithLong:upperBits];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter)
