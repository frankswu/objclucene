//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

@interface OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter ()

- (void)reset;

- (void)writeBlock;

@end

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_reset(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_writeBlock(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *self);

@implementation OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter

- (instancetype)initWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)indexOutput
                                                withInt:(jint)blockSize {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_initWithOrgApacheLuceneStoreIndexOutput_withInt_(self, indexOutput, blockSize);
  return self;
}

- (void)reset {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_reset(self);
}

- (void)writeBlock {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_writeBlock(self);
}

- (void)writeIndexWithInt:(jint)numDocs
                 withLong:(jlong)startPointer {
  if (blockChunks_ == blockSize_) {
    OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_writeBlock(self);
    OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_reset(self);
  }
  if (firstStartPointer_ == -1) {
    firstStartPointer_ = maxStartPointer_ = startPointer;
  }
  JreAssert((firstStartPointer_ > 0 && startPointer >= firstStartPointer_), (@"org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter.java:185 condition failed: assert firstStartPointer > 0 && startPointer >= firstStartPointer;"));
  *IOSIntArray_GetRef(nil_chk(docBaseDeltas_), blockChunks_) = numDocs;
  *IOSLongArray_GetRef(nil_chk(startPointerDeltas_), blockChunks_) = startPointer - maxStartPointer_;
  ++blockChunks_;
  blockDocs_ += numDocs;
  totalDocs_ += numDocs;
  maxStartPointer_ = startPointer;
}

- (void)finishWithInt:(jint)numDocs
             withLong:(jlong)maxPointer {
  if (numDocs != totalDocs_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"Expected ", numDocs, @" docs, but got ", totalDocs_)) autorelease];
  }
  if (blockChunks_ > 0) {
    OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_writeBlock(self);
  }
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(fieldsIndexOut_)) writeVIntWithInt:0];
  [fieldsIndexOut_ writeVLongWithLong:maxPointer];
  OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(fieldsIndexOut_);
}

- (void)close {
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(fieldsIndexOut_)) close];
}

- (void)dealloc {
  RELEASE_(fieldsIndexOut_);
  RELEASE_(docBaseDeltas_);
  RELEASE_(startPointerDeltas_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneStoreIndexOutput:withInt:", "CompressingStoredFieldsIndexWriter", NULL, 0x0, "Ljava.io.IOException;", NULL },
    { "reset", NULL, "V", 0x2, NULL, NULL },
    { "writeBlock", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "writeIndexWithInt:withLong:", "writeIndex", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "finishWithInt:withLong:", "finish", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fieldsIndexOut_", NULL, 0x10, "Lorg.apache.lucene.store.IndexOutput;", NULL, NULL, .constantValue.asLong = 0 },
    { "blockSize_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "totalDocs_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "blockDocs_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "blockChunks_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "firstStartPointer_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "maxStartPointer_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "docBaseDeltas_", NULL, 0x10, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "startPointerDeltas_", NULL, 0x10, "[J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter = { 2, "CompressingStoredFieldsIndexWriter", "org.apache.lucene.codecs.compressing", NULL, 0x11, 6, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter;
}

@end

void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_initWithOrgApacheLuceneStoreIndexOutput_withInt_(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *self, OrgApacheLuceneStoreIndexOutput *indexOutput, jint blockSize) {
  NSObject_init(self);
  if (blockSize <= 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"blockSize must be positive") autorelease];
  }
  self->blockSize_ = blockSize;
  JreStrongAssign(&self->fieldsIndexOut_, indexOutput);
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_reset(self);
  self->totalDocs_ = 0;
  JreStrongAssignAndConsume(&self->docBaseDeltas_, [IOSIntArray newArrayWithLength:blockSize]);
  JreStrongAssignAndConsume(&self->startPointerDeltas_, [IOSLongArray newArrayWithLength:blockSize]);
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->fieldsIndexOut_)) writeVIntWithInt:OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT];
}

OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *new_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_initWithOrgApacheLuceneStoreIndexOutput_withInt_(OrgApacheLuceneStoreIndexOutput *indexOutput, jint blockSize) {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *self = [OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter alloc];
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_initWithOrgApacheLuceneStoreIndexOutput_withInt_(self, indexOutput, blockSize);
  return self;
}

void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_reset(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *self) {
  self->blockChunks_ = 0;
  self->blockDocs_ = 0;
  self->firstStartPointer_ = -1;
}

void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_writeBlock(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *self) {
  JreAssert((self->blockChunks_ > 0), (@"org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter.java:105 condition failed: assert blockChunks > 0;"));
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->fieldsIndexOut_)) writeVIntWithInt:self->blockChunks_];
  jint avgChunkDocs;
  if (self->blockChunks_ == 1) {
    avgChunkDocs = 0;
  }
  else {
    avgChunkDocs = JavaLangMath_roundWithFloat_((jfloat) (self->blockDocs_ - IOSIntArray_Get(nil_chk(self->docBaseDeltas_), self->blockChunks_ - 1)) / (self->blockChunks_ - 1));
  }
  [self->fieldsIndexOut_ writeVIntWithInt:self->totalDocs_ - self->blockDocs_];
  [self->fieldsIndexOut_ writeVIntWithInt:avgChunkDocs];
  jint docBase = 0;
  jlong maxDelta = 0;
  for (jint i = 0; i < self->blockChunks_; ++i) {
    jint delta = docBase - avgChunkDocs * i;
    maxDelta |= OrgApacheLuceneUtilBitUtil_zigZagEncodeWithInt_(delta);
    docBase += IOSIntArray_Get(nil_chk(self->docBaseDeltas_), i);
  }
  jint bitsPerDocBase = OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(maxDelta);
  [self->fieldsIndexOut_ writeVIntWithInt:bitsPerDocBase];
  OrgApacheLuceneUtilPackedPackedInts_Writer *writer = OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_(self->fieldsIndexOut_, JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED), self->blockChunks_, bitsPerDocBase, 1);
  docBase = 0;
  for (jint i = 0; i < self->blockChunks_; ++i) {
    jlong delta = docBase - avgChunkDocs * i;
    JreAssert((OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(OrgApacheLuceneUtilBitUtil_zigZagEncodeWithLong_(delta)) <= [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) bitsPerValue]), (@"org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter.java:139 condition failed: assert PackedInts.bitsRequired(zigZagEncode(delta)) <= writer.bitsPerValue();"));
    [writer addWithLong:OrgApacheLuceneUtilBitUtil_zigZagEncodeWithLong_(delta)];
    docBase += IOSIntArray_Get(nil_chk(self->docBaseDeltas_), i);
  }
  [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) finish];
  [self->fieldsIndexOut_ writeVLongWithLong:self->firstStartPointer_];
  jlong avgChunkSize;
  if (self->blockChunks_ == 1) {
    avgChunkSize = 0;
  }
  else {
    avgChunkSize = (self->maxStartPointer_ - self->firstStartPointer_) / (self->blockChunks_ - 1);
  }
  [self->fieldsIndexOut_ writeVLongWithLong:avgChunkSize];
  jlong startPointer = 0;
  maxDelta = 0;
  for (jint i = 0; i < self->blockChunks_; ++i) {
    startPointer += IOSLongArray_Get(nil_chk(self->startPointerDeltas_), i);
    jlong delta = startPointer - avgChunkSize * i;
    maxDelta |= OrgApacheLuceneUtilBitUtil_zigZagEncodeWithLong_(delta);
  }
  jint bitsPerStartPointer = OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(maxDelta);
  [self->fieldsIndexOut_ writeVIntWithInt:bitsPerStartPointer];
  writer = OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_(self->fieldsIndexOut_, JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED), self->blockChunks_, bitsPerStartPointer, 1);
  startPointer = 0;
  for (jint i = 0; i < self->blockChunks_; ++i) {
    startPointer += IOSLongArray_Get(nil_chk(self->startPointerDeltas_), i);
    jlong delta = startPointer - avgChunkSize * i;
    JreAssert((OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(OrgApacheLuceneUtilBitUtil_zigZagEncodeWithLong_(delta)) <= [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) bitsPerValue]), (@"org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter.java:170 condition failed: assert PackedInts.bitsRequired(zigZagEncode(delta)) <= writer.bitsPerValue();"));
    [writer addWithLong:OrgApacheLuceneUtilBitUtil_zigZagEncodeWithLong_(delta)];
  }
  [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) finish];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter)
