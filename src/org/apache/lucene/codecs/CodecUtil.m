//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/CodecUtil.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/Throwable.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "org/apache/lucene/index/IndexFormatTooNewException.h"
#include "org/apache/lucene/index/IndexFormatTooOldException.h"
#include "org/apache/lucene/store/BufferedChecksumIndexInput.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/lukhnos/portmobile/charset/StandardCharsets.h"

@interface OrgApacheLuceneCodecsCodecUtil ()

- (instancetype)init;

+ (void)validateFooterWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg;

@end

__attribute__((unused)) static void OrgApacheLuceneCodecsCodecUtil_init(OrgApacheLuceneCodecsCodecUtil *self);

__attribute__((unused)) static OrgApacheLuceneCodecsCodecUtil *new_OrgApacheLuceneCodecsCodecUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgApacheLuceneCodecsCodecUtil_validateFooterWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneStoreIndexInput *inArg);

@implementation OrgApacheLuceneCodecsCodecUtil

- (instancetype)init {
  OrgApacheLuceneCodecsCodecUtil_init(self);
  return self;
}

+ (void)writeHeaderWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                         withNSString:(NSString *)codec
                                              withInt:(jint)version_ {
  OrgApacheLuceneCodecsCodecUtil_writeHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_(outArg, codec, version_);
}

+ (void)writeIndexHeaderWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                              withNSString:(NSString *)codec
                                                   withInt:(jint)version_
                                             withByteArray:(IOSByteArray *)id_
                                              withNSString:(NSString *)suffix {
  OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(outArg, codec, version_, id_, suffix);
}

+ (jint)headerLengthWithNSString:(NSString *)codec {
  return OrgApacheLuceneCodecsCodecUtil_headerLengthWithNSString_(codec);
}

+ (jint)indexHeaderLengthWithNSString:(NSString *)codec
                         withNSString:(NSString *)suffix {
  return OrgApacheLuceneCodecsCodecUtil_indexHeaderLengthWithNSString_withNSString_(codec, suffix);
}

+ (jint)checkHeaderWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                                        withNSString:(NSString *)codec
                                             withInt:(jint)minVersion
                                             withInt:(jint)maxVersion {
  return OrgApacheLuceneCodecsCodecUtil_checkHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(inArg, codec, minVersion, maxVersion);
}

+ (jint)checkHeaderNoMagicWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                                               withNSString:(NSString *)codec
                                                    withInt:(jint)minVersion
                                                    withInt:(jint)maxVersion {
  return OrgApacheLuceneCodecsCodecUtil_checkHeaderNoMagicWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(inArg, codec, minVersion, maxVersion);
}

+ (jint)checkIndexHeaderWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                                             withNSString:(NSString *)codec
                                                  withInt:(jint)minVersion
                                                  withInt:(jint)maxVersion
                                            withByteArray:(IOSByteArray *)expectedID
                                             withNSString:(NSString *)expectedSuffix {
  return OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_withByteArray_withNSString_(inArg, codec, minVersion, maxVersion, expectedID, expectedSuffix);
}

+ (IOSByteArray *)checkIndexHeaderIDWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                                                        withByteArray:(IOSByteArray *)expectedID {
  return OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderIDWithOrgApacheLuceneStoreDataInput_withByteArray_(inArg, expectedID);
}

+ (NSString *)checkIndexHeaderSuffixWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                                                         withNSString:(NSString *)expectedSuffix {
  return OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderSuffixWithOrgApacheLuceneStoreDataInput_withNSString_(inArg, expectedSuffix);
}

+ (void)writeFooterWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg {
  OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(outArg);
}

+ (jint)footerLength {
  return OrgApacheLuceneCodecsCodecUtil_footerLength();
}

+ (jlong)checkFooterWithOrgApacheLuceneStoreChecksumIndexInput:(OrgApacheLuceneStoreChecksumIndexInput *)inArg {
  return OrgApacheLuceneCodecsCodecUtil_checkFooterWithOrgApacheLuceneStoreChecksumIndexInput_(inArg);
}

+ (void)checkFooterWithOrgApacheLuceneStoreChecksumIndexInput:(OrgApacheLuceneStoreChecksumIndexInput *)inArg
                                        withJavaLangThrowable:(JavaLangThrowable *)priorException {
  OrgApacheLuceneCodecsCodecUtil_checkFooterWithOrgApacheLuceneStoreChecksumIndexInput_withJavaLangThrowable_(inArg, priorException);
}

+ (jlong)retrieveChecksumWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg {
  return OrgApacheLuceneCodecsCodecUtil_retrieveChecksumWithOrgApacheLuceneStoreIndexInput_(inArg);
}

+ (void)validateFooterWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg {
  OrgApacheLuceneCodecsCodecUtil_validateFooterWithOrgApacheLuceneStoreIndexInput_(inArg);
}

+ (void)checkEOFWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg {
  OrgApacheLuceneCodecsCodecUtil_checkEOFWithOrgApacheLuceneStoreIndexInput_(inArg);
}

+ (jlong)checksumEntireFileWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)input {
  return OrgApacheLuceneCodecsCodecUtil_checksumEntireFileWithOrgApacheLuceneStoreIndexInput_(input);
}

+ (jlong)readCRCWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)input {
  return OrgApacheLuceneCodecsCodecUtil_readCRCWithOrgApacheLuceneStoreIndexInput_(input);
}

+ (void)writeCRCWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)output {
  OrgApacheLuceneCodecsCodecUtil_writeCRCWithOrgApacheLuceneStoreIndexOutput_(output);
}

+ (IOSObjectArray *)__annotations_checkEOFWithOrgApacheLuceneStoreIndexInput_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CodecUtil", NULL, 0x2, NULL, NULL },
    { "writeHeaderWithOrgApacheLuceneStoreDataOutput:withNSString:withInt:", "writeHeader", "V", 0x9, "Ljava.io.IOException;", NULL },
    { "writeIndexHeaderWithOrgApacheLuceneStoreDataOutput:withNSString:withInt:withByteArray:withNSString:", "writeIndexHeader", "V", 0x9, "Ljava.io.IOException;", NULL },
    { "headerLengthWithNSString:", "headerLength", "I", 0x9, NULL, NULL },
    { "indexHeaderLengthWithNSString:withNSString:", "indexHeaderLength", "I", 0x9, NULL, NULL },
    { "checkHeaderWithOrgApacheLuceneStoreDataInput:withNSString:withInt:withInt:", "checkHeader", "I", 0x9, "Ljava.io.IOException;", NULL },
    { "checkHeaderNoMagicWithOrgApacheLuceneStoreDataInput:withNSString:withInt:withInt:", "checkHeaderNoMagic", "I", 0x9, "Ljava.io.IOException;", NULL },
    { "checkIndexHeaderWithOrgApacheLuceneStoreDataInput:withNSString:withInt:withInt:withByteArray:withNSString:", "checkIndexHeader", "I", 0x9, "Ljava.io.IOException;", NULL },
    { "checkIndexHeaderIDWithOrgApacheLuceneStoreDataInput:withByteArray:", "checkIndexHeaderID", "[B", 0x9, "Ljava.io.IOException;", NULL },
    { "checkIndexHeaderSuffixWithOrgApacheLuceneStoreDataInput:withNSString:", "checkIndexHeaderSuffix", "Ljava.lang.String;", 0x9, "Ljava.io.IOException;", NULL },
    { "writeFooterWithOrgApacheLuceneStoreIndexOutput:", "writeFooter", "V", 0x9, "Ljava.io.IOException;", NULL },
    { "footerLength", NULL, "I", 0x9, NULL, NULL },
    { "checkFooterWithOrgApacheLuceneStoreChecksumIndexInput:", "checkFooter", "J", 0x9, "Ljava.io.IOException;", NULL },
    { "checkFooterWithOrgApacheLuceneStoreChecksumIndexInput:withJavaLangThrowable:", "checkFooter", "V", 0x9, "Ljava.io.IOException;", NULL },
    { "retrieveChecksumWithOrgApacheLuceneStoreIndexInput:", "retrieveChecksum", "J", 0x9, "Ljava.io.IOException;", NULL },
    { "validateFooterWithOrgApacheLuceneStoreIndexInput:", "validateFooter", "V", 0xa, "Ljava.io.IOException;", NULL },
    { "checkEOFWithOrgApacheLuceneStoreIndexInput:", "checkEOF", "V", 0x9, "Ljava.io.IOException;", NULL },
    { "checksumEntireFileWithOrgApacheLuceneStoreIndexInput:", "checksumEntireFile", "J", 0x9, "Ljava.io.IOException;", NULL },
    { "readCRCWithOrgApacheLuceneStoreIndexInput:", "readCRC", "J", 0x9, "Ljava.io.IOException;", NULL },
    { "writeCRCWithOrgApacheLuceneStoreIndexOutput:", "writeCRC", "V", 0x9, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CODEC_MAGIC", "CODEC_MAGIC", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsCodecUtil_CODEC_MAGIC },
    { "FOOTER_MAGIC", "FOOTER_MAGIC", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsCodecUtil_FOOTER_MAGIC },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCodecUtil = { 2, "CodecUtil", "org.apache.lucene.codecs", NULL, 0x11, 20, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsCodecUtil;
}

@end

void OrgApacheLuceneCodecsCodecUtil_init(OrgApacheLuceneCodecsCodecUtil *self) {
  NSObject_init(self);
}

OrgApacheLuceneCodecsCodecUtil *new_OrgApacheLuceneCodecsCodecUtil_init() {
  OrgApacheLuceneCodecsCodecUtil *self = [OrgApacheLuceneCodecsCodecUtil alloc];
  OrgApacheLuceneCodecsCodecUtil_init(self);
  return self;
}

void OrgApacheLuceneCodecsCodecUtil_writeHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_(OrgApacheLuceneStoreDataOutput *outArg, NSString *codec, jint version_) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  OrgApacheLuceneUtilBytesRef *bytes = [new_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(codec) autorelease];
  if (bytes->length_ != ((jint) [((NSString *) nil_chk(codec)) length]) || bytes->length_ >= 128) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"codec must be simple ASCII, less than 128 characters in length [got ", codec, ']')) autorelease];
  }
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeIntWithInt:OrgApacheLuceneCodecsCodecUtil_CODEC_MAGIC];
  [outArg writeStringWithNSString:codec];
  [outArg writeIntWithInt:version_];
}

void OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(OrgApacheLuceneStoreDataOutput *outArg, NSString *codec, jint version_, IOSByteArray *id_, NSString *suffix) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  if (((IOSByteArray *) nil_chk(id_))->size_ != OrgApacheLuceneUtilStringHelper_ID_LENGTH) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid id: ", OrgApacheLuceneUtilStringHelper_idToStringWithByteArray_(id_))) autorelease];
  }
  OrgApacheLuceneCodecsCodecUtil_writeHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_(outArg, codec, version_);
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeBytesWithByteArray:id_ withInt:0 withInt:id_->size_];
  OrgApacheLuceneUtilBytesRef *suffixBytes = [new_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(suffix) autorelease];
  if (suffixBytes->length_ != ((jint) [((NSString *) nil_chk(suffix)) length]) || suffixBytes->length_ >= 256) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"codec must be simple ASCII, less than 256 characters in length [got ", suffix, ']')) autorelease];
  }
  [outArg writeByteWithByte:(jbyte) suffixBytes->length_];
  [outArg writeBytesWithByteArray:suffixBytes->bytes_ withInt:suffixBytes->offset_ withInt:suffixBytes->length_];
}

jint OrgApacheLuceneCodecsCodecUtil_headerLengthWithNSString_(NSString *codec) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  return 9 + ((jint) [((NSString *) nil_chk(codec)) length]);
}

jint OrgApacheLuceneCodecsCodecUtil_indexHeaderLengthWithNSString_withNSString_(NSString *codec, NSString *suffix) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  return OrgApacheLuceneCodecsCodecUtil_headerLengthWithNSString_(codec) + OrgApacheLuceneUtilStringHelper_ID_LENGTH + 1 + ((jint) [((NSString *) nil_chk(suffix)) length]);
}

jint OrgApacheLuceneCodecsCodecUtil_checkHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(OrgApacheLuceneStoreDataInput *inArg, NSString *codec, jint minVersion, jint maxVersion) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  jint actualHeader = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readInt];
  if (actualHeader != OrgApacheLuceneCodecsCodecUtil_CODEC_MAGIC) {
    @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I$I", @"codec header mismatch: actual header=", actualHeader, @" vs expected header=", OrgApacheLuceneCodecsCodecUtil_CODEC_MAGIC), inArg) autorelease];
  }
  return OrgApacheLuceneCodecsCodecUtil_checkHeaderNoMagicWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(inArg, codec, minVersion, maxVersion);
}

jint OrgApacheLuceneCodecsCodecUtil_checkHeaderNoMagicWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(OrgApacheLuceneStoreDataInput *inArg, NSString *codec, jint minVersion, jint maxVersion) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  NSString *actualCodec = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readString];
  if (![((NSString *) nil_chk(actualCodec)) isEqual:codec]) {
    @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$$$$", @"codec mismatch: actual codec=", actualCodec, @" vs expected codec=", codec), inArg) autorelease];
  }
  jint actualVersion = [inArg readInt];
  if (actualVersion < minVersion) {
    @throw [new_OrgApacheLuceneIndexIndexFormatTooOldException_initWithOrgApacheLuceneStoreDataInput_withInt_withInt_withInt_(inArg, actualVersion, minVersion, maxVersion) autorelease];
  }
  if (actualVersion > maxVersion) {
    @throw [new_OrgApacheLuceneIndexIndexFormatTooNewException_initWithOrgApacheLuceneStoreDataInput_withInt_withInt_withInt_(inArg, actualVersion, minVersion, maxVersion) autorelease];
  }
  return actualVersion;
}

jint OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_withByteArray_withNSString_(OrgApacheLuceneStoreDataInput *inArg, NSString *codec, jint minVersion, jint maxVersion, IOSByteArray *expectedID, NSString *expectedSuffix) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  jint version_ = OrgApacheLuceneCodecsCodecUtil_checkHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(inArg, codec, minVersion, maxVersion);
  OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderIDWithOrgApacheLuceneStoreDataInput_withByteArray_(inArg, expectedID);
  OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderSuffixWithOrgApacheLuceneStoreDataInput_withNSString_(inArg, expectedSuffix);
  return version_;
}

IOSByteArray *OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderIDWithOrgApacheLuceneStoreDataInput_withByteArray_(OrgApacheLuceneStoreDataInput *inArg, IOSByteArray *expectedID) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  IOSByteArray *id_ = [IOSByteArray arrayWithLength:OrgApacheLuceneUtilStringHelper_ID_LENGTH];
  [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readBytesWithByteArray:id_ withInt:0 withInt:id_->size_];
  if (!JavaUtilArrays_equalsWithByteArray_withByteArray_(id_, expectedID)) {
    @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$$$$", @"file mismatch, expected id=", OrgApacheLuceneUtilStringHelper_idToStringWithByteArray_(expectedID), @", got=", OrgApacheLuceneUtilStringHelper_idToStringWithByteArray_(id_)), inArg) autorelease];
  }
  return id_;
}

NSString *OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderSuffixWithOrgApacheLuceneStoreDataInput_withNSString_(OrgApacheLuceneStoreDataInput *inArg, NSString *expectedSuffix) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  jint suffixLength = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readByte] & (jint) 0xFF;
  IOSByteArray *suffixBytes = [IOSByteArray arrayWithLength:suffixLength];
  [inArg readBytesWithByteArray:suffixBytes withInt:0 withInt:suffixBytes->size_];
  NSString *suffix = [NSString stringWithBytes:suffixBytes offset:0 length:suffixBytes->size_ charset:JreLoadStatic(OrgLukhnosPortmobileCharsetStandardCharsets, UTF_8_)];
  if (![suffix isEqual:expectedSuffix]) {
    @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$$$$", @"file mismatch, expected suffix=", expectedSuffix, @", got=", suffix), inArg) autorelease];
  }
  return suffix;
}

void OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(OrgApacheLuceneStoreIndexOutput *outArg) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(outArg)) writeIntWithInt:OrgApacheLuceneCodecsCodecUtil_FOOTER_MAGIC];
  [outArg writeIntWithInt:0];
  OrgApacheLuceneCodecsCodecUtil_writeCRCWithOrgApacheLuceneStoreIndexOutput_(outArg);
}

jint OrgApacheLuceneCodecsCodecUtil_footerLength() {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  return 16;
}

jlong OrgApacheLuceneCodecsCodecUtil_checkFooterWithOrgApacheLuceneStoreChecksumIndexInput_(OrgApacheLuceneStoreChecksumIndexInput *inArg) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  OrgApacheLuceneCodecsCodecUtil_validateFooterWithOrgApacheLuceneStoreIndexInput_(inArg);
  jlong actualChecksum = [((OrgApacheLuceneStoreChecksumIndexInput *) nil_chk(inArg)) getChecksum];
  jlong expectedChecksum = OrgApacheLuceneCodecsCodecUtil_readCRCWithOrgApacheLuceneStoreIndexInput_(inArg);
  if (expectedChecksum != actualChecksum) {
    @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$$$$", @"checksum failed (hardware problem?) : expected=", JavaLangLong_toHexStringWithLong_(expectedChecksum), @" actual=", JavaLangLong_toHexStringWithLong_(actualChecksum)), inArg) autorelease];
  }
  return actualChecksum;
}

void OrgApacheLuceneCodecsCodecUtil_checkFooterWithOrgApacheLuceneStoreChecksumIndexInput_withJavaLangThrowable_(OrgApacheLuceneStoreChecksumIndexInput *inArg, JavaLangThrowable *priorException) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  if (priorException == nil) {
    OrgApacheLuceneCodecsCodecUtil_checkFooterWithOrgApacheLuceneStoreChecksumIndexInput_(inArg);
  }
  else {
    @try {
      jlong remaining = [((OrgApacheLuceneStoreChecksumIndexInput *) nil_chk(inArg)) length] - [inArg getFilePointer];
      if (remaining < OrgApacheLuceneCodecsCodecUtil_footerLength()) {
        [priorException addSuppressedWithJavaLangThrowable:[new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$J$", @"checksum status indeterminate: remaining=", remaining, @", please run checkindex for more details"), inArg) autorelease]];
      }
      else {
        [inArg skipBytesWithLong:remaining - OrgApacheLuceneCodecsCodecUtil_footerLength()];
        @try {
          jlong checksum = OrgApacheLuceneCodecsCodecUtil_checkFooterWithOrgApacheLuceneStoreChecksumIndexInput_(inArg);
          [priorException addSuppressedWithJavaLangThrowable:[new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$$$", @"checksum passed (", JavaLangLong_toHexStringWithLong_(checksum), @"). possibly transient resource issue, or a Lucene or JVM bug"), inArg) autorelease]];
        }
        @catch (OrgApacheLuceneIndexCorruptIndexException *t) {
          [priorException addSuppressedWithJavaLangThrowable:t];
        }
      }
    }
    @catch (JavaLangThrowable *t) {
      [priorException addSuppressedWithJavaLangThrowable:[new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_withJavaLangThrowable_(@"checksum status indeterminate: unexpected exception", inArg, t) autorelease]];
    }
    OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(priorException);
  }
}

jlong OrgApacheLuceneCodecsCodecUtil_retrieveChecksumWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneStoreIndexInput *inArg) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  [inArg seekWithLong:[((OrgApacheLuceneStoreIndexInput *) nil_chk(inArg)) length] - OrgApacheLuceneCodecsCodecUtil_footerLength()];
  OrgApacheLuceneCodecsCodecUtil_validateFooterWithOrgApacheLuceneStoreIndexInput_(inArg);
  return OrgApacheLuceneCodecsCodecUtil_readCRCWithOrgApacheLuceneStoreIndexInput_(inArg);
}

void OrgApacheLuceneCodecsCodecUtil_validateFooterWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneStoreIndexInput *inArg) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  jlong remaining = [((OrgApacheLuceneStoreIndexInput *) nil_chk(inArg)) length] - [inArg getFilePointer];
  jlong expected = OrgApacheLuceneCodecsCodecUtil_footerLength();
  if (remaining < expected) {
    @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$J$J", @"misplaced codec footer (file truncated?): remaining=", remaining, @", expected=", expected), inArg) autorelease];
  }
  else if (remaining > expected) {
    @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$J$J", @"misplaced codec footer (file extended?): remaining=", remaining, @", expected=", expected), inArg) autorelease];
  }
  jint magic = [inArg readInt];
  if (magic != OrgApacheLuceneCodecsCodecUtil_FOOTER_MAGIC) {
    @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I$I", @"codec footer mismatch (file truncated?): actual footer=", magic, @" vs expected footer=", OrgApacheLuceneCodecsCodecUtil_FOOTER_MAGIC), inArg) autorelease];
  }
  jint algorithmID = [inArg readInt];
  if (algorithmID != 0) {
    @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I", @"codec footer mismatch: unknown algorithmID: ", algorithmID), inArg) autorelease];
  }
}

void OrgApacheLuceneCodecsCodecUtil_checkEOFWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneStoreIndexInput *inArg) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  if ([((OrgApacheLuceneStoreIndexInput *) nil_chk(inArg)) getFilePointer] != [inArg length]) {
    @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$J$J", @"did not read all bytes from file: read ", [inArg getFilePointer], @" vs size ", [inArg length]), inArg) autorelease];
  }
}

jlong OrgApacheLuceneCodecsCodecUtil_checksumEntireFileWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneStoreIndexInput *input) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  OrgApacheLuceneStoreIndexInput *clone = [((OrgApacheLuceneStoreIndexInput *) nil_chk(input)) clone];
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(clone)) seekWithLong:0];
  OrgApacheLuceneStoreChecksumIndexInput *in = [new_OrgApacheLuceneStoreBufferedChecksumIndexInput_initWithOrgApacheLuceneStoreIndexInput_(clone) autorelease];
  JreAssert(([in getFilePointer] == 0), (@"org/apache/lucene/codecs/CodecUtil.java:447 condition failed: assert in.getFilePointer() == 0;"));
  [in seekWithLong:[in length] - OrgApacheLuceneCodecsCodecUtil_footerLength()];
  return OrgApacheLuceneCodecsCodecUtil_checkFooterWithOrgApacheLuceneStoreChecksumIndexInput_(in);
}

jlong OrgApacheLuceneCodecsCodecUtil_readCRCWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneStoreIndexInput *input) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  jlong value = [((OrgApacheLuceneStoreIndexInput *) nil_chk(input)) readLong];
  if ((value & (jlong) 0xFFFFFFFF00000000LL) != 0) {
    @throw [new_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$J", @"Illegal CRC-32 checksum: ", value), input) autorelease];
  }
  return value;
}

void OrgApacheLuceneCodecsCodecUtil_writeCRCWithOrgApacheLuceneStoreIndexOutput_(OrgApacheLuceneStoreIndexOutput *output) {
  OrgApacheLuceneCodecsCodecUtil_initialize();
  jlong value = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(output)) getChecksum];
  if ((value & (jlong) 0xFFFFFFFF00000000LL) != 0) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$J$@C", @"Illegal CRC-32 checksum: ", value, @" (resource=", output, ')')) autorelease];
  }
  [output writeLongWithLong:value];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCodecUtil)
