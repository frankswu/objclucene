//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/lucene50/ForUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/codecs/lucene50/ForUtil.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

#define OrgApacheLuceneCodecsLucene50ForUtil_ALL_VALUES_EQUAL 0

@interface OrgApacheLuceneCodecsLucene50ForUtil () {
 @public
  IOSIntArray *encodedSizes_;
  IOSObjectArray *encoders_;
  IOSObjectArray *decoders_;
  IOSIntArray *iterations_;
}

+ (jint)computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder:(id<OrgApacheLuceneUtilPackedPackedInts_Decoder>)decoder;

+ (jint)encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum:(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *)format
                                                              withInt:(jint)packedIntsVersion
                                                              withInt:(jint)bitsPerValue;

+ (jboolean)isAllEqualWithIntArray:(IOSIntArray *)data;

+ (jint)bitsRequiredWithIntArray:(IOSIntArray *)data;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50ForUtil, encodedSizes_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50ForUtil, encoders_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50ForUtil, decoders_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50ForUtil, iterations_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneCodecsLucene50ForUtil, ALL_VALUES_EQUAL, jint)

__attribute__((unused)) static jint OrgApacheLuceneCodecsLucene50ForUtil_computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder_(id<OrgApacheLuceneUtilPackedPackedInts_Decoder> decoder);

__attribute__((unused)) static jint OrgApacheLuceneCodecsLucene50ForUtil_encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format, jint packedIntsVersion, jint bitsPerValue);

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsLucene50ForUtil_isAllEqualWithIntArray_(IOSIntArray *data);

__attribute__((unused)) static jint OrgApacheLuceneCodecsLucene50ForUtil_bitsRequiredWithIntArray_(IOSIntArray *data);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsLucene50ForUtil)

jint OrgApacheLuceneCodecsLucene50ForUtil_MAX_DATA_SIZE_;

@implementation OrgApacheLuceneCodecsLucene50ForUtil

+ (jint)computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder:(id<OrgApacheLuceneUtilPackedPackedInts_Decoder>)decoder {
  return OrgApacheLuceneCodecsLucene50ForUtil_computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder_(decoder);
}

+ (jint)encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum:(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *)format
                                                              withInt:(jint)packedIntsVersion
                                                              withInt:(jint)bitsPerValue {
  return OrgApacheLuceneCodecsLucene50ForUtil_encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_(format, packedIntsVersion, bitsPerValue);
}

- (instancetype)initWithFloat:(jfloat)acceptableOverheadRatio
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  OrgApacheLuceneCodecsLucene50ForUtil_initWithFloat_withOrgApacheLuceneStoreDataOutput_(self, acceptableOverheadRatio, outArg);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  OrgApacheLuceneCodecsLucene50ForUtil_initWithOrgApacheLuceneStoreDataInput_(self, inArg);
  return self;
}

- (void)writeBlockWithIntArray:(IOSIntArray *)data
                 withByteArray:(IOSByteArray *)encoded
withOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg {
  if (OrgApacheLuceneCodecsLucene50ForUtil_isAllEqualWithIntArray_(data)) {
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) OrgApacheLuceneCodecsLucene50ForUtil_ALL_VALUES_EQUAL];
    [outArg writeVIntWithInt:IOSIntArray_Get(nil_chk(data), 0)];
    return;
  }
  jint numBits = OrgApacheLuceneCodecsLucene50ForUtil_bitsRequiredWithIntArray_(data);
  JreAssert((numBits > 0 && numBits <= 32), (JavaLangInteger_valueOfWithInt_(numBits)));
  id<OrgApacheLuceneUtilPackedPackedInts_Encoder> encoder = IOSObjectArray_Get(nil_chk(encoders_), numBits);
  jint iters = IOSIntArray_Get(nil_chk(iterations_), numBits);
  JreAssert((iters * [((id<OrgApacheLuceneUtilPackedPackedInts_Encoder>) nil_chk(encoder)) byteValueCount] >= OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE), (@"org/apache/lucene/codecs/lucene50/ForUtil.java:168 condition failed: assert iters * encoder.byteValueCount() >= BLOCK_SIZE;"));
  jint encodedSize = IOSIntArray_Get(nil_chk(encodedSizes_), numBits);
  JreAssert((iters * [encoder byteBlockCount] >= encodedSize), (@"org/apache/lucene/codecs/lucene50/ForUtil.java:170 condition failed: assert iters * encoder.byteBlockCount() >= encodedSize;"));
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) numBits];
  [encoder encodeWithIntArray:data withInt:0 withByteArray:encoded withInt:0 withInt:iters];
  [outArg writeBytesWithByteArray:encoded withInt:encodedSize];
}

- (void)readBlockWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg
                                      withByteArray:(IOSByteArray *)encoded
                                       withIntArray:(IOSIntArray *)decoded {
  jint numBits = [((OrgApacheLuceneStoreIndexInput *) nil_chk(inArg)) readByte];
  JreAssert((numBits <= 32), (JavaLangInteger_valueOfWithInt_(numBits)));
  if (numBits == OrgApacheLuceneCodecsLucene50ForUtil_ALL_VALUES_EQUAL) {
    jint value = [inArg readVInt];
    JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(decoded, 0, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE, value);
    return;
  }
  jint encodedSize = IOSIntArray_Get(nil_chk(encodedSizes_), numBits);
  [inArg readBytesWithByteArray:encoded withInt:0 withInt:encodedSize];
  id<OrgApacheLuceneUtilPackedPackedInts_Decoder> decoder = IOSObjectArray_Get(nil_chk(decoders_), numBits);
  jint iters = IOSIntArray_Get(nil_chk(iterations_), numBits);
  JreAssert((iters * [((id<OrgApacheLuceneUtilPackedPackedInts_Decoder>) nil_chk(decoder)) byteValueCount] >= OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE), (@"org/apache/lucene/codecs/lucene50/ForUtil.java:201 condition failed: assert iters * decoder.byteValueCount() >= BLOCK_SIZE;"));
  [decoder decodeWithByteArray:encoded withInt:0 withIntArray:decoded withInt:0 withInt:iters];
}

- (void)skipBlockWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg {
  jint numBits = [((OrgApacheLuceneStoreIndexInput *) nil_chk(inArg)) readByte];
  if (numBits == OrgApacheLuceneCodecsLucene50ForUtil_ALL_VALUES_EQUAL) {
    [inArg readVInt];
    return;
  }
  JreAssert((numBits > 0 && numBits <= 32), (JavaLangInteger_valueOfWithInt_(numBits)));
  jint encodedSize = IOSIntArray_Get(nil_chk(encodedSizes_), numBits);
  [inArg seekWithLong:[inArg getFilePointer] + encodedSize];
}

+ (jboolean)isAllEqualWithIntArray:(IOSIntArray *)data {
  return OrgApacheLuceneCodecsLucene50ForUtil_isAllEqualWithIntArray_(data);
}

+ (jint)bitsRequiredWithIntArray:(IOSIntArray *)data {
  return OrgApacheLuceneCodecsLucene50ForUtil_bitsRequiredWithIntArray_(data);
}

- (void)dealloc {
  RELEASE_(encodedSizes_);
  RELEASE_(encoders_);
  RELEASE_(decoders_);
  RELEASE_(iterations_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsLucene50ForUtil class]) {
    {
      jint maxDataSize = 0;
      for (jint version_ = OrgApacheLuceneUtilPackedPackedInts_VERSION_START; version_ <= OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT; version_++) {
        {
          IOSObjectArray *a__ = OrgApacheLuceneUtilPackedPackedInts_FormatEnum_values();
          OrgApacheLuceneUtilPackedPackedInts_FormatEnum * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          OrgApacheLuceneUtilPackedPackedInts_FormatEnum * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format = *b__++;
            for (jint bpv = 1; bpv <= 32; ++bpv) {
              if (![((OrgApacheLuceneUtilPackedPackedInts_FormatEnum *) nil_chk(format)) isSupportedWithInt:bpv]) {
                continue;
              }
              id<OrgApacheLuceneUtilPackedPackedInts_Decoder> decoder = OrgApacheLuceneUtilPackedPackedInts_getDecoderWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_(format, version_, bpv);
              jint iterations = OrgApacheLuceneCodecsLucene50ForUtil_computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder_(decoder);
              maxDataSize = JavaLangMath_maxWithInt_withInt_(maxDataSize, iterations * [((id<OrgApacheLuceneUtilPackedPackedInts_Decoder>) nil_chk(decoder)) byteValueCount]);
            }
          }
        }
      }
      OrgApacheLuceneCodecsLucene50ForUtil_MAX_DATA_SIZE_ = maxDataSize;
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsLucene50ForUtil)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder:", "computeIterations", "I", 0xa, NULL, NULL },
    { "encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum:withInt:withInt:", "encodedSize", "I", 0xa, NULL, NULL },
    { "initWithFloat:withOrgApacheLuceneStoreDataOutput:", "ForUtil", NULL, 0x0, "Ljava.io.IOException;", NULL },
    { "initWithOrgApacheLuceneStoreDataInput:", "ForUtil", NULL, 0x0, "Ljava.io.IOException;", NULL },
    { "writeBlockWithIntArray:withByteArray:withOrgApacheLuceneStoreIndexOutput:", "writeBlock", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "readBlockWithOrgApacheLuceneStoreIndexInput:withByteArray:withIntArray:", "readBlock", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "skipBlockWithOrgApacheLuceneStoreIndexInput:", "skipBlock", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "isAllEqualWithIntArray:", "isAllEqual", "Z", 0xa, NULL, NULL },
    { "bitsRequiredWithIntArray:", "bitsRequired", "I", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ALL_VALUES_EQUAL", "ALL_VALUES_EQUAL", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsLucene50ForUtil_ALL_VALUES_EQUAL },
    { "MAX_ENCODED_SIZE", "MAX_ENCODED_SIZE", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneCodecsLucene50ForUtil_MAX_ENCODED_SIZE },
    { "MAX_DATA_SIZE_", NULL, 0x18, "I", &OrgApacheLuceneCodecsLucene50ForUtil_MAX_DATA_SIZE_, NULL, .constantValue.asLong = 0 },
    { "encodedSizes_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "encoders_", NULL, 0x12, "[Lorg.apache.lucene.util.packed.PackedInts$Encoder;", NULL, NULL, .constantValue.asLong = 0 },
    { "decoders_", NULL, 0x12, "[Lorg.apache.lucene.util.packed.PackedInts$Decoder;", NULL, NULL, .constantValue.asLong = 0 },
    { "iterations_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsLucene50ForUtil = { 2, "ForUtil", "org.apache.lucene.codecs.lucene50", NULL, 0x10, 9, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneCodecsLucene50ForUtil;
}

@end

jint OrgApacheLuceneCodecsLucene50ForUtil_computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder_(id<OrgApacheLuceneUtilPackedPackedInts_Decoder> decoder) {
  OrgApacheLuceneCodecsLucene50ForUtil_initialize();
  return JreFpToInt(JavaLangMath_ceilWithDouble_((jfloat) OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE / [((id<OrgApacheLuceneUtilPackedPackedInts_Decoder>) nil_chk(decoder)) byteValueCount]));
}

jint OrgApacheLuceneCodecsLucene50ForUtil_encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format, jint packedIntsVersion, jint bitsPerValue) {
  OrgApacheLuceneCodecsLucene50ForUtil_initialize();
  jlong byteCount = [((OrgApacheLuceneUtilPackedPackedInts_FormatEnum *) nil_chk(format)) byteCountWithInt:packedIntsVersion withInt:OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE withInt:bitsPerValue];
  JreAssert((byteCount >= 0 && byteCount <= JavaLangInteger_MAX_VALUE), (JavaLangLong_valueOfWithLong_(byteCount)));
  return (jint) byteCount;
}

void OrgApacheLuceneCodecsLucene50ForUtil_initWithFloat_withOrgApacheLuceneStoreDataOutput_(OrgApacheLuceneCodecsLucene50ForUtil *self, jfloat acceptableOverheadRatio, OrgApacheLuceneStoreDataOutput *outArg) {
  NSObject_init(self);
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVIntWithInt:OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT];
  JreStrongAssignAndConsume(&self->encodedSizes_, [IOSIntArray newArrayWithLength:33]);
  JreStrongAssignAndConsume(&self->encoders_, [IOSObjectArray newArrayWithLength:33 type:OrgApacheLuceneUtilPackedPackedInts_Encoder_class_()]);
  JreStrongAssignAndConsume(&self->decoders_, [IOSObjectArray newArrayWithLength:33 type:OrgApacheLuceneUtilPackedPackedInts_Decoder_class_()]);
  JreStrongAssignAndConsume(&self->iterations_, [IOSIntArray newArrayWithLength:33]);
  for (jint bpv = 1; bpv <= 32; ++bpv) {
    OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *formatAndBits = OrgApacheLuceneUtilPackedPackedInts_fastestFormatAndBitsWithInt_withInt_withFloat_(OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE, bpv, acceptableOverheadRatio);
    JreAssert(([((OrgApacheLuceneUtilPackedPackedInts_FormatEnum *) nil_chk(((OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *) nil_chk(formatAndBits))->format_)) isSupportedWithInt:formatAndBits->bitsPerValue_]), (@"org/apache/lucene/codecs/lucene50/ForUtil.java:109 condition failed: assert formatAndBits.format.isSupported(formatAndBits.bitsPerValue);"));
    JreAssert((formatAndBits->bitsPerValue_ <= 32), (@"org/apache/lucene/codecs/lucene50/ForUtil.java:110 condition failed: assert formatAndBits.bitsPerValue <= 32;"));
    *IOSIntArray_GetRef(self->encodedSizes_, bpv) = OrgApacheLuceneCodecsLucene50ForUtil_encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_(formatAndBits->format_, OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT, formatAndBits->bitsPerValue_);
    IOSObjectArray_Set(self->encoders_, bpv, OrgApacheLuceneUtilPackedPackedInts_getEncoderWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_(formatAndBits->format_, OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT, formatAndBits->bitsPerValue_));
    IOSObjectArray_Set(self->decoders_, bpv, OrgApacheLuceneUtilPackedPackedInts_getDecoderWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_(formatAndBits->format_, OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT, formatAndBits->bitsPerValue_));
    *IOSIntArray_GetRef(self->iterations_, bpv) = OrgApacheLuceneCodecsLucene50ForUtil_computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder_(IOSObjectArray_Get(self->decoders_, bpv));
    [outArg writeVIntWithInt:(JreLShift32([formatAndBits->format_ getId], 5)) | (formatAndBits->bitsPerValue_ - 1)];
  }
}

OrgApacheLuceneCodecsLucene50ForUtil *new_OrgApacheLuceneCodecsLucene50ForUtil_initWithFloat_withOrgApacheLuceneStoreDataOutput_(jfloat acceptableOverheadRatio, OrgApacheLuceneStoreDataOutput *outArg) {
  OrgApacheLuceneCodecsLucene50ForUtil *self = [OrgApacheLuceneCodecsLucene50ForUtil alloc];
  OrgApacheLuceneCodecsLucene50ForUtil_initWithFloat_withOrgApacheLuceneStoreDataOutput_(self, acceptableOverheadRatio, outArg);
  return self;
}

void OrgApacheLuceneCodecsLucene50ForUtil_initWithOrgApacheLuceneStoreDataInput_(OrgApacheLuceneCodecsLucene50ForUtil *self, OrgApacheLuceneStoreDataInput *inArg) {
  NSObject_init(self);
  jint packedIntsVersion = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readVInt];
  OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(packedIntsVersion);
  JreStrongAssignAndConsume(&self->encodedSizes_, [IOSIntArray newArrayWithLength:33]);
  JreStrongAssignAndConsume(&self->encoders_, [IOSObjectArray newArrayWithLength:33 type:OrgApacheLuceneUtilPackedPackedInts_Encoder_class_()]);
  JreStrongAssignAndConsume(&self->decoders_, [IOSObjectArray newArrayWithLength:33 type:OrgApacheLuceneUtilPackedPackedInts_Decoder_class_()]);
  JreStrongAssignAndConsume(&self->iterations_, [IOSIntArray newArrayWithLength:33]);
  for (jint bpv = 1; bpv <= 32; ++bpv) {
    jint code = [inArg readVInt];
    jint formatId = JreURShift32(code, 5);
    jint bitsPerValue = (code & 31) + 1;
    OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format = OrgApacheLuceneUtilPackedPackedInts_FormatEnum_byIdWithInt_(formatId);
    JreAssert(([((OrgApacheLuceneUtilPackedPackedInts_FormatEnum *) nil_chk(format)) isSupportedWithInt:bitsPerValue]), (@"org/apache/lucene/codecs/lucene50/ForUtil.java:139 condition failed: assert format.isSupported(bitsPerValue);"));
    *IOSIntArray_GetRef(self->encodedSizes_, bpv) = OrgApacheLuceneCodecsLucene50ForUtil_encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_(format, packedIntsVersion, bitsPerValue);
    IOSObjectArray_Set(self->encoders_, bpv, OrgApacheLuceneUtilPackedPackedInts_getEncoderWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_(format, packedIntsVersion, bitsPerValue));
    IOSObjectArray_Set(self->decoders_, bpv, OrgApacheLuceneUtilPackedPackedInts_getDecoderWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_(format, packedIntsVersion, bitsPerValue));
    *IOSIntArray_GetRef(self->iterations_, bpv) = OrgApacheLuceneCodecsLucene50ForUtil_computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder_(IOSObjectArray_Get(self->decoders_, bpv));
  }
}

OrgApacheLuceneCodecsLucene50ForUtil *new_OrgApacheLuceneCodecsLucene50ForUtil_initWithOrgApacheLuceneStoreDataInput_(OrgApacheLuceneStoreDataInput *inArg) {
  OrgApacheLuceneCodecsLucene50ForUtil *self = [OrgApacheLuceneCodecsLucene50ForUtil alloc];
  OrgApacheLuceneCodecsLucene50ForUtil_initWithOrgApacheLuceneStoreDataInput_(self, inArg);
  return self;
}

jboolean OrgApacheLuceneCodecsLucene50ForUtil_isAllEqualWithIntArray_(IOSIntArray *data) {
  OrgApacheLuceneCodecsLucene50ForUtil_initialize();
  jint v = IOSIntArray_Get(nil_chk(data), 0);
  for (jint i = 1; i < OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE; ++i) {
    if (IOSIntArray_Get(data, i) != v) {
      return NO;
    }
  }
  return YES;
}

jint OrgApacheLuceneCodecsLucene50ForUtil_bitsRequiredWithIntArray_(IOSIntArray *data) {
  OrgApacheLuceneCodecsLucene50ForUtil_initialize();
  jlong or_ = 0;
  for (jint i = 0; i < OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE; ++i) {
    JreAssert((IOSIntArray_Get(nil_chk(data), i) >= 0), (@"org/apache/lucene/codecs/lucene50/ForUtil.java:240 condition failed: assert data[i] >= 0;"));
    or_ |= IOSIntArray_Get(data, i);
  }
  return OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(or_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsLucene50ForUtil)
