//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Hashtable.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/ResourceBundle.h"
#include "org/apache/lucene/queryparser/flexible/core/messages/QueryParserMessages.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.h"
#include "org/apache/lucene/queryparser/flexible/core/util/StringUtils.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLS.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl () {
 @public
  jboolean isLeaf_;
  JavaUtilHashtable *tags_;
  id<JavaUtilList> clauses_;
  id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> parent_;
}

- (void)setParentWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)parent;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl, tags_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl, clauses_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl, parent_, id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)

__attribute__((unused)) static void OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self, id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> child);

__attribute__((unused)) static void OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithJavaUtilList_(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self, id<JavaUtilList> children);

__attribute__((unused)) static id<JavaUtilList> OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_getChildren(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self);

__attribute__((unused)) static void OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_setParentWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self, id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> parent);

NSString *OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_PLAINTEXT_FIELD_NAME = @"_plain";

@implementation OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl

+ (NSString *)PLAINTEXT_FIELD_NAME {
  return OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_PLAINTEXT_FIELD_NAME;
}

- (void)allocate {
  if (self->clauses_ == nil) {
    JreStrongAssignAndConsume(&self->clauses_, new_JavaUtilArrayList_init());
  }
  else {
    [self->clauses_ clear];
  }
}

- (void)addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)child {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(self, child);
}

- (void)addWithJavaUtilList:(id<JavaUtilList>)children {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithJavaUtilList_(self, children);
}

- (jboolean)isLeaf {
  return self->isLeaf_;
}

- (void)setWithJavaUtilList:(id<JavaUtilList>)children {
  if ([self isLeaf] || self->clauses_ == nil) {
    JavaUtilResourceBundle *bundle = JavaUtilResourceBundle_getBundleWithNSString_(@"org.apache.lucene.queryParser.messages.QueryParserMessages");
    NSString *message = [nil_chk([((JavaUtilResourceBundle *) nil_chk(bundle)) getObjectWithNSString:@"Q0008E.NODE_ACTION_NOT_SUPPORTED"]) description];
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(message);
  }
  for (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> __strong child in nil_chk(children)) {
    [((id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>) nil_chk(child)) removeFromParent];
  }
  JavaUtilArrayList *existingChildren = create_JavaUtilArrayList_initWithJavaUtilCollection_(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_getChildren(self));
  for (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> __strong existingChild in existingChildren) {
    [((id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>) nil_chk(existingChild)) removeFromParent];
  }
  [self allocate];
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithJavaUtilList_(self, children);
}

- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)cloneTree {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *clone = (OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *) cast_chk([super clone], [OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl class]);
  ((OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *) nil_chk(clone))->isLeaf_ = self->isLeaf_;
  JreStrongAssignAndConsume(&clone->tags_, new_JavaUtilHashtable_init());
  if (self->clauses_ != nil) {
    id<JavaUtilList> localClauses = create_JavaUtilArrayList_init();
    for (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> __strong clause in nil_chk(self->clauses_)) {
      [localClauses addWithId:[((id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>) nil_chk(clause)) cloneTree]];
    }
    JreStrongAssign(&clone->clauses_, localClauses);
  }
  return clone;
}

- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)clone {
  return [self cloneTree];
}

- (void)setLeafWithBoolean:(jboolean)isLeaf {
  self->isLeaf_ = isLeaf;
}

- (id<JavaUtilList>)getChildren {
  return OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_getChildren(self);
}

- (void)setTagWithNSString:(NSString *)tagName
                    withId:(id)value {
  [((JavaUtilHashtable *) nil_chk(self->tags_)) putWithId:[((NSString *) nil_chk(tagName)) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)] withId:value];
}

- (void)unsetTagWithNSString:(NSString *)tagName {
  [((JavaUtilHashtable *) nil_chk(self->tags_)) removeWithId:[((NSString *) nil_chk(tagName)) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)]];
}

- (jboolean)containsTagWithNSString:(NSString *)tagName {
  return [((JavaUtilHashtable *) nil_chk(self->tags_)) containsKeyWithId:[((NSString *) nil_chk(tagName)) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)]];
}

- (id)getTagWithNSString:(NSString *)tagName {
  return [((JavaUtilHashtable *) nil_chk(self->tags_)) getWithId:[((NSString *) nil_chk(tagName)) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)]];
}

- (void)setParentWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)parent {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_setParentWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(self, parent);
}

- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)getParent {
  return self->parent_;
}

- (jboolean)isRoot {
  return [self getParent] == nil;
}

- (jboolean)isDefaultFieldWithJavaLangCharSequence:(id<JavaLangCharSequence>)fld {
  if (self->toQueryStringIgnoreFields_) return true;
  if (fld == nil) return true;
  if ([((NSString *) nil_chk(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_PLAINTEXT_FIELD_NAME)) isEqual:OrgApacheLuceneQueryparserFlexibleCoreUtilStringUtils_toStringWithId_(fld)]) return true;
  return false;
}

- (NSString *)description {
  return [super description];
}

- (id<JavaUtilMap>)getTagMap {
  return (id<JavaUtilMap>) cast_check([((JavaUtilHashtable *) nil_chk(self->tags_)) clone], JavaUtilMap_class_());
}

- (void)removeChildrenWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)childNode {
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(self->clauses_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if ([it next] == childNode) {
      [it remove];
    }
  }
  [((id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>) nil_chk(childNode)) removeFromParent];
}

- (void)removeFromParent {
  if (self->parent_ != nil) {
    id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> parent = self->parent_;
    JreStrongAssign(&self->parent_, nil);
    [parent removeChildrenWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:self];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(tags_);
  RELEASE_(clauses_);
  RELEASE_(parent_);
  [super dealloc];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "allocate", NULL, "V", 0x4, NULL, NULL },
    { "addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:", "add", "V", 0x11, NULL, NULL },
    { "addWithJavaUtilList:", "add", "V", 0x11, NULL, "(Ljava/util/List<Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;>;)V" },
    { "isLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "setWithJavaUtilList:", "set", "V", 0x11, NULL, "(Ljava/util/List<Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;>;)V" },
    { "cloneTree", NULL, "Lorg.apache.lucene.queryparser.flexible.core.nodes.QueryNode;", 0x1, "Ljava.lang.CloneNotSupportedException;", NULL },
    { "clone", NULL, "Lorg.apache.lucene.queryparser.flexible.core.nodes.QueryNode;", 0x1, "Ljava.lang.CloneNotSupportedException;", NULL },
    { "setLeafWithBoolean:", "setLeaf", "V", 0x4, NULL, NULL },
    { "getChildren", NULL, "Ljava.util.List;", 0x11, NULL, "()Ljava/util/List<Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;>;" },
    { "setTagWithNSString:withId:", "setTag", "V", 0x1, NULL, NULL },
    { "unsetTagWithNSString:", "unsetTag", "V", 0x1, NULL, NULL },
    { "containsTagWithNSString:", "containsTag", "Z", 0x1, NULL, NULL },
    { "getTagWithNSString:", "getTag", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "setParentWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:", "setParent", "V", 0x2, NULL, NULL },
    { "getParent", NULL, "Lorg.apache.lucene.queryparser.flexible.core.nodes.QueryNode;", 0x1, NULL, NULL },
    { "isRoot", NULL, "Z", 0x4, NULL, NULL },
    { "isDefaultFieldWithJavaLangCharSequence:", "isDefaultField", "Z", 0x4, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTagMap", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;" },
    { "removeChildrenWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:", "removeChildren", "V", 0x1, NULL, NULL },
    { "removeFromParent", NULL, "V", 0x1, NULL, NULL },
    { "init", "QueryNodeImpl", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PLAINTEXT_FIELD_NAME", "PLAINTEXT_FIELD_NAME", 0x19, "Ljava.lang.String;", &OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_PLAINTEXT_FIELD_NAME, NULL, .constantValue.asLong = 0 },
    { "isLeaf_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "tags_", NULL, 0x2, "Ljava.util.Hashtable;", NULL, "Ljava/util/Hashtable<Ljava/lang/String;Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "clauses_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;>;", .constantValue.asLong = 0 },
    { "parent_", NULL, 0x2, "Lorg.apache.lucene.queryparser.flexible.core.nodes.QueryNode;", NULL, NULL, .constantValue.asLong = 0 },
    { "toQueryStringIgnoreFields_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl = { 2, "QueryNodeImpl", "org.apache.lucene.queryparser.flexible.core.nodes", NULL, 0x401, 22, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl;
}

@end

void OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self, id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> child) {
  if ([self isLeaf] || self->clauses_ == nil || child == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(OrgApacheLuceneQueryparserFlexibleMessagesNLS_getLocalizedMessageWithNSString_(JreLoadStatic(OrgApacheLuceneQueryparserFlexibleCoreMessagesQueryParserMessages, NODE_ACTION_NOT_SUPPORTED)));
  }
  [self->clauses_ addWithId:child];
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_setParentWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(((OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *) cast_chk(child, [OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl class])), self);
}

void OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithJavaUtilList_(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self, id<JavaUtilList> children) {
  if ([self isLeaf] || self->clauses_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(OrgApacheLuceneQueryparserFlexibleMessagesNLS_getLocalizedMessageWithNSString_(JreLoadStatic(OrgApacheLuceneQueryparserFlexibleCoreMessagesQueryParserMessages, NODE_ACTION_NOT_SUPPORTED)));
  }
  for (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> __strong child in nil_chk(children)) {
    OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(self, child);
  }
}

id<JavaUtilList> OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_getChildren(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self) {
  if ([self isLeaf] || self->clauses_ == nil) {
    return nil;
  }
  return create_JavaUtilArrayList_initWithJavaUtilCollection_(self->clauses_);
}

void OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_setParentWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self, id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> parent) {
  if (self->parent_ != parent) {
    [self removeFromParent];
    JreStrongAssign(&self->parent_, parent);
  }
}

void OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_init(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self) {
  NSObject_init(self);
  self->isLeaf_ = true;
  JreStrongAssignAndConsume(&self->tags_, new_JavaUtilHashtable_init());
  JreStrongAssign(&self->clauses_, nil);
  JreStrongAssign(&self->parent_, nil);
  self->toQueryStringIgnoreFields_ = false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl)
