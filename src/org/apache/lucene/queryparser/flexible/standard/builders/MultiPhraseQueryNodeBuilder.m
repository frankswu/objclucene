//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/search/TermQuery.h"

@implementation OrgApacheLuceneQueryparserFlexibleStandardBuildersMultiPhraseQueryNodeBuilder

- (instancetype)init {
  OrgApacheLuceneQueryparserFlexibleStandardBuildersMultiPhraseQueryNodeBuilder_init(self);
  return self;
}

- (OrgApacheLuceneSearchMultiPhraseQuery *)buildWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)queryNode {
  OrgApacheLuceneQueryparserFlexibleStandardNodesMultiPhraseQueryNode *phraseNode = (OrgApacheLuceneQueryparserFlexibleStandardNodesMultiPhraseQueryNode *) check_class_cast(queryNode, [OrgApacheLuceneQueryparserFlexibleStandardNodesMultiPhraseQueryNode class]);
  OrgApacheLuceneSearchMultiPhraseQuery *phraseQuery = [new_OrgApacheLuceneSearchMultiPhraseQuery_init() autorelease];
  id<JavaUtilList> children = [((OrgApacheLuceneQueryparserFlexibleStandardNodesMultiPhraseQueryNode *) nil_chk(phraseNode)) getChildren];
  if (children != nil) {
    JavaUtilTreeMap *positionTermMap = [new_JavaUtilTreeMap_init() autorelease];
    for (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> __strong child in children) {
      OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *termNode = (OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) check_class_cast(child, [OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode class]);
      OrgApacheLuceneSearchTermQuery *termQuery = (OrgApacheLuceneSearchTermQuery *) check_class_cast([((OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) nil_chk(termNode)) getTagWithNSString:JreLoadStatic(OrgApacheLuceneQueryparserFlexibleCoreBuildersQueryTreeBuilder, QUERY_TREE_BUILDER_TAGID_)], [OrgApacheLuceneSearchTermQuery class]);
      id<JavaUtilList> termList = [positionTermMap getWithId:JavaLangInteger_valueOfWithInt_([termNode getPositionIncrement])];
      if (termList == nil) {
        termList = [new_JavaUtilLinkedList_init() autorelease];
        [positionTermMap putWithId:JavaLangInteger_valueOfWithInt_([termNode getPositionIncrement]) withId:termList];
      }
      [((id<JavaUtilList>) nil_chk(termList)) addWithId:[((OrgApacheLuceneSearchTermQuery *) nil_chk(termQuery)) getTerm]];
    }
    for (JavaLangInteger *boxed__ in nil_chk([positionTermMap keySet])) {
      jint positionIncrement = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      id<JavaUtilList> termList = [positionTermMap getWithId:JavaLangInteger_valueOfWithInt_(positionIncrement)];
      [phraseQuery addWithOrgApacheLuceneIndexTermArray:[termList toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(termList)) size] type:OrgApacheLuceneIndexTerm_class_()]] withInt:positionIncrement];
    }
  }
  return phraseQuery;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MultiPhraseQueryNodeBuilder", NULL, 0x1, NULL, NULL },
    { "buildWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:", "build", "Lorg.apache.lucene.search.MultiPhraseQuery;", 0x1, "Lorg.apache.lucene.queryparser.flexible.core.QueryNodeException;", NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleStandardBuildersMultiPhraseQueryNodeBuilder = { 2, "MultiPhraseQueryNodeBuilder", "org.apache.lucene.queryparser.flexible.standard.builders", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneQueryparserFlexibleStandardBuildersMultiPhraseQueryNodeBuilder;
}

@end

void OrgApacheLuceneQueryparserFlexibleStandardBuildersMultiPhraseQueryNodeBuilder_init(OrgApacheLuceneQueryparserFlexibleStandardBuildersMultiPhraseQueryNodeBuilder *self) {
  NSObject_init(self);
}

OrgApacheLuceneQueryparserFlexibleStandardBuildersMultiPhraseQueryNodeBuilder *new_OrgApacheLuceneQueryparserFlexibleStandardBuildersMultiPhraseQueryNodeBuilder_init() {
  OrgApacheLuceneQueryparserFlexibleStandardBuildersMultiPhraseQueryNodeBuilder *self = [OrgApacheLuceneQueryparserFlexibleStandardBuildersMultiPhraseQueryNodeBuilder alloc];
  OrgApacheLuceneQueryparserFlexibleStandardBuildersMultiPhraseQueryNodeBuilder_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleStandardBuildersMultiPhraseQueryNodeBuilder)
