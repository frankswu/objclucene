//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/CachingTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/NoTokenFoundQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/StandardBooleanQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.h"

@interface OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor () {
 @public
  OrgApacheLuceneAnalysisAnalyzer *analyzer_;
  jboolean positionIncrementsEnabled_;
  OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_OperatorEnum *defaultOperator_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor, analyzer_, OrgApacheLuceneAnalysisAnalyzer *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor, defaultOperator_, OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_OperatorEnum *)

@implementation OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)processWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)queryTree {
  OrgApacheLuceneAnalysisAnalyzer *analyzer = [((OrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler *) nil_chk([self getQueryConfigHandler])) getWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:JreLoadStatic(OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_ConfigurationKeys, ANALYZER_)];
  if (analyzer != nil) {
    JreStrongAssign(&self->analyzer_, analyzer);
    self->positionIncrementsEnabled_ = false;
    JavaLangBoolean *positionIncrementsEnabled = [((OrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler *) nil_chk([self getQueryConfigHandler])) getWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:JreLoadStatic(OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_ConfigurationKeys, ENABLE_POSITION_INCREMENTS_)];
    OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_OperatorEnum *defaultOperator = [((OrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler *) nil_chk([self getQueryConfigHandler])) getWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:JreLoadStatic(OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_ConfigurationKeys, DEFAULT_OPERATOR_)];
    JreStrongAssign(&self->defaultOperator_, defaultOperator != nil ? defaultOperator : JreLoadStatic(OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_OperatorEnum, OR));
    if (positionIncrementsEnabled != nil) {
      self->positionIncrementsEnabled_ = [positionIncrementsEnabled booleanValue];
    }
    if (self->analyzer_ != nil) {
      return [super processWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:queryTree];
    }
  }
  return queryTree;
}

- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)postProcessNodeWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)node {
  if ([OrgApacheLuceneQueryparserFlexibleCoreNodesTextableQueryNode_class_() isInstance:node] && !([node isKindOfClass:[OrgApacheLuceneQueryparserFlexibleStandardNodesWildcardQueryNode class]]) && !([node isKindOfClass:[OrgApacheLuceneQueryparserFlexibleCoreNodesFuzzyQueryNode class]]) && !([node isKindOfClass:[OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode class]]) && !([OrgApacheLuceneQueryparserFlexibleCoreNodesRangeQueryNode_class_() isInstance:[((id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>) nil_chk(node)) getParent]])) {
    OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *fieldNode = ((OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) check_class_cast(node, [OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode class]));
    NSString *text = [fieldNode getTextAsString];
    NSString *field = [fieldNode getFieldAsString];
    OrgApacheLuceneAnalysisCachingTokenFilter *buffer = nil;
    id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posIncrAtt = nil;
    jint numTokens = 0;
    jint positionCount = 0;
    jboolean severalTokensAtSamePosition = false;
    @try {
      @try {
        OrgApacheLuceneAnalysisTokenStream *source = [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(self->analyzer_)) tokenStreamWithNSString:field withNSString:text];
        JavaLangThrowable *__primaryException1 = nil;
        @try {
          buffer = [new_OrgApacheLuceneAnalysisCachingTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(source) autorelease];
          [buffer reset];
          if ([buffer hasAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]) {
            posIncrAtt = [buffer getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()];
          }
          @try {
            while ([buffer incrementToken]) {
              numTokens++;
              jint positionIncrement = (posIncrAtt != nil) ? [posIncrAtt getPositionIncrement] : 1;
              if (positionIncrement != 0) {
                positionCount += positionIncrement;
              }
              else {
                severalTokensAtSamePosition = true;
              }
            }
          }
          @catch (JavaIoIOException *e) {
          }
          [buffer reset];
        }
        @catch (JavaLangThrowable *e) {
          __primaryException1 = e;
          @throw e;
        }
        @finally {
          if (source != nil) {
            if (__primaryException1 != nil) {
              @try {
                [source close];
              } @catch (JavaLangThrowable *e) {
                [__primaryException1 addSuppressedWithJavaLangThrowable:e];
              }
            } else {
              [source close];
            }
          }
        }
      }
      @catch (JavaIoIOException *e) {
        @throw [new_JavaLangRuntimeException_initWithJavaLangThrowable_(e) autorelease];
      }
      if (![((OrgApacheLuceneAnalysisCachingTokenFilter *) nil_chk(buffer)) hasAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]) {
        return [new_OrgApacheLuceneQueryparserFlexibleCoreNodesNoTokenFoundQueryNode_init() autorelease];
      }
      id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt = [buffer getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()];
      if (numTokens == 0) {
        return [new_OrgApacheLuceneQueryparserFlexibleCoreNodesNoTokenFoundQueryNode_init() autorelease];
      }
      else if (numTokens == 1) {
        NSString *term = nil;
        @try {
          jboolean hasNext;
          hasNext = [buffer incrementToken];
          JreAssert((hasNext == true), (@"org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java:179 condition failed: assert hasNext == true;"));
          term = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
        }
        @catch (JavaIoIOException *e) {
        }
        [fieldNode setTextWithJavaLangCharSequence:term];
        return fieldNode;
      }
      else if (severalTokensAtSamePosition || !([node isKindOfClass:[OrgApacheLuceneQueryparserFlexibleCoreNodesQuotedFieldQueryNode class]])) {
        if (positionCount == 1 || !([node isKindOfClass:[OrgApacheLuceneQueryparserFlexibleCoreNodesQuotedFieldQueryNode class]])) {
          if (positionCount == 1) {
            JavaUtilLinkedList *children = [new_JavaUtilLinkedList_init() autorelease];
            for (jint i = 0; i < numTokens; i++) {
              NSString *term = nil;
              @try {
                jboolean hasNext = [buffer incrementToken];
                JreAssert((hasNext == true), (@"org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java:202 condition failed: assert hasNext == true;"));
                term = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
              }
              @catch (JavaIoIOException *e) {
              }
              [children addWithId:[new_OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(field, term, -1, -1) autorelease]];
            }
            return [new_OrgApacheLuceneQueryparserFlexibleCoreNodesGroupQueryNode_initWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_([new_OrgApacheLuceneQueryparserFlexibleStandardNodesStandardBooleanQueryNode_initWithJavaUtilList_withBoolean_(children, positionCount == 1) autorelease]) autorelease];
          }
          else {
            id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> q = [new_OrgApacheLuceneQueryparserFlexibleStandardNodesStandardBooleanQueryNode_initWithJavaUtilList_withBoolean_(JavaUtilCollections_emptyList(), false) autorelease];
            id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> currentQuery = nil;
            for (jint i = 0; i < numTokens; i++) {
              NSString *term = nil;
              @try {
                jboolean hasNext = [buffer incrementToken];
                JreAssert((hasNext == true), (@"org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java:222 condition failed: assert hasNext == true;"));
                term = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
              }
              @catch (JavaIoIOException *e) {
              }
              if (posIncrAtt != nil && [posIncrAtt getPositionIncrement] == 0) {
                if (!([currentQuery isKindOfClass:[OrgApacheLuceneQueryparserFlexibleCoreNodesBooleanQueryNode class]])) {
                  id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> t = currentQuery;
                  currentQuery = [new_OrgApacheLuceneQueryparserFlexibleStandardNodesStandardBooleanQueryNode_initWithJavaUtilList_withBoolean_(JavaUtilCollections_emptyList(), true) autorelease];
                  [((OrgApacheLuceneQueryparserFlexibleCoreNodesBooleanQueryNode *) check_class_cast(currentQuery, [OrgApacheLuceneQueryparserFlexibleCoreNodesBooleanQueryNode class])) addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:t];
                }
                [((OrgApacheLuceneQueryparserFlexibleCoreNodesBooleanQueryNode *) nil_chk(((OrgApacheLuceneQueryparserFlexibleCoreNodesBooleanQueryNode *) check_class_cast(currentQuery, [OrgApacheLuceneQueryparserFlexibleCoreNodesBooleanQueryNode class])))) addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:[new_OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(field, term, -1, -1) autorelease]];
              }
              else {
                if (currentQuery != nil) {
                  if (self->defaultOperator_ == JreLoadStatic(OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_OperatorEnum, OR)) {
                    [q addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:currentQuery];
                  }
                  else {
                    [q addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:[new_OrgApacheLuceneQueryparserFlexibleCoreNodesModifierQueryNode_initWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_withOrgApacheLuceneQueryparserFlexibleCoreNodesModifierQueryNode_ModifierEnum_(currentQuery, JreLoadStatic(OrgApacheLuceneQueryparserFlexibleCoreNodesModifierQueryNode_ModifierEnum, MOD_REQ)) autorelease]];
                  }
                }
                currentQuery = [new_OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(field, term, -1, -1) autorelease];
              }
            }
            if (self->defaultOperator_ == JreLoadStatic(OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_OperatorEnum, OR)) {
              [q addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:currentQuery];
            }
            else {
              [q addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:[new_OrgApacheLuceneQueryparserFlexibleCoreNodesModifierQueryNode_initWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_withOrgApacheLuceneQueryparserFlexibleCoreNodesModifierQueryNode_ModifierEnum_(currentQuery, JreLoadStatic(OrgApacheLuceneQueryparserFlexibleCoreNodesModifierQueryNode_ModifierEnum, MOD_REQ)) autorelease]];
            }
            if ([q isKindOfClass:[OrgApacheLuceneQueryparserFlexibleCoreNodesBooleanQueryNode class]]) {
              q = [new_OrgApacheLuceneQueryparserFlexibleCoreNodesGroupQueryNode_initWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(q) autorelease];
            }
            return q;
          }
        }
        else {
          OrgApacheLuceneQueryparserFlexibleStandardNodesMultiPhraseQueryNode *mpq = [new_OrgApacheLuceneQueryparserFlexibleStandardNodesMultiPhraseQueryNode_init() autorelease];
          id<JavaUtilList> multiTerms = [new_JavaUtilArrayList_init() autorelease];
          jint position = -1;
          jint i = 0;
          jint termGroupCount = 0;
          for (; i < numTokens; i++) {
            NSString *term = nil;
            jint positionIncrement = 1;
            @try {
              jboolean hasNext = [buffer incrementToken];
              JreAssert((hasNext == true), (@"org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java:269 condition failed: assert hasNext == true;"));
              term = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
              if (posIncrAtt != nil) {
                positionIncrement = [posIncrAtt getPositionIncrement];
              }
            }
            @catch (JavaIoIOException *e) {
            }
            if (positionIncrement > 0 && [multiTerms size] > 0) {
              for (OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode * __strong termNode in multiTerms) {
                if (self->positionIncrementsEnabled_) {
                  [((OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) nil_chk(termNode)) setPositionIncrementWithInt:position];
                }
                else {
                  [((OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) nil_chk(termNode)) setPositionIncrementWithInt:termGroupCount];
                }
                [mpq addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:termNode];
              }
              termGroupCount++;
              [multiTerms clear];
            }
            position += positionIncrement;
            [multiTerms addWithId:[new_OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(field, term, -1, -1) autorelease]];
          }
          for (OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode * __strong termNode in multiTerms) {
            if (self->positionIncrementsEnabled_) {
              [((OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) nil_chk(termNode)) setPositionIncrementWithInt:position];
            }
            else {
              [((OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) nil_chk(termNode)) setPositionIncrementWithInt:termGroupCount];
            }
            [mpq addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:termNode];
          }
          return mpq;
        }
      }
      else {
        OrgApacheLuceneQueryparserFlexibleCoreNodesTokenizedPhraseQueryNode *pq = [new_OrgApacheLuceneQueryparserFlexibleCoreNodesTokenizedPhraseQueryNode_init() autorelease];
        jint position = -1;
        for (jint i = 0; i < numTokens; i++) {
          NSString *term = nil;
          jint positionIncrement = 1;
          @try {
            jboolean hasNext = [buffer incrementToken];
            JreAssert((hasNext == true), (@"org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java:335 condition failed: assert hasNext == true;"));
            term = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
            if (posIncrAtt != nil) {
              positionIncrement = [posIncrAtt getPositionIncrement];
            }
          }
          @catch (JavaIoIOException *e) {
          }
          OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *newFieldNode = [new_OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(field, term, -1, -1) autorelease];
          if (self->positionIncrementsEnabled_) {
            position += positionIncrement;
            [newFieldNode setPositionIncrementWithInt:position];
          }
          else {
            [newFieldNode setPositionIncrementWithInt:i];
          }
          [pq addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:newFieldNode];
        }
        return pq;
      }
    }
    @finally {
      if (buffer != nil) {
        @try {
          [buffer close];
        }
        @catch (JavaIoIOException *e) {
        }
      }
    }
  }
  return node;
}

- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)preProcessNodeWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)node {
  return node;
}

- (id<JavaUtilList>)setChildrenOrderWithJavaUtilList:(id<JavaUtilList>)children {
  return children;
}

- (void)dealloc {
  RELEASE_(analyzer_);
  RELEASE_(defaultOperator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AnalyzerQueryNodeProcessor", NULL, 0x1, NULL, NULL },
    { "processWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:", "process", "Lorg.apache.lucene.queryparser.flexible.core.nodes.QueryNode;", 0x1, "Lorg.apache.lucene.queryparser.flexible.core.QueryNodeException;", NULL },
    { "postProcessNodeWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:", "postProcessNode", "Lorg.apache.lucene.queryparser.flexible.core.nodes.QueryNode;", 0x4, "Lorg.apache.lucene.queryparser.flexible.core.QueryNodeException;", NULL },
    { "preProcessNodeWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:", "preProcessNode", "Lorg.apache.lucene.queryparser.flexible.core.nodes.QueryNode;", 0x4, "Lorg.apache.lucene.queryparser.flexible.core.QueryNodeException;", NULL },
    { "setChildrenOrderWithJavaUtilList:", "setChildrenOrder", "Ljava.util.List;", 0x4, "Lorg.apache.lucene.queryparser.flexible.core.QueryNodeException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "analyzer_", NULL, 0x2, "Lorg.apache.lucene.analysis.Analyzer;", NULL, NULL, .constantValue.asLong = 0 },
    { "positionIncrementsEnabled_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "defaultOperator_", NULL, 0x2, "Lorg.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor = { 2, "AnalyzerQueryNodeProcessor", "org.apache.lucene.queryparser.flexible.standard.processors", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor;
}

@end

void OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor_init(OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor *self) {
  OrgApacheLuceneQueryparserFlexibleCoreProcessorsQueryNodeProcessorImpl_init(self);
}

OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor *new_OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor_init() {
  OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor *self = [OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor alloc];
  OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor)
