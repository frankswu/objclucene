//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "org/apache/lucene/queryparser/flexible/core/util/StringUtils.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode.h"

@interface OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode () {
 @public
  jboolean lowerInclusive_, upperInclusive_;
}

@end

@implementation OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaLangCharSequence>)getField {
  id<JavaLangCharSequence> field = nil;
  id<OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode> lower = [self getLowerBound];
  id<OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode> upper = [self getUpperBound];
  if (lower != nil) {
    field = [lower getField];
  }
  else if (upper != nil) {
    field = [upper getField];
  }
  return field;
}

- (void)setFieldWithJavaLangCharSequence:(id<JavaLangCharSequence>)fieldName {
  id<OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode> lower = [self getLowerBound];
  id<OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode> upper = [self getUpperBound];
  if (lower != nil) {
    [lower setFieldWithJavaLangCharSequence:fieldName];
  }
  if (upper != nil) {
    [upper setFieldWithJavaLangCharSequence:fieldName];
  }
}

- (id)getLowerBound {
  return (id<OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode>) check_protocol_cast([((id<JavaUtilList>) nil_chk([self getChildren])) getWithInt:0], OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode_class_());
}

- (id)getUpperBound {
  return (id<OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode>) check_protocol_cast([((id<JavaUtilList>) nil_chk([self getChildren])) getWithInt:1], OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode_class_());
}

- (jboolean)isLowerInclusive {
  return lowerInclusive_;
}

- (jboolean)isUpperInclusive {
  return upperInclusive_;
}

- (void)setBoundsWithOrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode>)lower
                 withOrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode>)upper
                                                                            withBoolean:(jboolean)lowerInclusive
                                                                            withBoolean:(jboolean)upperInclusive {
  if (lower != nil && upper != nil) {
    NSString *lowerField = OrgApacheLuceneQueryparserFlexibleCoreUtilStringUtils_toStringWithId_([lower getField]);
    NSString *upperField = OrgApacheLuceneQueryparserFlexibleCoreUtilStringUtils_toStringWithId_([upper getField]);
    if ((upperField != nil || lowerField != nil) && ((upperField != nil && ![upperField isEqual:lowerField]) || ![((NSString *) nil_chk(lowerField)) isEqual:upperField])) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"lower and upper bounds should have the same field name!") autorelease];
    }
    self->lowerInclusive_ = lowerInclusive;
    self->upperInclusive_ = upperInclusive;
    JavaUtilArrayList *children = [new_JavaUtilArrayList_initWithInt_(2) autorelease];
    [children addWithId:lower];
    [children addWithId:upper];
    [self setWithJavaUtilList:children];
  }
}

- (id<JavaLangCharSequence>)toQueryStringWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:(id<OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax>)escapeSyntaxParser {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  id<OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode> lower = [self getLowerBound];
  id<OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode> upper = [self getUpperBound];
  if (lowerInclusive_) {
    [sb appendWithChar:'['];
  }
  else {
    [sb appendWithChar:'{'];
  }
  if (lower != nil) {
    [sb appendWithJavaLangCharSequence:[lower toQueryStringWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:escapeSyntaxParser]];
  }
  else {
    [sb appendWithNSString:@"..."];
  }
  [sb appendWithChar:' '];
  if (upper != nil) {
    [sb appendWithJavaLangCharSequence:[upper toQueryStringWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:escapeSyntaxParser]];
  }
  else {
    [sb appendWithNSString:@"..."];
  }
  if (upperInclusive_) {
    [sb appendWithChar:']'];
  }
  else {
    [sb appendWithChar:'}'];
  }
  return [sb description];
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"<") autorelease]) appendWithNSString:[[self getClass] getCanonicalName]];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" lowerInclusive="])) appendWithBoolean:[self isLowerInclusive]];
  [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@" upperInclusive="])) appendWithBoolean:[self isUpperInclusive]];
  [sb appendWithNSString:@">\n\t"];
  [((JavaLangStringBuilder *) nil_chk([sb appendWithId:[self getUpperBound]])) appendWithNSString:@"\n\t"];
  [((JavaLangStringBuilder *) nil_chk([sb appendWithId:[self getLowerBound]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"</"])) appendWithNSString:[[self getClass] getCanonicalName]])) appendWithNSString:@">\n"];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AbstractRangeQueryNode", NULL, 0x4, NULL, NULL },
    { "getField", NULL, "Ljava.lang.CharSequence;", 0x1, NULL, NULL },
    { "setFieldWithJavaLangCharSequence:", "setField", "V", 0x1, NULL, NULL },
    { "getLowerBound", NULL, "TT;", 0x1, NULL, "()TT;" },
    { "getUpperBound", NULL, "TT;", 0x1, NULL, "()TT;" },
    { "isLowerInclusive", NULL, "Z", 0x1, NULL, NULL },
    { "isUpperInclusive", NULL, "Z", 0x1, NULL, NULL },
    { "setBoundsWithOrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode:withOrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode:withBoolean:withBoolean:", "setBounds", "V", 0x1, NULL, "(TT;TT;ZZ)V" },
    { "toQueryStringWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:", "toQueryString", "Ljava.lang.CharSequence;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lowerInclusive_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "upperInclusive_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode = { 2, "AbstractRangeQueryNode", "org.apache.lucene.queryparser.flexible.standard.nodes", NULL, 0x1, 10, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<T::Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode<*>;>Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl;Lorg/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode<Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode<*>;>;" };
  return &_OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode;
}

@end

void OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode_init(OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode *self) {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_init(self);
  [self setLeafWithBoolean:false];
  [self allocate];
}

OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode *new_OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode_init() {
  OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode *self = [OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode alloc];
  OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode)
