//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode.h"
#include "org/apache/lucene/util/BytesRef.h"

@interface OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode () {
 @public
  id<JavaLangCharSequence> text_;
  id<JavaLangCharSequence> field_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode, text_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode, field_, id<JavaLangCharSequence>)

@implementation OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)field
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                     withInt:(jint)begin
                                     withInt:(jint)end {
  OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(self, field, text, begin, end);
  return self;
}

- (OrgApacheLuceneUtilBytesRef *)textToBytesRef {
  return [new_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(text_) autorelease];
}

- (NSString *)description {
  return JreStrcat("$@$@$", @"<regexp field='", self->field_, @"' term='", self->text_, @"'/>");
}

- (OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode *)cloneTree {
  OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode *clone = (OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode *) check_class_cast([super cloneTree], [OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode class]);
  JreStrongAssign(&((OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode *) nil_chk(clone))->field_, self->field_);
  JreStrongAssign(&clone->text_, self->text_);
  return clone;
}

- (id<JavaLangCharSequence>)getText {
  return text_;
}

- (void)setTextWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  JreStrongAssign(&self->text_, text);
}

- (id<JavaLangCharSequence>)getField {
  return field_;
}

- (NSString *)getFieldAsString {
  return [((id<JavaLangCharSequence>) nil_chk(field_)) description];
}

- (void)setFieldWithJavaLangCharSequence:(id<JavaLangCharSequence>)field {
  JreStrongAssign(&self->field_, field);
}

- (id<JavaLangCharSequence>)toQueryStringWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:(id<OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax>)escapeSyntaxParser {
  return [self isDefaultFieldWithJavaLangCharSequence:field_] ? JreStrcat("C@C", '/', text_, '/') : JreStrcat("@$@C", field_, @":/", text_, '/');
}

- (void)dealloc {
  RELEASE_(text_);
  RELEASE_(field_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangCharSequence:withJavaLangCharSequence:withInt:withInt:", "RegexpQueryNode", NULL, 0x1, NULL, NULL },
    { "textToBytesRef", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "cloneTree", NULL, "Lorg.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;", 0x1, "Ljava.lang.CloneNotSupportedException;", NULL },
    { "getText", NULL, "Ljava.lang.CharSequence;", 0x1, NULL, NULL },
    { "setTextWithJavaLangCharSequence:", "setText", "V", 0x1, NULL, NULL },
    { "getField", NULL, "Ljava.lang.CharSequence;", 0x1, NULL, NULL },
    { "getFieldAsString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setFieldWithJavaLangCharSequence:", "setField", "V", 0x1, NULL, NULL },
    { "toQueryStringWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:", "toQueryString", "Ljava.lang.CharSequence;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "text_", NULL, 0x2, "Ljava.lang.CharSequence;", NULL, NULL, .constantValue.asLong = 0 },
    { "field_", NULL, 0x2, "Ljava.lang.CharSequence;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode = { 2, "RegexpQueryNode", "org.apache.lucene.queryparser.flexible.standard.nodes", NULL, 0x1, 10, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode;
}

@end

void OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode *self, id<JavaLangCharSequence> field, id<JavaLangCharSequence> text, jint begin, jint end) {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_init(self);
  JreStrongAssign(&self->field_, field);
  JreStrongAssign(&self->text_, [((id<JavaLangCharSequence>) nil_chk(text)) subSequenceFrom:begin to:end]);
}

OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode *new_OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> field, id<JavaLangCharSequence> text, jint begin, jint end) {
  OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode *self = [OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode alloc];
  OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(self, field, text, begin, end);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode)
