//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/classic/TokenMgrError.java
//

#include "J2ObjC_source.h"
#include "java/lang/Error.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/queryparser/classic/TokenMgrError.h"

#define OrgApacheLuceneQueryparserClassicTokenMgrError_serialVersionUID 1LL

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneQueryparserClassicTokenMgrError, serialVersionUID, jlong)

@implementation OrgApacheLuceneQueryparserClassicTokenMgrError

+ (NSString *)addEscapesWithNSString:(NSString *)str {
  return OrgApacheLuceneQueryparserClassicTokenMgrError_addEscapesWithNSString_(str);
}

+ (NSString *)LexicalErrorWithBoolean:(jboolean)EOFSeen
                              withInt:(jint)lexState
                              withInt:(jint)errorLine
                              withInt:(jint)errorColumn
                         withNSString:(NSString *)errorAfter
                             withChar:(jchar)curChar {
  return OrgApacheLuceneQueryparserClassicTokenMgrError_LexicalErrorWithBoolean_withInt_withInt_withInt_withNSString_withChar_(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar);
}

- (NSString *)getMessage {
  return [super getMessage];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserClassicTokenMgrError_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)message
                         withInt:(jint)reason {
  OrgApacheLuceneQueryparserClassicTokenMgrError_initWithNSString_withInt_(self, message, reason);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)EOFSeen
                        withInt:(jint)lexState
                        withInt:(jint)errorLine
                        withInt:(jint)errorColumn
                   withNSString:(NSString *)errorAfter
                       withChar:(jchar)curChar
                        withInt:(jint)reason {
  OrgApacheLuceneQueryparserClassicTokenMgrError_initWithBoolean_withInt_withInt_withInt_withNSString_withChar_withInt_(self, EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar, reason);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addEscapesWithNSString:", "addEscapes", "Ljava.lang.String;", 0x1c, NULL, NULL },
    { "LexicalErrorWithBoolean:withInt:withInt:withInt:withNSString:withChar:", "LexicalError", "Ljava.lang.String;", 0xc, NULL, NULL },
    { "getMessage", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "init", "TokenMgrError", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withInt:", "TokenMgrError", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:withInt:withInt:withInt:withNSString:withChar:withInt:", "TokenMgrError", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheLuceneQueryparserClassicTokenMgrError_serialVersionUID },
    { "LEXICAL_ERROR", "LEXICAL_ERROR", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneQueryparserClassicTokenMgrError_LEXICAL_ERROR },
    { "STATIC_LEXER_ERROR", "STATIC_LEXER_ERROR", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneQueryparserClassicTokenMgrError_STATIC_LEXER_ERROR },
    { "INVALID_LEXICAL_STATE", "INVALID_LEXICAL_STATE", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneQueryparserClassicTokenMgrError_INVALID_LEXICAL_STATE },
    { "LOOP_DETECTED", "LOOP_DETECTED", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneQueryparserClassicTokenMgrError_LOOP_DETECTED },
    { "errorCode_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserClassicTokenMgrError = { 2, "TokenMgrError", "org.apache.lucene.queryparser.classic", NULL, 0x1, 6, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneQueryparserClassicTokenMgrError;
}

@end

NSString *OrgApacheLuceneQueryparserClassicTokenMgrError_addEscapesWithNSString_(NSString *str) {
  OrgApacheLuceneQueryparserClassicTokenMgrError_initialize();
  JavaLangStringBuilder *retval = [new_JavaLangStringBuilder_init() autorelease];
  jchar ch;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(str)) length]); i++) {
    switch ([str charAtWithInt:i]) {
      case 0:
      continue;
      case 0x0008:
      [retval appendWithNSString:@"\\b"];
      continue;
      case 0x0009:
      [retval appendWithNSString:@"\\t"];
      continue;
      case 0x000a:
      [retval appendWithNSString:@"\\n"];
      continue;
      case 0x000c:
      [retval appendWithNSString:@"\\f"];
      continue;
      case 0x000d:
      [retval appendWithNSString:@"\\r"];
      continue;
      case '"':
      [retval appendWithNSString:@"\\\""];
      continue;
      case '\'':
      [retval appendWithNSString:@"\\'"];
      continue;
      case '\\':
      [retval appendWithNSString:@"\\\\"];
      continue;
      default:
      if ((ch = [str charAtWithInt:i]) < (jint) 0x20 || ch > (jint) 0x7e) {
        NSString *s = JreStrcat("$$", @"0000", JavaLangInteger_toStringWithInt_withInt_(ch, 16));
        [retval appendWithNSString:JreStrcat("$$", @"\\u", [s substring:((jint) [s length]) - 4 endIndex:((jint) [s length])])];
      }
      else {
        [retval appendWithChar:ch];
      }
      continue;
    }
  }
  return [retval description];
}

NSString *OrgApacheLuceneQueryparserClassicTokenMgrError_LexicalErrorWithBoolean_withInt_withInt_withInt_withNSString_withChar_(jboolean EOFSeen, jint lexState, jint errorLine, jint errorColumn, NSString *errorAfter, jchar curChar) {
  OrgApacheLuceneQueryparserClassicTokenMgrError_initialize();
  return (JreStrcat("$I$I$$$$C", @"Lexical error at line ", errorLine, @", column ", errorColumn, @".  Encountered: ", (EOFSeen ? @"<EOF> " : JreStrcat("$$I$", (JreStrcat("C$C", '"', OrgApacheLuceneQueryparserClassicTokenMgrError_addEscapesWithNSString_(NSString_valueOfChar_(curChar)), '"')), @" (", (jint) curChar, @"), ")), @"after : \"", OrgApacheLuceneQueryparserClassicTokenMgrError_addEscapesWithNSString_(errorAfter), '"'));
}

void OrgApacheLuceneQueryparserClassicTokenMgrError_init(OrgApacheLuceneQueryparserClassicTokenMgrError *self) {
  JavaLangError_init(self);
}

OrgApacheLuceneQueryparserClassicTokenMgrError *new_OrgApacheLuceneQueryparserClassicTokenMgrError_init() {
  OrgApacheLuceneQueryparserClassicTokenMgrError *self = [OrgApacheLuceneQueryparserClassicTokenMgrError alloc];
  OrgApacheLuceneQueryparserClassicTokenMgrError_init(self);
  return self;
}

void OrgApacheLuceneQueryparserClassicTokenMgrError_initWithNSString_withInt_(OrgApacheLuceneQueryparserClassicTokenMgrError *self, NSString *message, jint reason) {
  JavaLangError_initWithNSString_(self, message);
  self->errorCode_ = reason;
}

OrgApacheLuceneQueryparserClassicTokenMgrError *new_OrgApacheLuceneQueryparserClassicTokenMgrError_initWithNSString_withInt_(NSString *message, jint reason) {
  OrgApacheLuceneQueryparserClassicTokenMgrError *self = [OrgApacheLuceneQueryparserClassicTokenMgrError alloc];
  OrgApacheLuceneQueryparserClassicTokenMgrError_initWithNSString_withInt_(self, message, reason);
  return self;
}

void OrgApacheLuceneQueryparserClassicTokenMgrError_initWithBoolean_withInt_withInt_withInt_withNSString_withChar_withInt_(OrgApacheLuceneQueryparserClassicTokenMgrError *self, jboolean EOFSeen, jint lexState, jint errorLine, jint errorColumn, NSString *errorAfter, jchar curChar, jint reason) {
  OrgApacheLuceneQueryparserClassicTokenMgrError_initWithNSString_withInt_(self, OrgApacheLuceneQueryparserClassicTokenMgrError_LexicalErrorWithBoolean_withInt_withInt_withInt_withNSString_withChar_(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);
}

OrgApacheLuceneQueryparserClassicTokenMgrError *new_OrgApacheLuceneQueryparserClassicTokenMgrError_initWithBoolean_withInt_withInt_withInt_withNSString_withChar_withInt_(jboolean EOFSeen, jint lexState, jint errorLine, jint errorColumn, NSString *errorAfter, jchar curChar, jint reason) {
  OrgApacheLuceneQueryparserClassicTokenMgrError *self = [OrgApacheLuceneQueryparserClassicTokenMgrError alloc];
  OrgApacheLuceneQueryparserClassicTokenMgrError_initWithBoolean_withInt_withInt_withInt_withNSString_withChar_withInt_(self, EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar, reason);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserClassicTokenMgrError)
