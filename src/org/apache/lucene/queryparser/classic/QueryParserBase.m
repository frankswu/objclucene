//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/StringReader.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/text/DateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/TimeZone.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/document/DateTools.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "org/apache/lucene/queryparser/classic/FastCharStream.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "org/apache/lucene/queryparser/classic/TokenMgrError.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/RegexpQuery.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "org/apache/lucene/search/WildcardQuery.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/QueryBuilder.h"
#include "org/apache/lucene/util/automaton/Operations.h"
#include "org/apache/lucene/util/automaton/RegExp.h"

@interface OrgApacheLuceneQueryparserClassicQueryParserBase ()

- (OrgApacheLuceneUtilBytesRef *)analyzeMultitermTermWithNSString:(NSString *)field
                                                     withNSString:(NSString *)part;

@end

__attribute__((unused)) static void OrgApacheLuceneQueryparserClassicQueryParserBase_setAutoGeneratePhraseQueriesWithBoolean_(OrgApacheLuceneQueryparserClassicQueryParserBase *self, jboolean value);

__attribute__((unused)) static OrgApacheLuceneUtilBytesRef *OrgApacheLuceneQueryparserClassicQueryParserBase_analyzeMultitermTermWithNSString_withNSString_(OrgApacheLuceneQueryparserClassicQueryParserBase *self, NSString *field, NSString *part);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneQueryparserClassicQueryParserBase)

OrgApacheLuceneQueryparserClassicQueryParser_Operator *OrgApacheLuceneQueryparserClassicQueryParserBase_AND_OPERATOR;
OrgApacheLuceneQueryparserClassicQueryParser_Operator *OrgApacheLuceneQueryparserClassicQueryParserBase_OR_OPERATOR;

@implementation OrgApacheLuceneQueryparserClassicQueryParserBase

+ (jint)CONJ_NONE {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_NONE;
}

+ (jint)CONJ_AND {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_AND;
}

+ (jint)CONJ_OR {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_OR;
}

+ (jint)MOD_NONE {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_NONE;
}

+ (jint)MOD_NOT {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_NOT;
}

+ (jint)MOD_REQ {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_REQ;
}

+ (OrgApacheLuceneQueryparserClassicQueryParser_Operator *)AND_OPERATOR {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_AND_OPERATOR;
}

+ (OrgApacheLuceneQueryparserClassicQueryParser_Operator *)OR_OPERATOR {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_OR_OPERATOR;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserClassicQueryParserBase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithNSString:(NSString *)f
withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)a {
  [self setAnalyzerWithOrgApacheLuceneAnalysisAnalyzer:a];
  JreStrongAssign(&field_, f);
  OrgApacheLuceneQueryparserClassicQueryParserBase_setAutoGeneratePhraseQueriesWithBoolean_(self, false);
}

- (void)ReInitWithOrgApacheLuceneQueryparserClassicCharStream:(id<OrgApacheLuceneQueryparserClassicCharStream>)stream {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgApacheLuceneSearchQuery *)TopLevelQueryWithNSString:(NSString *)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneSearchQuery *)parseWithNSString:(NSString *)query {
  [self ReInitWithOrgApacheLuceneQueryparserClassicCharStream:create_OrgApacheLuceneQueryparserClassicFastCharStream_initWithJavaIoReader_(create_JavaIoStringReader_initWithNSString_(query))];
  @try {
    OrgApacheLuceneSearchQuery *res = [self TopLevelQueryWithNSString:field_];
    return res != nil ? res : [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk([self newBooleanQueryWithBoolean:false])) build];
  }
  @catch (OrgApacheLuceneQueryparserClassicParseException *tme) {
    OrgApacheLuceneQueryparserClassicParseException *e = create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(JreStrcat("$$$$", @"Cannot parse '", query, @"': ", [((NSException *) nil_chk(tme)) getMessage]));
    [e initCauseWithNSException:tme];
    @throw e;
  }
  @catch (OrgApacheLuceneQueryparserClassicTokenMgrError *tme) {
    OrgApacheLuceneQueryparserClassicParseException *e = create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(JreStrcat("$$$$", @"Cannot parse '", query, @"': ", [((NSException *) nil_chk(tme)) getMessage]));
    [e initCauseWithNSException:tme];
    @throw e;
  }
  @catch (NSException *tme) {
    OrgApacheLuceneQueryparserClassicParseException *e = create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(JreStrcat("$$$$", @"Cannot parse '", query, @"': ", [((NSException *) nil_chk(tme)) getMessage]));
    [e initCauseWithNSException:tme];
    @throw e;
  }
  @catch (OrgApacheLuceneSearchBooleanQuery_TooManyClauses *tmc) {
    OrgApacheLuceneQueryparserClassicParseException *e = create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(JreStrcat("$$$", @"Cannot parse '", query, @"': too many boolean clauses"));
    [e initCauseWithNSException:tmc];
    @throw e;
  }
}

- (NSString *)getField {
  return field_;
}

- (jboolean)getAutoGeneratePhraseQueries {
  return autoGeneratePhraseQueries_;
}

- (void)setAutoGeneratePhraseQueriesWithBoolean:(jboolean)value {
  OrgApacheLuceneQueryparserClassicQueryParserBase_setAutoGeneratePhraseQueriesWithBoolean_(self, value);
}

- (jfloat)getFuzzyMinSim {
  return fuzzyMinSim_;
}

- (void)setFuzzyMinSimWithFloat:(jfloat)fuzzyMinSim {
  self->fuzzyMinSim_ = fuzzyMinSim;
}

- (jint)getFuzzyPrefixLength {
  return fuzzyPrefixLength_;
}

- (void)setFuzzyPrefixLengthWithInt:(jint)fuzzyPrefixLength {
  self->fuzzyPrefixLength_ = fuzzyPrefixLength;
}

- (void)setPhraseSlopWithInt:(jint)phraseSlop {
  self->phraseSlop_ = phraseSlop;
}

- (jint)getPhraseSlop {
  return phraseSlop_;
}

- (void)setAllowLeadingWildcardWithBoolean:(jboolean)allowLeadingWildcard {
  self->allowLeadingWildcard_ = allowLeadingWildcard;
}

- (jboolean)getAllowLeadingWildcard {
  return allowLeadingWildcard_;
}

- (void)setDefaultOperatorWithOrgApacheLuceneQueryparserClassicQueryParser_Operator:(OrgApacheLuceneQueryparserClassicQueryParser_Operator *)op {
  JreStrongAssign(&self->operator__, op);
}

- (OrgApacheLuceneQueryparserClassicQueryParser_Operator *)getDefaultOperator {
  return operator__;
}

- (void)setLowercaseExpandedTermsWithBoolean:(jboolean)lowercaseExpandedTerms {
  self->lowercaseExpandedTerms_ = lowercaseExpandedTerms;
}

- (jboolean)getLowercaseExpandedTerms {
  return lowercaseExpandedTerms_;
}

- (void)setMultiTermRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:(OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)method {
  JreStrongAssign(&multiTermRewriteMethod_, method);
}

- (OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)getMultiTermRewriteMethod {
  return multiTermRewriteMethod_;
}

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  JreStrongAssign(&self->locale_, locale);
}

- (JavaUtilLocale *)getLocale {
  return locale_;
}

- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  JreStrongAssign(&self->timeZone_, timeZone);
}

- (JavaUtilTimeZone *)getTimeZone {
  return timeZone_;
}

- (void)setDateResolutionWithOrgApacheLuceneDocumentDateTools_Resolution:(OrgApacheLuceneDocumentDateTools_Resolution *)dateResolution {
  JreStrongAssign(&self->dateResolution_, dateResolution);
}

- (void)setDateResolutionWithNSString:(NSString *)fieldName
withOrgApacheLuceneDocumentDateTools_Resolution:(OrgApacheLuceneDocumentDateTools_Resolution *)dateResolution {
  if (fieldName == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Field cannot be null.");
  }
  if (fieldToDateResolution_ == nil) {
    JreStrongAssignAndConsume(&fieldToDateResolution_, new_JavaUtilHashMap_init());
  }
  [fieldToDateResolution_ putWithId:fieldName withId:dateResolution];
}

- (OrgApacheLuceneDocumentDateTools_Resolution *)getDateResolutionWithNSString:(NSString *)fieldName {
  if (fieldName == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Field cannot be null.");
  }
  if (fieldToDateResolution_ == nil) {
    return self->dateResolution_;
  }
  OrgApacheLuceneDocumentDateTools_Resolution *resolution = [fieldToDateResolution_ getWithId:fieldName];
  if (resolution == nil) {
    resolution = self->dateResolution_;
  }
  return resolution;
}

- (void)setAnalyzeRangeTermsWithBoolean:(jboolean)analyzeRangeTerms {
  self->analyzeRangeTerms_ = analyzeRangeTerms;
}

- (jboolean)getAnalyzeRangeTerms {
  return analyzeRangeTerms_;
}

- (void)setMaxDeterminizedStatesWithInt:(jint)maxDeterminizedStates {
  self->maxDeterminizedStates_ = maxDeterminizedStates;
}

- (jint)getMaxDeterminizedStates {
  return maxDeterminizedStates_;
}

- (void)addClauseWithJavaUtilList:(id<JavaUtilList>)clauses
                          withInt:(jint)conj
                          withInt:(jint)mods
   withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)q {
  jboolean required, prohibited;
  if ([((id<JavaUtilList>) nil_chk(clauses)) size] > 0 && conj == OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_AND) {
    OrgApacheLuceneSearchBooleanClause *c = [clauses getWithInt:[clauses size] - 1];
    if (![((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) isProhibited]) [clauses setWithInt:[clauses size] - 1 withId:create_OrgApacheLuceneSearchBooleanClause_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_([c getQuery], JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST))];
  }
  if ([clauses size] > 0 && operator__ == OrgApacheLuceneQueryparserClassicQueryParserBase_AND_OPERATOR && conj == OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_OR) {
    OrgApacheLuceneSearchBooleanClause *c = [clauses getWithInt:[clauses size] - 1];
    if (![((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) isProhibited]) [clauses setWithInt:[clauses size] - 1 withId:create_OrgApacheLuceneSearchBooleanClause_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_([c getQuery], JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD))];
  }
  if (q == nil) return;
  if (operator__ == OrgApacheLuceneQueryparserClassicQueryParserBase_OR_OPERATOR) {
    prohibited = (mods == OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_NOT);
    required = (mods == OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_REQ);
    if (conj == OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_AND && !prohibited) {
      required = true;
    }
  }
  else {
    prohibited = (mods == OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_NOT);
    required = (!prohibited && conj != OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_OR);
  }
  if (required && !prohibited) [clauses addWithId:[self newBooleanClauseWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST)]];
  else if (!required && !prohibited) [clauses addWithId:[self newBooleanClauseWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)]];
  else if (!required && prohibited) [clauses addWithId:[self newBooleanClauseWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST_NOT)]];
  else @throw create_JavaLangRuntimeException_initWithNSString_(@"Clause cannot be both required and prohibited");
}

- (OrgApacheLuceneSearchQuery *)getFieldQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)queryText
                                              withBoolean:(jboolean)quoted {
  return [self newFieldQueryWithOrgApacheLuceneAnalysisAnalyzer:[self getAnalyzer] withNSString:field withNSString:queryText withBoolean:quoted];
}

- (OrgApacheLuceneSearchQuery *)newFieldQueryWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
                                                                    withNSString:(NSString *)field
                                                                    withNSString:(NSString *)queryText
                                                                     withBoolean:(jboolean)quoted {
  OrgApacheLuceneSearchBooleanClause_Occur *occur = operator__ == JreLoadEnum(OrgApacheLuceneQueryparserClassicQueryParser_Operator, AND) ? JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST) : JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD);
  return [self createFieldQueryWithOrgApacheLuceneAnalysisAnalyzer:analyzer withOrgApacheLuceneSearchBooleanClause_Occur:occur withNSString:field withNSString:queryText withBoolean:quoted || autoGeneratePhraseQueries_ withInt:phraseSlop_];
}

- (OrgApacheLuceneSearchQuery *)getFieldQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)queryText
                                                  withInt:(jint)slop {
  OrgApacheLuceneSearchQuery *query = [self getFieldQueryWithNSString:field withNSString:queryText withBoolean:true];
  if ([query isKindOfClass:[OrgApacheLuceneSearchPhraseQuery class]]) {
    OrgApacheLuceneSearchPhraseQuery_Builder *builder = create_OrgApacheLuceneSearchPhraseQuery_Builder_init();
    [builder setSlopWithInt:slop];
    OrgApacheLuceneSearchPhraseQuery *pq = (OrgApacheLuceneSearchPhraseQuery *) cast_chk(query, [OrgApacheLuceneSearchPhraseQuery class]);
    IOSObjectArray *terms = [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(pq)) getTerms];
    IOSIntArray *positions = [pq getPositions];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(terms))->size_; ++i) {
      [builder addWithOrgApacheLuceneIndexTerm:IOSObjectArray_Get(terms, i) withInt:IOSIntArray_Get(nil_chk(positions), i)];
    }
    query = [builder build];
    [((OrgApacheLuceneSearchQuery *) nil_chk(query)) setBoostWithFloat:[pq getBoost]];
  }
  if ([query isKindOfClass:[OrgApacheLuceneSearchMultiPhraseQuery class]]) {
    [((OrgApacheLuceneSearchMultiPhraseQuery *) nil_chk(((OrgApacheLuceneSearchMultiPhraseQuery *) cast_chk(query, [OrgApacheLuceneSearchMultiPhraseQuery class])))) setSlopWithInt:slop];
  }
  return query;
}

- (OrgApacheLuceneSearchQuery *)getRangeQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)part1
                                             withNSString:(NSString *)part2
                                              withBoolean:(jboolean)startInclusive
                                              withBoolean:(jboolean)endInclusive {
  if (lowercaseExpandedTerms_) {
    part1 = part1 == nil ? nil : [part1 lowercaseStringWithJRELocale:locale_];
    part2 = part2 == nil ? nil : [part2 lowercaseStringWithJRELocale:locale_];
  }
  JavaTextDateFormat *df = JavaTextDateFormat_getDateInstanceWithInt_withJavaUtilLocale_(JavaTextDateFormat_SHORT, locale_);
  [((JavaTextDateFormat *) nil_chk(df)) setLenientWithBoolean:true];
  OrgApacheLuceneDocumentDateTools_Resolution *resolution = [self getDateResolutionWithNSString:field];
  @try {
    part1 = OrgApacheLuceneDocumentDateTools_dateToStringWithJavaUtilDate_withOrgApacheLuceneDocumentDateTools_Resolution_([df parseWithNSString:part1], resolution);
  }
  @catch (JavaLangException *e) {
  }
  @try {
    JavaUtilDate *d2 = [df parseWithNSString:part2];
    if (endInclusive) {
      JavaUtilCalendar *cal = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_withJavaUtilLocale_(timeZone_, locale_);
      [((JavaUtilCalendar *) nil_chk(cal)) setTimeWithJavaUtilDate:d2];
      [cal setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:23];
      [cal setWithInt:JavaUtilCalendar_MINUTE withInt:59];
      [cal setWithInt:JavaUtilCalendar_SECOND withInt:59];
      [cal setWithInt:JavaUtilCalendar_MILLISECOND withInt:999];
      d2 = [cal getTime];
    }
    part2 = OrgApacheLuceneDocumentDateTools_dateToStringWithJavaUtilDate_withOrgApacheLuceneDocumentDateTools_Resolution_(d2, resolution);
  }
  @catch (JavaLangException *e) {
  }
  return [self newRangeQueryWithNSString:field withNSString:part1 withNSString:part2 withBoolean:startInclusive withBoolean:endInclusive];
}

- (OrgApacheLuceneSearchBooleanClause *)newBooleanClauseWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)q
                                          withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)occur {
  return create_OrgApacheLuceneSearchBooleanClause_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(q, occur);
}

- (OrgApacheLuceneSearchQuery *)newPrefixQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)prefix {
  OrgApacheLuceneSearchPrefixQuery *query = create_OrgApacheLuceneSearchPrefixQuery_initWithOrgApacheLuceneIndexTerm_(prefix);
  [query setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:multiTermRewriteMethod_];
  return query;
}

- (OrgApacheLuceneSearchQuery *)newRegexpQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)regexp {
  OrgApacheLuceneSearchRegexpQuery *query = create_OrgApacheLuceneSearchRegexpQuery_initWithOrgApacheLuceneIndexTerm_withInt_withInt_(regexp, OrgApacheLuceneUtilAutomatonRegExp_ALL, maxDeterminizedStates_);
  [query setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:multiTermRewriteMethod_];
  return query;
}

- (OrgApacheLuceneSearchQuery *)newFuzzyQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                                withFloat:(jfloat)minimumSimilarity
                                                                  withInt:(jint)prefixLength {
  NSString *text = [((OrgApacheLuceneIndexTerm *) nil_chk(term)) text];
  jint numEdits = OrgApacheLuceneSearchFuzzyQuery_floatToEditsWithFloat_withInt_(minimumSimilarity, [((NSString *) nil_chk(text)) codePointCount:0 endIndex:((jint) [text length])]);
  return create_OrgApacheLuceneSearchFuzzyQuery_initWithOrgApacheLuceneIndexTerm_withInt_withInt_(term, numEdits, prefixLength);
}

- (OrgApacheLuceneUtilBytesRef *)analyzeMultitermTermWithNSString:(NSString *)field
                                                     withNSString:(NSString *)part {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_analyzeMultitermTermWithNSString_withNSString_(self, field, part);
}

- (OrgApacheLuceneUtilBytesRef *)analyzeMultitermTermWithNSString:(NSString *)field
                                                     withNSString:(NSString *)part
                              withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzerIn {
  if (analyzerIn == nil) analyzerIn = [self getAnalyzer];
  @try {
    OrgApacheLuceneAnalysisTokenStream *source = [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(analyzerIn)) tokenStreamWithNSString:field withNSString:part];
    NSException *__primaryException1 = nil;
    @try {
      [((OrgApacheLuceneAnalysisTokenStream *) nil_chk(source)) reset];
      id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute> termAtt = [source getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute_class_()];
      if (![source incrementToken]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"analyzer returned no terms for multiTerm term: ", part));
      OrgApacheLuceneUtilBytesRef *bytes = OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_([((id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute>) nil_chk(termAtt)) getBytesRef]);
      if ([source incrementToken]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"analyzer returned too many terms for multiTerm term: ", part));
      [source end];
      return bytes;
    }
    @catch (NSException *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (source != nil) {
        if (__primaryException1 != nil) {
          @try {
            [source close];
          } @catch (NSException *e) {
            [__primaryException1 addSuppressedWithNSException:e];
          }
        } else {
          [source close];
        }
      }
    }
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$", @"Error analyzing multiTerm term: ", part), e);
  }
}

- (OrgApacheLuceneSearchQuery *)newRangeQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)part1
                                             withNSString:(NSString *)part2
                                              withBoolean:(jboolean)startInclusive
                                              withBoolean:(jboolean)endInclusive {
  OrgApacheLuceneUtilBytesRef *start;
  OrgApacheLuceneUtilBytesRef *end;
  if (part1 == nil) {
    start = nil;
  }
  else {
    start = analyzeRangeTerms_ ? OrgApacheLuceneQueryparserClassicQueryParserBase_analyzeMultitermTermWithNSString_withNSString_(self, field, part1) : create_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(part1);
  }
  if (part2 == nil) {
    end = nil;
  }
  else {
    end = analyzeRangeTerms_ ? OrgApacheLuceneQueryparserClassicQueryParserBase_analyzeMultitermTermWithNSString_withNSString_(self, field, part2) : create_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(part2);
  }
  OrgApacheLuceneSearchTermRangeQuery *query = create_OrgApacheLuceneSearchTermRangeQuery_initWithNSString_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withBoolean_withBoolean_(field, start, end, startInclusive, endInclusive);
  [query setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:multiTermRewriteMethod_];
  return query;
}

- (OrgApacheLuceneSearchQuery *)newMatchAllDocsQuery {
  return create_OrgApacheLuceneSearchMatchAllDocsQuery_init();
}

- (OrgApacheLuceneSearchQuery *)newWildcardQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)t {
  OrgApacheLuceneSearchWildcardQuery *query = create_OrgApacheLuceneSearchWildcardQuery_initWithOrgApacheLuceneIndexTerm_withInt_(t, maxDeterminizedStates_);
  [query setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:multiTermRewriteMethod_];
  return query;
}

- (OrgApacheLuceneSearchQuery *)getBooleanQueryWithJavaUtilList:(id<JavaUtilList>)clauses {
  return [self getBooleanQueryWithJavaUtilList:clauses withBoolean:false];
}

- (OrgApacheLuceneSearchQuery *)getBooleanQueryWithJavaUtilList:(id<JavaUtilList>)clauses
                                                    withBoolean:(jboolean)disableCoord {
  if ([((id<JavaUtilList>) nil_chk(clauses)) size] == 0) {
    return nil;
  }
  OrgApacheLuceneSearchBooleanQuery_Builder *query = [self newBooleanQueryWithBoolean:disableCoord];
  for (OrgApacheLuceneSearchBooleanClause * __strong clause in clauses) {
    [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(query)) addWithOrgApacheLuceneSearchBooleanClause:clause];
  }
  return [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(query)) build];
}

- (OrgApacheLuceneSearchQuery *)getWildcardQueryWithNSString:(NSString *)field
                                                withNSString:(NSString *)termStr {
  if ([@"*" isEqual:field]) {
    if ([@"*" isEqual:termStr]) return [self newMatchAllDocsQuery];
  }
  if (!allowLeadingWildcard_ && ([((NSString *) nil_chk(termStr)) hasPrefix:@"*"] || [termStr hasPrefix:@"?"])) @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(@"'*' or '?' not allowed as first character in WildcardQuery");
  if (lowercaseExpandedTerms_) {
    termStr = [((NSString *) nil_chk(termStr)) lowercaseStringWithJRELocale:locale_];
  }
  OrgApacheLuceneIndexTerm *t = create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, termStr);
  return [self newWildcardQueryWithOrgApacheLuceneIndexTerm:t];
}

- (OrgApacheLuceneSearchQuery *)getRegexpQueryWithNSString:(NSString *)field
                                              withNSString:(NSString *)termStr {
  if (lowercaseExpandedTerms_) {
    termStr = [((NSString *) nil_chk(termStr)) lowercaseStringWithJRELocale:locale_];
  }
  OrgApacheLuceneIndexTerm *t = create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, termStr);
  return [self newRegexpQueryWithOrgApacheLuceneIndexTerm:t];
}

- (OrgApacheLuceneSearchQuery *)getPrefixQueryWithNSString:(NSString *)field
                                              withNSString:(NSString *)termStr {
  if (!allowLeadingWildcard_ && [((NSString *) nil_chk(termStr)) hasPrefix:@"*"]) @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(@"'*' not allowed as first character in PrefixQuery");
  if (lowercaseExpandedTerms_) {
    termStr = [((NSString *) nil_chk(termStr)) lowercaseStringWithJRELocale:locale_];
  }
  OrgApacheLuceneIndexTerm *t = create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, termStr);
  return [self newPrefixQueryWithOrgApacheLuceneIndexTerm:t];
}

- (OrgApacheLuceneSearchQuery *)getFuzzyQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)termStr
                                                withFloat:(jfloat)minSimilarity {
  if (lowercaseExpandedTerms_) {
    termStr = [((NSString *) nil_chk(termStr)) lowercaseStringWithJRELocale:locale_];
  }
  OrgApacheLuceneIndexTerm *t = create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, termStr);
  return [self newFuzzyQueryWithOrgApacheLuceneIndexTerm:t withFloat:minSimilarity withInt:fuzzyPrefixLength_];
}

- (OrgApacheLuceneSearchQuery *)handleBareTokenQueryWithNSString:(NSString *)qfield
                      withOrgApacheLuceneQueryparserClassicToken:(OrgApacheLuceneQueryparserClassicToken *)term
                      withOrgApacheLuceneQueryparserClassicToken:(OrgApacheLuceneQueryparserClassicToken *)fuzzySlop
                                                     withBoolean:(jboolean)prefix
                                                     withBoolean:(jboolean)wildcard
                                                     withBoolean:(jboolean)fuzzy
                                                     withBoolean:(jboolean)regexp {
  OrgApacheLuceneSearchQuery *q;
  NSString *termImage = [self discardEscapeCharWithNSString:((OrgApacheLuceneQueryparserClassicToken *) nil_chk(term))->image_];
  if (wildcard) {
    q = [self getWildcardQueryWithNSString:qfield withNSString:term->image_];
  }
  else if (prefix) {
    q = [self getPrefixQueryWithNSString:qfield withNSString:[self discardEscapeCharWithNSString:[((NSString *) nil_chk(term->image_)) substring:0 endIndex:((jint) [term->image_ length]) - 1]]];
  }
  else if (regexp) {
    q = [self getRegexpQueryWithNSString:qfield withNSString:[((NSString *) nil_chk(term->image_)) substring:1 endIndex:((jint) [term->image_ length]) - 1]];
  }
  else if (fuzzy) {
    q = [self handleBareFuzzyWithNSString:qfield withOrgApacheLuceneQueryparserClassicToken:fuzzySlop withNSString:termImage];
  }
  else {
    q = [self getFieldQueryWithNSString:qfield withNSString:termImage withBoolean:false];
  }
  return q;
}

- (OrgApacheLuceneSearchQuery *)handleBareFuzzyWithNSString:(NSString *)qfield
                 withOrgApacheLuceneQueryparserClassicToken:(OrgApacheLuceneQueryparserClassicToken *)fuzzySlop
                                               withNSString:(NSString *)termImage {
  OrgApacheLuceneSearchQuery *q;
  jfloat fms = fuzzyMinSim_;
  @try {
    fms = [((JavaLangFloat *) nil_chk(JavaLangFloat_valueOfWithNSString_([((NSString *) nil_chk(((OrgApacheLuceneQueryparserClassicToken *) nil_chk(fuzzySlop))->image_)) substring:1]))) floatValue];
  }
  @catch (JavaLangException *ignored) {
  }
  if (fms < 0.0f) {
    @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(@"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !");
  }
  else if (fms >= 1.0f && fms != JreFpToInt(fms)) {
    @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(@"Fractional edit distances are not allowed!");
  }
  q = [self getFuzzyQueryWithNSString:qfield withNSString:termImage withFloat:fms];
  return q;
}

- (OrgApacheLuceneSearchQuery *)handleQuotedTermWithNSString:(NSString *)qfield
                  withOrgApacheLuceneQueryparserClassicToken:(OrgApacheLuceneQueryparserClassicToken *)term
                  withOrgApacheLuceneQueryparserClassicToken:(OrgApacheLuceneQueryparserClassicToken *)fuzzySlop {
  jint s = phraseSlop_;
  if (fuzzySlop != nil) {
    @try {
      s = [((JavaLangFloat *) nil_chk(JavaLangFloat_valueOfWithNSString_([((NSString *) nil_chk(fuzzySlop->image_)) substring:1]))) intValue];
    }
    @catch (JavaLangException *ignored) {
    }
  }
  return [self getFieldQueryWithNSString:qfield withNSString:[self discardEscapeCharWithNSString:[((NSString *) nil_chk(((OrgApacheLuceneQueryparserClassicToken *) nil_chk(term))->image_)) substring:1 endIndex:((jint) [term->image_ length]) - 1]] withInt:s];
}

- (OrgApacheLuceneSearchQuery *)handleBoostWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)q
                               withOrgApacheLuceneQueryparserClassicToken:(OrgApacheLuceneQueryparserClassicToken *)boost {
  if (boost != nil) {
    jfloat f = (jfloat) 1.0;
    @try {
      f = [((JavaLangFloat *) nil_chk(JavaLangFloat_valueOfWithNSString_(boost->image_))) floatValue];
    }
    @catch (JavaLangException *ignored) {
    }
    if (q != nil) {
      [q setBoostWithFloat:f];
    }
  }
  return q;
}

- (NSString *)discardEscapeCharWithNSString:(NSString *)input {
  IOSCharArray *output = [IOSCharArray arrayWithLength:((jint) [((NSString *) nil_chk(input)) length])];
  jint length = 0;
  jboolean lastCharWasEscapeChar = false;
  jint codePointMultiplier = 0;
  jint codePoint = 0;
  for (jint i = 0; i < ((jint) [input length]); i++) {
    jchar curChar = [input charAtWithInt:i];
    if (codePointMultiplier > 0) {
      codePoint += OrgApacheLuceneQueryparserClassicQueryParserBase_hexToIntWithChar_(curChar) * codePointMultiplier;
      JreURShiftAssignInt(&codePointMultiplier, 4);
      if (codePointMultiplier == 0) {
        *IOSCharArray_GetRef(output, length++) = (jchar) codePoint;
        codePoint = 0;
      }
    }
    else if (lastCharWasEscapeChar) {
      if (curChar == 'u') {
        codePointMultiplier = 16 * 16 * 16;
      }
      else {
        *IOSCharArray_GetRef(output, length) = curChar;
        length++;
      }
      lastCharWasEscapeChar = false;
    }
    else {
      if (curChar == '\\') {
        lastCharWasEscapeChar = true;
      }
      else {
        *IOSCharArray_GetRef(output, length) = curChar;
        length++;
      }
    }
  }
  if (codePointMultiplier > 0) {
    @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(@"Truncated unicode escape sequence.");
  }
  if (lastCharWasEscapeChar) {
    @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(@"Term can not end with escape character.");
  }
  return [NSString stringWithCharacters:output offset:0 length:length];
}

+ (jint)hexToIntWithChar:(jchar)c {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_hexToIntWithChar_(c);
}

+ (NSString *)escapeWithNSString:(NSString *)s {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_escapeWithNSString_(s);
}

- (void)dealloc {
  RELEASE_(operator__);
  RELEASE_(multiTermRewriteMethod_);
  RELEASE_(field_);
  RELEASE_(locale_);
  RELEASE_(timeZone_);
  RELEASE_(dateResolution_);
  RELEASE_(fieldToDateResolution_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneQueryparserClassicQueryParserBase class]) {
    JreStrongAssign(&OrgApacheLuceneQueryparserClassicQueryParserBase_AND_OPERATOR, JreLoadEnum(OrgApacheLuceneQueryparserClassicQueryParser_Operator, AND));
    JreStrongAssign(&OrgApacheLuceneQueryparserClassicQueryParserBase_OR_OPERATOR, JreLoadEnum(OrgApacheLuceneQueryparserClassicQueryParser_Operator, OR));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneQueryparserClassicQueryParserBase)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "QueryParserBase", NULL, 0x4, NULL, NULL },
    { "init__WithNSString:withOrgApacheLuceneAnalysisAnalyzer:", "init", "V", 0x1, NULL, NULL },
    { "ReInitWithOrgApacheLuceneQueryparserClassicCharStream:", "ReInit", "V", 0x401, NULL, NULL },
    { "TopLevelQueryWithNSString:", "TopLevelQuery", "Lorg.apache.lucene.search.Query;", 0x401, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "parseWithNSString:", "parse", "Lorg.apache.lucene.search.Query;", 0x1, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "getField", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAutoGeneratePhraseQueries", NULL, "Z", 0x11, NULL, NULL },
    { "setAutoGeneratePhraseQueriesWithBoolean:", "setAutoGeneratePhraseQueries", "V", 0x11, NULL, NULL },
    { "getFuzzyMinSim", NULL, "F", 0x1, NULL, NULL },
    { "setFuzzyMinSimWithFloat:", "setFuzzyMinSim", "V", 0x1, NULL, NULL },
    { "getFuzzyPrefixLength", NULL, "I", 0x1, NULL, NULL },
    { "setFuzzyPrefixLengthWithInt:", "setFuzzyPrefixLength", "V", 0x1, NULL, NULL },
    { "setPhraseSlopWithInt:", "setPhraseSlop", "V", 0x1, NULL, NULL },
    { "getPhraseSlop", NULL, "I", 0x1, NULL, NULL },
    { "setAllowLeadingWildcardWithBoolean:", "setAllowLeadingWildcard", "V", 0x1, NULL, NULL },
    { "getAllowLeadingWildcard", NULL, "Z", 0x1, NULL, NULL },
    { "setDefaultOperatorWithOrgApacheLuceneQueryparserClassicQueryParser_Operator:", "setDefaultOperator", "V", 0x1, NULL, NULL },
    { "getDefaultOperator", NULL, "Lorg.apache.lucene.queryparser.classic.QueryParser$Operator;", 0x1, NULL, NULL },
    { "setLowercaseExpandedTermsWithBoolean:", "setLowercaseExpandedTerms", "V", 0x1, NULL, NULL },
    { "getLowercaseExpandedTerms", NULL, "Z", 0x1, NULL, NULL },
    { "setMultiTermRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:", "setMultiTermRewriteMethod", "V", 0x1, NULL, NULL },
    { "getMultiTermRewriteMethod", NULL, "Lorg.apache.lucene.search.MultiTermQuery$RewriteMethod;", 0x1, NULL, NULL },
    { "setLocaleWithJavaUtilLocale:", "setLocale", "V", 0x1, NULL, NULL },
    { "getLocale", NULL, "Ljava.util.Locale;", 0x1, NULL, NULL },
    { "setTimeZoneWithJavaUtilTimeZone:", "setTimeZone", "V", 0x1, NULL, NULL },
    { "getTimeZone", NULL, "Ljava.util.TimeZone;", 0x1, NULL, NULL },
    { "setDateResolutionWithOrgApacheLuceneDocumentDateTools_Resolution:", "setDateResolution", "V", 0x1, NULL, NULL },
    { "setDateResolutionWithNSString:withOrgApacheLuceneDocumentDateTools_Resolution:", "setDateResolution", "V", 0x1, NULL, NULL },
    { "getDateResolutionWithNSString:", "getDateResolution", "Lorg.apache.lucene.document.DateTools$Resolution;", 0x1, NULL, NULL },
    { "setAnalyzeRangeTermsWithBoolean:", "setAnalyzeRangeTerms", "V", 0x1, NULL, NULL },
    { "getAnalyzeRangeTerms", NULL, "Z", 0x1, NULL, NULL },
    { "setMaxDeterminizedStatesWithInt:", "setMaxDeterminizedStates", "V", 0x1, NULL, NULL },
    { "getMaxDeterminizedStates", NULL, "I", 0x1, NULL, NULL },
    { "addClauseWithJavaUtilList:withInt:withInt:withOrgApacheLuceneSearchQuery:", "addClause", "V", 0x4, NULL, "(Ljava/util/List<Lorg/apache/lucene/search/BooleanClause;>;IILorg/apache/lucene/search/Query;)V" },
    { "getFieldQueryWithNSString:withNSString:withBoolean:", "getFieldQuery", "Lorg.apache.lucene.search.Query;", 0x4, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "newFieldQueryWithOrgApacheLuceneAnalysisAnalyzer:withNSString:withNSString:withBoolean:", "newFieldQuery", "Lorg.apache.lucene.search.Query;", 0x4, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "getFieldQueryWithNSString:withNSString:withInt:", "getFieldQuery", "Lorg.apache.lucene.search.Query;", 0x4, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "getRangeQueryWithNSString:withNSString:withNSString:withBoolean:withBoolean:", "getRangeQuery", "Lorg.apache.lucene.search.Query;", 0x4, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "newBooleanClauseWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneSearchBooleanClause_Occur:", "newBooleanClause", "Lorg.apache.lucene.search.BooleanClause;", 0x4, NULL, NULL },
    { "newPrefixQueryWithOrgApacheLuceneIndexTerm:", "newPrefixQuery", "Lorg.apache.lucene.search.Query;", 0x4, NULL, NULL },
    { "newRegexpQueryWithOrgApacheLuceneIndexTerm:", "newRegexpQuery", "Lorg.apache.lucene.search.Query;", 0x4, NULL, NULL },
    { "newFuzzyQueryWithOrgApacheLuceneIndexTerm:withFloat:withInt:", "newFuzzyQuery", "Lorg.apache.lucene.search.Query;", 0x4, NULL, NULL },
    { "analyzeMultitermTermWithNSString:withNSString:", "analyzeMultitermTerm", "Lorg.apache.lucene.util.BytesRef;", 0x2, NULL, NULL },
    { "analyzeMultitermTermWithNSString:withNSString:withOrgApacheLuceneAnalysisAnalyzer:", "analyzeMultitermTerm", "Lorg.apache.lucene.util.BytesRef;", 0x4, NULL, NULL },
    { "newRangeQueryWithNSString:withNSString:withNSString:withBoolean:withBoolean:", "newRangeQuery", "Lorg.apache.lucene.search.Query;", 0x4, NULL, NULL },
    { "newMatchAllDocsQuery", NULL, "Lorg.apache.lucene.search.Query;", 0x4, NULL, NULL },
    { "newWildcardQueryWithOrgApacheLuceneIndexTerm:", "newWildcardQuery", "Lorg.apache.lucene.search.Query;", 0x4, NULL, NULL },
    { "getBooleanQueryWithJavaUtilList:", "getBooleanQuery", "Lorg.apache.lucene.search.Query;", 0x4, "Lorg.apache.lucene.queryparser.classic.ParseException;", "(Ljava/util/List<Lorg/apache/lucene/search/BooleanClause;>;)Lorg/apache/lucene/search/Query;" },
    { "getBooleanQueryWithJavaUtilList:withBoolean:", "getBooleanQuery", "Lorg.apache.lucene.search.Query;", 0x4, "Lorg.apache.lucene.queryparser.classic.ParseException;", "(Ljava/util/List<Lorg/apache/lucene/search/BooleanClause;>;Z)Lorg/apache/lucene/search/Query;" },
    { "getWildcardQueryWithNSString:withNSString:", "getWildcardQuery", "Lorg.apache.lucene.search.Query;", 0x4, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "getRegexpQueryWithNSString:withNSString:", "getRegexpQuery", "Lorg.apache.lucene.search.Query;", 0x4, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "getPrefixQueryWithNSString:withNSString:", "getPrefixQuery", "Lorg.apache.lucene.search.Query;", 0x4, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "getFuzzyQueryWithNSString:withNSString:withFloat:", "getFuzzyQuery", "Lorg.apache.lucene.search.Query;", 0x4, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "handleBareTokenQueryWithNSString:withOrgApacheLuceneQueryparserClassicToken:withOrgApacheLuceneQueryparserClassicToken:withBoolean:withBoolean:withBoolean:withBoolean:", "handleBareTokenQuery", "Lorg.apache.lucene.search.Query;", 0x0, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "handleBareFuzzyWithNSString:withOrgApacheLuceneQueryparserClassicToken:withNSString:", "handleBareFuzzy", "Lorg.apache.lucene.search.Query;", 0x0, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "handleQuotedTermWithNSString:withOrgApacheLuceneQueryparserClassicToken:withOrgApacheLuceneQueryparserClassicToken:", "handleQuotedTerm", "Lorg.apache.lucene.search.Query;", 0x0, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "handleBoostWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneQueryparserClassicToken:", "handleBoost", "Lorg.apache.lucene.search.Query;", 0x0, NULL, NULL },
    { "discardEscapeCharWithNSString:", "discardEscapeChar", "Ljava.lang.String;", 0x0, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "hexToIntWithChar:", "hexToInt", "I", 0x18, "Lorg.apache.lucene.queryparser.classic.ParseException;", NULL },
    { "escapeWithNSString:", "escape", "Ljava.lang.String;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CONJ_NONE", "CONJ_NONE", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_NONE },
    { "CONJ_AND", "CONJ_AND", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_AND },
    { "CONJ_OR", "CONJ_OR", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_OR },
    { "MOD_NONE", "MOD_NONE", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_NONE },
    { "MOD_NOT", "MOD_NOT", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_NOT },
    { "MOD_REQ", "MOD_REQ", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_REQ },
    { "AND_OPERATOR", "AND_OPERATOR", 0x19, "Lorg.apache.lucene.queryparser.classic.QueryParser$Operator;", &OrgApacheLuceneQueryparserClassicQueryParserBase_AND_OPERATOR, NULL, .constantValue.asLong = 0 },
    { "OR_OPERATOR", "OR_OPERATOR", 0x19, "Lorg.apache.lucene.queryparser.classic.QueryParser$Operator;", &OrgApacheLuceneQueryparserClassicQueryParserBase_OR_OPERATOR, NULL, .constantValue.asLong = 0 },
    { "operator__", "operator", 0x0, "Lorg.apache.lucene.queryparser.classic.QueryParser$Operator;", NULL, NULL, .constantValue.asLong = 0 },
    { "lowercaseExpandedTerms_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "multiTermRewriteMethod_", NULL, 0x0, "Lorg.apache.lucene.search.MultiTermQuery$RewriteMethod;", NULL, NULL, .constantValue.asLong = 0 },
    { "allowLeadingWildcard_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "field_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "phraseSlop_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "fuzzyMinSim_", NULL, 0x0, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "fuzzyPrefixLength_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "locale_", NULL, 0x0, "Ljava.util.Locale;", NULL, NULL, .constantValue.asLong = 0 },
    { "timeZone_", NULL, 0x0, "Ljava.util.TimeZone;", NULL, NULL, .constantValue.asLong = 0 },
    { "dateResolution_", NULL, 0x0, "Lorg.apache.lucene.document.DateTools$Resolution;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldToDateResolution_", NULL, 0x0, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/document/DateTools$Resolution;>;", .constantValue.asLong = 0 },
    { "analyzeRangeTerms_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "autoGeneratePhraseQueries_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "maxDeterminizedStates_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.queryparser.classic.QueryParserBase$MethodRemovedUseAnother;"};
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserClassicQueryParserBase = { 2, "QueryParserBase", "org.apache.lucene.queryparser.classic", NULL, 0x401, 60, methods, 23, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneQueryparserClassicQueryParserBase;
}

@end

void OrgApacheLuceneQueryparserClassicQueryParserBase_init(OrgApacheLuceneQueryparserClassicQueryParserBase *self) {
  OrgApacheLuceneUtilQueryBuilder_initWithOrgApacheLuceneAnalysisAnalyzer_(self, nil);
  JreStrongAssign(&self->operator__, OrgApacheLuceneQueryparserClassicQueryParserBase_OR_OPERATOR);
  self->lowercaseExpandedTerms_ = true;
  JreStrongAssign(&self->multiTermRewriteMethod_, JreLoadStatic(OrgApacheLuceneSearchMultiTermQuery, CONSTANT_SCORE_REWRITE));
  self->allowLeadingWildcard_ = false;
  self->phraseSlop_ = 0;
  self->fuzzyMinSim_ = OrgApacheLuceneSearchFuzzyQuery_defaultMinSimilarity;
  self->fuzzyPrefixLength_ = OrgApacheLuceneSearchFuzzyQuery_defaultPrefixLength;
  JreStrongAssign(&self->locale_, JavaUtilLocale_getDefault());
  JreStrongAssign(&self->timeZone_, JavaUtilTimeZone_getDefault());
  JreStrongAssign(&self->dateResolution_, nil);
  JreStrongAssign(&self->fieldToDateResolution_, nil);
  self->analyzeRangeTerms_ = false;
  self->maxDeterminizedStates_ = OrgApacheLuceneUtilAutomatonOperations_DEFAULT_MAX_DETERMINIZED_STATES;
}

void OrgApacheLuceneQueryparserClassicQueryParserBase_setAutoGeneratePhraseQueriesWithBoolean_(OrgApacheLuceneQueryparserClassicQueryParserBase *self, jboolean value) {
  self->autoGeneratePhraseQueries_ = value;
}

OrgApacheLuceneUtilBytesRef *OrgApacheLuceneQueryparserClassicQueryParserBase_analyzeMultitermTermWithNSString_withNSString_(OrgApacheLuceneQueryparserClassicQueryParserBase *self, NSString *field, NSString *part) {
  return [self analyzeMultitermTermWithNSString:field withNSString:part withOrgApacheLuceneAnalysisAnalyzer:[self getAnalyzer]];
}

jint OrgApacheLuceneQueryparserClassicQueryParserBase_hexToIntWithChar_(jchar c) {
  OrgApacheLuceneQueryparserClassicQueryParserBase_initialize();
  if ('0' <= c && c <= '9') {
    return c - '0';
  }
  else if ('a' <= c && c <= 'f') {
    return c - 'a' + 10;
  }
  else if ('A' <= c && c <= 'F') {
    return c - 'A' + 10;
  }
  else {
    @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(JreStrcat("$C", @"Non-hex character in Unicode escape sequence: ", c));
  }
}

NSString *OrgApacheLuceneQueryparserClassicQueryParserBase_escapeWithNSString_(NSString *s) {
  OrgApacheLuceneQueryparserClassicQueryParserBase_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(s)) length]); i++) {
    jchar c = [s charAtWithInt:i];
    if (c == '\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '"' || c == '{' || c == '}' || c == '~' || c == '*' || c == '?' || c == '|' || c == '&' || c == '/') {
      [sb appendWithChar:'\\'];
    }
    [sb appendWithChar:c];
  }
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserClassicQueryParserBase)

@implementation OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MethodRemovedUseAnother", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother = { 2, "MethodRemovedUseAnother", "org.apache.lucene.queryparser.classic", "QueryParserBase", 0x9, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother;
}

@end

void OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother_init(OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother *self) {
  NSException_init(self);
}

OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother *new_OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother, init)
}

OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother *create_OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother)
