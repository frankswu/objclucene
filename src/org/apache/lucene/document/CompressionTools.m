//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/document/CompressionTools.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/util/zip/DataFormatException.h"
#include "java/util/zip/Deflater.h"
#include "java/util/zip/Inflater.h"
#include "org/apache/lucene/document/CompressionTools.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/UnicodeUtil.h"

@interface OrgApacheLuceneDocumentCompressionTools ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgApacheLuceneDocumentCompressionTools_init(OrgApacheLuceneDocumentCompressionTools *self);

__attribute__((unused)) static OrgApacheLuceneDocumentCompressionTools *new_OrgApacheLuceneDocumentCompressionTools_init() NS_RETURNS_RETAINED;

@implementation OrgApacheLuceneDocumentCompressionTools

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneDocumentCompressionTools_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)value
                                withInt:(jint)offset
                                withInt:(jint)length
                                withInt:(jint)compressionLevel {
  return OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_withInt_(value, offset, length, compressionLevel);
}

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)value
                                withInt:(jint)offset
                                withInt:(jint)length {
  return OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_(value, offset, length);
}

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)value {
  return OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_(value);
}

+ (IOSByteArray *)compressStringWithNSString:(NSString *)value {
  return OrgApacheLuceneDocumentCompressionTools_compressStringWithNSString_(value);
}

+ (IOSByteArray *)compressStringWithNSString:(NSString *)value
                                     withInt:(jint)compressionLevel {
  return OrgApacheLuceneDocumentCompressionTools_compressStringWithNSString_withInt_(value, compressionLevel);
}

+ (IOSByteArray *)decompressWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes {
  return OrgApacheLuceneDocumentCompressionTools_decompressWithOrgApacheLuceneUtilBytesRef_(bytes);
}

+ (IOSByteArray *)decompressWithByteArray:(IOSByteArray *)value {
  return OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_(value);
}

+ (IOSByteArray *)decompressWithByteArray:(IOSByteArray *)value
                                  withInt:(jint)offset
                                  withInt:(jint)length {
  return OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_withInt_withInt_(value, offset, length);
}

+ (NSString *)decompressStringWithByteArray:(IOSByteArray *)value {
  return OrgApacheLuceneDocumentCompressionTools_decompressStringWithByteArray_(value);
}

+ (NSString *)decompressStringWithByteArray:(IOSByteArray *)value
                                    withInt:(jint)offset
                                    withInt:(jint)length {
  return OrgApacheLuceneDocumentCompressionTools_decompressStringWithByteArray_withInt_withInt_(value, offset, length);
}

+ (NSString *)decompressStringWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes {
  return OrgApacheLuceneDocumentCompressionTools_decompressStringWithOrgApacheLuceneUtilBytesRef_(bytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CompressionTools", NULL, 0x2, NULL, NULL },
    { "compressWithByteArray:withInt:withInt:withInt:", "compress", "[B", 0x9, NULL, NULL },
    { "compressWithByteArray:withInt:withInt:", "compress", "[B", 0x9, NULL, NULL },
    { "compressWithByteArray:", "compress", "[B", 0x9, NULL, NULL },
    { "compressStringWithNSString:", "compressString", "[B", 0x9, NULL, NULL },
    { "compressStringWithNSString:withInt:", "compressString", "[B", 0x9, NULL, NULL },
    { "decompressWithOrgApacheLuceneUtilBytesRef:", "decompress", "[B", 0x9, "Ljava.util.zip.DataFormatException;", NULL },
    { "decompressWithByteArray:", "decompress", "[B", 0x9, "Ljava.util.zip.DataFormatException;", NULL },
    { "decompressWithByteArray:withInt:withInt:", "decompress", "[B", 0x9, "Ljava.util.zip.DataFormatException;", NULL },
    { "decompressStringWithByteArray:", "decompressString", "Ljava.lang.String;", 0x9, "Ljava.util.zip.DataFormatException;", NULL },
    { "decompressStringWithByteArray:withInt:withInt:", "decompressString", "Ljava.lang.String;", 0x9, "Ljava.util.zip.DataFormatException;", NULL },
    { "decompressStringWithOrgApacheLuceneUtilBytesRef:", "decompressString", "Ljava.lang.String;", 0x9, "Ljava.util.zip.DataFormatException;", NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneDocumentCompressionTools = { 2, "CompressionTools", "org.apache.lucene.document", NULL, 0x1, 12, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneDocumentCompressionTools;
}

@end

void OrgApacheLuceneDocumentCompressionTools_init(OrgApacheLuceneDocumentCompressionTools *self) {
  NSObject_init(self);
}

OrgApacheLuceneDocumentCompressionTools *new_OrgApacheLuceneDocumentCompressionTools_init() {
  OrgApacheLuceneDocumentCompressionTools *self = [OrgApacheLuceneDocumentCompressionTools alloc];
  OrgApacheLuceneDocumentCompressionTools_init(self);
  return self;
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_withInt_(IOSByteArray *value, jint offset, jint length, jint compressionLevel) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  JavaIoByteArrayOutputStream *bos = [new_JavaIoByteArrayOutputStream_initWithInt_(length) autorelease];
  JavaUtilZipDeflater *compressor = [new_JavaUtilZipDeflater_init() autorelease];
  @try {
    [compressor setLevelWithInt:compressionLevel];
    [compressor setInputWithByteArray:value withInt:offset withInt:length];
    [compressor finish];
    IOSByteArray *buf = [IOSByteArray arrayWithLength:1024];
    while (![compressor finished]) {
      jint count = [compressor deflateWithByteArray:buf];
      [bos writeWithByteArray:buf withInt:0 withInt:count];
    }
  }
  @finally {
    [compressor end];
  }
  return [bos toByteArray];
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_(IOSByteArray *value, jint offset, jint length) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  return OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_withInt_(value, offset, length, JavaUtilZipDeflater_BEST_COMPRESSION);
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_(IOSByteArray *value) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  return OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_withInt_(value, 0, ((IOSByteArray *) nil_chk(value))->size_, JavaUtilZipDeflater_BEST_COMPRESSION);
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressStringWithNSString_(NSString *value) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  return OrgApacheLuceneDocumentCompressionTools_compressStringWithNSString_withInt_(value, JavaUtilZipDeflater_BEST_COMPRESSION);
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressStringWithNSString_withInt_(NSString *value, jint compressionLevel) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  IOSByteArray *b = [IOSByteArray arrayWithLength:OrgApacheLuceneUtilUnicodeUtil_MAX_UTF8_BYTES_PER_CHAR * ((jint) [((NSString *) nil_chk(value)) length])];
  jint len = OrgApacheLuceneUtilUnicodeUtil_UTF16toUTF8WithJavaLangCharSequence_withInt_withInt_withByteArray_(value, 0, ((jint) [value length]), b);
  return OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_withInt_(b, 0, len, compressionLevel);
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_decompressWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *bytes) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  return OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes))->bytes_, bytes->offset_, bytes->length_);
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_(IOSByteArray *value) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  return OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_withInt_withInt_(value, 0, ((IOSByteArray *) nil_chk(value))->size_);
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_withInt_withInt_(IOSByteArray *value, jint offset, jint length) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  JavaIoByteArrayOutputStream *bos = [new_JavaIoByteArrayOutputStream_initWithInt_(length) autorelease];
  JavaUtilZipInflater *decompressor = [new_JavaUtilZipInflater_init() autorelease];
  @try {
    [decompressor setInputWithByteArray:value withInt:offset withInt:length];
    IOSByteArray *buf = [IOSByteArray arrayWithLength:1024];
    while (![decompressor finished]) {
      jint count = [decompressor inflateWithByteArray:buf];
      [bos writeWithByteArray:buf withInt:0 withInt:count];
    }
  }
  @finally {
    [decompressor end];
  }
  return [bos toByteArray];
}

NSString *OrgApacheLuceneDocumentCompressionTools_decompressStringWithByteArray_(IOSByteArray *value) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  return OrgApacheLuceneDocumentCompressionTools_decompressStringWithByteArray_withInt_withInt_(value, 0, ((IOSByteArray *) nil_chk(value))->size_);
}

NSString *OrgApacheLuceneDocumentCompressionTools_decompressStringWithByteArray_withInt_withInt_(IOSByteArray *value, jint offset, jint length) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  IOSByteArray *bytes = OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_withInt_withInt_(value, offset, length);
  IOSCharArray *result = [IOSCharArray arrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_];
  jint len = OrgApacheLuceneUtilUnicodeUtil_UTF8toUTF16WithByteArray_withInt_withInt_withCharArray_(bytes, 0, bytes->size_, result);
  return [NSString stringWithCharacters:result offset:0 length:len];
}

NSString *OrgApacheLuceneDocumentCompressionTools_decompressStringWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *bytes) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  return OrgApacheLuceneDocumentCompressionTools_decompressStringWithByteArray_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes))->bytes_, bytes->offset_, bytes->length_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneDocumentCompressionTools)
