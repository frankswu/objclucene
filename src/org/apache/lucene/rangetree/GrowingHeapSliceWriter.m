//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./sandbox/src/java/org/apache/lucene/rangetree/GrowingHeapSliceWriter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/apache/lucene/rangetree/GrowingHeapSliceWriter.h"
#include "org/apache/lucene/rangetree/HeapSliceReader.h"
#include "org/apache/lucene/rangetree/SliceReader.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

@interface OrgApacheLuceneRangetreeGrowingHeapSliceWriter () {
 @public
  jint nextWrite_;
}

- (IOSIntArray *)growExactWithIntArray:(IOSIntArray *)arr
                               withInt:(jint)size;

- (IOSLongArray *)growExactWithLongArray:(IOSLongArray *)arr
                                 withInt:(jint)size;

@end

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneRangetreeGrowingHeapSliceWriter_growExactWithIntArray_withInt_(OrgApacheLuceneRangetreeGrowingHeapSliceWriter *self, IOSIntArray *arr, jint size);

__attribute__((unused)) static IOSLongArray *OrgApacheLuceneRangetreeGrowingHeapSliceWriter_growExactWithLongArray_withInt_(OrgApacheLuceneRangetreeGrowingHeapSliceWriter *self, IOSLongArray *arr, jint size);

@implementation OrgApacheLuceneRangetreeGrowingHeapSliceWriter

- (instancetype)initWithInt:(jint)maxSize {
  OrgApacheLuceneRangetreeGrowingHeapSliceWriter_initWithInt_(self, maxSize);
  return self;
}

- (IOSIntArray *)growExactWithIntArray:(IOSIntArray *)arr
                               withInt:(jint)size {
  return OrgApacheLuceneRangetreeGrowingHeapSliceWriter_growExactWithIntArray_withInt_(self, arr, size);
}

- (IOSLongArray *)growExactWithLongArray:(IOSLongArray *)arr
                                 withInt:(jint)size {
  return OrgApacheLuceneRangetreeGrowingHeapSliceWriter_growExactWithLongArray_withInt_(self, arr, size);
}

- (void)appendWithLong:(jlong)value
              withLong:(jlong)ord
               withInt:(jint)docID {
  JreAssert((ord == nextWrite_), (@"org/apache/lucene/rangetree/GrowingHeapSliceWriter.java:53 condition failed: assert ord == nextWrite;"));
  if (((IOSLongArray *) nil_chk(values_))->size_ == nextWrite_) {
    jint nextSize = JavaLangMath_minWithInt_withInt_(maxSize_, OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(nextWrite_ + 1, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT));
    JreAssert((nextSize > nextWrite_), (JreStrcat("$I$I", @"nextSize=", nextSize, @" vs nextWrite=", nextWrite_)));
    JreStrongAssign(&values_, OrgApacheLuceneRangetreeGrowingHeapSliceWriter_growExactWithLongArray_withInt_(self, values_, nextSize));
    JreStrongAssign(&ords_, OrgApacheLuceneRangetreeGrowingHeapSliceWriter_growExactWithLongArray_withInt_(self, ords_, nextSize));
    JreStrongAssign(&docIDs_, OrgApacheLuceneRangetreeGrowingHeapSliceWriter_growExactWithIntArray_withInt_(self, docIDs_, nextSize));
  }
  *IOSLongArray_GetRef(nil_chk(values_), nextWrite_) = value;
  *IOSLongArray_GetRef(nil_chk(ords_), nextWrite_) = ord;
  *IOSIntArray_GetRef(nil_chk(docIDs_), nextWrite_) = docID;
  nextWrite_++;
}

- (id<OrgApacheLuceneRangetreeSliceReader>)getReaderWithLong:(jlong)start {
  return [new_OrgApacheLuceneRangetreeHeapSliceReader_initWithLongArray_withLongArray_withIntArray_withInt_withInt_(values_, ords_, docIDs_, (jint) start, nextWrite_) autorelease];
}

- (void)close {
}

- (void)destroy {
}

- (NSString *)description {
  return JreStrcat("$I$IC", @"GrowingHeapSliceWriter(count=", nextWrite_, @" alloc=", ((IOSLongArray *) nil_chk(values_))->size_, ')');
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(docIDs_);
  RELEASE_(ords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "GrowingHeapSliceWriter", NULL, 0x1, NULL, NULL },
    { "growExactWithIntArray:withInt:", "growExact", "[I", 0x2, NULL, NULL },
    { "growExactWithLongArray:withInt:", "growExact", "[J", 0x2, NULL, NULL },
    { "appendWithLong:withLong:withInt:", "append", "V", 0x1, NULL, NULL },
    { "getReaderWithLong:", "getReader", "Lorg.apache.lucene.rangetree.SliceReader;", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "destroy", NULL, "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "values_", NULL, 0x0, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "docIDs_", NULL, 0x0, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "ords_", NULL, 0x0, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "nextWrite_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "maxSize_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneRangetreeGrowingHeapSliceWriter = { 2, "GrowingHeapSliceWriter", "org.apache.lucene.rangetree", NULL, 0x10, 8, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneRangetreeGrowingHeapSliceWriter;
}

@end

void OrgApacheLuceneRangetreeGrowingHeapSliceWriter_initWithInt_(OrgApacheLuceneRangetreeGrowingHeapSliceWriter *self, jint maxSize) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->values_, [IOSLongArray newArrayWithLength:16]);
  JreStrongAssignAndConsume(&self->docIDs_, [IOSIntArray newArrayWithLength:16]);
  JreStrongAssignAndConsume(&self->ords_, [IOSLongArray newArrayWithLength:16]);
  self->maxSize_ = maxSize;
}

OrgApacheLuceneRangetreeGrowingHeapSliceWriter *new_OrgApacheLuceneRangetreeGrowingHeapSliceWriter_initWithInt_(jint maxSize) {
  OrgApacheLuceneRangetreeGrowingHeapSliceWriter *self = [OrgApacheLuceneRangetreeGrowingHeapSliceWriter alloc];
  OrgApacheLuceneRangetreeGrowingHeapSliceWriter_initWithInt_(self, maxSize);
  return self;
}

IOSIntArray *OrgApacheLuceneRangetreeGrowingHeapSliceWriter_growExactWithIntArray_withInt_(OrgApacheLuceneRangetreeGrowingHeapSliceWriter *self, IOSIntArray *arr, jint size) {
  JreAssert((size > ((IOSIntArray *) nil_chk(arr))->size_), (@"org/apache/lucene/rangetree/GrowingHeapSliceWriter.java:38 condition failed: assert size > arr.length;"));
  IOSIntArray *newArr = [IOSIntArray arrayWithLength:size];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr, 0, newArr, 0, arr->size_);
  return newArr;
}

IOSLongArray *OrgApacheLuceneRangetreeGrowingHeapSliceWriter_growExactWithLongArray_withInt_(OrgApacheLuceneRangetreeGrowingHeapSliceWriter *self, IOSLongArray *arr, jint size) {
  JreAssert((size > ((IOSLongArray *) nil_chk(arr))->size_), (@"org/apache/lucene/rangetree/GrowingHeapSliceWriter.java:45 condition failed: assert size > arr.length;"));
  IOSLongArray *newArr = [IOSLongArray arrayWithLength:size];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr, 0, newArr, 0, arr->size_);
  return newArr;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneRangetreeGrowingHeapSliceWriter)
