//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/ByteBufferIndexInput.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/nio/Buffer.h"
#include "java/nio/BufferUnderflowException.h"
#include "java/nio/ByteBuffer.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/store/ByteBufferIndexInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/WeakIdentityMap.h"

@interface OrgApacheLuceneStoreByteBufferIndexInput ()

- (void)setPosWithLong:(jlong)pos
               withInt:(jint)bi;

- (IOSObjectArray *)buildSliceWithJavaNioByteBufferArray:(IOSObjectArray *)buffers
                                                withLong:(jlong)offset
                                                withLong:(jlong)length;

- (void)unsetBuffers;

- (void)freeBufferWithJavaNioByteBuffer:(JavaNioByteBuffer *)b;

@end

__attribute__((unused)) static void OrgApacheLuceneStoreByteBufferIndexInput_setPosWithLong_withInt_(OrgApacheLuceneStoreByteBufferIndexInput *self, jlong pos, jint bi);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneStoreByteBufferIndexInput_buildSliceWithJavaNioByteBufferArray_withLong_withLong_(OrgApacheLuceneStoreByteBufferIndexInput *self, IOSObjectArray *buffers, jlong offset, jlong length);

__attribute__((unused)) static void OrgApacheLuceneStoreByteBufferIndexInput_unsetBuffers(OrgApacheLuceneStoreByteBufferIndexInput *self);

__attribute__((unused)) static void OrgApacheLuceneStoreByteBufferIndexInput_freeBufferWithJavaNioByteBuffer_(OrgApacheLuceneStoreByteBufferIndexInput *self, JavaNioByteBuffer *b);

@interface OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner : NSObject

@end

@interface OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl () {
 @public
  jint offset_;
}

@end

@implementation OrgApacheLuceneStoreByteBufferIndexInput

+ (OrgApacheLuceneStoreByteBufferIndexInput *)newInstanceWithNSString:(NSString *)resourceDescription
                                           withJavaNioByteBufferArray:(IOSObjectArray *)buffers
                                                             withLong:(jlong)length
                                                              withInt:(jint)chunkSizePower
           withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner:(id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner>)cleaner
                                                          withBoolean:(jboolean)trackClones {
  return OrgApacheLuceneStoreByteBufferIndexInput_newInstanceWithNSString_withJavaNioByteBufferArray_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withBoolean_(resourceDescription, buffers, length, chunkSizePower, cleaner, trackClones);
}

- (instancetype)initWithNSString:(NSString *)resourceDescription
      withJavaNioByteBufferArray:(IOSObjectArray *)buffers
                        withLong:(jlong)length
                         withInt:(jint)chunkSizePower
withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner:(id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner>)cleaner
withOrgApacheLuceneUtilWeakIdentityMap:(OrgApacheLuceneUtilWeakIdentityMap *)clones {
  OrgApacheLuceneStoreByteBufferIndexInput_initWithNSString_withJavaNioByteBufferArray_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(self, resourceDescription, buffers, length, chunkSizePower, cleaner, clones);
  return self;
}

- (jbyte)readByte {
  @try {
    return [((JavaNioByteBuffer *) nil_chk(curBuf_)) get];
  }
  @catch (JavaNioBufferUnderflowException *e) {
    do {
      curBufIndex_++;
      if (curBufIndex_ >= ((IOSObjectArray *) nil_chk(buffers_))->size_) {
        @throw [new_JavaIoEOFException_initWithNSString_(JreStrcat("$@", @"read past EOF: ", self)) autorelease];
      }
      JreStrongAssign(&curBuf_, IOSObjectArray_Get(buffers_, curBufIndex_));
      [((JavaNioByteBuffer *) nil_chk(curBuf_)) positionWithInt:0];
    }
    while (![curBuf_ hasRemaining]);
    return [((JavaNioByteBuffer *) nil_chk(curBuf_)) get];
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len {
  @try {
    [((JavaNioByteBuffer *) nil_chk(curBuf_)) getWithByteArray:b withInt:offset withInt:len];
  }
  @catch (JavaNioBufferUnderflowException *e) {
    jint curAvail = [((JavaNioByteBuffer *) nil_chk(curBuf_)) remaining];
    while (len > curAvail) {
      [curBuf_ getWithByteArray:b withInt:offset withInt:curAvail];
      len -= curAvail;
      offset += curAvail;
      curBufIndex_++;
      if (curBufIndex_ >= ((IOSObjectArray *) nil_chk(buffers_))->size_) {
        @throw [new_JavaIoEOFException_initWithNSString_(JreStrcat("$@", @"read past EOF: ", self)) autorelease];
      }
      JreStrongAssign(&curBuf_, IOSObjectArray_Get(buffers_, curBufIndex_));
      [((JavaNioByteBuffer *) nil_chk(curBuf_)) positionWithInt:0];
      curAvail = [curBuf_ remaining];
    }
    [((JavaNioByteBuffer *) nil_chk(curBuf_)) getWithByteArray:b withInt:offset withInt:len];
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (jshort)readShort {
  @try {
    return [((JavaNioByteBuffer *) nil_chk(curBuf_)) getShort];
  }
  @catch (JavaNioBufferUnderflowException *e) {
    return [super readShort];
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (jint)readInt {
  @try {
    return [((JavaNioByteBuffer *) nil_chk(curBuf_)) getInt];
  }
  @catch (JavaNioBufferUnderflowException *e) {
    return [super readInt];
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (jlong)readLong {
  @try {
    return [((JavaNioByteBuffer *) nil_chk(curBuf_)) getLong];
  }
  @catch (JavaNioBufferUnderflowException *e) {
    return [super readLong];
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (jlong)getFilePointer {
  @try {
    return (JreLShift64(((jlong) curBufIndex_), chunkSizePower_)) + [((JavaNioByteBuffer *) nil_chk(curBuf_)) position];
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (void)seekWithLong:(jlong)pos {
  jint bi = (jint) (JreRShift64(pos, chunkSizePower_));
  @try {
    if (bi == curBufIndex_) {
      [((JavaNioByteBuffer *) nil_chk(curBuf_)) positionWithInt:(jint) (pos & chunkSizeMask_)];
    }
    else {
      JavaNioByteBuffer *b = IOSObjectArray_Get(nil_chk(buffers_), bi);
      [((JavaNioByteBuffer *) nil_chk(b)) positionWithInt:(jint) (pos & chunkSizeMask_)];
      self->curBufIndex_ = bi;
      JreStrongAssign(&self->curBuf_, b);
    }
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [new_JavaIoEOFException_initWithNSString_(JreStrcat("$@", @"seek past EOF: ", self)) autorelease];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw [new_JavaIoEOFException_initWithNSString_(JreStrcat("$@", @"seek past EOF: ", self)) autorelease];
  }
  @catch (JavaLangRuntimeException *e) {
    @throw [new_JavaIoEOFException_initWithNSString_(JreStrcat("$@", @"seek past EOF: ", self)) autorelease];
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (jbyte)readByteWithLong:(jlong)pos {
  @try {
    jint bi = (jint) (JreRShift64(pos, chunkSizePower_));
    return [((JavaNioByteBuffer *) nil_chk(IOSObjectArray_Get(nil_chk(buffers_), bi))) getWithInt:(jint) (pos & chunkSizeMask_)];
  }
  @catch (JavaLangIndexOutOfBoundsException *ioobe) {
    @throw [new_JavaIoEOFException_initWithNSString_(JreStrcat("$@", @"seek past EOF: ", self)) autorelease];
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (void)setPosWithLong:(jlong)pos
               withInt:(jint)bi {
  OrgApacheLuceneStoreByteBufferIndexInput_setPosWithLong_withInt_(self, pos, bi);
}

- (jshort)readShortWithLong:(jlong)pos {
  jint bi = (jint) (JreRShift64(pos, chunkSizePower_));
  @try {
    return [((JavaNioByteBuffer *) nil_chk(IOSObjectArray_Get(nil_chk(buffers_), bi))) getShortWithInt:(jint) (pos & chunkSizeMask_)];
  }
  @catch (JavaLangIndexOutOfBoundsException *ioobe) {
    OrgApacheLuceneStoreByteBufferIndexInput_setPosWithLong_withInt_(self, pos, bi);
    return [self readShort];
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (jint)readIntWithLong:(jlong)pos {
  jint bi = (jint) (JreRShift64(pos, chunkSizePower_));
  @try {
    return [((JavaNioByteBuffer *) nil_chk(IOSObjectArray_Get(nil_chk(buffers_), bi))) getIntWithInt:(jint) (pos & chunkSizeMask_)];
  }
  @catch (JavaLangIndexOutOfBoundsException *ioobe) {
    OrgApacheLuceneStoreByteBufferIndexInput_setPosWithLong_withInt_(self, pos, bi);
    return [self readInt];
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (jlong)readLongWithLong:(jlong)pos {
  jint bi = (jint) (JreRShift64(pos, chunkSizePower_));
  @try {
    return [((JavaNioByteBuffer *) nil_chk(IOSObjectArray_Get(nil_chk(buffers_), bi))) getLongWithInt:(jint) (pos & chunkSizeMask_)];
  }
  @catch (JavaLangIndexOutOfBoundsException *ioobe) {
    OrgApacheLuceneStoreByteBufferIndexInput_setPosWithLong_withInt_(self, pos, bi);
    return [self readLong];
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (jlong)length {
  return length_;
}

- (OrgApacheLuceneStoreByteBufferIndexInput *)clone {
  OrgApacheLuceneStoreByteBufferIndexInput *clone = [self buildSliceWithNSString:nil withLong:0LL withLong:self->length_];
  @try {
    [((OrgApacheLuceneStoreByteBufferIndexInput *) nil_chk(clone)) seekWithLong:[self getFilePointer]];
  }
  @catch (JavaIoIOException *ioe) {
    @throw [new_JavaLangAssertionError_initWithId_(ioe) autorelease];
  }
  return clone;
}

- (OrgApacheLuceneStoreByteBufferIndexInput *)sliceWithNSString:(NSString *)sliceDescription
                                                       withLong:(jlong)offset
                                                       withLong:(jlong)length {
  if (offset < 0 || length < 0 || offset + length > self->length_) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$J$J$J$@", @"slice() ", sliceDescription, @" out of bounds: offset=", offset, @",length=", length, @",fileLength=", self->length_, @": ", self)) autorelease];
  }
  return [self buildSliceWithNSString:sliceDescription withLong:offset withLong:length];
}

- (OrgApacheLuceneStoreByteBufferIndexInput *)buildSliceWithNSString:(NSString *)sliceDescription
                                                            withLong:(jlong)offset
                                                            withLong:(jlong)length {
  if (buffers_ == nil) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
  IOSObjectArray *newBuffers = OrgApacheLuceneStoreByteBufferIndexInput_buildSliceWithJavaNioByteBufferArray_withLong_withLong_(self, buffers_, offset, length);
  jint ofs = (jint) (offset & chunkSizeMask_);
  OrgApacheLuceneStoreByteBufferIndexInput *clone = [self newCloneInstanceWithNSString:[self getFullSliceDescriptionWithNSString:sliceDescription] withJavaNioByteBufferArray:newBuffers withInt:ofs withLong:length];
  ((OrgApacheLuceneStoreByteBufferIndexInput *) nil_chk(clone))->isClone_ = true;
  if (clones_ != nil) {
    [self->clones_ putWithId:clone withId:JreLoadStatic(JavaLangBoolean, TRUE__)];
  }
  return clone;
}

- (OrgApacheLuceneStoreByteBufferIndexInput *)newCloneInstanceWithNSString:(NSString *)newResourceDescription
                                                withJavaNioByteBufferArray:(IOSObjectArray *)newBuffers
                                                                   withInt:(jint)offset
                                                                  withLong:(jlong)length {
  if (((IOSObjectArray *) nil_chk(newBuffers))->size_ == 1) {
    [((JavaNioByteBuffer *) nil_chk(IOSObjectArray_Get(newBuffers, 0))) positionWithInt:offset];
    return [new_OrgApacheLuceneStoreByteBufferIndexInput_SingleBufferImpl_initWithNSString_withJavaNioByteBuffer_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(newResourceDescription, [((JavaNioByteBuffer *) nil_chk(IOSObjectArray_Get(newBuffers, 0))) slice], length, chunkSizePower_, self->cleaner_, self->clones_) autorelease];
  }
  else {
    return [new_OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl_initWithNSString_withJavaNioByteBufferArray_withInt_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(newResourceDescription, newBuffers, offset, length, chunkSizePower_, cleaner_, clones_) autorelease];
  }
}

- (IOSObjectArray *)buildSliceWithJavaNioByteBufferArray:(IOSObjectArray *)buffers
                                                withLong:(jlong)offset
                                                withLong:(jlong)length {
  return OrgApacheLuceneStoreByteBufferIndexInput_buildSliceWithJavaNioByteBufferArray_withLong_withLong_(self, buffers, offset, length);
}

- (void)close {
  @try {
    if (buffers_ == nil) return;
    IOSObjectArray *bufs = buffers_;
    OrgApacheLuceneStoreByteBufferIndexInput_unsetBuffers(self);
    if (clones_ != nil) {
      [clones_ removeWithId:self];
    }
    if (isClone_) return;
    if (clones_ != nil) {
      for (id<JavaUtilIterator> it = [self->clones_ keyIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        OrgApacheLuceneStoreByteBufferIndexInput *clone = [it next];
        JreAssert((((OrgApacheLuceneStoreByteBufferIndexInput *) nil_chk(clone))->isClone_), (@"org/apache/lucene/store/ByteBufferIndexInput.java:348 condition failed: assert clone.isClone;"));
        OrgApacheLuceneStoreByteBufferIndexInput_unsetBuffers(clone);
      }
      [self->clones_ clear];
    }
    {
      IOSObjectArray *a__ = bufs;
      JavaNioByteBuffer * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaNioByteBuffer * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaNioByteBuffer *b = *b__++;
        OrgApacheLuceneStoreByteBufferIndexInput_freeBufferWithJavaNioByteBuffer_(self, b);
      }
    }
  }
  @finally {
    OrgApacheLuceneStoreByteBufferIndexInput_unsetBuffers(self);
  }
}

- (void)unsetBuffers {
  OrgApacheLuceneStoreByteBufferIndexInput_unsetBuffers(self);
}

- (void)freeBufferWithJavaNioByteBuffer:(JavaNioByteBuffer *)b {
  OrgApacheLuceneStoreByteBufferIndexInput_freeBufferWithJavaNioByteBuffer_(self, b);
}

- (void)dealloc {
  RELEASE_(cleaner_);
  RELEASE_(buffers_);
  RELEASE_(curBuf_);
  RELEASE_(clones_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newInstanceWithNSString:withJavaNioByteBufferArray:withLong:withInt:withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner:withBoolean:", "newInstance", "Lorg.apache.lucene.store.ByteBufferIndexInput;", 0x9, NULL, NULL },
    { "initWithNSString:withJavaNioByteBufferArray:withLong:withInt:withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner:withOrgApacheLuceneUtilWeakIdentityMap:", "ByteBufferIndexInput", NULL, 0x0, NULL, NULL },
    { "readByte", NULL, "B", 0x11, "Ljava.io.IOException;", NULL },
    { "readBytesWithByteArray:withInt:withInt:", "readBytes", "V", 0x11, "Ljava.io.IOException;", NULL },
    { "readShort", NULL, "S", 0x11, "Ljava.io.IOException;", NULL },
    { "readInt", NULL, "I", 0x11, "Ljava.io.IOException;", NULL },
    { "readLong", NULL, "J", 0x11, "Ljava.io.IOException;", NULL },
    { "getFilePointer", NULL, "J", 0x1, NULL, NULL },
    { "seekWithLong:", "seek", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readByteWithLong:", "readByte", "B", 0x1, "Ljava.io.IOException;", NULL },
    { "setPosWithLong:withInt:", "setPos", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readShortWithLong:", "readShort", "S", 0x1, "Ljava.io.IOException;", NULL },
    { "readIntWithLong:", "readInt", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "readLongWithLong:", "readLong", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "length", NULL, "J", 0x11, NULL, NULL },
    { "clone", NULL, "Lorg.apache.lucene.store.ByteBufferIndexInput;", 0x11, NULL, NULL },
    { "sliceWithNSString:withLong:withLong:", "slice", "Lorg.apache.lucene.store.ByteBufferIndexInput;", 0x11, NULL, NULL },
    { "buildSliceWithNSString:withLong:withLong:", "buildSlice", "Lorg.apache.lucene.store.ByteBufferIndexInput;", 0x4, NULL, NULL },
    { "newCloneInstanceWithNSString:withJavaNioByteBufferArray:withInt:withLong:", "newCloneInstance", "Lorg.apache.lucene.store.ByteBufferIndexInput;", 0x4, NULL, NULL },
    { "buildSliceWithJavaNioByteBufferArray:withLong:withLong:", "buildSlice", "[Ljava.nio.ByteBuffer;", 0x2, NULL, NULL },
    { "close", NULL, "V", 0x11, "Ljava.io.IOException;", NULL },
    { "unsetBuffers", NULL, "V", 0x2, NULL, NULL },
    { "freeBufferWithJavaNioByteBuffer:", "freeBuffer", "V", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cleaner_", NULL, 0x14, "Lorg.apache.lucene.store.ByteBufferIndexInput$BufferCleaner;", NULL, NULL, .constantValue.asLong = 0 },
    { "length_", NULL, 0x14, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "chunkSizeMask_", NULL, 0x14, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "chunkSizePower_", NULL, 0x14, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "buffers_", NULL, 0x4, "[Ljava.nio.ByteBuffer;", NULL, NULL, .constantValue.asLong = 0 },
    { "curBufIndex_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "curBuf_", NULL, 0x4, "Ljava.nio.ByteBuffer;", NULL, NULL, .constantValue.asLong = 0 },
    { "isClone_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "clones_", NULL, 0x14, "Lorg.apache.lucene.util.WeakIdentityMap;", NULL, "Lorg/apache/lucene/util/WeakIdentityMap<Lorg/apache/lucene/store/ByteBufferIndexInput;Ljava/lang/Boolean;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.store.ByteBufferIndexInput$BufferCleaner;", "Lorg.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl;", "Lorg.apache.lucene.store.ByteBufferIndexInput$MultiBufferImpl;"};
  static const J2ObjcClassInfo _OrgApacheLuceneStoreByteBufferIndexInput = { 2, "ByteBufferIndexInput", "org.apache.lucene.store", NULL, 0x400, 23, methods, 9, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneStoreByteBufferIndexInput;
}

@end

OrgApacheLuceneStoreByteBufferIndexInput *OrgApacheLuceneStoreByteBufferIndexInput_newInstanceWithNSString_withJavaNioByteBufferArray_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withBoolean_(NSString *resourceDescription, IOSObjectArray *buffers, jlong length, jint chunkSizePower, id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner> cleaner, jboolean trackClones) {
  OrgApacheLuceneStoreByteBufferIndexInput_initialize();
  OrgApacheLuceneUtilWeakIdentityMap *clones = trackClones ? OrgApacheLuceneUtilWeakIdentityMap_newConcurrentHashMap() : nil;
  if (((IOSObjectArray *) nil_chk(buffers))->size_ == 1) {
    return [new_OrgApacheLuceneStoreByteBufferIndexInput_SingleBufferImpl_initWithNSString_withJavaNioByteBuffer_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(resourceDescription, IOSObjectArray_Get(buffers, 0), length, chunkSizePower, cleaner, clones) autorelease];
  }
  else {
    return [new_OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl_initWithNSString_withJavaNioByteBufferArray_withInt_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(resourceDescription, buffers, 0, length, chunkSizePower, cleaner, clones) autorelease];
  }
}

void OrgApacheLuceneStoreByteBufferIndexInput_initWithNSString_withJavaNioByteBufferArray_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(OrgApacheLuceneStoreByteBufferIndexInput *self, NSString *resourceDescription, IOSObjectArray *buffers, jlong length, jint chunkSizePower, id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner> cleaner, OrgApacheLuceneUtilWeakIdentityMap *clones) {
  OrgApacheLuceneStoreIndexInput_initWithNSString_(self, resourceDescription);
  self->curBufIndex_ = -1;
  self->isClone_ = false;
  JreStrongAssign(&self->buffers_, buffers);
  self->length_ = length;
  self->chunkSizePower_ = chunkSizePower;
  self->chunkSizeMask_ = (JreLShift64(1LL, chunkSizePower)) - 1LL;
  JreStrongAssign(&self->clones_, clones);
  JreStrongAssign(&self->cleaner_, cleaner);
  JreAssert((chunkSizePower >= 0 && chunkSizePower <= 30), (@"org/apache/lucene/store/ByteBufferIndexInput.java:69 condition failed: assert chunkSizePower >= 0 && chunkSizePower <= 30;"));
  JreAssert(((JreURShift64(length, chunkSizePower)) < JavaLangInteger_MAX_VALUE), (@"org/apache/lucene/store/ByteBufferIndexInput.java:70 condition failed: assert (length >>> chunkSizePower) < Integer.MAX_VALUE;"));
}

void OrgApacheLuceneStoreByteBufferIndexInput_setPosWithLong_withInt_(OrgApacheLuceneStoreByteBufferIndexInput *self, jlong pos, jint bi) {
  @try {
    JavaNioByteBuffer *b = IOSObjectArray_Get(nil_chk(self->buffers_), bi);
    [((JavaNioByteBuffer *) nil_chk(b)) positionWithInt:(jint) (pos & self->chunkSizeMask_)];
    self->curBufIndex_ = bi;
    JreStrongAssign(&self->curBuf_, b);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *aioobe) {
    @throw [new_JavaIoEOFException_initWithNSString_(JreStrcat("$@", @"seek past EOF: ", self)) autorelease];
  }
  @catch (JavaLangIllegalArgumentException *aioobe) {
    @throw [new_JavaIoEOFException_initWithNSString_(JreStrcat("$@", @"seek past EOF: ", self)) autorelease];
  }
  @catch (JavaLangRuntimeException *aioobe) {
    @throw [new_JavaIoEOFException_initWithNSString_(JreStrcat("$@", @"seek past EOF: ", self)) autorelease];
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

IOSObjectArray *OrgApacheLuceneStoreByteBufferIndexInput_buildSliceWithJavaNioByteBufferArray_withLong_withLong_(OrgApacheLuceneStoreByteBufferIndexInput *self, IOSObjectArray *buffers, jlong offset, jlong length) {
  jlong sliceEnd = offset + length;
  jint startIndex = (jint) (JreURShift64(offset, self->chunkSizePower_));
  jint endIndex = (jint) (JreURShift64(sliceEnd, self->chunkSizePower_));
  IOSObjectArray *slices = [IOSObjectArray arrayWithLength:endIndex - startIndex + 1 type:JavaNioByteBuffer_class_()];
  for (jint i = 0; i < slices->size_; i++) {
    IOSObjectArray_Set(slices, i, [((JavaNioByteBuffer *) nil_chk(IOSObjectArray_Get(nil_chk(buffers), startIndex + i))) duplicate]);
  }
  [((JavaNioByteBuffer *) nil_chk(IOSObjectArray_Get(slices, slices->size_ - 1))) limitWithInt:(jint) (sliceEnd & self->chunkSizeMask_)];
  return slices;
}

void OrgApacheLuceneStoreByteBufferIndexInput_unsetBuffers(OrgApacheLuceneStoreByteBufferIndexInput *self) {
  JreStrongAssign(&self->buffers_, nil);
  JreStrongAssign(&self->curBuf_, nil);
  self->curBufIndex_ = 0;
}

void OrgApacheLuceneStoreByteBufferIndexInput_freeBufferWithJavaNioByteBuffer_(OrgApacheLuceneStoreByteBufferIndexInput *self, JavaNioByteBuffer *b) {
  if (self->cleaner_ != nil) {
    [self->cleaner_ freeBufferWithOrgApacheLuceneStoreByteBufferIndexInput:self withJavaNioByteBuffer:b];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreByteBufferIndexInput)

@implementation OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "freeBufferWithOrgApacheLuceneStoreByteBufferIndexInput:withJavaNioByteBuffer:", "freeBuffer", "V", 0x401, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner = { 2, "BufferCleaner", "org.apache.lucene.store", "ByteBufferIndexInput", 0x608, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner)

@implementation OrgApacheLuceneStoreByteBufferIndexInput_SingleBufferImpl

- (instancetype)initWithNSString:(NSString *)resourceDescription
           withJavaNioByteBuffer:(JavaNioByteBuffer *)buffer
                        withLong:(jlong)length
                         withInt:(jint)chunkSizePower
withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner:(id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner>)cleaner
withOrgApacheLuceneUtilWeakIdentityMap:(OrgApacheLuceneUtilWeakIdentityMap *)clones {
  OrgApacheLuceneStoreByteBufferIndexInput_SingleBufferImpl_initWithNSString_withJavaNioByteBuffer_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(self, resourceDescription, buffer, length, chunkSizePower, cleaner, clones);
  return self;
}

- (void)seekWithLong:(jlong)pos {
  @try {
    [((JavaNioByteBuffer *) nil_chk(curBuf_)) positionWithInt:(jint) pos];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    if (pos < 0) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Seeking to negative position: ", self), e) autorelease];
    }
    else {
      @throw [new_JavaIoEOFException_initWithNSString_(JreStrcat("$@", @"seek past EOF: ", self)) autorelease];
    }
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (jlong)getFilePointer {
  @try {
    return [((JavaNioByteBuffer *) nil_chk(curBuf_)) position];
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (jbyte)readByteWithLong:(jlong)pos {
  @try {
    return [((JavaNioByteBuffer *) nil_chk(curBuf_)) getWithInt:(jint) pos];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    if (pos < 0) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Seeking to negative position: ", self), e) autorelease];
    }
    else {
      @throw [new_JavaIoEOFException_initWithNSString_(JreStrcat("$@", @"seek past EOF: ", self)) autorelease];
    }
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (jshort)readShortWithLong:(jlong)pos {
  @try {
    return [((JavaNioByteBuffer *) nil_chk(curBuf_)) getShortWithInt:(jint) pos];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    if (pos < 0) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Seeking to negative position: ", self), e) autorelease];
    }
    else {
      @throw [new_JavaIoEOFException_initWithNSString_(JreStrcat("$@", @"seek past EOF: ", self)) autorelease];
    }
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (jint)readIntWithLong:(jlong)pos {
  @try {
    return [((JavaNioByteBuffer *) nil_chk(curBuf_)) getIntWithInt:(jint) pos];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    if (pos < 0) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Seeking to negative position: ", self), e) autorelease];
    }
    else {
      @throw [new_JavaIoEOFException_initWithNSString_(JreStrcat("$@", @"seek past EOF: ", self)) autorelease];
    }
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

- (jlong)readLongWithLong:(jlong)pos {
  @try {
    return [((JavaNioByteBuffer *) nil_chk(curBuf_)) getLongWithInt:(jint) pos];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    if (pos < 0) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Seeking to negative position: ", self), e) autorelease];
    }
    else {
      @throw [new_JavaIoEOFException_initWithNSString_(JreStrcat("$@", @"seek past EOF: ", self)) autorelease];
    }
  }
  @catch (JavaLangNullPointerException *npe) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(JreStrcat("$@", @"Already closed: ", self)) autorelease];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withJavaNioByteBuffer:withLong:withInt:withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner:withOrgApacheLuceneUtilWeakIdentityMap:", "SingleBufferImpl", NULL, 0x0, NULL, NULL },
    { "seekWithLong:", "seek", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "getFilePointer", NULL, "J", 0x1, NULL, NULL },
    { "readByteWithLong:", "readByte", "B", 0x1, "Ljava.io.IOException;", NULL },
    { "readShortWithLong:", "readShort", "S", 0x1, "Ljava.io.IOException;", NULL },
    { "readIntWithLong:", "readInt", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "readLongWithLong:", "readLong", "J", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreByteBufferIndexInput_SingleBufferImpl = { 2, "SingleBufferImpl", "org.apache.lucene.store", "ByteBufferIndexInput", 0x18, 7, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneStoreByteBufferIndexInput_SingleBufferImpl;
}

@end

void OrgApacheLuceneStoreByteBufferIndexInput_SingleBufferImpl_initWithNSString_withJavaNioByteBuffer_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(OrgApacheLuceneStoreByteBufferIndexInput_SingleBufferImpl *self, NSString *resourceDescription, JavaNioByteBuffer *buffer, jlong length, jint chunkSizePower, id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner> cleaner, OrgApacheLuceneUtilWeakIdentityMap *clones) {
  OrgApacheLuceneStoreByteBufferIndexInput_initWithNSString_withJavaNioByteBufferArray_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(self, resourceDescription, [IOSObjectArray arrayWithObjects:(id[]){ buffer } count:1 type:JavaNioByteBuffer_class_()], length, chunkSizePower, cleaner, clones);
  self->curBufIndex_ = 0;
  JreStrongAssign(&self->curBuf_, buffer);
  [((JavaNioByteBuffer *) nil_chk(buffer)) positionWithInt:0];
}

OrgApacheLuceneStoreByteBufferIndexInput_SingleBufferImpl *new_OrgApacheLuceneStoreByteBufferIndexInput_SingleBufferImpl_initWithNSString_withJavaNioByteBuffer_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(NSString *resourceDescription, JavaNioByteBuffer *buffer, jlong length, jint chunkSizePower, id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner> cleaner, OrgApacheLuceneUtilWeakIdentityMap *clones) {
  OrgApacheLuceneStoreByteBufferIndexInput_SingleBufferImpl *self = [OrgApacheLuceneStoreByteBufferIndexInput_SingleBufferImpl alloc];
  OrgApacheLuceneStoreByteBufferIndexInput_SingleBufferImpl_initWithNSString_withJavaNioByteBuffer_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(self, resourceDescription, buffer, length, chunkSizePower, cleaner, clones);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreByteBufferIndexInput_SingleBufferImpl)

@implementation OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl

- (instancetype)initWithNSString:(NSString *)resourceDescription
      withJavaNioByteBufferArray:(IOSObjectArray *)buffers
                         withInt:(jint)offset
                        withLong:(jlong)length
                         withInt:(jint)chunkSizePower
withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner:(id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner>)cleaner
withOrgApacheLuceneUtilWeakIdentityMap:(OrgApacheLuceneUtilWeakIdentityMap *)clones {
  OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl_initWithNSString_withJavaNioByteBufferArray_withInt_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(self, resourceDescription, buffers, offset, length, chunkSizePower, cleaner, clones);
  return self;
}

- (void)seekWithLong:(jlong)pos {
  JreAssert((pos >= 0LL), (@"org/apache/lucene/store/ByteBufferIndexInput.java:503 condition failed: assert pos >= 0L;"));
  [super seekWithLong:pos + offset_];
}

- (jlong)getFilePointer {
  return [super getFilePointer] - offset_;
}

- (jbyte)readByteWithLong:(jlong)pos {
  return [super readByteWithLong:pos + offset_];
}

- (jshort)readShortWithLong:(jlong)pos {
  return [super readShortWithLong:pos + offset_];
}

- (jint)readIntWithLong:(jlong)pos {
  return [super readIntWithLong:pos + offset_];
}

- (jlong)readLongWithLong:(jlong)pos {
  return [super readLongWithLong:pos + offset_];
}

- (OrgApacheLuceneStoreByteBufferIndexInput *)buildSliceWithNSString:(NSString *)sliceDescription
                                                            withLong:(jlong)ofs
                                                            withLong:(jlong)length {
  return [super buildSliceWithNSString:sliceDescription withLong:self->offset_ + ofs withLong:length];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withJavaNioByteBufferArray:withInt:withLong:withInt:withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner:withOrgApacheLuceneUtilWeakIdentityMap:", "MultiBufferImpl", NULL, 0x0, NULL, NULL },
    { "seekWithLong:", "seek", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "getFilePointer", NULL, "J", 0x1, NULL, NULL },
    { "readByteWithLong:", "readByte", "B", 0x1, "Ljava.io.IOException;", NULL },
    { "readShortWithLong:", "readShort", "S", 0x1, "Ljava.io.IOException;", NULL },
    { "readIntWithLong:", "readInt", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "readLongWithLong:", "readLong", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "buildSliceWithNSString:withLong:withLong:", "buildSlice", "Lorg.apache.lucene.store.ByteBufferIndexInput;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "offset_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl = { 2, "MultiBufferImpl", "org.apache.lucene.store", "ByteBufferIndexInput", 0x18, 8, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl;
}

@end

void OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl_initWithNSString_withJavaNioByteBufferArray_withInt_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl *self, NSString *resourceDescription, IOSObjectArray *buffers, jint offset, jlong length, jint chunkSizePower, id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner> cleaner, OrgApacheLuceneUtilWeakIdentityMap *clones) {
  OrgApacheLuceneStoreByteBufferIndexInput_initWithNSString_withJavaNioByteBufferArray_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(self, resourceDescription, buffers, length, chunkSizePower, cleaner, clones);
  self->offset_ = offset;
  @try {
    [self seekWithLong:0LL];
  }
  @catch (JavaIoIOException *ioe) {
    @throw [new_JavaLangAssertionError_initWithId_(ioe) autorelease];
  }
}

OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl *new_OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl_initWithNSString_withJavaNioByteBufferArray_withInt_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(NSString *resourceDescription, IOSObjectArray *buffers, jint offset, jlong length, jint chunkSizePower, id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner> cleaner, OrgApacheLuceneUtilWeakIdentityMap *clones) {
  OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl *self = [OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl alloc];
  OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl_initWithNSString_withJavaNioByteBufferArray_withInt_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withOrgApacheLuceneUtilWeakIdentityMap_(self, resourceDescription, buffers, offset, length, chunkSizePower, cleaner, clones);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreByteBufferIndexInput_MultiBufferImpl)
