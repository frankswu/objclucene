//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/SleepingLockWrapper.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/FilterDirectory.h"
#include "org/apache/lucene/store/Lock.h"
#include "org/apache/lucene/store/LockObtainFailedException.h"
#include "org/apache/lucene/store/SleepingLockWrapper.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"

@interface OrgApacheLuceneStoreSleepingLockWrapper () {
 @public
  jlong lockWaitTimeout_;
  jlong pollInterval_;
}

@end

jlong OrgApacheLuceneStoreSleepingLockWrapper_DEFAULT_POLL_INTERVAL_ = 1000;

@implementation OrgApacheLuceneStoreSleepingLockWrapper

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)delegate
                                             withLong:(jlong)lockWaitTimeout {
  OrgApacheLuceneStoreSleepingLockWrapper_initWithOrgApacheLuceneStoreDirectory_withLong_(self, delegate, lockWaitTimeout);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)delegate
                                             withLong:(jlong)lockWaitTimeout
                                             withLong:(jlong)pollInterval {
  OrgApacheLuceneStoreSleepingLockWrapper_initWithOrgApacheLuceneStoreDirectory_withLong_withLong_(self, delegate, lockWaitTimeout, pollInterval);
  return self;
}

- (OrgApacheLuceneStoreLock *)obtainLockWithNSString:(NSString *)lockName {
  OrgApacheLuceneStoreLockObtainFailedException *failureReason = nil;
  jlong maxSleepCount = lockWaitTimeout_ / pollInterval_;
  jlong sleepCount = 0;
  do {
    @try {
      return [((OrgApacheLuceneStoreDirectory *) nil_chk(in_)) obtainLockWithNSString:lockName];
    }
    @catch (OrgApacheLuceneStoreLockObtainFailedException *failed) {
      if (failureReason == nil) {
        failureReason = failed;
      }
    }
    @try {
      JavaLangThread_sleepWithLong_(pollInterval_);
    }
    @catch (JavaLangInterruptedException *ie) {
      @throw [new_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie) autorelease];
    }
  }
  while (sleepCount++ < maxSleepCount || lockWaitTimeout_ == OrgApacheLuceneStoreSleepingLockWrapper_LOCK_OBTAIN_WAIT_FOREVER);
  NSString *reason = JreStrcat("$$", @"Lock obtain timed out: ", [self description]);
  if (failureReason != nil) {
    JreStrAppend(&reason, "$@", @": ", failureReason);
  }
  @throw [new_OrgApacheLuceneStoreLockObtainFailedException_initWithNSString_withJavaLangThrowable_(reason, failureReason) autorelease];
}

- (NSString *)description {
  return JreStrcat("$@C", @"SleepingLockWrapper(", in_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneStoreDirectory:withLong:", "SleepingLockWrapper", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheLuceneStoreDirectory:withLong:withLong:", "SleepingLockWrapper", NULL, 0x1, NULL, NULL },
    { "obtainLockWithNSString:", "obtainLock", "Lorg.apache.lucene.store.Lock;", 0x1, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LOCK_OBTAIN_WAIT_FOREVER", "LOCK_OBTAIN_WAIT_FOREVER", 0x19, "J", NULL, NULL, .constantValue.asLong = OrgApacheLuceneStoreSleepingLockWrapper_LOCK_OBTAIN_WAIT_FOREVER },
    { "DEFAULT_POLL_INTERVAL_", NULL, 0x9, "J", &OrgApacheLuceneStoreSleepingLockWrapper_DEFAULT_POLL_INTERVAL_, NULL, .constantValue.asLong = 0 },
    { "lockWaitTimeout_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "pollInterval_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreSleepingLockWrapper = { 2, "SleepingLockWrapper", "org.apache.lucene.store", NULL, 0x11, 4, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneStoreSleepingLockWrapper;
}

@end

void OrgApacheLuceneStoreSleepingLockWrapper_initWithOrgApacheLuceneStoreDirectory_withLong_(OrgApacheLuceneStoreSleepingLockWrapper *self, OrgApacheLuceneStoreDirectory *delegate, jlong lockWaitTimeout) {
  OrgApacheLuceneStoreSleepingLockWrapper_initWithOrgApacheLuceneStoreDirectory_withLong_withLong_(self, delegate, lockWaitTimeout, OrgApacheLuceneStoreSleepingLockWrapper_DEFAULT_POLL_INTERVAL_);
}

OrgApacheLuceneStoreSleepingLockWrapper *new_OrgApacheLuceneStoreSleepingLockWrapper_initWithOrgApacheLuceneStoreDirectory_withLong_(OrgApacheLuceneStoreDirectory *delegate, jlong lockWaitTimeout) {
  OrgApacheLuceneStoreSleepingLockWrapper *self = [OrgApacheLuceneStoreSleepingLockWrapper alloc];
  OrgApacheLuceneStoreSleepingLockWrapper_initWithOrgApacheLuceneStoreDirectory_withLong_(self, delegate, lockWaitTimeout);
  return self;
}

void OrgApacheLuceneStoreSleepingLockWrapper_initWithOrgApacheLuceneStoreDirectory_withLong_withLong_(OrgApacheLuceneStoreSleepingLockWrapper *self, OrgApacheLuceneStoreDirectory *delegate, jlong lockWaitTimeout, jlong pollInterval) {
  OrgApacheLuceneStoreFilterDirectory_initWithOrgApacheLuceneStoreDirectory_(self, delegate);
  self->lockWaitTimeout_ = lockWaitTimeout;
  self->pollInterval_ = pollInterval;
  if (lockWaitTimeout < 0 && lockWaitTimeout != OrgApacheLuceneStoreSleepingLockWrapper_LOCK_OBTAIN_WAIT_FOREVER) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$JC", @"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got ", lockWaitTimeout, ')')) autorelease];
  }
  if (pollInterval < 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$JC", @"pollInterval must be a non-negative number (got ", pollInterval, ')')) autorelease];
  }
}

OrgApacheLuceneStoreSleepingLockWrapper *new_OrgApacheLuceneStoreSleepingLockWrapper_initWithOrgApacheLuceneStoreDirectory_withLong_withLong_(OrgApacheLuceneStoreDirectory *delegate, jlong lockWaitTimeout, jlong pollInterval) {
  OrgApacheLuceneStoreSleepingLockWrapper *self = [OrgApacheLuceneStoreSleepingLockWrapper alloc];
  OrgApacheLuceneStoreSleepingLockWrapper_initWithOrgApacheLuceneStoreDirectory_withLong_withLong_(self, delegate, lockWaitTimeout, pollInterval);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreSleepingLockWrapper)
