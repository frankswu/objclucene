//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/MMapDirectory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/Void.h"
#include "java/lang/reflect/Method.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/MappedByteBuffer.h"
#include "java/nio/channels/FileChannel.h"
#include "java/security/AccessController.h"
#include "java/security/PrivilegedAction.h"
#include "java/security/PrivilegedActionException.h"
#include "java/security/PrivilegedExceptionAction.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/store/BaseDirectory.h"
#include "org/apache/lucene/store/ByteBufferIndexInput.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "org/apache/lucene/store/FSLockFactory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "org/apache/lucene/store/MMapDirectory.h"
#include "org/apache/lucene/util/Constants.h"
#include "org/lukhnos/portmobile/channels/utils/FileChannelUtils.h"
#include "org/lukhnos/portmobile/file/Path.h"
#include "org/lukhnos/portmobile/file/StandardOpenOption.h"

@interface OrgApacheLuceneStoreMMapDirectory () {
 @public
  jboolean useUnmapHack_;
  jboolean preload_;
}

- (JavaIoIOException *)convertMapFailedIOExceptionWithJavaIoIOException:(JavaIoIOException *)ioe
                                                           withNSString:(NSString *)resourceDescription
                                                                withInt:(jint)bufSize;

@end

inline id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner> OrgApacheLuceneStoreMMapDirectory_get_CLEANER();
static id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner> OrgApacheLuceneStoreMMapDirectory_CLEANER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneStoreMMapDirectory, CLEANER, id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner>)

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneStoreMMapDirectory_mapWithNSString_withJavaNioChannelsFileChannel_withLong_withLong_(OrgApacheLuceneStoreMMapDirectory *self, NSString *resourceDescription, JavaNioChannelsFileChannel *fc, jlong offset, jlong length);

__attribute__((unused)) static JavaIoIOException *OrgApacheLuceneStoreMMapDirectory_convertMapFailedIOExceptionWithJavaIoIOException_withNSString_withInt_(OrgApacheLuceneStoreMMapDirectory *self, JavaIoIOException *ioe, NSString *resourceDescription, jint bufSize);

@interface OrgApacheLuceneStoreMMapDirectory_$1 : NSObject < JavaSecurityPrivilegedAction >

- (JavaLangBoolean *)run;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneStoreMMapDirectory_$1)

__attribute__((unused)) static void OrgApacheLuceneStoreMMapDirectory_$1_init(OrgApacheLuceneStoreMMapDirectory_$1 *self);

__attribute__((unused)) static OrgApacheLuceneStoreMMapDirectory_$1 *new_OrgApacheLuceneStoreMMapDirectory_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneStoreMMapDirectory_$1 *create_OrgApacheLuceneStoreMMapDirectory_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneStoreMMapDirectory_$1)

@interface OrgApacheLuceneStoreMMapDirectory_$2 : NSObject < OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner >

- (void)freeBufferWithOrgApacheLuceneStoreByteBufferIndexInput:(OrgApacheLuceneStoreByteBufferIndexInput *)parent
                                         withJavaNioByteBuffer:(JavaNioByteBuffer *)buffer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneStoreMMapDirectory_$2)

__attribute__((unused)) static void OrgApacheLuceneStoreMMapDirectory_$2_init(OrgApacheLuceneStoreMMapDirectory_$2 *self);

__attribute__((unused)) static OrgApacheLuceneStoreMMapDirectory_$2 *new_OrgApacheLuceneStoreMMapDirectory_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneStoreMMapDirectory_$2 *create_OrgApacheLuceneStoreMMapDirectory_$2_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneStoreMMapDirectory_$2)

@interface OrgApacheLuceneStoreMMapDirectory_$2_$1 : NSObject < JavaSecurityPrivilegedExceptionAction > {
 @public
  JavaNioByteBuffer *val$buffer_;
}

- (id)run;

- (instancetype)initWithJavaNioByteBuffer:(JavaNioByteBuffer *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneStoreMMapDirectory_$2_$1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneStoreMMapDirectory_$2_$1, val$buffer_, JavaNioByteBuffer *)

__attribute__((unused)) static void OrgApacheLuceneStoreMMapDirectory_$2_$1_initWithJavaNioByteBuffer_(OrgApacheLuceneStoreMMapDirectory_$2_$1 *self, JavaNioByteBuffer *capture$0);

__attribute__((unused)) static OrgApacheLuceneStoreMMapDirectory_$2_$1 *new_OrgApacheLuceneStoreMMapDirectory_$2_$1_initWithJavaNioByteBuffer_(JavaNioByteBuffer *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneStoreMMapDirectory_$2_$1 *create_OrgApacheLuceneStoreMMapDirectory_$2_$1_initWithJavaNioByteBuffer_(JavaNioByteBuffer *capture$0);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneStoreMMapDirectory_$2_$1)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneStoreMMapDirectory)

jint OrgApacheLuceneStoreMMapDirectory_DEFAULT_MAX_CHUNK_SIZE;
jboolean OrgApacheLuceneStoreMMapDirectory_UNMAP_SUPPORTED;

@implementation OrgApacheLuceneStoreMMapDirectory

+ (jint)DEFAULT_MAX_CHUNK_SIZE {
  return OrgApacheLuceneStoreMMapDirectory_DEFAULT_MAX_CHUNK_SIZE;
}

+ (jboolean)UNMAP_SUPPORTED {
  return OrgApacheLuceneStoreMMapDirectory_UNMAP_SUPPORTED;
}

- (instancetype)initWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)path
                 withOrgApacheLuceneStoreLockFactory:(OrgApacheLuceneStoreLockFactory *)lockFactory {
  OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_(self, path, lockFactory);
  return self;
}

- (instancetype)initWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)path {
  OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_(self, path);
  return self;
}

- (instancetype)initWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)path
                                             withInt:(jint)maxChunkSize {
  OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withInt_(self, path, maxChunkSize);
  return self;
}

- (instancetype)initWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)path
                 withOrgApacheLuceneStoreLockFactory:(OrgApacheLuceneStoreLockFactory *)lockFactory
                                             withInt:(jint)maxChunkSize {
  OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_(self, path, lockFactory, maxChunkSize);
  return self;
}

- (void)setUseUnmapWithBoolean:(jboolean)useUnmapHack {
  if (useUnmapHack && !OrgApacheLuceneStoreMMapDirectory_UNMAP_SUPPORTED) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Unmap hack not supported on this platform!");
  self->useUnmapHack_ = useUnmapHack;
}

- (jboolean)getUseUnmap {
  return useUnmapHack_;
}

- (void)setPreloadWithBoolean:(jboolean)preload {
  self->preload_ = preload;
}

- (jboolean)getPreload {
  return preload_;
}

- (jint)getMaxChunkSize {
  return JreLShift32(1, chunkSizePower_);
}

- (OrgApacheLuceneStoreIndexInput *)openInputWithNSString:(NSString *)name
                        withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context {
  [self ensureOpen];
  OrgLukhnosPortmobileFilePath *path = [((OrgLukhnosPortmobileFilePath *) nil_chk(directory_)) resolveWithNSString:name];
  {
    JavaNioChannelsFileChannel *c = OrgLukhnosPortmobileChannelsUtilsFileChannelUtils_openWithOrgLukhnosPortmobileFilePath_withOrgLukhnosPortmobileFileStandardOpenOptionArray_(path, [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(OrgLukhnosPortmobileFileStandardOpenOption, READ) } count:1 type:OrgLukhnosPortmobileFileStandardOpenOption_class_()]);
    NSException *__primaryException1 = nil;
    @try {
      NSString *resourceDescription = JreStrcat("$$$", @"MMapIndexInput(path=\"", [((OrgLukhnosPortmobileFilePath *) nil_chk(path)) description], @"\")");
      jboolean useUnmap = [self getUseUnmap];
      return OrgApacheLuceneStoreByteBufferIndexInput_newInstanceWithNSString_withJavaNioByteBufferArray_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withBoolean_(resourceDescription, OrgApacheLuceneStoreMMapDirectory_mapWithNSString_withJavaNioChannelsFileChannel_withLong_withLong_(self, resourceDescription, c, 0, [((JavaNioChannelsFileChannel *) nil_chk(c)) size]), [c size], chunkSizePower_, useUnmap ? OrgApacheLuceneStoreMMapDirectory_CLEANER : nil, useUnmap);
    }
    @catch (NSException *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (c != nil) {
        if (__primaryException1 != nil) {
          @try {
            [c close];
          } @catch (NSException *e) {
            [__primaryException1 addSuppressedWithNSException:e];
          }
        } else {
          [c close];
        }
      }
    }
  }
}

- (IOSObjectArray *)mapWithNSString:(NSString *)resourceDescription
     withJavaNioChannelsFileChannel:(JavaNioChannelsFileChannel *)fc
                           withLong:(jlong)offset
                           withLong:(jlong)length {
  return OrgApacheLuceneStoreMMapDirectory_mapWithNSString_withJavaNioChannelsFileChannel_withLong_withLong_(self, resourceDescription, fc, offset, length);
}

- (JavaIoIOException *)convertMapFailedIOExceptionWithJavaIoIOException:(JavaIoIOException *)ioe
                                                           withNSString:(NSString *)resourceDescription
                                                                withInt:(jint)bufSize {
  return OrgApacheLuceneStoreMMapDirectory_convertMapFailedIOExceptionWithJavaIoIOException_withNSString_withInt_(self, ioe, resourceDescription, bufSize);
}

+ (void)initialize {
  if (self == [OrgApacheLuceneStoreMMapDirectory class]) {
    OrgApacheLuceneStoreMMapDirectory_DEFAULT_MAX_CHUNK_SIZE = JreLoadStatic(OrgApacheLuceneUtilConstants, JRE_IS_64BIT) ? (JreLShift32(1, 30)) : (JreLShift32(1, 28));
    OrgApacheLuceneStoreMMapDirectory_UNMAP_SUPPORTED = [((JavaLangBoolean *) nil_chk(JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(create_OrgApacheLuceneStoreMMapDirectory_$1_init()))) booleanValue];
    JreStrongAssignAndConsume(&OrgApacheLuceneStoreMMapDirectory_CLEANER, new_OrgApacheLuceneStoreMMapDirectory_$2_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneStoreMMapDirectory)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgLukhnosPortmobileFilePath:withOrgApacheLuceneStoreLockFactory:", "MMapDirectory", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithOrgLukhnosPortmobileFilePath:", "MMapDirectory", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithOrgLukhnosPortmobileFilePath:withInt:", "MMapDirectory", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithOrgLukhnosPortmobileFilePath:withOrgApacheLuceneStoreLockFactory:withInt:", "MMapDirectory", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "setUseUnmapWithBoolean:", "setUseUnmap", "V", 0x1, NULL, NULL },
    { "getUseUnmap", NULL, "Z", 0x1, NULL, NULL },
    { "setPreloadWithBoolean:", "setPreload", "V", 0x1, NULL, NULL },
    { "getPreload", NULL, "Z", 0x1, NULL, NULL },
    { "getMaxChunkSize", NULL, "I", 0x11, NULL, NULL },
    { "openInputWithNSString:withOrgApacheLuceneStoreIOContext:", "openInput", "Lorg.apache.lucene.store.IndexInput;", 0x1, "Ljava.io.IOException;", NULL },
    { "mapWithNSString:withJavaNioChannelsFileChannel:withLong:withLong:", "map", "[Ljava.nio.ByteBuffer;", 0x10, "Ljava.io.IOException;", NULL },
    { "convertMapFailedIOExceptionWithJavaIoIOException:withNSString:withInt:", "convertMapFailedIOException", "Ljava.io.IOException;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "useUnmapHack_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "preload_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_MAX_CHUNK_SIZE", "DEFAULT_MAX_CHUNK_SIZE", 0x19, "I", &OrgApacheLuceneStoreMMapDirectory_DEFAULT_MAX_CHUNK_SIZE, NULL, .constantValue.asLong = 0 },
    { "chunkSizePower_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "UNMAP_SUPPORTED", "UNMAP_SUPPORTED", 0x19, "Z", &OrgApacheLuceneStoreMMapDirectory_UNMAP_SUPPORTED, NULL, .constantValue.asLong = 0 },
    { "CLEANER", "CLEANER", 0x1a, "Lorg.apache.lucene.store.ByteBufferIndexInput$BufferCleaner;", &OrgApacheLuceneStoreMMapDirectory_CLEANER, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreMMapDirectory = { 2, "MMapDirectory", "org.apache.lucene.store", NULL, 0x1, 12, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneStoreMMapDirectory;
}

@end

void OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_(OrgApacheLuceneStoreMMapDirectory *self, OrgLukhnosPortmobileFilePath *path, OrgApacheLuceneStoreLockFactory *lockFactory) {
  OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_(self, path, lockFactory, OrgApacheLuceneStoreMMapDirectory_DEFAULT_MAX_CHUNK_SIZE);
}

OrgApacheLuceneStoreMMapDirectory *new_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_(OrgLukhnosPortmobileFilePath *path, OrgApacheLuceneStoreLockFactory *lockFactory) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_, path, lockFactory)
}

OrgApacheLuceneStoreMMapDirectory *create_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_(OrgLukhnosPortmobileFilePath *path, OrgApacheLuceneStoreLockFactory *lockFactory) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_, path, lockFactory)
}

void OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_(OrgApacheLuceneStoreMMapDirectory *self, OrgLukhnosPortmobileFilePath *path) {
  OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_(self, path, OrgApacheLuceneStoreFSLockFactory_getDefault());
}

OrgApacheLuceneStoreMMapDirectory *new_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_(OrgLukhnosPortmobileFilePath *path) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_, path)
}

OrgApacheLuceneStoreMMapDirectory *create_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_(OrgLukhnosPortmobileFilePath *path) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_, path)
}

void OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withInt_(OrgApacheLuceneStoreMMapDirectory *self, OrgLukhnosPortmobileFilePath *path, jint maxChunkSize) {
  OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_(self, path, OrgApacheLuceneStoreFSLockFactory_getDefault(), maxChunkSize);
}

OrgApacheLuceneStoreMMapDirectory *new_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withInt_(OrgLukhnosPortmobileFilePath *path, jint maxChunkSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_withInt_, path, maxChunkSize)
}

OrgApacheLuceneStoreMMapDirectory *create_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withInt_(OrgLukhnosPortmobileFilePath *path, jint maxChunkSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_withInt_, path, maxChunkSize)
}

void OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_(OrgApacheLuceneStoreMMapDirectory *self, OrgLukhnosPortmobileFilePath *path, OrgApacheLuceneStoreLockFactory *lockFactory, jint maxChunkSize) {
  OrgApacheLuceneStoreFSDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_(self, path, lockFactory);
  self->useUnmapHack_ = OrgApacheLuceneStoreMMapDirectory_UNMAP_SUPPORTED;
  if (maxChunkSize <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Maximum chunk size for mmap must be >0");
  }
  self->chunkSizePower_ = 31 - JavaLangInteger_numberOfLeadingZerosWithInt_(maxChunkSize);
  JreAssert((self->chunkSizePower_ >= 0 && self->chunkSizePower_ <= 30), (@"org/apache/lucene/store/MMapDirectory.java:162 condition failed: assert this.chunkSizePower >= 0 && this.chunkSizePower <= 30;"));
}

OrgApacheLuceneStoreMMapDirectory *new_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_(OrgLukhnosPortmobileFilePath *path, OrgApacheLuceneStoreLockFactory *lockFactory, jint maxChunkSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_, path, lockFactory, maxChunkSize)
}

OrgApacheLuceneStoreMMapDirectory *create_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_(OrgLukhnosPortmobileFilePath *path, OrgApacheLuceneStoreLockFactory *lockFactory, jint maxChunkSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_, path, lockFactory, maxChunkSize)
}

IOSObjectArray *OrgApacheLuceneStoreMMapDirectory_mapWithNSString_withJavaNioChannelsFileChannel_withLong_withLong_(OrgApacheLuceneStoreMMapDirectory *self, NSString *resourceDescription, JavaNioChannelsFileChannel *fc, jlong offset, jlong length) {
  if ((JreURShift64(length, self->chunkSizePower_)) >= JavaLangInteger_MAX_VALUE) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"RandomAccessFile too big for chunk size: ", resourceDescription));
  jlong chunkSize = JreLShift64(1LL, self->chunkSizePower_);
  jint nrBuffers = (jint) (JreURShift64(length, self->chunkSizePower_)) + 1;
  IOSObjectArray *buffers = [IOSObjectArray arrayWithLength:nrBuffers type:JavaNioByteBuffer_class_()];
  jlong bufferStart = 0LL;
  for (jint bufNr = 0; bufNr < nrBuffers; bufNr++) {
    jint bufSize = (jint) ((length > (bufferStart + chunkSize)) ? chunkSize : (length - bufferStart));
    JavaNioMappedByteBuffer *buffer;
    @try {
      buffer = [((JavaNioChannelsFileChannel *) nil_chk(fc)) mapWithJavaNioChannelsFileChannel_MapMode:JreLoadStatic(JavaNioChannelsFileChannel_MapMode, READ_ONLY) withLong:offset + bufferStart withLong:bufSize];
    }
    @catch (JavaIoIOException *ioe) {
      @throw OrgApacheLuceneStoreMMapDirectory_convertMapFailedIOExceptionWithJavaIoIOException_withNSString_withInt_(self, ioe, resourceDescription, bufSize);
    }
    if (self->preload_) {
      [((JavaNioMappedByteBuffer *) nil_chk(buffer)) load__];
    }
    IOSObjectArray_Set(buffers, bufNr, buffer);
    bufferStart += bufSize;
  }
  return buffers;
}

JavaIoIOException *OrgApacheLuceneStoreMMapDirectory_convertMapFailedIOExceptionWithJavaIoIOException_withNSString_withInt_(OrgApacheLuceneStoreMMapDirectory *self, JavaIoIOException *ioe, NSString *resourceDescription, jint bufSize) {
  NSString *originalMessage;
  NSException *originalCause;
  if ([[((JavaIoIOException *) nil_chk(ioe)) getCause] isKindOfClass:[JavaLangOutOfMemoryError class]]) {
    originalMessage = @"Map failed";
    originalCause = nil;
  }
  else {
    originalMessage = [ioe getMessage];
    originalCause = [ioe getCause];
  }
  NSString *moreInfo;
  if (!JreLoadStatic(OrgApacheLuceneUtilConstants, JRE_IS_64BIT)) {
    moreInfo = @"MMapDirectory should only be used on 64bit platforms, because the address space on 32bit operating systems is too small. ";
  }
  else if (JreLoadStatic(OrgApacheLuceneUtilConstants, WINDOWS)) {
    moreInfo = @"Windows is unfortunately very limited on virtual address space. If your index size is several hundred Gigabytes, consider changing to Linux. ";
  }
  else if (JreLoadStatic(OrgApacheLuceneUtilConstants, LINUX)) {
    moreInfo = @"Please review 'ulimit -v', 'ulimit -m' (both should return 'unlimited'), and 'sysctl vm.max_map_count'. ";
  }
  else {
    moreInfo = @"Please review 'ulimit -v', 'ulimit -m' (both should return 'unlimited'). ";
  }
  JavaIoIOException *newIoe = create_JavaIoIOException_initWithNSString_withNSException_(NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ENGLISH), @"%s: %s [this may be caused by lack of enough unfragmented virtual address space or too restrictive virtual memory limits enforced by the operating system, preventing us to map a chunk of %d bytes. %sMore information: http://blog.thetaphi.de/2012/07/use-lucenes-mmapdirectory-on-64bit.html]", [IOSObjectArray arrayWithObjects:(id[]){ originalMessage, resourceDescription, JavaLangInteger_valueOfWithInt_(bufSize), moreInfo } count:4 type:NSObject_class_()]), originalCause);
  [newIoe setStackTraceWithJavaLangStackTraceElementArray:[ioe getStackTrace]];
  return newIoe;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreMMapDirectory)

@implementation OrgApacheLuceneStoreMMapDirectory_$1

- (JavaLangBoolean *)run {
  @try {
    IOSClass *clazz = IOSClass_forName_(@"java.nio.DirectByteBuffer");
    JavaLangReflectMethod *method = [((IOSClass *) nil_chk(clazz)) getMethod:@"cleaner" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
    [((JavaLangReflectMethod *) nil_chk(method)) setAccessibleWithBoolean:true];
    return JavaLangBoolean_valueOfWithBoolean_(true);
  }
  @catch (JavaLangException *e) {
    return JavaLangBoolean_valueOfWithBoolean_(false);
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneStoreMMapDirectory_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreMMapDirectory_$1 = { 2, "", "org.apache.lucene.store", "MMapDirectory", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/security/PrivilegedAction<Ljava/lang/Boolean;>;" };
  return &_OrgApacheLuceneStoreMMapDirectory_$1;
}

@end

void OrgApacheLuceneStoreMMapDirectory_$1_init(OrgApacheLuceneStoreMMapDirectory_$1 *self) {
  NSObject_init(self);
}

OrgApacheLuceneStoreMMapDirectory_$1 *new_OrgApacheLuceneStoreMMapDirectory_$1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreMMapDirectory_$1, init)
}

OrgApacheLuceneStoreMMapDirectory_$1 *create_OrgApacheLuceneStoreMMapDirectory_$1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreMMapDirectory_$1, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreMMapDirectory_$1)

@implementation OrgApacheLuceneStoreMMapDirectory_$2

- (void)freeBufferWithOrgApacheLuceneStoreByteBufferIndexInput:(OrgApacheLuceneStoreByteBufferIndexInput *)parent
                                         withJavaNioByteBuffer:(JavaNioByteBuffer *)buffer {
  @try {
    JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedExceptionAction_(create_OrgApacheLuceneStoreMMapDirectory_$2_$1_initWithJavaNioByteBuffer_(buffer));
  }
  @catch (JavaSecurityPrivilegedActionException *e) {
    @throw create_JavaIoIOException_initWithNSString_withNSException_(JreStrcat("$$", @"Unable to unmap the mapped buffer: ", [((OrgApacheLuceneStoreByteBufferIndexInput *) nil_chk(parent)) description]), [((JavaSecurityPrivilegedActionException *) nil_chk(e)) getCause]);
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneStoreMMapDirectory_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "freeBufferWithOrgApacheLuceneStoreByteBufferIndexInput:withJavaNioByteBuffer:", "freeBuffer", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreMMapDirectory_$2 = { 2, "", "org.apache.lucene.store", "MMapDirectory", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneStoreMMapDirectory_$2;
}

@end

void OrgApacheLuceneStoreMMapDirectory_$2_init(OrgApacheLuceneStoreMMapDirectory_$2 *self) {
  NSObject_init(self);
}

OrgApacheLuceneStoreMMapDirectory_$2 *new_OrgApacheLuceneStoreMMapDirectory_$2_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreMMapDirectory_$2, init)
}

OrgApacheLuceneStoreMMapDirectory_$2 *create_OrgApacheLuceneStoreMMapDirectory_$2_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreMMapDirectory_$2, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreMMapDirectory_$2)

@implementation OrgApacheLuceneStoreMMapDirectory_$2_$1

- (id)run {
  JavaLangReflectMethod *getCleanerMethod = [[((JavaNioByteBuffer *) nil_chk(val$buffer_)) getClass] getMethod:@"cleaner" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
  [((JavaLangReflectMethod *) nil_chk(getCleanerMethod)) setAccessibleWithBoolean:true];
  id cleaner = [getCleanerMethod invokeWithId:val$buffer_ withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
  if (cleaner != nil) {
    [((JavaLangReflectMethod *) nil_chk([[cleaner getClass] getMethod:@"clean" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]])) invokeWithId:cleaner withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
  }
  return nil;
}

- (instancetype)initWithJavaNioByteBuffer:(JavaNioByteBuffer *)capture$0 {
  OrgApacheLuceneStoreMMapDirectory_$2_$1_initWithJavaNioByteBuffer_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "Ljava.lang.Void;", 0x1, "Ljava.lang.Exception;", NULL },
    { "initWithJavaNioByteBuffer:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$buffer_", NULL, 0x1012, "Ljava.nio.ByteBuffer;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheLuceneStoreMMapDirectory_$2", "freeBufferWithOrgApacheLuceneStoreByteBufferIndexInput:withJavaNioByteBuffer:" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreMMapDirectory_$2_$1 = { 2, "", "org.apache.lucene.store", "MMapDirectory$", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/security/PrivilegedExceptionAction<Ljava/lang/Void;>;" };
  return &_OrgApacheLuceneStoreMMapDirectory_$2_$1;
}

@end

void OrgApacheLuceneStoreMMapDirectory_$2_$1_initWithJavaNioByteBuffer_(OrgApacheLuceneStoreMMapDirectory_$2_$1 *self, JavaNioByteBuffer *capture$0) {
  JreStrongAssign(&self->val$buffer_, capture$0);
  NSObject_init(self);
}

OrgApacheLuceneStoreMMapDirectory_$2_$1 *new_OrgApacheLuceneStoreMMapDirectory_$2_$1_initWithJavaNioByteBuffer_(JavaNioByteBuffer *capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreMMapDirectory_$2_$1, initWithJavaNioByteBuffer_, capture$0)
}

OrgApacheLuceneStoreMMapDirectory_$2_$1 *create_OrgApacheLuceneStoreMMapDirectory_$2_$1_initWithJavaNioByteBuffer_(JavaNioByteBuffer *capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreMMapDirectory_$2_$1, initWithJavaNioByteBuffer_, capture$0)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreMMapDirectory_$2_$1)
