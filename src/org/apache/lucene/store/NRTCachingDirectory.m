//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/NRTCachingDirectory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/FilterDirectory.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "org/apache/lucene/store/NRTCachingDirectory.h"
#include "org/apache/lucene/store/RAMDirectory.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/Accountables.h"
#include "org/apache/lucene/util/IOUtils.h"

#define OrgApacheLuceneStoreNRTCachingDirectory_VERBOSE false

@interface OrgApacheLuceneStoreNRTCachingDirectory () {
 @public
  OrgApacheLuceneStoreRAMDirectory *cache_;
  jlong maxMergeSizeBytes_;
  jlong maxCachedBytes_;
  id uncacheLock_;
}

- (void)unCacheWithNSString:(NSString *)fileName;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneStoreNRTCachingDirectory, cache_, OrgApacheLuceneStoreRAMDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneStoreNRTCachingDirectory, uncacheLock_, id)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneStoreNRTCachingDirectory, VERBOSE, jboolean)

__attribute__((unused)) static void OrgApacheLuceneStoreNRTCachingDirectory_unCacheWithNSString_(OrgApacheLuceneStoreNRTCachingDirectory *self, NSString *fileName);

@implementation OrgApacheLuceneStoreNRTCachingDirectory

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)delegate
                                           withDouble:(jdouble)maxMergeSizeMB
                                           withDouble:(jdouble)maxCachedMB {
  OrgApacheLuceneStoreNRTCachingDirectory_initWithOrgApacheLuceneStoreDirectory_withDouble_withDouble_(self, delegate, maxMergeSizeMB, maxCachedMB);
  return self;
}

- (NSString *)description {
  return JreStrcat("$@$D$DC", @"NRTCachingDirectory(", in_, @"; maxCacheMB=", (maxCachedBytes_ / 1024 / 1024.), @" maxMergeSizeMB=", (maxMergeSizeBytes_ / 1024 / 1024.), ')');
}

- (IOSObjectArray *)listAll {
  @synchronized(self) {
    id<JavaUtilSet> files = [new_JavaUtilHashSet_init() autorelease];
    {
      IOSObjectArray *a__ = [((OrgApacheLuceneStoreRAMDirectory *) nil_chk(cache_)) listAll];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *f = *b__++;
        [files addWithId:f];
      }
    }
    {
      IOSObjectArray *a__ = [((OrgApacheLuceneStoreDirectory *) nil_chk(in_)) listAll];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *f = *b__++;
        if (![files addWithId:f]) {
          @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$$$$", @"file: ", in_, @" appears both in delegate and in cache: cache=", JavaUtilArrays_toStringWithNSObjectArray_([cache_ listAll]), @",delegate=", JavaUtilArrays_toStringWithNSObjectArray_([in_ listAll]))) autorelease];
        }
      }
    }
    return [files toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[files size] type:NSString_class_()]];
  }
}

- (void)deleteFileWithNSString:(NSString *)name {
  @synchronized(self) {
    if ([((OrgApacheLuceneStoreRAMDirectory *) nil_chk(cache_)) fileNameExistsWithNSString:name]) {
      [cache_ deleteFileWithNSString:name];
    }
    else {
      [((OrgApacheLuceneStoreDirectory *) nil_chk(in_)) deleteFileWithNSString:name];
    }
  }
}

- (jlong)fileLengthWithNSString:(NSString *)name {
  @synchronized(self) {
    if ([((OrgApacheLuceneStoreRAMDirectory *) nil_chk(cache_)) fileNameExistsWithNSString:name]) {
      return [cache_ fileLengthWithNSString:name];
    }
    else {
      return [((OrgApacheLuceneStoreDirectory *) nil_chk(in_)) fileLengthWithNSString:name];
    }
  }
}

- (IOSObjectArray *)listCachedFiles {
  return [((OrgApacheLuceneStoreRAMDirectory *) nil_chk(cache_)) listAll];
}

- (OrgApacheLuceneStoreIndexOutput *)createOutputWithNSString:(NSString *)name
                            withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context {
  if ([self doCacheWriteWithNSString:name withOrgApacheLuceneStoreIOContext:context]) {
    @try {
      [((OrgApacheLuceneStoreDirectory *) nil_chk(in_)) deleteFileWithNSString:name];
    }
    @catch (JavaIoIOException *ioe) {
    }
    return [((OrgApacheLuceneStoreRAMDirectory *) nil_chk(cache_)) createOutputWithNSString:name withOrgApacheLuceneStoreIOContext:context];
  }
  else {
    @try {
      [((OrgApacheLuceneStoreRAMDirectory *) nil_chk(cache_)) deleteFileWithNSString:name];
    }
    @catch (JavaIoIOException *ioe) {
    }
    return [((OrgApacheLuceneStoreDirectory *) nil_chk(in_)) createOutputWithNSString:name withOrgApacheLuceneStoreIOContext:context];
  }
}

- (void)syncWithJavaUtilCollection:(id<JavaUtilCollection>)fileNames {
  for (NSString * __strong fileName in nil_chk(fileNames)) {
    OrgApacheLuceneStoreNRTCachingDirectory_unCacheWithNSString_(self, fileName);
  }
  [((OrgApacheLuceneStoreDirectory *) nil_chk(in_)) syncWithJavaUtilCollection:fileNames];
}

- (void)renameFileWithNSString:(NSString *)source
                  withNSString:(NSString *)dest {
  OrgApacheLuceneStoreNRTCachingDirectory_unCacheWithNSString_(self, source);
  [((OrgApacheLuceneStoreDirectory *) nil_chk(in_)) renameFileWithNSString:source withNSString:dest];
}

- (OrgApacheLuceneStoreIndexInput *)openInputWithNSString:(NSString *)name
                        withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context {
  @synchronized(self) {
    if ([((OrgApacheLuceneStoreRAMDirectory *) nil_chk(cache_)) fileNameExistsWithNSString:name]) {
      return [cache_ openInputWithNSString:name withOrgApacheLuceneStoreIOContext:context];
    }
    else {
      return [((OrgApacheLuceneStoreDirectory *) nil_chk(in_)) openInputWithNSString:name withOrgApacheLuceneStoreIOContext:context];
    }
  }
}

- (void)close {
  jboolean success = false;
  @try {
    if (JreLoadVolatileBoolean(&((OrgApacheLuceneStoreRAMDirectory *) nil_chk(cache_))->isOpen_)) {
      {
        IOSObjectArray *a__ = [cache_ listAll];
        NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        NSString * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *fileName = *b__++;
          OrgApacheLuceneStoreNRTCachingDirectory_unCacheWithNSString_(self, fileName);
        }
      }
    }
    success = true;
  }
  @finally {
    if (success) {
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ cache_, in_ } count:2 type:JavaIoCloseable_class_()]);
    }
    else {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ cache_, in_ } count:2 type:JavaIoCloseable_class_()]);
    }
  }
}

- (jboolean)doCacheWriteWithNSString:(NSString *)name
   withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context {
  jlong bytes = 0;
  if (((OrgApacheLuceneStoreIOContext *) nil_chk(context))->mergeInfo_ != nil) {
    bytes = context->mergeInfo_->estimatedMergeBytes_;
  }
  else if (context->flushInfo_ != nil) {
    bytes = context->flushInfo_->estimatedSegmentSize_;
  }
  return (bytes <= maxMergeSizeBytes_) && (bytes + [((OrgApacheLuceneStoreRAMDirectory *) nil_chk(cache_)) ramBytesUsed]) <= maxCachedBytes_;
}

- (void)unCacheWithNSString:(NSString *)fileName {
  OrgApacheLuceneStoreNRTCachingDirectory_unCacheWithNSString_(self, fileName);
}

- (jlong)ramBytesUsed {
  return [((OrgApacheLuceneStoreRAMDirectory *) nil_chk(cache_)) ramBytesUsed];
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_singletonWithId_(OrgApacheLuceneUtilAccountables_namedAccountableWithNSString_withOrgApacheLuceneUtilAccountable_(@"cache", cache_));
}

- (void)dealloc {
  RELEASE_(cache_);
  RELEASE_(uncacheLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneStoreDirectory:withDouble:withDouble:", "NRTCachingDirectory", NULL, 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "listAll", NULL, "[Ljava.lang.String;", 0x21, "Ljava.io.IOException;", NULL },
    { "deleteFileWithNSString:", "deleteFile", "V", 0x21, "Ljava.io.IOException;", NULL },
    { "fileLengthWithNSString:", "fileLength", "J", 0x21, "Ljava.io.IOException;", NULL },
    { "listCachedFiles", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "createOutputWithNSString:withOrgApacheLuceneStoreIOContext:", "createOutput", "Lorg.apache.lucene.store.IndexOutput;", 0x1, "Ljava.io.IOException;", NULL },
    { "syncWithJavaUtilCollection:", "sync", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "renameFileWithNSString:withNSString:", "renameFile", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "openInputWithNSString:withOrgApacheLuceneStoreIOContext:", "openInput", "Lorg.apache.lucene.store.IndexInput;", 0x21, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "doCacheWriteWithNSString:withOrgApacheLuceneStoreIOContext:", "doCacheWrite", "Z", 0x4, NULL, NULL },
    { "unCacheWithNSString:", "unCache", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "getChildResources", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cache_", NULL, 0x12, "Lorg.apache.lucene.store.RAMDirectory;", NULL, NULL, .constantValue.asLong = 0 },
    { "maxMergeSizeBytes_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "maxCachedBytes_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "VERBOSE", "VERBOSE", 0x1a, "Z", NULL, NULL, .constantValue.asBOOL = OrgApacheLuceneStoreNRTCachingDirectory_VERBOSE },
    { "uncacheLock_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreNRTCachingDirectory = { 2, "NRTCachingDirectory", "org.apache.lucene.store", NULL, 0x1, 15, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneStoreNRTCachingDirectory;
}

@end

void OrgApacheLuceneStoreNRTCachingDirectory_initWithOrgApacheLuceneStoreDirectory_withDouble_withDouble_(OrgApacheLuceneStoreNRTCachingDirectory *self, OrgApacheLuceneStoreDirectory *delegate, jdouble maxMergeSizeMB, jdouble maxCachedMB) {
  OrgApacheLuceneStoreFilterDirectory_initWithOrgApacheLuceneStoreDirectory_(self, delegate);
  JreStrongAssignAndConsume(&self->cache_, new_OrgApacheLuceneStoreRAMDirectory_init());
  JreStrongAssignAndConsume(&self->uncacheLock_, new_NSObject_init());
  self->maxMergeSizeBytes_ = JreFpToLong((maxMergeSizeMB * 1024 * 1024));
  self->maxCachedBytes_ = JreFpToLong((maxCachedMB * 1024 * 1024));
}

OrgApacheLuceneStoreNRTCachingDirectory *new_OrgApacheLuceneStoreNRTCachingDirectory_initWithOrgApacheLuceneStoreDirectory_withDouble_withDouble_(OrgApacheLuceneStoreDirectory *delegate, jdouble maxMergeSizeMB, jdouble maxCachedMB) {
  OrgApacheLuceneStoreNRTCachingDirectory *self = [OrgApacheLuceneStoreNRTCachingDirectory alloc];
  OrgApacheLuceneStoreNRTCachingDirectory_initWithOrgApacheLuceneStoreDirectory_withDouble_withDouble_(self, delegate, maxMergeSizeMB, maxCachedMB);
  return self;
}

void OrgApacheLuceneStoreNRTCachingDirectory_unCacheWithNSString_(OrgApacheLuceneStoreNRTCachingDirectory *self, NSString *fileName) {
  @synchronized(self->uncacheLock_) {
    if (![((OrgApacheLuceneStoreRAMDirectory *) nil_chk(self->cache_)) fileNameExistsWithNSString:fileName]) {
      return;
    }
    OrgApacheLuceneStoreIOContext *context = JreLoadStatic(OrgApacheLuceneStoreIOContext, DEFAULT_);
    OrgApacheLuceneStoreIndexOutput *out = [((OrgApacheLuceneStoreDirectory *) nil_chk(self->in_)) createOutputWithNSString:fileName withOrgApacheLuceneStoreIOContext:context];
    OrgApacheLuceneStoreIndexInput *in = nil;
    @try {
      in = [self->cache_ openInputWithNSString:fileName withOrgApacheLuceneStoreIOContext:context];
      [((OrgApacheLuceneStoreIndexOutput *) nil_chk(out)) copyBytesWithOrgApacheLuceneStoreDataInput:in withLong:[((OrgApacheLuceneStoreIndexInput *) nil_chk(in)) length]];
    }
    @finally {
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ in, out } count:2 type:JavaIoCloseable_class_()]);
    }
    @synchronized(self) {
      [self->cache_ deleteFileWithNSString:fileName];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreNRTCachingDirectory)
