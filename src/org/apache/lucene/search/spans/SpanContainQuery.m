//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/SpanContainQuery.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/spans/SpanContainQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/lukhnos/portmobile/util/Objects.h"

@implementation OrgApacheLuceneSearchSpansSpanContainQuery

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)big
                    withOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)little
                                                  withFloat:(jfloat)boost {
  OrgApacheLuceneSearchSpansSpanContainQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withFloat_(self, big, little, boost);
  return self;
}

- (NSString *)getField {
  return [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(big_)) getField];
}

- (NSString *)toStringWithNSString:(NSString *)field
                      withNSString:(NSString *)name {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [buffer appendWithNSString:name];
  [buffer appendWithNSString:@"("];
  [buffer appendWithNSString:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(big_)) toStringWithNSString:field]];
  [buffer appendWithNSString:@", "];
  [buffer appendWithNSString:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(little_)) toStringWithNSString:field]];
  [buffer appendWithNSString:@")"];
  return [buffer description];
}

- (OrgApacheLuceneSearchSpansSpanContainQuery *)clone {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  OrgApacheLuceneSearchSpansSpanContainQuery *clone = nil;
  OrgApacheLuceneSearchSpansSpanQuery *rewrittenBig = (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(big_)) rewriteWithOrgApacheLuceneIndexIndexReader:reader], [OrgApacheLuceneSearchSpansSpanQuery class]);
  if (rewrittenBig != big_) {
    clone = [self clone];
    JreStrongAssign(&((OrgApacheLuceneSearchSpansSpanContainQuery *) nil_chk(clone))->big_, rewrittenBig);
  }
  OrgApacheLuceneSearchSpansSpanQuery *rewrittenLittle = (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(little_)) rewriteWithOrgApacheLuceneIndexIndexReader:reader], [OrgApacheLuceneSearchSpansSpanQuery class]);
  if (rewrittenLittle != little_) {
    if (clone == nil) clone = [self clone];
    JreStrongAssign(&((OrgApacheLuceneSearchSpansSpanContainQuery *) nil_chk(clone))->little_, rewrittenLittle);
  }
  return (clone != nil) ? clone : self;
}

- (jboolean)isEqual:(id)o {
  if (![super isEqual:o]) {
    return false;
  }
  OrgApacheLuceneSearchSpansSpanContainQuery *other = (OrgApacheLuceneSearchSpansSpanContainQuery *) cast_chk(o, [OrgApacheLuceneSearchSpansSpanContainQuery class]);
  return [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(big_)) isEqual:((OrgApacheLuceneSearchSpansSpanContainQuery *) nil_chk(other))->big_] && [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(little_)) isEqual:other->little_];
}

- (NSUInteger)hash {
  jint h = JavaLangInteger_rotateLeftWithInt_withInt_(((jint) [super hash]), 1);
  h ^= ((jint) [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(big_)) hash]);
  h = JavaLangInteger_rotateLeftWithInt_withInt_(h, 1);
  h ^= ((jint) [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(little_)) hash]);
  return h;
}

- (void)dealloc {
  RELEASE_(big_);
  RELEASE_(little_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneSearchSpansSpanQuery:withOrgApacheLuceneSearchSpansSpanQuery:withFloat:", "SpanContainQuery", NULL, 0x0, NULL, NULL },
    { "getField", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithNSString:withNSString:", "toString", "Ljava.lang.String;", 0x0, NULL, NULL },
    { "clone", NULL, "Lorg.apache.lucene.search.spans.SpanContainQuery;", 0x401, NULL, NULL },
    { "rewriteWithOrgApacheLuceneIndexIndexReader:", "rewrite", "Lorg.apache.lucene.search.Query;", 0x1, "Ljava.io.IOException;", NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "big_", NULL, 0x0, "Lorg.apache.lucene.search.spans.SpanQuery;", NULL, NULL, .constantValue.asLong = 0 },
    { "little_", NULL, 0x0, "Lorg.apache.lucene.search.spans.SpanQuery;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.search.spans.SpanContainQuery$SpanContainWeight;"};
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanContainQuery = { 2, "SpanContainQuery", "org.apache.lucene.search.spans", NULL, 0x400, 7, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneSearchSpansSpanContainQuery;
}

@end

void OrgApacheLuceneSearchSpansSpanContainQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withFloat_(OrgApacheLuceneSearchSpansSpanContainQuery *self, OrgApacheLuceneSearchSpansSpanQuery *big, OrgApacheLuceneSearchSpansSpanQuery *little, jfloat boost) {
  OrgApacheLuceneSearchSpansSpanQuery_init(self);
  JreStrongAssign(&self->big_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_(big));
  JreStrongAssign(&self->little_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_(little));
  OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(big)) getField]);
  OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(little)) getField]);
  if (![((NSString *) nil_chk([big getField])) isEqual:[little getField]]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"big and little not same field");
  }
  [self setBoostWithFloat:boost];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanContainQuery)

@implementation OrgApacheLuceneSearchSpansSpanContainQuery_SpanContainWeight

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanContainQuery:(OrgApacheLuceneSearchSpansSpanContainQuery *)outer$
                            withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                   withJavaUtilMap:(id<JavaUtilMap>)terms
                          withOrgApacheLuceneSearchSpansSpanWeight:(OrgApacheLuceneSearchSpansSpanWeight *)bigWeight
                          withOrgApacheLuceneSearchSpansSpanWeight:(OrgApacheLuceneSearchSpansSpanWeight *)littleWeight {
  OrgApacheLuceneSearchSpansSpanContainQuery_SpanContainWeight_initWithOrgApacheLuceneSearchSpansSpanContainQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSpansSpanWeight_(self, outer$, searcher, terms, bigWeight, littleWeight);
  return self;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(bigWeight_)) extractTermsWithJavaUtilSet:terms];
  [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(littleWeight_)) extractTermsWithJavaUtilSet:terms];
}

- (JavaUtilArrayList *)prepareConjunctionWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                 withOrgApacheLuceneSearchSpansSpanWeight_Postings:(OrgApacheLuceneSearchSpansSpanWeight_Postings *)postings {
  OrgApacheLuceneSearchSpansSpans *bigSpans = [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(bigWeight_)) getSpansWithOrgApacheLuceneIndexLeafReaderContext:context withOrgApacheLuceneSearchSpansSpanWeight_Postings:postings];
  if (bigSpans == nil) {
    return nil;
  }
  OrgApacheLuceneSearchSpansSpans *littleSpans = [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(littleWeight_)) getSpansWithOrgApacheLuceneIndexLeafReaderContext:context withOrgApacheLuceneSearchSpansSpanWeight_Postings:postings];
  if (littleSpans == nil) {
    return nil;
  }
  JavaUtilArrayList *bigAndLittle = create_JavaUtilArrayList_init();
  [bigAndLittle addWithId:bigSpans];
  [bigAndLittle addWithId:littleSpans];
  return bigAndLittle;
}

- (void)extractTermContextsWithJavaUtilMap:(id<JavaUtilMap>)contexts {
  [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(bigWeight_)) extractTermContextsWithJavaUtilMap:contexts];
  [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(littleWeight_)) extractTermContextsWithJavaUtilMap:contexts];
}

- (void)dealloc {
  RELEASE_(bigWeight_);
  RELEASE_(littleWeight_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneSearchSpansSpanContainQuery:withOrgApacheLuceneSearchIndexSearcher:withJavaUtilMap:withOrgApacheLuceneSearchSpansSpanWeight:withOrgApacheLuceneSearchSpansSpanWeight:", "SpanContainWeight", NULL, 0x1, NULL, "(Lorg/apache/lucene/search/spans/SpanContainQuery;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map<Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;>;Lorg/apache/lucene/search/spans/SpanWeight;Lorg/apache/lucene/search/spans/SpanWeight;)V" },
    { "extractTermsWithJavaUtilSet:", "extractTerms", "V", 0x1, NULL, "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V" },
    { "prepareConjunctionWithOrgApacheLuceneIndexLeafReaderContext:withOrgApacheLuceneSearchSpansSpanWeight_Postings:", "prepareConjunction", "Ljava.util.ArrayList;", 0x0, "Ljava.io.IOException;", "(Lorg/apache/lucene/index/LeafReaderContext;Lorg/apache/lucene/search/spans/SpanWeight$Postings;)Ljava/util/ArrayList<Lorg/apache/lucene/search/spans/Spans;>;" },
    { "extractTermContextsWithJavaUtilMap:", "extractTermContexts", "V", 0x1, NULL, "(Ljava/util/Map<Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;>;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bigWeight_", NULL, 0x10, "Lorg.apache.lucene.search.spans.SpanWeight;", NULL, NULL, .constantValue.asLong = 0 },
    { "littleWeight_", NULL, 0x10, "Lorg.apache.lucene.search.spans.SpanWeight;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanContainQuery_SpanContainWeight = { 2, "SpanContainWeight", "org.apache.lucene.search.spans", "SpanContainQuery", 0x401, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchSpansSpanContainQuery_SpanContainWeight;
}

@end

void OrgApacheLuceneSearchSpansSpanContainQuery_SpanContainWeight_initWithOrgApacheLuceneSearchSpansSpanContainQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSpansSpanWeight_(OrgApacheLuceneSearchSpansSpanContainQuery_SpanContainWeight *self, OrgApacheLuceneSearchSpansSpanContainQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms, OrgApacheLuceneSearchSpansSpanWeight *bigWeight, OrgApacheLuceneSearchSpansSpanWeight *littleWeight) {
  OrgApacheLuceneSearchSpansSpanWeight_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(self, outer$, searcher, terms);
  JreStrongAssign(&self->bigWeight_, bigWeight);
  JreStrongAssign(&self->littleWeight_, littleWeight);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanContainQuery_SpanContainWeight)
