//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/ScoringRewrite.h"
#include "org/apache/lucene/search/TopTermsRewrite.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.h"
#include "org/apache/lucene/search/spans/SpanOrQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/lukhnos/portmobile/util/Objects.h"

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_setRewriteMethodWithOrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod_(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper *self, OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod *rewriteMethod);

@interface OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite () {
 @public
  OrgApacheLuceneSearchTopTermsRewrite *delegate_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite, delegate_, OrgApacheLuceneSearchTopTermsRewrite *)

@interface OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1 : OrgApacheLuceneSearchTopTermsRewrite

- (jint)getMaxSize;

- (OrgApacheLuceneSearchSpansSpanOrQuery *)getTopLevelBuilder;

- (OrgApacheLuceneSearchQuery *)buildWithId:(OrgApacheLuceneSearchSpansSpanOrQuery *)builder;

- (void)addClauseWithId:(OrgApacheLuceneSearchSpansSpanOrQuery *)topLevel
withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                withInt:(jint)docFreq
              withFloat:(jfloat)boost
withOrgApacheLuceneIndexTermContext:(OrgApacheLuceneIndexTermContext *)states;

- (instancetype)initWithInt:(jint)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1_initWithInt_(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1 *self, jint arg$0);

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1 *new_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1_initWithInt_(jint arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1)

@interface OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1 : OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod {
 @public
  OrgApacheLuceneSearchScoringRewrite *delegate_;
}

- (OrgApacheLuceneSearchSpansSpanQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                            withOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1, delegate_, OrgApacheLuceneSearchScoringRewrite *)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_init(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1 *self);

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1 *new_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1)

@interface OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1 : OrgApacheLuceneSearchScoringRewrite

- (OrgApacheLuceneSearchSpansSpanOrQuery *)getTopLevelBuilder;

- (OrgApacheLuceneSearchQuery *)buildWithId:(OrgApacheLuceneSearchSpansSpanOrQuery *)builder;

- (void)checkMaxClauseCountWithInt:(jint)count;

- (void)addClauseWithId:(OrgApacheLuceneSearchSpansSpanOrQuery *)topLevel
withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                withInt:(jint)docCount
              withFloat:(jfloat)boost
withOrgApacheLuceneIndexTermContext:(OrgApacheLuceneIndexTermContext *)states;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1_init(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1 *self);

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1 *new_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper)

OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod *OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SCORING_SPAN_QUERY_REWRITE_;

@implementation OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper

- (instancetype)initWithOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query {
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_initWithOrgApacheLuceneSearchMultiTermQuery_(self, query);
  return self;
}

- (OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod *)getRewriteMethod {
  OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *m = [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(query_)) getRewriteMethod];
  if (!([m isKindOfClass:[OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod class]])) @throw [new_JavaLangUnsupportedOperationException_initWithNSString_(@"You can only use SpanMultiTermQueryWrapper with a suitable SpanRewriteMethod.") autorelease];
  return (OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod *) check_class_cast(m, [OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod class]);
}

- (void)setRewriteMethodWithOrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod:(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod *)rewriteMethod {
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_setRewriteMethodWithOrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod_(self, rewriteMethod);
}

- (NSString *)getField {
  return [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(query_)) getField];
}

- (OrgApacheLuceneSearchSpansSpanWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                                 withBoolean:(jboolean)needsScores {
  @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Rewrite first!") autorelease];
}

- (OrgApacheLuceneSearchQuery *)getWrappedQuery {
  return query_;
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *builder = [new_JavaLangStringBuilder_init() autorelease];
  [builder appendWithNSString:@"SpanMultiTermQueryWrapper("];
  [builder appendWithNSString:[((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(query_)) toStringWithNSString:field]];
  [builder appendWithNSString:@")"];
  if ([self getBoost] != 1.0f) {
    [builder appendWithChar:'^'];
    [builder appendWithFloat:[self getBoost]];
  }
  return [builder description];
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  OrgApacheLuceneSearchQuery *q = [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(query_)) rewriteWithOrgApacheLuceneIndexIndexReader:reader];
  if (!([q isKindOfClass:[OrgApacheLuceneSearchSpansSpanQuery class]])) @throw [new_JavaLangUnsupportedOperationException_initWithNSString_(@"You can only use SpanMultiTermQueryWrapper with a suitable SpanRewriteMethod.") autorelease];
  [q setBoostWithFloat:[((OrgApacheLuceneSearchQuery *) nil_chk(q)) getBoost] * [self getBoost]];
  return q;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = ((jint) [super hash]);
  result = prime * result + ((jint) [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(query_)) hash]);
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (![super isEqual:obj]) {
    return NO;
  }
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper *other = (OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper *) check_class_cast(obj, [OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper class]);
  return [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(query_)) isEqual:((OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper *) nil_chk(other))->query_];
}

- (void)dealloc {
  RELEASE_(query_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SCORING_SPAN_QUERY_REWRITE_, new_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneSearchMultiTermQuery:", "SpanMultiTermQueryWrapper", NULL, 0x1, NULL, "(TQ;)V" },
    { "getRewriteMethod", NULL, "Lorg.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod;", 0x11, NULL, NULL },
    { "setRewriteMethodWithOrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod:", "setRewriteMethod", "V", 0x11, NULL, NULL },
    { "getField", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:", "createWeight", "Lorg.apache.lucene.search.spans.SpanWeight;", 0x1, "Ljava.io.IOException;", NULL },
    { "getWrappedQuery", NULL, "Lorg.apache.lucene.search.Query;", 0x1, NULL, NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "rewriteWithOrgApacheLuceneIndexIndexReader:", "rewrite", "Lorg.apache.lucene.search.Query;", 0x1, "Ljava.io.IOException;", NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "query_", NULL, 0x14, "TQ;", NULL, "TQ;", .constantValue.asLong = 0 },
    { "SCORING_SPAN_QUERY_REWRITE_", NULL, 0x19, "Lorg.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod;", &OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SCORING_SPAN_QUERY_REWRITE_, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod;", "Lorg.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite;"};
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper = { 2, "SpanMultiTermQueryWrapper", "org.apache.lucene.search.spans", NULL, 0x1, 10, methods, 2, fields, 0, NULL, 2, inner_classes, NULL, "<Q:Lorg/apache/lucene/search/MultiTermQuery;>Lorg/apache/lucene/search/spans/SpanQuery;" };
  return &_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper;
}

@end

void OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_initWithOrgApacheLuceneSearchMultiTermQuery_(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper *self, OrgApacheLuceneSearchMultiTermQuery *query) {
  OrgApacheLuceneSearchSpansSpanQuery_init(self);
  JreStrongAssign(&self->query_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_(query));
  OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *method = [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(query)) getRewriteMethod];
  if ([method isKindOfClass:[OrgApacheLuceneSearchTopTermsRewrite class]]) {
    jint pqsize = [((OrgApacheLuceneSearchTopTermsRewrite *) nil_chk(((OrgApacheLuceneSearchTopTermsRewrite *) check_class_cast(method, [OrgApacheLuceneSearchTopTermsRewrite class])))) getSize];
    OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_setRewriteMethodWithOrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod_(self, [new_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_initWithInt_(pqsize) autorelease]);
  }
  else {
    OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_setRewriteMethodWithOrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod_(self, OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SCORING_SPAN_QUERY_REWRITE_);
  }
}

OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper *new_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_initWithOrgApacheLuceneSearchMultiTermQuery_(OrgApacheLuceneSearchMultiTermQuery *query) {
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper *self = [OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper alloc];
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_initWithOrgApacheLuceneSearchMultiTermQuery_(self, query);
  return self;
}

void OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_setRewriteMethodWithOrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod_(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper *self, OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod *rewriteMethod) {
  [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(self->query_)) setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:rewriteMethod];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper)

@implementation OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod

- (OrgApacheLuceneSearchSpansSpanQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                            withOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)init {
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "rewriteWithOrgApacheLuceneIndexIndexReader:withOrgApacheLuceneSearchMultiTermQuery:", "rewrite", "Lorg.apache.lucene.search.spans.SpanQuery;", 0x401, "Ljava.io.IOException;", NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod = { 2, "SpanRewriteMethod", "org.apache.lucene.search.spans", "SpanMultiTermQueryWrapper", 0x409, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod;
}

@end

void OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod_init(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod *self) {
  OrgApacheLuceneSearchMultiTermQuery_RewriteMethod_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod)

@implementation OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite

- (instancetype)initWithInt:(jint)size {
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_initWithInt_(self, size);
  return self;
}

- (jint)getSize {
  return [((OrgApacheLuceneSearchTopTermsRewrite *) nil_chk(delegate_)) getSize];
}

- (OrgApacheLuceneSearchSpansSpanQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                            withOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query {
  return (OrgApacheLuceneSearchSpansSpanQuery *) check_class_cast([((OrgApacheLuceneSearchTopTermsRewrite *) nil_chk(delegate_)) rewriteWithOrgApacheLuceneIndexIndexReader:reader withOrgApacheLuceneSearchMultiTermQuery:query], [OrgApacheLuceneSearchSpansSpanQuery class]);
}

- (NSUInteger)hash {
  return 31 * ((jint) [((OrgApacheLuceneSearchTopTermsRewrite *) nil_chk(delegate_)) hash]);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return YES;
  if (obj == nil) return NO;
  if ([self getClass] != [nil_chk(obj) getClass]) return NO;
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite *other = (OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite *) check_class_cast(obj, [OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite class]);
  return [((OrgApacheLuceneSearchTopTermsRewrite *) nil_chk(delegate_)) isEqual:other->delegate_];
}

- (void)dealloc {
  RELEASE_(delegate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "TopTermsSpanBooleanQueryRewrite", NULL, 0x1, NULL, NULL },
    { "getSize", NULL, "I", 0x1, NULL, NULL },
    { "rewriteWithOrgApacheLuceneIndexIndexReader:withOrgApacheLuceneSearchMultiTermQuery:", "rewrite", "Lorg.apache.lucene.search.spans.SpanQuery;", 0x1, "Ljava.io.IOException;", NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", NULL, 0x12, "Lorg.apache.lucene.search.TopTermsRewrite;", NULL, "Lorg/apache/lucene/search/TopTermsRewrite<Lorg/apache/lucene/search/spans/SpanOrQuery;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite = { 2, "TopTermsSpanBooleanQueryRewrite", "org.apache.lucene.search.spans", "SpanMultiTermQueryWrapper", 0x19, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite;
}

@end

void OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_initWithInt_(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite *self, jint size) {
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod_init(self);
  JreStrongAssignAndConsume(&self->delegate_, new_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1_initWithInt_(size));
}

OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite *new_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_initWithInt_(jint size) {
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite *self = [OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite alloc];
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_initWithInt_(self, size);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite)

@implementation OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1

- (jint)getMaxSize {
  return JavaLangInteger_MAX_VALUE;
}

- (OrgApacheLuceneSearchSpansSpanOrQuery *)getTopLevelBuilder {
  return [new_OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_([IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchSpansSpanQuery_class_()]) autorelease];
}

- (OrgApacheLuceneSearchQuery *)buildWithId:(OrgApacheLuceneSearchSpansSpanOrQuery *)builder {
  return builder;
}

- (void)addClauseWithId:(OrgApacheLuceneSearchSpansSpanOrQuery *)topLevel
withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                withInt:(jint)docFreq
              withFloat:(jfloat)boost
withOrgApacheLuceneIndexTermContext:(OrgApacheLuceneIndexTermContext *)states {
  OrgApacheLuceneSearchSpansSpanTermQuery *q = [new_OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexTermContext_(term, states) autorelease];
  [q setBoostWithFloat:boost];
  [((OrgApacheLuceneSearchSpansSpanOrQuery *) nil_chk(topLevel)) addClauseWithOrgApacheLuceneSearchSpansSpanQuery:q];
}

- (instancetype)initWithInt:(jint)arg$0 {
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1_initWithInt_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getMaxSize", NULL, "I", 0x4, NULL, NULL },
    { "getTopLevelBuilder", NULL, "Lorg.apache.lucene.search.spans.SpanOrQuery;", 0x4, NULL, NULL },
    { "buildWithId:", "build", "Lorg.apache.lucene.search.Query;", 0x4, NULL, NULL },
    { "addClauseWithId:withOrgApacheLuceneIndexTerm:withInt:withFloat:withOrgApacheLuceneIndexTermContext:", "addClause", "V", 0x4, NULL, NULL },
    { "initWithInt:", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lorg.apache.lucene.search.spans.SpanOrQuery;"};
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite", "initWithInt:" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1 = { 2, "", "org.apache.lucene.search.spans", "SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite", 0x8008, 5, methods, 0, NULL, 1, superclass_type_args, 0, NULL, &enclosing_method, "Lorg/apache/lucene/search/TopTermsRewrite<Lorg/apache/lucene/search/spans/SpanOrQuery;>;" };
  return &_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1;
}

@end

void OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1_initWithInt_(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1 *self, jint arg$0) {
  OrgApacheLuceneSearchTopTermsRewrite_initWithInt_(self, arg$0);
}

OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1 *new_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1_initWithInt_(jint arg$0) {
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1 *self = [OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1 alloc];
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1_initWithInt_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_$1)

@implementation OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1

- (OrgApacheLuceneSearchSpansSpanQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                            withOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query {
  return (OrgApacheLuceneSearchSpansSpanQuery *) check_class_cast([((OrgApacheLuceneSearchScoringRewrite *) nil_chk(delegate_)) rewriteWithOrgApacheLuceneIndexIndexReader:reader withOrgApacheLuceneSearchMultiTermQuery:query], [OrgApacheLuceneSearchSpansSpanQuery class]);
}

- (instancetype)init {
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(delegate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "rewriteWithOrgApacheLuceneIndexIndexReader:withOrgApacheLuceneSearchMultiTermQuery:", "rewrite", "Lorg.apache.lucene.search.spans.SpanQuery;", 0x1, "Ljava.io.IOException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", NULL, 0x12, "Lorg.apache.lucene.search.ScoringRewrite;", NULL, "Lorg/apache/lucene/search/ScoringRewrite<Lorg/apache/lucene/search/spans/SpanOrQuery;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1 = { 2, "", "org.apache.lucene.search.spans", "SpanMultiTermQueryWrapper", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1;
}

@end

void OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_init(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1 *self) {
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod_init(self);
  JreStrongAssignAndConsume(&self->delegate_, new_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1_init());
}

OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1 *new_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_init() {
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1 *self = [OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1 alloc];
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1)

@implementation OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1

- (OrgApacheLuceneSearchSpansSpanOrQuery *)getTopLevelBuilder {
  return [new_OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_([IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchSpansSpanQuery_class_()]) autorelease];
}

- (OrgApacheLuceneSearchQuery *)buildWithId:(OrgApacheLuceneSearchSpansSpanOrQuery *)builder {
  return builder;
}

- (void)checkMaxClauseCountWithInt:(jint)count {
}

- (void)addClauseWithId:(OrgApacheLuceneSearchSpansSpanOrQuery *)topLevel
withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                withInt:(jint)docCount
              withFloat:(jfloat)boost
withOrgApacheLuceneIndexTermContext:(OrgApacheLuceneIndexTermContext *)states {
  OrgApacheLuceneSearchSpansSpanTermQuery *q = [new_OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexTermContext_(term, states) autorelease];
  [q setBoostWithFloat:boost];
  [((OrgApacheLuceneSearchSpansSpanOrQuery *) nil_chk(topLevel)) addClauseWithOrgApacheLuceneSearchSpansSpanQuery:q];
}

- (instancetype)init {
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getTopLevelBuilder", NULL, "Lorg.apache.lucene.search.spans.SpanOrQuery;", 0x4, NULL, NULL },
    { "buildWithId:", "build", "Lorg.apache.lucene.search.Query;", 0x4, NULL, NULL },
    { "checkMaxClauseCountWithInt:", "checkMaxClauseCount", "V", 0x4, NULL, NULL },
    { "addClauseWithId:withOrgApacheLuceneIndexTerm:withInt:withFloat:withOrgApacheLuceneIndexTermContext:", "addClause", "V", 0x4, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lorg.apache.lucene.search.spans.SpanOrQuery;"};
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1 = { 2, "", "org.apache.lucene.search.spans", "SpanMultiTermQueryWrapper$", 0x8008, 5, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lorg/apache/lucene/search/ScoringRewrite<Lorg/apache/lucene/search/spans/SpanOrQuery;>;" };
  return &_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1;
}

@end

void OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1_init(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1 *self) {
  OrgApacheLuceneSearchScoringRewrite_init(self);
}

OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1 *new_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1_init() {
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1 *self = [OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1 alloc];
  OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_$1_$1)
