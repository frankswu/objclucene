//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/SpanScorer.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/search/spans/SpanScorer.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/lukhnos/portmobile/util/Objects.h"

@interface OrgApacheLuceneSearchSpansSpanScorer () {
 @public
  jint lastScoredDoc_;
}

- (void)ensureFreq;

@end

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanScorer_ensureFreq(OrgApacheLuceneSearchSpansSpanScorer *self);

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanScorer_setFreqCurrentDoc(OrgApacheLuceneSearchSpansSpanScorer *self);

@implementation OrgApacheLuceneSearchSpansSpanScorer

- (instancetype)initWithOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)spans
               withOrgApacheLuceneSearchSpansSpanWeight:(OrgApacheLuceneSearchSpansSpanWeight *)weight
withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer:(OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *)docScorer {
  OrgApacheLuceneSearchSpansSpanScorer_initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_(self, spans, weight, docScorer);
  return self;
}

- (jint)nextDoc {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) nextDoc];
}

- (jint)advanceWithInt:(jint)target {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) advanceWithInt:target];
}

- (void)ensureFreq {
  OrgApacheLuceneSearchSpansSpanScorer_ensureFreq(self);
}

- (void)setFreqCurrentDoc {
  OrgApacheLuceneSearchSpansSpanScorer_setFreqCurrentDoc(self);
}

- (void)doStartCurrentDoc {
}

- (void)doCurrentSpans {
}

- (jfloat)scoreCurrentDoc {
  return [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *) nil_chk(docScorer_)) scoreWithInt:[((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) docID] withFloat:freq_];
}

- (jint)docID {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) docID];
}

- (jfloat)score {
  OrgApacheLuceneSearchSpansSpanScorer_ensureFreq(self);
  return [self scoreCurrentDoc];
}

- (jint)freq {
  OrgApacheLuceneSearchSpansSpanScorer_ensureFreq(self);
  return numMatches_;
}

- (jfloat)sloppyFreq {
  OrgApacheLuceneSearchSpansSpanScorer_ensureFreq(self);
  return freq_;
}

- (jlong)cost {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) cost];
}

- (OrgApacheLuceneSearchTwoPhaseIterator *)asTwoPhaseIterator {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) asTwoPhaseIterator];
}

- (void)dealloc {
  RELEASE_(spans_);
  RELEASE_(docScorer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneSearchSpansSpans:withOrgApacheLuceneSearchSpansSpanWeight:withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer:", "SpanScorer", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "nextDoc", NULL, "I", 0x11, "Ljava.io.IOException;", NULL },
    { "advanceWithInt:", "advance", "I", 0x11, "Ljava.io.IOException;", NULL },
    { "ensureFreq", NULL, "V", 0x12, "Ljava.io.IOException;", NULL },
    { "setFreqCurrentDoc", NULL, "V", 0x14, "Ljava.io.IOException;", NULL },
    { "doStartCurrentDoc", NULL, "V", 0x4, "Ljava.io.IOException;", NULL },
    { "doCurrentSpans", NULL, "V", 0x4, "Ljava.io.IOException;", NULL },
    { "scoreCurrentDoc", NULL, "F", 0x4, "Ljava.io.IOException;", NULL },
    { "docID", NULL, "I", 0x11, NULL, NULL },
    { "score", NULL, "F", 0x11, "Ljava.io.IOException;", NULL },
    { "freq", NULL, "I", 0x11, "Ljava.io.IOException;", NULL },
    { "sloppyFreq", NULL, "F", 0x11, "Ljava.io.IOException;", NULL },
    { "cost", NULL, "J", 0x11, NULL, NULL },
    { "asTwoPhaseIterator", NULL, "Lorg.apache.lucene.search.TwoPhaseIterator;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "spans_", NULL, 0x14, "Lorg.apache.lucene.search.spans.Spans;", NULL, NULL, .constantValue.asLong = 0 },
    { "docScorer_", NULL, 0x14, "Lorg.apache.lucene.search.similarities.Similarity$SimScorer;", NULL, NULL, .constantValue.asLong = 0 },
    { "freq_", NULL, 0x4, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "numMatches_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastScoredDoc_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanScorer = { 2, "SpanScorer", "org.apache.lucene.search.spans", NULL, 0x1, 14, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchSpansSpanScorer;
}

@end

void OrgApacheLuceneSearchSpansSpanScorer_initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_(OrgApacheLuceneSearchSpansSpanScorer *self, OrgApacheLuceneSearchSpansSpans *spans, OrgApacheLuceneSearchSpansSpanWeight *weight, OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *docScorer) {
  OrgApacheLuceneSearchScorer_initWithOrgApacheLuceneSearchWeight_(self, weight);
  self->lastScoredDoc_ = -1;
  JreStrongAssign(&self->docScorer_, docScorer);
  JreStrongAssign(&self->spans_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_(spans));
}

OrgApacheLuceneSearchSpansSpanScorer *new_OrgApacheLuceneSearchSpansSpanScorer_initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_(OrgApacheLuceneSearchSpansSpans *spans, OrgApacheLuceneSearchSpansSpanWeight *weight, OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *docScorer) {
  OrgApacheLuceneSearchSpansSpanScorer *self = [OrgApacheLuceneSearchSpansSpanScorer alloc];
  OrgApacheLuceneSearchSpansSpanScorer_initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_(self, spans, weight, docScorer);
  return self;
}

void OrgApacheLuceneSearchSpansSpanScorer_ensureFreq(OrgApacheLuceneSearchSpansSpanScorer *self) {
  jint currentDoc = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(self->spans_)) docID];
  if (self->lastScoredDoc_ != currentDoc) {
    OrgApacheLuceneSearchSpansSpanScorer_setFreqCurrentDoc(self);
    self->lastScoredDoc_ = currentDoc;
  }
}

void OrgApacheLuceneSearchSpansSpanScorer_setFreqCurrentDoc(OrgApacheLuceneSearchSpansSpanScorer *self) {
  self->freq_ = 0.0f;
  self->numMatches_ = 0;
  [self doStartCurrentDoc];
  JreAssert(([((OrgApacheLuceneSearchSpansSpans *) nil_chk(self->spans_)) startPosition] == -1), (JreStrcat("$@", @"incorrect initial start position, spans=", self->spans_)));
  JreAssert(([self->spans_ endPosition] == -1), (JreStrcat("$@", @"incorrect initial end position, spans=", self->spans_)));
  jint prevStartPos = -1;
  jint prevEndPos = -1;
  jint startPos = [self->spans_ nextStartPosition];
  JreAssert((startPos != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS), (JreStrcat("$@", @"initial startPos NO_MORE_POSITIONS, spans=", self->spans_)));
  do {
    JreAssert((startPos >= prevStartPos), (@"org/apache/lucene/search/spans/SpanScorer.java:93 condition failed: assert startPos >= prevStartPos;"));
    jint endPos = [self->spans_ endPosition];
    JreAssert((endPos != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS), (@"org/apache/lucene/search/spans/SpanScorer.java:95 condition failed: assert endPos != Spans.NO_MORE_POSITIONS;"));
    JreAssert(((startPos != prevStartPos) || (endPos >= prevEndPos)), (JreStrcat("$I", @"decreased endPos=", endPos)));
    self->numMatches_++;
    if (self->docScorer_ == nil) {
      self->freq_ = 1;
      return;
    }
    JrePlusAssignFloatF(&self->freq_, [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *) nil_chk(self->docScorer_)) computeSlopFactorWithInt:[self->spans_ width]]);
    [self doCurrentSpans];
    prevStartPos = startPos;
    prevEndPos = endPos;
    startPos = [self->spans_ nextStartPosition];
  }
  while (startPos != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS);
  JreAssert(([self->spans_ startPosition] == OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS), (JreStrcat("$@", @"incorrect final start position, spans=", self->spans_)));
  JreAssert(([self->spans_ endPosition] == OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS), (JreStrcat("$@", @"incorrect final end position, spans=", self->spans_)));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanScorer)
