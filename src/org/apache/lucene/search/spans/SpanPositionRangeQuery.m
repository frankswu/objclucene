//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/SpanPositionRangeQuery.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/spans/FilterSpans.h"
#include "org/apache/lucene/search/spans/SpanPositionCheckQuery.h"
#include "org/apache/lucene/search/spans/SpanPositionRangeQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/util/ToStringUtils.h"

@implementation OrgApacheLuceneSearchSpansSpanPositionRangeQuery

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)match
                                                    withInt:(jint)start
                                                    withInt:(jint)end {
  OrgApacheLuceneSearchSpansSpanPositionRangeQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_(self, match, start, end);
  return self;
}

- (OrgApacheLuceneSearchSpansFilterSpans_AcceptStatusEnum *)acceptPositionWithOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)spans {
  JreAssert(([((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans)) startPosition] != [spans endPosition]), (@"org/apache/lucene/search/spans/SpanPositionRangeQuery.java:43 condition failed: assert spans.startPosition() != spans.endPosition();"));
  OrgApacheLuceneSearchSpansFilterSpans_AcceptStatusEnum *res = ([spans startPosition] >= end_) ? JreLoadStatic(OrgApacheLuceneSearchSpansFilterSpans_AcceptStatusEnum, NO_MORE_IN_CURRENT_DOC) : ([spans startPosition] >= start_ && [spans endPosition] <= end_) ? JreLoadStatic(OrgApacheLuceneSearchSpansFilterSpans_AcceptStatusEnum, YES) : JreLoadStatic(OrgApacheLuceneSearchSpansFilterSpans_AcceptStatusEnum, NO);
  return res;
}

- (jint)getStart {
  return start_;
}

- (jint)getEnd {
  return end_;
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *buffer = [new_JavaLangStringBuilder_init() autorelease];
  [buffer appendWithNSString:@"spanPosRange("];
  [buffer appendWithNSString:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(match_)) toStringWithNSString:field]];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buffer appendWithNSString:@", "])) appendWithInt:start_])) appendWithNSString:@", "];
  [buffer appendWithInt:end_];
  [buffer appendWithNSString:@")"];
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (OrgApacheLuceneSearchSpansSpanPositionRangeQuery *)clone {
  OrgApacheLuceneSearchSpansSpanPositionRangeQuery *result = [new_OrgApacheLuceneSearchSpansSpanPositionRangeQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_((OrgApacheLuceneSearchSpansSpanQuery *) check_class_cast([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(match_)) clone], [OrgApacheLuceneSearchSpansSpanQuery class]), start_, end_) autorelease];
  [result setBoostWithFloat:[self getBoost]];
  return result;
}

- (jboolean)isEqual:(id)o {
  if (![super isEqual:o]) {
    return NO;
  }
  OrgApacheLuceneSearchSpansSpanPositionRangeQuery *other = (OrgApacheLuceneSearchSpansSpanPositionRangeQuery *) check_class_cast(o, [OrgApacheLuceneSearchSpansSpanPositionRangeQuery class]);
  return self->end_ == ((OrgApacheLuceneSearchSpansSpanPositionRangeQuery *) nil_chk(other))->end_ && self->start_ == other->start_;
}

- (NSUInteger)hash {
  jint h = ((jint) [super hash]) ^ end_;
  h = (h * 127) ^ start_;
  return h;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneSearchSpansSpanQuery:withInt:withInt:", "SpanPositionRangeQuery", NULL, 0x1, NULL, NULL },
    { "acceptPositionWithOrgApacheLuceneSearchSpansSpans:", "acceptPosition", "Lorg.apache.lucene.search.spans.FilterSpans$AcceptStatus;", 0x4, "Ljava.io.IOException;", NULL },
    { "getStart", NULL, "I", 0x1, NULL, NULL },
    { "getEnd", NULL, "I", 0x1, NULL, NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "clone", NULL, "Lorg.apache.lucene.search.spans.SpanPositionRangeQuery;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "start_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "end_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanPositionRangeQuery = { 2, "SpanPositionRangeQuery", "org.apache.lucene.search.spans", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchSpansSpanPositionRangeQuery;
}

@end

void OrgApacheLuceneSearchSpansSpanPositionRangeQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_(OrgApacheLuceneSearchSpansSpanPositionRangeQuery *self, OrgApacheLuceneSearchSpansSpanQuery *match, jint start, jint end) {
  OrgApacheLuceneSearchSpansSpanPositionCheckQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_(self, match);
  self->start_ = start;
  self->end_ = end;
}

OrgApacheLuceneSearchSpansSpanPositionRangeQuery *new_OrgApacheLuceneSearchSpansSpanPositionRangeQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_(OrgApacheLuceneSearchSpansSpanQuery *match, jint start, jint end) {
  OrgApacheLuceneSearchSpansSpanPositionRangeQuery *self = [OrgApacheLuceneSearchSpansSpanPositionRangeQuery alloc];
  OrgApacheLuceneSearchSpansSpanPositionRangeQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_(self, match, start, end);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanPositionRangeQuery)
