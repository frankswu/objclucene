//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/SpanTermQuery.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Collections.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/ReaderUtil.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/search/spans/TermSpans.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/ToStringUtils.h"
#include "org/lukhnos/portmobile/util/Objects.h"

@interface OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight () {
 @public
  OrgApacheLuceneSearchSpansSpanTermQuery *this$0_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight, this$0_, OrgApacheLuceneSearchSpansSpanTermQuery *)

@implementation OrgApacheLuceneSearchSpansSpanTermQuery

- (instancetype)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(self, term);
  return self;
}

- (instancetype)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
             withOrgApacheLuceneIndexTermContext:(OrgApacheLuceneIndexTermContext *)context {
  OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexTermContext_(self, term, context);
  return self;
}

- (OrgApacheLuceneIndexTerm *)getTerm {
  return term_;
}

- (NSString *)getField {
  return [((OrgApacheLuceneIndexTerm *) nil_chk(term_)) field];
}

- (OrgApacheLuceneSearchSpansSpanWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                                 withBoolean:(jboolean)needsScores {
  OrgApacheLuceneIndexTermContext *context;
  OrgApacheLuceneIndexIndexReaderContext *topContext = [((OrgApacheLuceneSearchIndexSearcher *) nil_chk(searcher)) getTopReaderContext];
  if (termContext_ == nil || termContext_->topReaderContext_ != topContext) {
    context = OrgApacheLuceneIndexTermContext_buildWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTerm_(topContext, term_);
  }
  else {
    context = termContext_;
  }
  return [new_OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight_initWithOrgApacheLuceneSearchSpansSpanTermQuery_withOrgApacheLuceneIndexTermContext_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(self, context, searcher, needsScores ? JavaUtilCollections_singletonMapWithId_withId_(term_, context) : nil) autorelease];
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *buffer = [new_JavaLangStringBuilder_init() autorelease];
  if ([((NSString *) nil_chk([((OrgApacheLuceneIndexTerm *) nil_chk(term_)) field])) isEqual:field]) [buffer appendWithNSString:[term_ text]];
  else [buffer appendWithNSString:[term_ description]];
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = ((jint) [super hash]);
  result = prime * result + ((jint) [((OrgApacheLuceneIndexTerm *) nil_chk(term_)) hash]);
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (![super isEqual:obj]) {
    return false;
  }
  OrgApacheLuceneSearchSpansSpanTermQuery *other = (OrgApacheLuceneSearchSpansSpanTermQuery *) check_class_cast(obj, [OrgApacheLuceneSearchSpansSpanTermQuery class]);
  return [((OrgApacheLuceneIndexTerm *) nil_chk(term_)) isEqual:((OrgApacheLuceneSearchSpansSpanTermQuery *) nil_chk(other))->term_];
}

- (void)dealloc {
  RELEASE_(term_);
  RELEASE_(termContext_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexTerm:", "SpanTermQuery", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheLuceneIndexTerm:withOrgApacheLuceneIndexTermContext:", "SpanTermQuery", NULL, 0x1, NULL, NULL },
    { "getTerm", NULL, "Lorg.apache.lucene.index.Term;", 0x1, NULL, NULL },
    { "getField", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:", "createWeight", "Lorg.apache.lucene.search.spans.SpanWeight;", 0x1, "Ljava.io.IOException;", NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "term_", NULL, 0x14, "Lorg.apache.lucene.index.Term;", NULL, NULL, .constantValue.asLong = 0 },
    { "termContext_", NULL, 0x14, "Lorg.apache.lucene.index.TermContext;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.search.spans.SpanTermQuery$SpanTermWeight;"};
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanTermQuery = { 2, "SpanTermQuery", "org.apache.lucene.search.spans", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneSearchSpansSpanTermQuery;
}

@end

void OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneSearchSpansSpanTermQuery *self, OrgApacheLuceneIndexTerm *term) {
  OrgApacheLuceneSearchSpansSpanQuery_init(self);
  JreStrongAssign(&self->term_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_(term));
  JreStrongAssign(&self->termContext_, nil);
}

OrgApacheLuceneSearchSpansSpanTermQuery *new_OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexTerm *term) {
  OrgApacheLuceneSearchSpansSpanTermQuery *self = [OrgApacheLuceneSearchSpansSpanTermQuery alloc];
  OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(self, term);
  return self;
}

void OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexTermContext_(OrgApacheLuceneSearchSpansSpanTermQuery *self, OrgApacheLuceneIndexTerm *term, OrgApacheLuceneIndexTermContext *context) {
  OrgApacheLuceneSearchSpansSpanQuery_init(self);
  JreStrongAssign(&self->term_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_(term));
  JreStrongAssign(&self->termContext_, context);
}

OrgApacheLuceneSearchSpansSpanTermQuery *new_OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexTermContext_(OrgApacheLuceneIndexTerm *term, OrgApacheLuceneIndexTermContext *context) {
  OrgApacheLuceneSearchSpansSpanTermQuery *self = [OrgApacheLuceneSearchSpansSpanTermQuery alloc];
  OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexTermContext_(self, term, context);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanTermQuery)

@implementation OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanTermQuery:(OrgApacheLuceneSearchSpansSpanTermQuery *)outer$
                            withOrgApacheLuceneIndexTermContext:(OrgApacheLuceneIndexTermContext *)termContext
                         withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                withJavaUtilMap:(id<JavaUtilMap>)terms {
  OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight_initWithOrgApacheLuceneSearchSpansSpanTermQuery_withOrgApacheLuceneIndexTermContext_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(self, outer$, termContext, searcher, terms);
  return self;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  [((id<JavaUtilSet>) nil_chk(terms)) addWithId:this$0_->term_];
}

- (void)extractTermContextsWithJavaUtilMap:(id<JavaUtilMap>)contexts {
  [((id<JavaUtilMap>) nil_chk(contexts)) putWithId:this$0_->term_ withId:termContext_];
}

- (OrgApacheLuceneSearchSpansSpans *)getSpansWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                 withOrgApacheLuceneSearchSpansSpanWeight_PostingsEnum:(OrgApacheLuceneSearchSpansSpanWeight_PostingsEnum *)requiredPostings {
  JreAssert((((OrgApacheLuceneIndexTermContext *) nil_chk(termContext_))->topReaderContext_ == OrgApacheLuceneIndexReaderUtil_getTopLevelContextWithOrgApacheLuceneIndexIndexReaderContext_(context)), (JreStrcat("$@$@", @"The top-reader used to create Weight (", termContext_->topReaderContext_, @") is not the same as the current reader's top-reader (", OrgApacheLuceneIndexReaderUtil_getTopLevelContextWithOrgApacheLuceneIndexIndexReaderContext_(context))));
  OrgApacheLuceneIndexTermState *state = [termContext_ getWithInt:((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context))->ord_];
  if (state == nil) {
    JreAssert(([((OrgApacheLuceneIndexLeafReader *) nil_chk([context reader])) docFreqWithOrgApacheLuceneIndexTerm:this$0_->term_] == 0), (JreStrcat("$@", @"no termstate found but term exists in reader term=", this$0_->term_)));
    return nil;
  }
  OrgApacheLuceneIndexTerms *terms = [((OrgApacheLuceneIndexLeafReader *) nil_chk([context reader])) termsWithNSString:[((OrgApacheLuceneIndexTerm *) nil_chk(this$0_->term_)) field]];
  if (terms == nil) return nil;
  if ([((OrgApacheLuceneIndexTerms *) nil_chk(terms)) hasPositions] == false) @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$$C", @"field \"", [this$0_->term_ field], @"\" was indexed without position data; cannot run SpanTermQuery (term=", [this$0_->term_ text], ')')) autorelease];
  OrgApacheLuceneIndexTermsEnum *termsEnum = [terms iterator];
  [((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) seekExactWithOrgApacheLuceneUtilBytesRef:[this$0_->term_ bytes] withOrgApacheLuceneIndexTermState:state];
  OrgApacheLuceneIndexPostingsEnum *postings = [termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:nil withInt:[((OrgApacheLuceneSearchSpansSpanWeight_PostingsEnum *) nil_chk(requiredPostings)) getRequiredPostings]];
  return [new_OrgApacheLuceneSearchSpansTermSpans_initWithOrgApacheLuceneIndexPostingsEnum_withOrgApacheLuceneIndexTerm_(postings, this$0_->term_) autorelease];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(termContext_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneSearchSpansSpanTermQuery:withOrgApacheLuceneIndexTermContext:withOrgApacheLuceneSearchIndexSearcher:withJavaUtilMap:", "SpanTermWeight", NULL, 0x1, NULL, NULL },
    { "extractTermsWithJavaUtilSet:", "extractTerms", "V", 0x1, NULL, NULL },
    { "extractTermContextsWithJavaUtilMap:", "extractTermContexts", "V", 0x1, NULL, NULL },
    { "getSpansWithOrgApacheLuceneIndexLeafReaderContext:withOrgApacheLuceneSearchSpansSpanWeight_PostingsEnum:", "getSpans", "Lorg.apache.lucene.search.spans.Spans;", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.search.spans.SpanTermQuery;", NULL, NULL, .constantValue.asLong = 0 },
    { "termContext_", NULL, 0x10, "Lorg.apache.lucene.index.TermContext;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight = { 2, "SpanTermWeight", "org.apache.lucene.search.spans", "SpanTermQuery", 0x1, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight;
}

@end

void OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight_initWithOrgApacheLuceneSearchSpansSpanTermQuery_withOrgApacheLuceneIndexTermContext_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight *self, OrgApacheLuceneSearchSpansSpanTermQuery *outer$, OrgApacheLuceneIndexTermContext *termContext, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchSpansSpanWeight_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(self, outer$, searcher, terms);
  JreStrongAssign(&self->termContext_, termContext);
  JreAssert((termContext != nil), (@"TermContext must not be null"));
}

OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight *new_OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight_initWithOrgApacheLuceneSearchSpansSpanTermQuery_withOrgApacheLuceneIndexTermContext_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchSpansSpanTermQuery *outer$, OrgApacheLuceneIndexTermContext *termContext, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms) {
  OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight *self = [OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight alloc];
  OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight_initWithOrgApacheLuceneSearchSpansSpanTermQuery_withOrgApacheLuceneIndexTermContext_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(self, outer$, termContext, searcher, terms);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanTermQuery_SpanTermWeight)
