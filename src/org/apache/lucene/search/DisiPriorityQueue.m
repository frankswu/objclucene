//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/DisiPriorityQueue.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/DisiPriorityQueue.h"
#include "org/apache/lucene/search/DisiWrapper.h"

@interface OrgApacheLuceneSearchDisiPriorityQueue () {
 @public
  IOSObjectArray *heap_;
  jint size_;
}

- (OrgApacheLuceneSearchDisiWrapper *)prependWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)w1
                                             withOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)w2;

- (OrgApacheLuceneSearchDisiWrapper *)topListWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)list
                                        withOrgApacheLuceneSearchDisiWrapperArray:(IOSObjectArray *)heap
                                                                          withInt:(jint)size
                                                                          withInt:(jint)i;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchDisiPriorityQueue, heap_, IOSObjectArray *)

__attribute__((unused)) static OrgApacheLuceneSearchDisiWrapper *OrgApacheLuceneSearchDisiPriorityQueue_prependWithOrgApacheLuceneSearchDisiWrapper_withOrgApacheLuceneSearchDisiWrapper_(OrgApacheLuceneSearchDisiPriorityQueue *self, OrgApacheLuceneSearchDisiWrapper *w1, OrgApacheLuceneSearchDisiWrapper *w2);

__attribute__((unused)) static OrgApacheLuceneSearchDisiWrapper *OrgApacheLuceneSearchDisiPriorityQueue_topListWithOrgApacheLuceneSearchDisiWrapper_withOrgApacheLuceneSearchDisiWrapperArray_withInt_withInt_(OrgApacheLuceneSearchDisiPriorityQueue *self, OrgApacheLuceneSearchDisiWrapper *list, IOSObjectArray *heap, jint size, jint i);

@implementation OrgApacheLuceneSearchDisiPriorityQueue

+ (jint)leftNodeWithInt:(jint)node {
  return OrgApacheLuceneSearchDisiPriorityQueue_leftNodeWithInt_(node);
}

+ (jint)rightNodeWithInt:(jint)leftNode {
  return OrgApacheLuceneSearchDisiPriorityQueue_rightNodeWithInt_(leftNode);
}

+ (jint)parentNodeWithInt:(jint)node {
  return OrgApacheLuceneSearchDisiPriorityQueue_parentNodeWithInt_(node);
}

- (instancetype)initWithInt:(jint)maxSize {
  OrgApacheLuceneSearchDisiPriorityQueue_initWithInt_(self, maxSize);
  return self;
}

- (jint)size {
  return size_;
}

- (OrgApacheLuceneSearchDisiWrapper *)top {
  return IOSObjectArray_Get(nil_chk(heap_), 0);
}

- (OrgApacheLuceneSearchDisiWrapper *)topList {
  IOSObjectArray *heap = self->heap_;
  jint size = self->size_;
  OrgApacheLuceneSearchDisiWrapper *list = IOSObjectArray_Get(nil_chk(heap), 0);
  JreStrongAssign(&((OrgApacheLuceneSearchDisiWrapper *) nil_chk(list))->next_, nil);
  if (size >= 3) {
    list = OrgApacheLuceneSearchDisiPriorityQueue_topListWithOrgApacheLuceneSearchDisiWrapper_withOrgApacheLuceneSearchDisiWrapperArray_withInt_withInt_(self, list, heap, size, 1);
    list = OrgApacheLuceneSearchDisiPriorityQueue_topListWithOrgApacheLuceneSearchDisiWrapper_withOrgApacheLuceneSearchDisiWrapperArray_withInt_withInt_(self, list, heap, size, 2);
  }
  else if (size == 2 && ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap, 1)))->doc_ == list->doc_) {
    list = OrgApacheLuceneSearchDisiPriorityQueue_prependWithOrgApacheLuceneSearchDisiWrapper_withOrgApacheLuceneSearchDisiWrapper_(self, IOSObjectArray_Get(heap, 1), list);
  }
  return list;
}

- (OrgApacheLuceneSearchDisiWrapper *)prependWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)w1
                                             withOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)w2 {
  return OrgApacheLuceneSearchDisiPriorityQueue_prependWithOrgApacheLuceneSearchDisiWrapper_withOrgApacheLuceneSearchDisiWrapper_(self, w1, w2);
}

- (OrgApacheLuceneSearchDisiWrapper *)topListWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)list
                                        withOrgApacheLuceneSearchDisiWrapperArray:(IOSObjectArray *)heap
                                                                          withInt:(jint)size
                                                                          withInt:(jint)i {
  return OrgApacheLuceneSearchDisiPriorityQueue_topListWithOrgApacheLuceneSearchDisiWrapper_withOrgApacheLuceneSearchDisiWrapperArray_withInt_withInt_(self, list, heap, size, i);
}

- (OrgApacheLuceneSearchDisiWrapper *)addWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)entry_ {
  IOSObjectArray *heap = self->heap_;
  jint size = self->size_;
  IOSObjectArray_Set(nil_chk(heap), size, entry_);
  [self upHeapWithInt:size];
  self->size_ = size + 1;
  return IOSObjectArray_Get(heap, 0);
}

- (OrgApacheLuceneSearchDisiWrapper *)pop {
  IOSObjectArray *heap = self->heap_;
  OrgApacheLuceneSearchDisiWrapper *result = IOSObjectArray_Get(nil_chk(heap), 0);
  jint i = --size_;
  IOSObjectArray_Set(heap, 0, IOSObjectArray_Get(heap, i));
  IOSObjectArray_Set(heap, i, nil);
  [self downHeapWithInt:i];
  return result;
}

- (OrgApacheLuceneSearchDisiWrapper *)updateTop {
  [self downHeapWithInt:size_];
  return IOSObjectArray_Get(nil_chk(heap_), 0);
}

- (OrgApacheLuceneSearchDisiWrapper *)updateTopWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)topReplacement {
  IOSObjectArray_Set(nil_chk(heap_), 0, topReplacement);
  return [self updateTop];
}

- (void)upHeapWithInt:(jint)i {
  OrgApacheLuceneSearchDisiWrapper *node = IOSObjectArray_Get(nil_chk(heap_), i);
  jint nodeDoc = ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(node))->doc_;
  jint j = OrgApacheLuceneSearchDisiPriorityQueue_parentNodeWithInt_(i);
  while (j >= 0 && nodeDoc < ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap_, j)))->doc_) {
    IOSObjectArray_Set(heap_, i, IOSObjectArray_Get(heap_, j));
    i = j;
    j = OrgApacheLuceneSearchDisiPriorityQueue_parentNodeWithInt_(j);
  }
  IOSObjectArray_Set(heap_, i, node);
}

- (void)downHeapWithInt:(jint)size {
  jint i = 0;
  OrgApacheLuceneSearchDisiWrapper *node = IOSObjectArray_Get(nil_chk(heap_), 0);
  jint j = OrgApacheLuceneSearchDisiPriorityQueue_leftNodeWithInt_(i);
  if (j < size) {
    jint k = OrgApacheLuceneSearchDisiPriorityQueue_rightNodeWithInt_(j);
    if (k < size && ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap_, k)))->doc_ < ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap_, j)))->doc_) {
      j = k;
    }
    if (((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap_, j)))->doc_ < ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(node))->doc_) {
      do {
        IOSObjectArray_Set(heap_, i, IOSObjectArray_Get(heap_, j));
        i = j;
        j = OrgApacheLuceneSearchDisiPriorityQueue_leftNodeWithInt_(i);
        k = OrgApacheLuceneSearchDisiPriorityQueue_rightNodeWithInt_(j);
        if (k < size && ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap_, k)))->doc_ < ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap_, j)))->doc_) {
          j = k;
        }
      }
      while (j < size && ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap_, j)))->doc_ < node->doc_);
      IOSObjectArray_Set(heap_, i, node);
    }
  }
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilList>) nil_chk([((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_(heap_))) subListWithInt:0 withInt:size_])) iterator];
}

- (void)dealloc {
  RELEASE_(heap_);
  [super dealloc];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "leftNodeWithInt:", "leftNode", "I", 0x8, NULL, NULL },
    { "rightNodeWithInt:", "rightNode", "I", 0x8, NULL, NULL },
    { "parentNodeWithInt:", "parentNode", "I", 0x8, NULL, NULL },
    { "initWithInt:", "DisiPriorityQueue", NULL, 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "top", NULL, "Lorg.apache.lucene.search.DisiWrapper;", 0x1, NULL, NULL },
    { "topList", NULL, "Lorg.apache.lucene.search.DisiWrapper;", 0x1, NULL, NULL },
    { "prependWithOrgApacheLuceneSearchDisiWrapper:withOrgApacheLuceneSearchDisiWrapper:", "prepend", "Lorg.apache.lucene.search.DisiWrapper;", 0x2, NULL, NULL },
    { "topListWithOrgApacheLuceneSearchDisiWrapper:withOrgApacheLuceneSearchDisiWrapperArray:withInt:withInt:", "topList", "Lorg.apache.lucene.search.DisiWrapper;", 0x2, NULL, NULL },
    { "addWithOrgApacheLuceneSearchDisiWrapper:", "add", "Lorg.apache.lucene.search.DisiWrapper;", 0x1, NULL, NULL },
    { "pop", NULL, "Lorg.apache.lucene.search.DisiWrapper;", 0x1, NULL, NULL },
    { "updateTop", NULL, "Lorg.apache.lucene.search.DisiWrapper;", 0x1, NULL, NULL },
    { "updateTopWithOrgApacheLuceneSearchDisiWrapper:", "updateTop", "Lorg.apache.lucene.search.DisiWrapper;", 0x0, NULL, NULL },
    { "upHeapWithInt:", "upHeap", "V", 0x0, NULL, NULL },
    { "downHeapWithInt:", "downHeap", "V", 0x0, NULL, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "heap_", NULL, 0x12, "[Lorg.apache.lucene.search.DisiWrapper;", NULL, "[Lorg/apache/lucene/search/DisiWrapper<TIter;>;", .constantValue.asLong = 0 },
    { "size_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchDisiPriorityQueue = { 2, "DisiPriorityQueue", "org.apache.lucene.search", NULL, 0x11, 16, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<Iter:Lorg/apache/lucene/search/DocIdSetIterator;>Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/lucene/search/DisiWrapper<TIter;>;>;" };
  return &_OrgApacheLuceneSearchDisiPriorityQueue;
}

@end

jint OrgApacheLuceneSearchDisiPriorityQueue_leftNodeWithInt_(jint node) {
  OrgApacheLuceneSearchDisiPriorityQueue_initialize();
  return (JreLShift32((node + 1), 1)) - 1;
}

jint OrgApacheLuceneSearchDisiPriorityQueue_rightNodeWithInt_(jint leftNode) {
  OrgApacheLuceneSearchDisiPriorityQueue_initialize();
  return leftNode + 1;
}

jint OrgApacheLuceneSearchDisiPriorityQueue_parentNodeWithInt_(jint node) {
  OrgApacheLuceneSearchDisiPriorityQueue_initialize();
  return (JreURShift32((node + 1), 1)) - 1;
}

void OrgApacheLuceneSearchDisiPriorityQueue_initWithInt_(OrgApacheLuceneSearchDisiPriorityQueue *self, jint maxSize) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->heap_, [IOSObjectArray newArrayWithLength:maxSize type:OrgApacheLuceneSearchDisiWrapper_class_()]);
  self->size_ = 0;
}

OrgApacheLuceneSearchDisiPriorityQueue *new_OrgApacheLuceneSearchDisiPriorityQueue_initWithInt_(jint maxSize) {
  OrgApacheLuceneSearchDisiPriorityQueue *self = [OrgApacheLuceneSearchDisiPriorityQueue alloc];
  OrgApacheLuceneSearchDisiPriorityQueue_initWithInt_(self, maxSize);
  return self;
}

OrgApacheLuceneSearchDisiWrapper *OrgApacheLuceneSearchDisiPriorityQueue_prependWithOrgApacheLuceneSearchDisiWrapper_withOrgApacheLuceneSearchDisiWrapper_(OrgApacheLuceneSearchDisiPriorityQueue *self, OrgApacheLuceneSearchDisiWrapper *w1, OrgApacheLuceneSearchDisiWrapper *w2) {
  JreStrongAssign(&((OrgApacheLuceneSearchDisiWrapper *) nil_chk(w1))->next_, w2);
  return w1;
}

OrgApacheLuceneSearchDisiWrapper *OrgApacheLuceneSearchDisiPriorityQueue_topListWithOrgApacheLuceneSearchDisiWrapper_withOrgApacheLuceneSearchDisiWrapperArray_withInt_withInt_(OrgApacheLuceneSearchDisiPriorityQueue *self, OrgApacheLuceneSearchDisiWrapper *list, IOSObjectArray *heap, jint size, jint i) {
  OrgApacheLuceneSearchDisiWrapper *w = IOSObjectArray_Get(nil_chk(heap), i);
  if (((OrgApacheLuceneSearchDisiWrapper *) nil_chk(w))->doc_ == ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(list))->doc_) {
    list = OrgApacheLuceneSearchDisiPriorityQueue_prependWithOrgApacheLuceneSearchDisiWrapper_withOrgApacheLuceneSearchDisiWrapper_(self, w, list);
    jint left = OrgApacheLuceneSearchDisiPriorityQueue_leftNodeWithInt_(i);
    jint right = left + 1;
    if (right < size) {
      list = OrgApacheLuceneSearchDisiPriorityQueue_topListWithOrgApacheLuceneSearchDisiWrapper_withOrgApacheLuceneSearchDisiWrapperArray_withInt_withInt_(self, list, heap, size, left);
      list = OrgApacheLuceneSearchDisiPriorityQueue_topListWithOrgApacheLuceneSearchDisiWrapper_withOrgApacheLuceneSearchDisiWrapperArray_withInt_withInt_(self, list, heap, size, right);
    }
    else if (left < size && ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap, left)))->doc_ == ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(list))->doc_) {
      list = OrgApacheLuceneSearchDisiPriorityQueue_prependWithOrgApacheLuceneSearchDisiWrapper_withOrgApacheLuceneSearchDisiWrapper_(self, IOSObjectArray_Get(heap, left), list);
    }
  }
  return list;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchDisiPriorityQueue)
