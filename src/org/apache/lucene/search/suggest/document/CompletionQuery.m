//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./suggest/src/java/org/apache/lucene/search/suggest/document/CompletionQuery.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/suggest/BitsProducer.h"
#include "org/apache/lucene/search/suggest/document/CompletionAnalyzer.h"
#include "org/apache/lucene/search/suggest/document/CompletionQuery.h"
#include "org/apache/lucene/search/suggest/document/CompletionTerms.h"
#include "org/apache/lucene/search/suggest/document/ContextQuery.h"
#include "org/apache/lucene/search/suggest/document/ContextSuggestField.h"
#include "org/apache/lucene/search/suggest/document/SuggestField.h"

@interface OrgApacheLuceneSearchSuggestDocumentCompletionQuery () {
 @public
  OrgApacheLuceneIndexTerm *term_;
  OrgApacheLuceneSearchSuggestBitsProducer *filter_;
}

- (void)validateWithNSString:(NSString *)termText;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSuggestDocumentCompletionQuery, term_, OrgApacheLuceneIndexTerm *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSuggestDocumentCompletionQuery, filter_, OrgApacheLuceneSearchSuggestBitsProducer *)

__attribute__((unused)) static void OrgApacheLuceneSearchSuggestDocumentCompletionQuery_validateWithNSString_(OrgApacheLuceneSearchSuggestDocumentCompletionQuery *self, NSString *termText);

@implementation OrgApacheLuceneSearchSuggestDocumentCompletionQuery

- (instancetype)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
    withOrgApacheLuceneSearchSuggestBitsProducer:(OrgApacheLuceneSearchSuggestBitsProducer *)filter {
  OrgApacheLuceneSearchSuggestDocumentCompletionQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneSearchSuggestBitsProducer_(self, term, filter);
  return self;
}

- (OrgApacheLuceneSearchSuggestBitsProducer *)getFilter {
  return filter_;
}

- (NSString *)getField {
  return [((OrgApacheLuceneIndexTerm *) nil_chk(term_)) field];
}

- (OrgApacheLuceneIndexTerm *)getTerm {
  return term_;
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  jbyte type = 0;
  jboolean first = true;
  OrgApacheLuceneIndexTerms *terms;
  for (OrgApacheLuceneIndexLeafReaderContext * __strong context in nil_chk([((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) leaves])) {
    OrgApacheLuceneIndexLeafReader *leafReader = [((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader];
    @try {
      if ((terms = [((OrgApacheLuceneIndexLeafReader *) nil_chk(leafReader)) termsWithNSString:[self getField]]) == nil) {
        continue;
      }
    }
    @catch (JavaIoIOException *e) {
      continue;
    }
    if ([terms isKindOfClass:[OrgApacheLuceneSearchSuggestDocumentCompletionTerms class]]) {
      OrgApacheLuceneSearchSuggestDocumentCompletionTerms *completionTerms = (OrgApacheLuceneSearchSuggestDocumentCompletionTerms *) check_class_cast(terms, [OrgApacheLuceneSearchSuggestDocumentCompletionTerms class]);
      jbyte t = [((OrgApacheLuceneSearchSuggestDocumentCompletionTerms *) nil_chk(completionTerms)) getType];
      if (first) {
        type = t;
        first = false;
      }
      else if (type != t) {
        @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", [self getField], @" has values of multiple types")) autorelease];
      }
    }
  }
  if (first == false) {
    if ([self isKindOfClass:[OrgApacheLuceneSearchSuggestDocumentContextQuery class]]) {
      if (type == OrgApacheLuceneSearchSuggestDocumentSuggestField_TYPE) {
        @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", [[self getClass] getSimpleName], @" can not be executed against a non context-enabled SuggestField: ", [self getField])) autorelease];
      }
    }
    else {
      if (type == OrgApacheLuceneSearchSuggestDocumentContextSuggestField_TYPE) {
        return [new_OrgApacheLuceneSearchSuggestDocumentContextQuery_initWithOrgApacheLuceneSearchSuggestDocumentCompletionQuery_(self) autorelease];
      }
    }
  }
  return self;
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *buffer = [new_JavaLangStringBuilder_init() autorelease];
  if (![((NSString *) nil_chk([((OrgApacheLuceneIndexTerm *) nil_chk(term_)) field])) isEqual:field]) {
    [buffer appendWithNSString:[term_ field]];
    [buffer appendWithNSString:@":"];
  }
  [buffer appendWithNSString:[term_ text]];
  [buffer appendWithChar:'*'];
  if (filter_ != nil) {
    [buffer appendWithNSString:@","];
    [buffer appendWithNSString:@"filter"];
    [buffer appendWithNSString:@":"];
    [buffer appendWithNSString:[filter_ description]];
  }
  return [buffer description];
}

- (void)validateWithNSString:(NSString *)termText {
  OrgApacheLuceneSearchSuggestDocumentCompletionQuery_validateWithNSString_(self, termText);
}

- (void)dealloc {
  RELEASE_(term_);
  RELEASE_(filter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexTerm:withOrgApacheLuceneSearchSuggestBitsProducer:", "CompletionQuery", NULL, 0x4, NULL, NULL },
    { "getFilter", NULL, "Lorg.apache.lucene.search.suggest.BitsProducer;", 0x1, NULL, NULL },
    { "getField", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTerm", NULL, "Lorg.apache.lucene.index.Term;", 0x1, NULL, NULL },
    { "rewriteWithOrgApacheLuceneIndexIndexReader:", "rewrite", "Lorg.apache.lucene.search.Query;", 0x1, "Ljava.io.IOException;", NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "validateWithNSString:", "validate", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "term_", NULL, 0x12, "Lorg.apache.lucene.index.Term;", NULL, NULL, .constantValue.asLong = 0 },
    { "filter_", NULL, 0x12, "Lorg.apache.lucene.search.suggest.BitsProducer;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSuggestDocumentCompletionQuery = { 2, "CompletionQuery", "org.apache.lucene.search.suggest.document", NULL, 0x401, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchSuggestDocumentCompletionQuery;
}

@end

void OrgApacheLuceneSearchSuggestDocumentCompletionQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneSearchSuggestBitsProducer_(OrgApacheLuceneSearchSuggestDocumentCompletionQuery *self, OrgApacheLuceneIndexTerm *term, OrgApacheLuceneSearchSuggestBitsProducer *filter) {
  OrgApacheLuceneSearchQuery_init(self);
  OrgApacheLuceneSearchSuggestDocumentCompletionQuery_validateWithNSString_(self, [((OrgApacheLuceneIndexTerm *) nil_chk(term)) text]);
  JreStrongAssign(&self->term_, term);
  JreStrongAssign(&self->filter_, filter);
}

void OrgApacheLuceneSearchSuggestDocumentCompletionQuery_validateWithNSString_(OrgApacheLuceneSearchSuggestDocumentCompletionQuery *self, NSString *termText) {
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(termText)) length]); i++) {
    switch ([termText charAtWithInt:i]) {
      case OrgApacheLuceneSearchSuggestDocumentCompletionAnalyzer_HOLE_CHARACTER:
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Term text cannot contain HOLE character U+001E; this character is reserved") autorelease];
      case OrgApacheLuceneSearchSuggestDocumentCompletionAnalyzer_SEP_LABEL:
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Term text cannot contain unit separator character U+001F; this character is reserved") autorelease];
      default:
      break;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSuggestDocumentCompletionQuery)
