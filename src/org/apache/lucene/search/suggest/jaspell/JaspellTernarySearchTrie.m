//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/nio/charset/Charset.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Vector.h"
#include "java/util/zip/GZIPInputStream.h"
#include "org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/lukhnos/portmobile/charset/StandardCharsets.h"
#include "org/lukhnos/portmobile/file/Files.h"
#include "org/lukhnos/portmobile/file/Path.h"

@interface OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie () {
 @public
  /*!
   @brief The default number of values returned by the <code>matchAlmost</code>
 method.
   */
  jint defaultNumReturnValues_;
  /*!
   @brief the number of differences allowed in a call to the
 <code>matchAlmostKey</code> method.
   */
  jint matchAlmostDiff_;
  /*!
   @brief The base node in the trie.
   */
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *rootNode_;
  JavaUtilLocale *locale_;
}

/*!
 @brief Compares characters by alfabetical order.
 @param cCompare2
 The first char in the comparison.
 @param cRef
 The second char in the comparison.
 @return A negative number, 0 or a positive number if the second char is
 less, equal or greater.
 */
+ (jint)compareCharsAlphabeticallyWithChar:(jchar)cCompare2
                                  withChar:(jchar)cRef;

/*!
 @brief Deletes the node passed in as an argument.
 If this node has non-null data,
 then both the node and the data will be deleted. It also deletes any other
 nodes in the trie that are no longer needed after the deletion of the node.
 @param nodeToDelete
 The node to delete.
 */
- (void)deleteNodeWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)nodeToDelete;

/*!
 @brief Recursively visits each node to be deleted.
 To delete a node, first set its data to null, then pass it into this
 method, then pass the node returned by this method into this method (make
 sure you don't delete the data of any of the nodes returned from this
 method!) and continue in this fashion until the node returned by this
 method is <code>null</code>.
 The TSTNode instance returned by this method will be next node to be
 operated on by <code>deleteNodeRecursion</code> (This emulates recursive
 method call while avoiding the JVM overhead normally associated with a
 recursive method.)
 @param currentNode
 The node to delete.
 @return The next node to be called in deleteNodeRecursion.
 */
- (OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)deleteNodeRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)currentNode;

/*!
 @brief Recursivelly vists the nodes in order to find the ones that almost match a
 given key.
 @param currentNode
 The current node.
 @param charIndex
 The current char.
 @param d
 The number of differences so far.
 @param matchAlmostNumReturnValues
 The maximum number of values in the result <code>List</code>.
 @param matchAlmostResult2
 The results so far.
 @param upTo
 If true all keys having up to and including matchAlmostDiff
 mismatched letters will be included in the result (including a key
 that is exactly the same as the target string) otherwise keys will
 be included in the result only if they have exactly
 matchAlmostDiff number of mismatched letters.
 @param matchAlmostKey
 The key being searched.
 @return A <code>List</code> with the results.
 */
- (id<JavaUtilList>)matchAlmostRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)currentNode
                                                                                                        withInt:(jint)charIndex
                                                                                                        withInt:(jint)d
                                                                                       withJavaLangCharSequence:(id<JavaLangCharSequence>)matchAlmostKey
                                                                                                        withInt:(jint)matchAlmostNumReturnValues
                                                                                               withJavaUtilList:(id<JavaUtilList>)matchAlmostResult2
                                                                                                    withBoolean:(jboolean)upTo;

/*!
 @brief Recursivelly visists each node to calculate the number of nodes.
 @param currentNode
 The current node.
 @param checkData
 If true we check the data to be different of <code>null</code>.
 @param numNodes2
 The number of nodes so far.
 @return The number of nodes accounted.
 */
- (jint)recursiveNodeCalculatorWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)currentNode
                                                                                           withBoolean:(jboolean)checkData
                                                                                               withInt:(jint)numNodes2;

/*!
 @brief Returns keys sorted in alphabetical order.
 This includes the current Node
 and all nodes connected to the current Node.
 <p>
 Sorted keys will be appended to the end of the resulting <code>List</code>.
 The result may be empty when this method is invoked, but may not be
 <code>null</code>.
 @param currentNode
 The current node.
 @param sortKeysNumReturnValues
 The maximum number of values in the result.
 @param sortKeysResult2
 The results so far.
 @return A <code>List</code> with the results.
 */
- (id<JavaUtilList>)sortKeysRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)currentNode
                                                                                                     withInt:(jint)sortKeysNumReturnValues
                                                                                            withJavaUtilList:(id<JavaUtilList>)sortKeysResult2;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie, rootNode_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie, locale_, JavaUtilLocale *)

__attribute__((unused)) static jint OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_compareCharsAlphabeticallyWithChar_withChar_(jchar cCompare2, jchar cRef);

__attribute__((unused)) static void OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_deleteNodeWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *self, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *nodeToDelete);

__attribute__((unused)) static OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_deleteNodeRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *self, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *currentNode);

__attribute__((unused)) static id<JavaUtilList> OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_matchAlmostRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withInt_withJavaLangCharSequence_withInt_withJavaUtilList_withBoolean_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *self, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *currentNode, jint charIndex, jint d, id<JavaLangCharSequence> matchAlmostKey, jint matchAlmostNumReturnValues, id<JavaUtilList> matchAlmostResult2, jboolean upTo);

__attribute__((unused)) static jint OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_recursiveNodeCalculatorWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withBoolean_withInt_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *self, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *currentNode, jboolean checkData, jint numNodes2);

__attribute__((unused)) static id<JavaUtilList> OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_sortKeysRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withJavaUtilList_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *self, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *currentNode, jint sortKeysNumReturnValues, id<JavaUtilList> sortKeysResult2);

@implementation OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie

+ (jint)compareCharsAlphabeticallyWithChar:(jchar)cCompare2
                                  withChar:(jchar)cRef {
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_compareCharsAlphabeticallyWithChar_withChar_(cCompare2, cRef);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initWithJavaUtilLocale_(self, locale);
  return self;
}

- (void)setRootWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)newRoot {
  JreStrongAssign(&rootNode_, newRoot);
}

- (OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)getRoot {
  return rootNode_;
}

- (instancetype)initWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)file {
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initWithOrgLukhnosPortmobileFilePath_(self, file);
  return self;
}

- (instancetype)initWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)file
                                         withBoolean:(jboolean)compression {
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initWithOrgLukhnosPortmobileFilePath_withBoolean_(self, file, compression);
  return self;
}

- (void)deleteNodeWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)nodeToDelete {
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_deleteNodeWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(self, nodeToDelete);
}

- (OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)deleteNodeRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)currentNode {
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_deleteNodeRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(self, currentNode);
}

- (id)getWithJavaLangCharSequence:(id<JavaLangCharSequence>)key {
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *node = [self getNodeWithJavaLangCharSequence:key];
  if (node == nil) {
    return nil;
  }
  return node->data_;
}

- (JavaLangFloat *)getAndIncrementWithNSString:(NSString *)key {
  NSString *key2 = [((NSString *) nil_chk([((NSString *) nil_chk(key)) trim])) lowercaseStringWithJRELocale:locale_];
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *node = [self getNodeWithJavaLangCharSequence:key2];
  if (node == nil) {
    return nil;
  }
  JavaLangFloat *aux = (JavaLangFloat *) cast_chk((node->data_), [JavaLangFloat class]);
  if (aux == nil) {
    aux = create_JavaLangFloat_initWithFloat_(1);
  }
  else {
    aux = create_JavaLangFloat_initWithFloat_([aux intValue] + 1);
  }
  [self putWithJavaLangCharSequence:key2 withId:aux];
  return aux;
}

- (NSString *)getKeyWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)node {
  JavaLangStringBuilder *getKeyBuffer = create_JavaLangStringBuilder_init();
  [getKeyBuffer setLengthWithInt:0];
  [getKeyBuffer appendWithNSString:JreStrcat("C", ((OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *) nil_chk(node))->splitchar_)];
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *currentNode;
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *lastNode;
  currentNode = IOSObjectArray_Get(nil_chk(node->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_PARENT);
  lastNode = node;
  while (currentNode != nil) {
    if (IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID) == lastNode) {
      [getKeyBuffer appendWithNSString:JreStrcat("C", currentNode->splitchar_)];
    }
    lastNode = currentNode;
    currentNode = IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_PARENT);
  }
  [getKeyBuffer reverse];
  return [getKeyBuffer description];
}

- (OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)getNodeWithJavaLangCharSequence:(id<JavaLangCharSequence>)key {
  return [self getNodeWithJavaLangCharSequence:key withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:rootNode_];
}

- (OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)getNodeWithJavaLangCharSequence:(id<JavaLangCharSequence>)key
                                 withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)startNode {
  if (key == nil || startNode == nil || [key length] == 0) {
    return nil;
  }
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *currentNode = startNode;
  jint charIndex = 0;
  while (true) {
    if (currentNode == nil) {
      return nil;
    }
    jint charComp = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_compareCharsAlphabeticallyWithChar_withChar_([key charAtWithInt:charIndex], currentNode->splitchar_);
    if (charComp == 0) {
      charIndex++;
      if (charIndex == [key length]) {
        return currentNode;
      }
      currentNode = IOSObjectArray_Get(nil_chk(currentNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID);
    }
    else if (charComp < 0) {
      currentNode = IOSObjectArray_Get(nil_chk(currentNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID);
    }
    else {
      currentNode = IOSObjectArray_Get(nil_chk(currentNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID);
    }
  }
}

- (OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)getOrCreateNodeWithJavaLangCharSequence:(id<JavaLangCharSequence>)key {
  if (key == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"attempt to get or create node with null key");
  }
  if ([key length] == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"attempt to get or create node with key of zero length");
  }
  if (rootNode_ == nil) {
    JreStrongAssignAndConsume(&rootNode_, new_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_initWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_withChar_withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(self, [key charAtWithInt:0], nil));
  }
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *currentNode = rootNode_;
  jint charIndex = 0;
  while (true) {
    jint charComp = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_compareCharsAlphabeticallyWithChar_withChar_([key charAtWithInt:charIndex], ((OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *) nil_chk(currentNode))->splitchar_);
    if (charComp == 0) {
      charIndex++;
      if (charIndex == [key length]) {
        return currentNode;
      }
      if (IOSObjectArray_Get(nil_chk(currentNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID) == nil) {
        IOSObjectArray_SetAndConsume(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID, new_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_initWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_withChar_withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(self, [key charAtWithInt:charIndex], currentNode));
      }
      currentNode = IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID);
    }
    else if (charComp < 0) {
      if (IOSObjectArray_Get(nil_chk(currentNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID) == nil) {
        IOSObjectArray_SetAndConsume(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID, new_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_initWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_withChar_withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(self, [key charAtWithInt:charIndex], currentNode));
      }
      currentNode = IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID);
    }
    else {
      if (IOSObjectArray_Get(nil_chk(currentNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID) == nil) {
        IOSObjectArray_SetAndConsume(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID, new_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_initWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_withChar_withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(self, [key charAtWithInt:charIndex], currentNode));
      }
      currentNode = IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID);
    }
  }
}

- (id<JavaUtilList>)matchAlmostWithNSString:(NSString *)key {
  return [self matchAlmostWithJavaLangCharSequence:key withInt:defaultNumReturnValues_];
}

- (id<JavaUtilList>)matchAlmostWithJavaLangCharSequence:(id<JavaLangCharSequence>)key
                                                withInt:(jint)numReturnValues {
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_matchAlmostRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withInt_withJavaLangCharSequence_withInt_withJavaUtilList_withBoolean_(self, rootNode_, 0, matchAlmostDiff_, key, ((numReturnValues < 0) ? -1 : numReturnValues), create_JavaUtilVector_init(), false);
}

- (id<JavaUtilList>)matchAlmostRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)currentNode
                                                                                                        withInt:(jint)charIndex
                                                                                                        withInt:(jint)d
                                                                                       withJavaLangCharSequence:(id<JavaLangCharSequence>)matchAlmostKey
                                                                                                        withInt:(jint)matchAlmostNumReturnValues
                                                                                               withJavaUtilList:(id<JavaUtilList>)matchAlmostResult2
                                                                                                    withBoolean:(jboolean)upTo {
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_matchAlmostRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withInt_withJavaLangCharSequence_withInt_withJavaUtilList_withBoolean_(self, currentNode, charIndex, d, matchAlmostKey, matchAlmostNumReturnValues, matchAlmostResult2, upTo);
}

- (id<JavaUtilList>)matchPrefixWithNSString:(NSString *)prefix {
  return [self matchPrefixWithJavaLangCharSequence:prefix withInt:defaultNumReturnValues_];
}

- (id<JavaUtilList>)matchPrefixWithJavaLangCharSequence:(id<JavaLangCharSequence>)prefix
                                                withInt:(jint)numReturnValues {
  JavaUtilVector *sortKeysResult = create_JavaUtilVector_init();
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *startNode = [self getNodeWithJavaLangCharSequence:prefix];
  if (startNode == nil) {
    return sortKeysResult;
  }
  if (startNode->data_ != nil) {
    [sortKeysResult addElementWithId:[self getKeyWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:startNode]];
  }
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_sortKeysRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withJavaUtilList_(self, IOSObjectArray_Get(nil_chk(startNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID), ((numReturnValues < 0) ? -1 : numReturnValues), sortKeysResult);
}

- (jint)numDataNodes {
  return [self numDataNodesWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:rootNode_];
}

- (jint)numDataNodesWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)startingNode {
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_recursiveNodeCalculatorWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withBoolean_withInt_(self, startingNode, true, 0);
}

- (jint)numNodes {
  return [self numNodesWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:rootNode_];
}

- (jint)numNodesWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)startingNode {
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_recursiveNodeCalculatorWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withBoolean_withInt_(self, startingNode, false, 0);
}

- (void)putWithJavaLangCharSequence:(id<JavaLangCharSequence>)key
                             withId:(id)value {
  JreStrongAssign(&((OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *) nil_chk([self getOrCreateNodeWithJavaLangCharSequence:key]))->data_, value);
}

- (jint)recursiveNodeCalculatorWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)currentNode
                                                                                           withBoolean:(jboolean)checkData
                                                                                               withInt:(jint)numNodes2 {
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_recursiveNodeCalculatorWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withBoolean_withInt_(self, currentNode, checkData, numNodes2);
}

- (void)removeWithNSString:(NSString *)key {
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_deleteNodeWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(self, [self getNodeWithJavaLangCharSequence:[((NSString *) nil_chk([((NSString *) nil_chk(key)) trim])) lowercaseStringWithJRELocale:locale_]]);
}

- (void)setMatchAlmostDiffWithInt:(jint)diff {
  if (diff < 0) {
    matchAlmostDiff_ = 0;
  }
  else if (diff > 3) {
    matchAlmostDiff_ = 3;
  }
  else {
    matchAlmostDiff_ = diff;
  }
}

- (void)setNumReturnValuesWithInt:(jint)num {
  defaultNumReturnValues_ = (num < 0) ? -1 : num;
}

- (id<JavaUtilList>)sortKeysWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)startNode
                                                                                            withInt:(jint)numReturnValues {
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_sortKeysRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withJavaUtilList_(self, startNode, ((numReturnValues < 0) ? -1 : numReturnValues), create_JavaUtilVector_init());
}

- (id<JavaUtilList>)sortKeysRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)currentNode
                                                                                                     withInt:(jint)sortKeysNumReturnValues
                                                                                            withJavaUtilList:(id<JavaUtilList>)sortKeysResult2 {
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_sortKeysRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withJavaUtilList_(self, currentNode, sortKeysNumReturnValues, sortKeysResult2);
}

- (jlong)ramBytesUsed {
  jlong mem = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfWithId_(self);
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *root = [self getRoot];
  if (root != nil) {
    mem += [root ramBytesUsed];
  }
  return mem;
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

- (void)dealloc {
  RELEASE_(rootNode_);
  RELEASE_(locale_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareCharsAlphabeticallyWithChar:withChar:", "compareCharsAlphabetically", "I", 0xa, NULL, NULL },
    { "init", "JaspellTernarySearchTrie", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilLocale:", "JaspellTernarySearchTrie", NULL, 0x1, NULL, NULL },
    { "setRootWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:", "setRoot", "V", 0x0, NULL, NULL },
    { "getRoot", NULL, "Lorg.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie$TSTNode;", 0x0, NULL, NULL },
    { "initWithOrgLukhnosPortmobileFilePath:", "JaspellTernarySearchTrie", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithOrgLukhnosPortmobileFilePath:withBoolean:", "JaspellTernarySearchTrie", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "deleteNodeWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:", "deleteNode", "V", 0x2, NULL, NULL },
    { "deleteNodeRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:", "deleteNodeRecursion", "Lorg.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie$TSTNode;", 0x2, NULL, NULL },
    { "getWithJavaLangCharSequence:", "get", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getAndIncrementWithNSString:", "getAndIncrement", "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "getKeyWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:", "getKey", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeWithJavaLangCharSequence:", "getNode", "Lorg.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie$TSTNode;", 0x1, NULL, NULL },
    { "getNodeWithJavaLangCharSequence:withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:", "getNode", "Lorg.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie$TSTNode;", 0x4, NULL, NULL },
    { "getOrCreateNodeWithJavaLangCharSequence:", "getOrCreateNode", "Lorg.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie$TSTNode;", 0x4, "Ljava.lang.NullPointerException;Ljava.lang.IllegalArgumentException;", NULL },
    { "matchAlmostWithNSString:", "matchAlmost", "Ljava.util.List;", 0x1, NULL, "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;" },
    { "matchAlmostWithJavaLangCharSequence:withInt:", "matchAlmost", "Ljava.util.List;", 0x1, NULL, "(Ljava/lang/CharSequence;I)Ljava/util/List<Ljava/lang/String;>;" },
    { "matchAlmostRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:withInt:withInt:withJavaLangCharSequence:withInt:withJavaUtilList:withBoolean:", "matchAlmostRecursion", "Ljava.util.List;", 0x2, NULL, "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;IILjava/lang/CharSequence;ILjava/util/List<Ljava/lang/String;>;Z)Ljava/util/List<Ljava/lang/String;>;" },
    { "matchPrefixWithNSString:", "matchPrefix", "Ljava.util.List;", 0x1, NULL, "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;" },
    { "matchPrefixWithJavaLangCharSequence:withInt:", "matchPrefix", "Ljava.util.List;", 0x1, NULL, "(Ljava/lang/CharSequence;I)Ljava/util/List<Ljava/lang/String;>;" },
    { "numDataNodes", NULL, "I", 0x1, NULL, NULL },
    { "numDataNodesWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:", "numDataNodes", "I", 0x4, NULL, NULL },
    { "numNodes", NULL, "I", 0x1, NULL, NULL },
    { "numNodesWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:", "numNodes", "I", 0x4, NULL, NULL },
    { "putWithJavaLangCharSequence:withId:", "put", "V", 0x1, NULL, NULL },
    { "recursiveNodeCalculatorWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:withBoolean:withInt:", "recursiveNodeCalculator", "I", 0x2, NULL, NULL },
    { "removeWithNSString:", "remove", "V", 0x1, NULL, NULL },
    { "setMatchAlmostDiffWithInt:", "setMatchAlmostDiff", "V", 0x1, NULL, NULL },
    { "setNumReturnValuesWithInt:", "setNumReturnValues", "V", 0x1, NULL, NULL },
    { "sortKeysWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:withInt:", "sortKeys", "Ljava.util.List;", 0x4, NULL, "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;I)Ljava/util/List<Ljava/lang/String;>;" },
    { "sortKeysRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:withInt:withJavaUtilList:", "sortKeysRecursion", "Ljava.util.List;", 0x2, NULL, "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;ILjava/util/List<Ljava/lang/String;>;)Ljava/util/List<Ljava/lang/String;>;" },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "getChildResources", NULL, "Ljava.util.Collection;", 0x1, NULL, "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defaultNumReturnValues_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "matchAlmostDiff_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "rootNode_", NULL, 0x2, "Lorg.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie$TSTNode;", NULL, NULL, .constantValue.asLong = 0 },
    { "locale_", NULL, 0x12, "Ljava.util.Locale;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie$TSTNode;"};
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie = { 2, "JaspellTernarySearchTrie", "org.apache.lucene.search.suggest.jaspell", NULL, 0x1, 33, methods, 4, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie;
}

@end

jint OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_compareCharsAlphabeticallyWithChar_withChar_(jchar cCompare2, jchar cRef) {
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initialize();
  return JavaLangCharacter_toLowerCaseWithChar_(cCompare2) - JavaLangCharacter_toLowerCaseWithChar_(cRef);
}

void OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_init(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *self) {
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initWithJavaUtilLocale_(self, JreLoadStatic(JavaUtilLocale, ROOT));
}

OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *new_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie, init)
}

OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *create_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie, init)
}

void OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initWithJavaUtilLocale_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *self, JavaUtilLocale *locale) {
  NSObject_init(self);
  self->defaultNumReturnValues_ = -1;
  JreStrongAssign(&self->locale_, locale);
}

OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *new_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie, initWithJavaUtilLocale_, locale)
}

OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *create_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie, initWithJavaUtilLocale_, locale)
}

void OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initWithOrgLukhnosPortmobileFilePath_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *self, OrgLukhnosPortmobileFilePath *file) {
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initWithOrgLukhnosPortmobileFilePath_withBoolean_(self, file, false);
}

OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *new_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initWithOrgLukhnosPortmobileFilePath_(OrgLukhnosPortmobileFilePath *file) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie, initWithOrgLukhnosPortmobileFilePath_, file)
}

OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *create_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initWithOrgLukhnosPortmobileFilePath_(OrgLukhnosPortmobileFilePath *file) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie, initWithOrgLukhnosPortmobileFilePath_, file)
}

void OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initWithOrgLukhnosPortmobileFilePath_withBoolean_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *self, OrgLukhnosPortmobileFilePath *file, jboolean compression) {
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_init(self);
  JavaIoBufferedReader *in;
  if (compression) in = create_JavaIoBufferedReader_initWithJavaIoReader_(OrgApacheLuceneUtilIOUtils_getDecodingReaderWithJavaIoInputStream_withJavaNioCharsetCharset_(create_JavaUtilZipGZIPInputStream_initWithJavaIoInputStream_(OrgLukhnosPortmobileFileFiles_newInputStreamWithOrgLukhnosPortmobileFilePath_(file)), JreLoadStatic(OrgLukhnosPortmobileCharsetStandardCharsets, UTF_8)));
  else in = OrgLukhnosPortmobileFileFiles_newBufferedReaderWithOrgLukhnosPortmobileFilePath_withJavaNioCharsetCharset_(file, JreLoadStatic(OrgLukhnosPortmobileCharsetStandardCharsets, UTF_8));
  NSString *word;
  jint pos;
  JavaLangFloat *occur, *one = create_JavaLangFloat_initWithFloat_(1);
  while ((word = [((JavaIoBufferedReader *) nil_chk(in)) readLine]) != nil) {
    pos = [((NSString *) nil_chk(word)) indexOfString:@"\t"];
    occur = one;
    if (pos != -1) {
      occur = JavaLangFloat_valueOfWithFloat_(JavaLangFloat_parseFloatWithNSString_([((NSString *) nil_chk([word substring:pos + 1])) trim]));
      word = [word substring:0 endIndex:pos];
    }
    NSString *key = [((NSString *) nil_chk(word)) lowercaseStringWithJRELocale:self->locale_];
    if (self->rootNode_ == nil) {
      JreStrongAssignAndConsume(&self->rootNode_, new_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_initWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_withChar_withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(self, [((NSString *) nil_chk(key)) charAtWithInt:0], nil));
    }
    OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *node = nil;
    if (((jint) [((NSString *) nil_chk(key)) length]) > 0 && self->rootNode_ != nil) {
      OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *currentNode = self->rootNode_;
      jint charIndex = 0;
      while (true) {
        if (currentNode == nil) break;
        jint charComp = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_compareCharsAlphabeticallyWithChar_withChar_([key charAtWithInt:charIndex], currentNode->splitchar_);
        if (charComp == 0) {
          charIndex++;
          if (charIndex == ((jint) [key length])) {
            node = currentNode;
            break;
          }
          currentNode = IOSObjectArray_Get(nil_chk(currentNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID);
        }
        else if (charComp < 0) {
          currentNode = IOSObjectArray_Get(nil_chk(currentNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID);
        }
        else {
          currentNode = IOSObjectArray_Get(nil_chk(currentNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID);
        }
      }
      JavaLangFloat *occur2 = nil;
      if (node != nil) occur2 = ((JavaLangFloat *) cast_chk((node->data_), [JavaLangFloat class]));
      if (occur2 != nil) {
        JreBoxedPlusAssignFloat(&occur, [occur2 floatValue]);
      }
      currentNode = [self getOrCreateNodeWithJavaLangCharSequence:[((NSString *) nil_chk([word trim])) lowercaseStringWithJRELocale:self->locale_]];
      JreStrongAssign(&((OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *) nil_chk(currentNode))->data_, occur);
    }
  }
  [in close];
}

OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *new_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initWithOrgLukhnosPortmobileFilePath_withBoolean_(OrgLukhnosPortmobileFilePath *file, jboolean compression) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie, initWithOrgLukhnosPortmobileFilePath_withBoolean_, file, compression)
}

OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *create_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_initWithOrgLukhnosPortmobileFilePath_withBoolean_(OrgLukhnosPortmobileFilePath *file, jboolean compression) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie, initWithOrgLukhnosPortmobileFilePath_withBoolean_, file, compression)
}

void OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_deleteNodeWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *self, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *nodeToDelete) {
  if (nodeToDelete == nil) {
    return;
  }
  JreStrongAssign(&nodeToDelete->data_, nil);
  while (nodeToDelete != nil) {
    nodeToDelete = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_deleteNodeRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(self, nodeToDelete);
  }
}

OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_deleteNodeRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *self, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *currentNode) {
  if (currentNode == nil) {
    return nil;
  }
  if (IOSObjectArray_Get(nil_chk(currentNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID) != nil || currentNode->data_ != nil) {
    return nil;
  }
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *currentParent = IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_PARENT);
  jboolean lokidNull = IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID) == nil;
  jboolean hikidNull = IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID) == nil;
  jint childType;
  if (IOSObjectArray_Get(((OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *) nil_chk(currentParent))->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID) == currentNode) {
    childType = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID;
  }
  else if (IOSObjectArray_Get(currentParent->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID) == currentNode) {
    childType = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID;
  }
  else if (IOSObjectArray_Get(currentParent->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID) == currentNode) {
    childType = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID;
  }
  else {
    JreStrongAssign(&self->rootNode_, nil);
    return nil;
  }
  if (lokidNull && hikidNull) {
    IOSObjectArray_Set(currentParent->relatives_, childType, nil);
    return currentParent;
  }
  if (lokidNull) {
    IOSObjectArray_Set(currentParent->relatives_, childType, IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID));
    IOSObjectArray_Set(((OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *) nil_chk(IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID)))->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_PARENT, currentParent);
    return currentParent;
  }
  if (hikidNull) {
    IOSObjectArray_Set(currentParent->relatives_, childType, IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID));
    IOSObjectArray_Set(((OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *) nil_chk(IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID)))->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_PARENT, currentParent);
    return currentParent;
  }
  jint deltaHi = ((OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *) nil_chk(IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID)))->splitchar_ - currentNode->splitchar_;
  jint deltaLo = currentNode->splitchar_ - ((OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *) nil_chk(IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID)))->splitchar_;
  jint movingKid;
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *targetNode;
  if (deltaHi == deltaLo) {
    if (JavaLangMath_random() < 0.5) {
      deltaHi++;
    }
    else {
      deltaLo++;
    }
  }
  if (deltaHi > deltaLo) {
    movingKid = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID;
    targetNode = IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID);
  }
  else {
    movingKid = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID;
    targetNode = IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID);
  }
  while (IOSObjectArray_Get(((OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *) nil_chk(targetNode))->relatives_, movingKid) != nil) {
    targetNode = IOSObjectArray_Get(targetNode->relatives_, movingKid);
  }
  IOSObjectArray_Set(targetNode->relatives_, movingKid, IOSObjectArray_Get(currentNode->relatives_, movingKid));
  IOSObjectArray_Set(currentParent->relatives_, childType, targetNode);
  IOSObjectArray_Set(targetNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_PARENT, currentParent);
  if (!lokidNull) {
    IOSObjectArray_Set(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID, nil);
  }
  if (!hikidNull) {
    IOSObjectArray_Set(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID, nil);
  }
  return currentParent;
}

id<JavaUtilList> OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_matchAlmostRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withInt_withJavaLangCharSequence_withInt_withJavaUtilList_withBoolean_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *self, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *currentNode, jint charIndex, jint d, id<JavaLangCharSequence> matchAlmostKey, jint matchAlmostNumReturnValues, id<JavaUtilList> matchAlmostResult2, jboolean upTo) {
  if ((currentNode == nil) || (matchAlmostNumReturnValues != -1 && [((id<JavaUtilList>) nil_chk(matchAlmostResult2)) size] >= matchAlmostNumReturnValues) || (d < 0) || (charIndex >= [((id<JavaLangCharSequence>) nil_chk(matchAlmostKey)) length])) {
    return matchAlmostResult2;
  }
  jint charComp = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_compareCharsAlphabeticallyWithChar_withChar_([((id<JavaLangCharSequence>) nil_chk(matchAlmostKey)) charAtWithInt:charIndex], ((OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *) nil_chk(currentNode))->splitchar_);
  id<JavaUtilList> matchAlmostResult = matchAlmostResult2;
  if ((d > 0) || (charComp < 0)) {
    matchAlmostResult = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_matchAlmostRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withInt_withJavaLangCharSequence_withInt_withJavaUtilList_withBoolean_(self, IOSObjectArray_Get(nil_chk(currentNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID), charIndex, d, matchAlmostKey, matchAlmostNumReturnValues, matchAlmostResult, upTo);
  }
  jint nextD = (charComp == 0) ? d : d - 1;
  jboolean cond = (upTo) ? (nextD >= 0) : (nextD == 0);
  if (([matchAlmostKey length] == charIndex + 1) && cond && (currentNode->data_ != nil)) {
    [((id<JavaUtilList>) nil_chk(matchAlmostResult)) addWithId:[self getKeyWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:currentNode]];
  }
  matchAlmostResult = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_matchAlmostRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withInt_withJavaLangCharSequence_withInt_withJavaUtilList_withBoolean_(self, IOSObjectArray_Get(nil_chk(currentNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID), charIndex + 1, nextD, matchAlmostKey, matchAlmostNumReturnValues, matchAlmostResult, upTo);
  if ((d > 0) || (charComp > 0)) {
    matchAlmostResult = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_matchAlmostRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withInt_withJavaLangCharSequence_withInt_withJavaUtilList_withBoolean_(self, IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID), charIndex, d, matchAlmostKey, matchAlmostNumReturnValues, matchAlmostResult, upTo);
  }
  return matchAlmostResult;
}

jint OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_recursiveNodeCalculatorWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withBoolean_withInt_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *self, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *currentNode, jboolean checkData, jint numNodes2) {
  if (currentNode == nil) {
    return numNodes2;
  }
  jint numNodes = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_recursiveNodeCalculatorWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withBoolean_withInt_(self, IOSObjectArray_Get(nil_chk(currentNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID), checkData, numNodes2);
  numNodes = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_recursiveNodeCalculatorWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withBoolean_withInt_(self, IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID), checkData, numNodes);
  numNodes = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_recursiveNodeCalculatorWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withBoolean_withInt_(self, IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID), checkData, numNodes);
  if (checkData) {
    if (currentNode->data_ != nil) {
      numNodes++;
    }
  }
  else {
    numNodes++;
  }
  return numNodes;
}

id<JavaUtilList> OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_sortKeysRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withJavaUtilList_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *self, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *currentNode, jint sortKeysNumReturnValues, id<JavaUtilList> sortKeysResult2) {
  if (currentNode == nil) {
    return sortKeysResult2;
  }
  id<JavaUtilList> sortKeysResult = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_sortKeysRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withJavaUtilList_(self, IOSObjectArray_Get(nil_chk(currentNode->relatives_), OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID), sortKeysNumReturnValues, sortKeysResult2);
  if (sortKeysNumReturnValues != -1 && [((id<JavaUtilList>) nil_chk(sortKeysResult)) size] >= sortKeysNumReturnValues) {
    return sortKeysResult;
  }
  if (currentNode->data_ != nil) {
    [((id<JavaUtilList>) nil_chk(sortKeysResult)) addWithId:[self getKeyWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:currentNode]];
  }
  sortKeysResult = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_sortKeysRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withJavaUtilList_(self, IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID), sortKeysNumReturnValues, sortKeysResult);
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_sortKeysRecursionWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_withInt_withJavaUtilList_(self, IOSObjectArray_Get(currentNode->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID), sortKeysNumReturnValues, sortKeysResult);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie)

@implementation OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode

+ (jint)PARENT {
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_PARENT;
}

+ (jint)LOKID {
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID;
}

+ (jint)EQKID {
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID;
}

+ (jint)HIKID {
  return OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID;
}

- (instancetype)initWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *)outer$
                                                                           withChar:(jchar)splitchar
            withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *)parent {
  OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_initWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_withChar_withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(self, outer$, splitchar, parent);
  return self;
}

- (jlong)ramBytesUsed {
  jlong mem = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfWithId_(self) + OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfWithNSObjectArray_(relatives_);
  for (jint i = 1; i < 4; i++) {
    OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *node = IOSObjectArray_Get(nil_chk(relatives_), i);
    if (node != nil) {
      mem += [node ramBytesUsed];
    }
  }
  return mem;
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (void)dealloc {
  RELEASE_(data_);
  RELEASE_(relatives_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie:withChar:withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode:", "TSTNode", NULL, 0x4, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "getChildResources", NULL, "Ljava.util.Collection;", 0x1, NULL, "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PARENT", "PARENT", 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_PARENT },
    { "LOKID", "LOKID", 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_LOKID },
    { "EQKID", "EQKID", 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_EQKID },
    { "HIKID", "HIKID", 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_HIKID },
    { "data_", NULL, 0x4, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "relatives_", NULL, 0x14, "[Lorg.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie$TSTNode;", NULL, NULL, .constantValue.asLong = 0 },
    { "splitchar_", NULL, 0x4, "C", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode = { 2, "TSTNode", "org.apache.lucene.search.suggest.jaspell", "JaspellTernarySearchTrie", 0x14, 3, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode;
}

@end

void OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_initWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_withChar_withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *self, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *outer$, jchar splitchar, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *parent) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->relatives_, [IOSObjectArray newArrayWithLength:4 type:OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_class_()]);
  self->splitchar_ = splitchar;
  IOSObjectArray_Set(self->relatives_, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_PARENT, parent);
}

OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *new_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_initWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_withChar_withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *outer$, jchar splitchar, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *parent) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode, initWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_withChar_withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_, outer$, splitchar, parent)
}

OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *create_OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_initWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_withChar_withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie *outer$, jchar splitchar, OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode *parent) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode, initWithOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_withChar_withOrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode_, outer$, splitchar, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSuggestJaspellJaspellTernarySearchTrie_TSTNode)
