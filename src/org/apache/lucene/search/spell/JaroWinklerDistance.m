//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./suggest/src/java/org/apache/lucene/search/spell/JaroWinklerDistance.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/search/spell/JaroWinklerDistance.h"

@interface OrgApacheLuceneSearchSpellJaroWinklerDistance () {
 @public
  jfloat threshold_;
}

- (IOSIntArray *)matchesWithNSString:(NSString *)s1
                        withNSString:(NSString *)s2;

@end

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneSearchSpellJaroWinklerDistance_matchesWithNSString_withNSString_(OrgApacheLuceneSearchSpellJaroWinklerDistance *self, NSString *s1, NSString *s2);

@implementation OrgApacheLuceneSearchSpellJaroWinklerDistance

- (instancetype)init {
  OrgApacheLuceneSearchSpellJaroWinklerDistance_init(self);
  return self;
}

- (IOSIntArray *)matchesWithNSString:(NSString *)s1
                        withNSString:(NSString *)s2 {
  return OrgApacheLuceneSearchSpellJaroWinklerDistance_matchesWithNSString_withNSString_(self, s1, s2);
}

- (jfloat)getDistanceWithNSString:(NSString *)s1
                     withNSString:(NSString *)s2 {
  IOSIntArray *mtp = OrgApacheLuceneSearchSpellJaroWinklerDistance_matchesWithNSString_withNSString_(self, s1, s2);
  jfloat m = IOSIntArray_Get(nil_chk(mtp), 0);
  if (m == 0) {
    return 0.0f;
  }
  jfloat j = ((m / ((jint) [((NSString *) nil_chk(s1)) length]) + m / ((jint) [((NSString *) nil_chk(s2)) length]) + (m - IOSIntArray_Get(mtp, 1)) / m)) / 3;
  jfloat jw = j < [self getThreshold] ? j : j + JavaLangMath_minWithFloat_withFloat_(0.1f, 1.0f / IOSIntArray_Get(mtp, 3)) * IOSIntArray_Get(mtp, 2) * (1 - j);
  return jw;
}

- (void)setThresholdWithFloat:(jfloat)threshold {
  self->threshold_ = threshold;
}

- (jfloat)getThreshold {
  return threshold_;
}

- (NSUInteger)hash {
  return 113 * JavaLangFloat_floatToIntBitsWithFloat_(threshold_) * ((jint) [[self getClass] hash]);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return YES;
  if (nil == obj || [self getClass] != [obj getClass]) return NO;
  OrgApacheLuceneSearchSpellJaroWinklerDistance *o = (OrgApacheLuceneSearchSpellJaroWinklerDistance *) check_class_cast(obj, [OrgApacheLuceneSearchSpellJaroWinklerDistance class]);
  return JavaLangFloat_floatToIntBitsWithFloat_(((OrgApacheLuceneSearchSpellJaroWinklerDistance *) nil_chk(o))->threshold_) == JavaLangFloat_floatToIntBitsWithFloat_(self->threshold_);
}

- (NSString *)description {
  return JreStrcat("$FC", @"jarowinkler(", threshold_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JaroWinklerDistance", NULL, 0x1, NULL, NULL },
    { "matchesWithNSString:withNSString:", "matches", "[I", 0x2, NULL, NULL },
    { "getDistanceWithNSString:withNSString:", "getDistance", "F", 0x1, NULL, NULL },
    { "setThresholdWithFloat:", "setThreshold", "V", 0x1, NULL, NULL },
    { "getThreshold", NULL, "F", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "threshold_", NULL, 0x2, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpellJaroWinklerDistance = { 2, "JaroWinklerDistance", "org.apache.lucene.search.spell", NULL, 0x1, 8, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchSpellJaroWinklerDistance;
}

@end

void OrgApacheLuceneSearchSpellJaroWinklerDistance_init(OrgApacheLuceneSearchSpellJaroWinklerDistance *self) {
  NSObject_init(self);
  self->threshold_ = 0.7f;
}

OrgApacheLuceneSearchSpellJaroWinklerDistance *new_OrgApacheLuceneSearchSpellJaroWinklerDistance_init() {
  OrgApacheLuceneSearchSpellJaroWinklerDistance *self = [OrgApacheLuceneSearchSpellJaroWinklerDistance alloc];
  OrgApacheLuceneSearchSpellJaroWinklerDistance_init(self);
  return self;
}

IOSIntArray *OrgApacheLuceneSearchSpellJaroWinklerDistance_matchesWithNSString_withNSString_(OrgApacheLuceneSearchSpellJaroWinklerDistance *self, NSString *s1, NSString *s2) {
  NSString *max, *min;
  if (((jint) [((NSString *) nil_chk(s1)) length]) > ((jint) [((NSString *) nil_chk(s2)) length])) {
    max = s1;
    min = s2;
  }
  else {
    max = s2;
    min = s1;
  }
  jint range = JavaLangMath_maxWithInt_withInt_(((jint) [((NSString *) nil_chk(max)) length]) / 2 - 1, 0);
  IOSIntArray *matchIndexes = [IOSIntArray arrayWithLength:((jint) [((NSString *) nil_chk(min)) length])];
  JavaUtilArrays_fillWithIntArray_withInt_(matchIndexes, -1);
  IOSBooleanArray *matchFlags = [IOSBooleanArray arrayWithLength:((jint) [max length])];
  jint matches = 0;
  for (jint mi = 0; mi < ((jint) [min length]); mi++) {
    jchar c1 = [min charAtWithInt:mi];
    for (jint xi = JavaLangMath_maxWithInt_withInt_(mi - range, 0), xn = JavaLangMath_minWithInt_withInt_(mi + range + 1, ((jint) [max length])); xi < xn; xi++) {
      if (!IOSBooleanArray_Get(matchFlags, xi) && c1 == [max charAtWithInt:xi]) {
        *IOSIntArray_GetRef(matchIndexes, mi) = xi;
        *IOSBooleanArray_GetRef(matchFlags, xi) = YES;
        matches++;
        break;
      }
    }
  }
  IOSCharArray *ms1 = [IOSCharArray arrayWithLength:matches];
  IOSCharArray *ms2 = [IOSCharArray arrayWithLength:matches];
  for (jint i = 0, si = 0; i < ((jint) [min length]); i++) {
    if (IOSIntArray_Get(matchIndexes, i) != -1) {
      *IOSCharArray_GetRef(ms1, si) = [min charAtWithInt:i];
      si++;
    }
  }
  for (jint i = 0, si = 0; i < ((jint) [max length]); i++) {
    if (IOSBooleanArray_Get(matchFlags, i)) {
      *IOSCharArray_GetRef(ms2, si) = [max charAtWithInt:i];
      si++;
    }
  }
  jint transpositions = 0;
  for (jint mi = 0; mi < ms1->size_; mi++) {
    if (IOSCharArray_Get(ms1, mi) != IOSCharArray_Get(ms2, mi)) {
      transpositions++;
    }
  }
  jint prefix = 0;
  for (jint mi = 0; mi < ((jint) [min length]); mi++) {
    if ([s1 charAtWithInt:mi] == [s2 charAtWithInt:mi]) {
      prefix++;
    }
    else {
      break;
    }
  }
  return [IOSIntArray arrayWithInts:(jint[]){ matches, transpositions / 2, prefix, ((jint) [max length]) } count:4];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpellJaroWinklerDistance)
