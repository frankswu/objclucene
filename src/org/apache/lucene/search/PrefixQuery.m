//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/PrefixQuery.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/AutomatonQuery.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/ToStringUtils.h"
#include "org/apache/lucene/util/automaton/Automaton.h"

@implementation OrgApacheLuceneSearchPrefixQuery

- (instancetype)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)prefix {
  OrgApacheLuceneSearchPrefixQuery_initWithOrgApacheLuceneIndexTerm_(self, prefix);
  return self;
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)toAutomatonWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)prefix {
  return OrgApacheLuceneSearchPrefixQuery_toAutomatonWithOrgApacheLuceneUtilBytesRef_(prefix);
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *buffer = [new_JavaLangStringBuilder_init() autorelease];
  if (![((NSString *) nil_chk([self getField])) isEqual:field]) {
    [buffer appendWithNSString:[self getField]];
    [buffer appendWithNSString:@":"];
  }
  [buffer appendWithNSString:[((OrgApacheLuceneIndexTerm *) nil_chk(term_)) text]];
  [buffer appendWithChar:'*'];
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = ((jint) [super hash]);
  result = prime * result + ((jint) [((OrgApacheLuceneIndexTerm *) nil_chk(term_)) hash]);
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if (![super isEqual:obj]) {
    return NO;
  }
  OrgApacheLuceneSearchPrefixQuery *other = (OrgApacheLuceneSearchPrefixQuery *) check_class_cast(obj, [OrgApacheLuceneSearchPrefixQuery class]);
  if (![((OrgApacheLuceneIndexTerm *) nil_chk(term_)) isEqual:((OrgApacheLuceneSearchPrefixQuery *) nil_chk(other))->term_]) {
    return NO;
  }
  return YES;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexTerm:", "PrefixQuery", NULL, 0x1, NULL, NULL },
    { "toAutomatonWithOrgApacheLuceneUtilBytesRef:", "toAutomaton", "Lorg.apache.lucene.util.automaton.Automaton;", 0x9, NULL, NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchPrefixQuery = { 2, "PrefixQuery", "org.apache.lucene.search", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchPrefixQuery;
}

@end

void OrgApacheLuceneSearchPrefixQuery_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneSearchPrefixQuery *self, OrgApacheLuceneIndexTerm *prefix) {
  OrgApacheLuceneSearchAutomatonQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneUtilAutomatonAutomaton_withInt_withBoolean_(self, prefix, OrgApacheLuceneSearchPrefixQuery_toAutomatonWithOrgApacheLuceneUtilBytesRef_([((OrgApacheLuceneIndexTerm *) nil_chk(prefix)) bytes]), JavaLangInteger_MAX_VALUE, YES);
  if (prefix == nil) {
    @throw [new_JavaLangNullPointerException_initWithNSString_(@"prefix cannot be null") autorelease];
  }
}

OrgApacheLuceneSearchPrefixQuery *new_OrgApacheLuceneSearchPrefixQuery_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexTerm *prefix) {
  OrgApacheLuceneSearchPrefixQuery *self = [OrgApacheLuceneSearchPrefixQuery alloc];
  OrgApacheLuceneSearchPrefixQuery_initWithOrgApacheLuceneIndexTerm_(self, prefix);
  return self;
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneSearchPrefixQuery_toAutomatonWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *prefix) {
  OrgApacheLuceneSearchPrefixQuery_initialize();
  OrgApacheLuceneUtilAutomatonAutomaton *automaton = [new_OrgApacheLuceneUtilAutomatonAutomaton_init() autorelease];
  jint lastState = [automaton createState];
  for (jint i = 0; i < ((OrgApacheLuceneUtilBytesRef *) nil_chk(prefix))->length_; i++) {
    jint state = [automaton createState];
    [automaton addTransitionWithInt:lastState withInt:state withInt:IOSByteArray_Get(nil_chk(prefix->bytes_), prefix->offset_ + i) & (jint) 0xff];
    lastState = state;
  }
  [automaton setAcceptWithInt:lastState withBoolean:YES];
  [automaton addTransitionWithInt:lastState withInt:lastState withInt:0 withInt:255];
  [automaton finishState];
  JreAssert(([automaton isDeterministic]), (@"org/apache/lucene/search/PrefixQuery.java:55 condition failed: assert automaton.isDeterministic();"));
  return automaton;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchPrefixQuery)
