//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/ControlledRealTimeReopenThread.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/locks/Condition.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "org/apache/lucene/index/TrackingIndexWriter.h"
#include "org/apache/lucene/search/ControlledRealTimeReopenThread.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"

@interface OrgApacheLuceneSearchControlledRealTimeReopenThread () {
 @public
  OrgApacheLuceneSearchReferenceManager *manager_;
  jlong targetMaxStaleNS_;
  jlong targetMinStaleNS_;
  OrgApacheLuceneIndexTrackingIndexWriter *writer_;
  volatile_jboolean finish_;
  volatile_jlong waitingGen_;
  volatile_jlong searchingGen_;
  jlong refreshStartGen_;
  JavaUtilConcurrentLocksReentrantLock *reopenLock_;
  id<JavaUtilConcurrentLocksCondition> reopenCond_;
}

- (void)refreshDone;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchControlledRealTimeReopenThread, manager_, OrgApacheLuceneSearchReferenceManager *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchControlledRealTimeReopenThread, writer_, OrgApacheLuceneIndexTrackingIndexWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchControlledRealTimeReopenThread, reopenLock_, JavaUtilConcurrentLocksReentrantLock *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchControlledRealTimeReopenThread, reopenCond_, id<JavaUtilConcurrentLocksCondition>)

__attribute__((unused)) static void OrgApacheLuceneSearchControlledRealTimeReopenThread_refreshDone(OrgApacheLuceneSearchControlledRealTimeReopenThread *self);

@interface OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh : NSObject < OrgApacheLuceneSearchReferenceManager_RefreshListener > {
 @public
  OrgApacheLuceneSearchControlledRealTimeReopenThread *this$0_;
}

- (void)beforeRefresh;

- (void)afterRefreshWithBoolean:(jboolean)didRefresh;

- (instancetype)initWithOrgApacheLuceneSearchControlledRealTimeReopenThread:(OrgApacheLuceneSearchControlledRealTimeReopenThread *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh, this$0_, OrgApacheLuceneSearchControlledRealTimeReopenThread *)

__attribute__((unused)) static void OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh_initWithOrgApacheLuceneSearchControlledRealTimeReopenThread_(OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh *self, OrgApacheLuceneSearchControlledRealTimeReopenThread *outer$);

__attribute__((unused)) static OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh *new_OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh_initWithOrgApacheLuceneSearchControlledRealTimeReopenThread_(OrgApacheLuceneSearchControlledRealTimeReopenThread *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh)

@implementation OrgApacheLuceneSearchControlledRealTimeReopenThread

- (instancetype)initWithOrgApacheLuceneIndexTrackingIndexWriter:(OrgApacheLuceneIndexTrackingIndexWriter *)writer
                      withOrgApacheLuceneSearchReferenceManager:(OrgApacheLuceneSearchReferenceManager *)manager
                                                     withDouble:(jdouble)targetMaxStaleSec
                                                     withDouble:(jdouble)targetMinStaleSec {
  OrgApacheLuceneSearchControlledRealTimeReopenThread_initWithOrgApacheLuceneIndexTrackingIndexWriter_withOrgApacheLuceneSearchReferenceManager_withDouble_withDouble_(self, writer, manager, targetMaxStaleSec, targetMinStaleSec);
  return self;
}

- (void)refreshDone {
  OrgApacheLuceneSearchControlledRealTimeReopenThread_refreshDone(self);
}

- (void)close {
  @synchronized(self) {
    JreAssignVolatileBoolean(&finish_, YES);
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(reopenLock_)) lock];
    @try {
      [((id<JavaUtilConcurrentLocksCondition>) nil_chk(reopenCond_)) signal];
    }
    @finally {
      [reopenLock_ unlock];
    }
    @try {
      [self join];
    }
    @catch (JavaLangInterruptedException *ie) {
      @throw [new_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie) autorelease];
    }
    JreAssignVolatileLong(&searchingGen_, JavaLangLong_MAX_VALUE);
    [self notifyAll];
  }
}

- (void)waitForGenerationWithLong:(jlong)targetGen {
  [self waitForGenerationWithLong:targetGen withInt:-1];
}

- (jboolean)waitForGenerationWithLong:(jlong)targetGen
                              withInt:(jint)maxMS {
  @synchronized(self) {
    jlong curGen = [((OrgApacheLuceneIndexTrackingIndexWriter *) nil_chk(writer_)) getGeneration];
    if (targetGen > curGen) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J$JC", @"targetGen=", targetGen, @" was never returned by the ReferenceManager instance (current gen=", curGen, ')')) autorelease];
    }
    if (targetGen > JreLoadVolatileLong(&searchingGen_)) {
      [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(reopenLock_)) lock];
      JreAssignVolatileLong(&waitingGen_, JavaLangMath_maxWithLong_withLong_(JreLoadVolatileLong(&waitingGen_), targetGen));
      @try {
        [((id<JavaUtilConcurrentLocksCondition>) nil_chk(reopenCond_)) signal];
      }
      @finally {
        [reopenLock_ unlock];
      }
      jlong startMS = JavaLangSystem_nanoTime() / 1000000;
      while (targetGen > JreLoadVolatileLong(&searchingGen_)) {
        if (maxMS < 0) {
          [self wait];
        }
        else {
          jlong msLeft = (startMS + maxMS) - (JavaLangSystem_nanoTime()) / 1000000;
          if (msLeft <= 0) {
            return NO;
          }
          else {
            [self waitWithLong:msLeft];
          }
        }
      }
    }
    return YES;
  }
}

- (void)run {
  jlong lastReopenStartNS = JavaLangSystem_nanoTime();
  while (!JreLoadVolatileBoolean(&finish_)) {
    while (!JreLoadVolatileBoolean(&finish_)) {
      [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(reopenLock_)) lock];
      @try {
        jboolean hasWaiting = JreLoadVolatileLong(&waitingGen_) > JreLoadVolatileLong(&searchingGen_);
        jlong nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS_ : targetMaxStaleNS_);
        jlong sleepNS = nextReopenStartNS - JavaLangSystem_nanoTime();
        if (sleepNS > 0) {
          [((id<JavaUtilConcurrentLocksCondition>) nil_chk(reopenCond_)) awaitNanosWithLong:sleepNS];
        }
        else {
          break;
        }
      }
      @catch (JavaLangInterruptedException *ie) {
        [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
        return;
      }
      @finally {
        [reopenLock_ unlock];
      }
    }
    if (JreLoadVolatileBoolean(&finish_)) {
      break;
    }
    lastReopenStartNS = JavaLangSystem_nanoTime();
    refreshStartGen_ = [((OrgApacheLuceneIndexTrackingIndexWriter *) nil_chk(writer_)) getAndIncrementGeneration];
    @try {
      [((OrgApacheLuceneSearchReferenceManager *) nil_chk(manager_)) maybeRefreshBlocking];
    }
    @catch (JavaIoIOException *ioe) {
      @throw [new_JavaLangRuntimeException_initWithJavaLangThrowable_(ioe) autorelease];
    }
  }
}

- (void)dealloc {
  RELEASE_(manager_);
  RELEASE_(writer_);
  RELEASE_(reopenLock_);
  RELEASE_(reopenCond_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexTrackingIndexWriter:withOrgApacheLuceneSearchReferenceManager:withDouble:withDouble:", "ControlledRealTimeReopenThread", NULL, 0x1, NULL, NULL },
    { "refreshDone", NULL, "V", 0x22, NULL, NULL },
    { "close", NULL, "V", 0x21, NULL, NULL },
    { "waitForGenerationWithLong:", "waitForGeneration", "V", 0x1, "Ljava.lang.InterruptedException;", NULL },
    { "waitForGenerationWithLong:withInt:", "waitForGeneration", "Z", 0x21, "Ljava.lang.InterruptedException;", NULL },
    { "run", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "manager_", NULL, 0x12, "Lorg.apache.lucene.search.ReferenceManager;", NULL, "Lorg/apache/lucene/search/ReferenceManager<TT;>;", .constantValue.asLong = 0 },
    { "targetMaxStaleNS_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "targetMinStaleNS_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "writer_", NULL, 0x12, "Lorg.apache.lucene.index.TrackingIndexWriter;", NULL, NULL, .constantValue.asLong = 0 },
    { "finish_", NULL, 0x42, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "waitingGen_", NULL, 0x42, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "searchingGen_", NULL, 0x42, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "refreshStartGen_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "reopenLock_", NULL, 0x12, "Ljava.util.concurrent.locks.ReentrantLock;", NULL, NULL, .constantValue.asLong = 0 },
    { "reopenCond_", NULL, 0x12, "Ljava.util.concurrent.locks.Condition;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.search.ControlledRealTimeReopenThread$HandleRefresh;"};
  static const J2ObjcClassInfo _OrgApacheLuceneSearchControlledRealTimeReopenThread = { 2, "ControlledRealTimeReopenThread", "org.apache.lucene.search", NULL, 0x1, 6, methods, 10, fields, 0, NULL, 1, inner_classes, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Thread;Ljava/io/Closeable;" };
  return &_OrgApacheLuceneSearchControlledRealTimeReopenThread;
}

@end

void OrgApacheLuceneSearchControlledRealTimeReopenThread_initWithOrgApacheLuceneIndexTrackingIndexWriter_withOrgApacheLuceneSearchReferenceManager_withDouble_withDouble_(OrgApacheLuceneSearchControlledRealTimeReopenThread *self, OrgApacheLuceneIndexTrackingIndexWriter *writer, OrgApacheLuceneSearchReferenceManager *manager, jdouble targetMaxStaleSec, jdouble targetMinStaleSec) {
  JavaLangThread_init(self);
  JreStrongAssignAndConsume(&self->reopenLock_, new_JavaUtilConcurrentLocksReentrantLock_init());
  JreStrongAssign(&self->reopenCond_, [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(self->reopenLock_)) newCondition]);
  if (targetMaxStaleSec < targetMinStaleSec) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$D$DC", @"targetMaxScaleSec (= ", targetMaxStaleSec, @") < targetMinStaleSec (=", targetMinStaleSec, ')')) autorelease];
  }
  JreStrongAssign(&self->writer_, writer);
  JreStrongAssign(&self->manager_, manager);
  self->targetMaxStaleNS_ = JreFpToLong((1000000000 * targetMaxStaleSec));
  self->targetMinStaleNS_ = JreFpToLong((1000000000 * targetMinStaleSec));
  [((OrgApacheLuceneSearchReferenceManager *) nil_chk(manager)) addListenerWithOrgApacheLuceneSearchReferenceManager_RefreshListener:[new_OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh_initWithOrgApacheLuceneSearchControlledRealTimeReopenThread_(self) autorelease]];
}

OrgApacheLuceneSearchControlledRealTimeReopenThread *new_OrgApacheLuceneSearchControlledRealTimeReopenThread_initWithOrgApacheLuceneIndexTrackingIndexWriter_withOrgApacheLuceneSearchReferenceManager_withDouble_withDouble_(OrgApacheLuceneIndexTrackingIndexWriter *writer, OrgApacheLuceneSearchReferenceManager *manager, jdouble targetMaxStaleSec, jdouble targetMinStaleSec) {
  OrgApacheLuceneSearchControlledRealTimeReopenThread *self = [OrgApacheLuceneSearchControlledRealTimeReopenThread alloc];
  OrgApacheLuceneSearchControlledRealTimeReopenThread_initWithOrgApacheLuceneIndexTrackingIndexWriter_withOrgApacheLuceneSearchReferenceManager_withDouble_withDouble_(self, writer, manager, targetMaxStaleSec, targetMinStaleSec);
  return self;
}

void OrgApacheLuceneSearchControlledRealTimeReopenThread_refreshDone(OrgApacheLuceneSearchControlledRealTimeReopenThread *self) {
  @synchronized(self) {
    JreAssignVolatileLong(&self->searchingGen_, self->refreshStartGen_);
    [self notifyAll];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchControlledRealTimeReopenThread)

@implementation OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh

- (void)beforeRefresh {
}

- (void)afterRefreshWithBoolean:(jboolean)didRefresh {
  OrgApacheLuceneSearchControlledRealTimeReopenThread_refreshDone(this$0_);
}

- (instancetype)initWithOrgApacheLuceneSearchControlledRealTimeReopenThread:(OrgApacheLuceneSearchControlledRealTimeReopenThread *)outer$ {
  OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh_initWithOrgApacheLuceneSearchControlledRealTimeReopenThread_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "beforeRefresh", NULL, "V", 0x1, NULL, NULL },
    { "afterRefreshWithBoolean:", "afterRefresh", "V", 0x1, NULL, NULL },
    { "initWithOrgApacheLuceneSearchControlledRealTimeReopenThread:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.search.ControlledRealTimeReopenThread;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh = { 2, "HandleRefresh", "org.apache.lucene.search", "ControlledRealTimeReopenThread", 0x2, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh;
}

@end

void OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh_initWithOrgApacheLuceneSearchControlledRealTimeReopenThread_(OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh *self, OrgApacheLuceneSearchControlledRealTimeReopenThread *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh *new_OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh_initWithOrgApacheLuceneSearchControlledRealTimeReopenThread_(OrgApacheLuceneSearchControlledRealTimeReopenThread *outer$) {
  OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh *self = [OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh alloc];
  OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh_initWithOrgApacheLuceneSearchControlledRealTimeReopenThread_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchControlledRealTimeReopenThread_HandleRefresh)
