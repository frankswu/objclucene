//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Comparable.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/SimpleCollector.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/TopDocsCollector.h"
#include "org/apache/lucene/search/TopFieldCollector.h"
#include "org/apache/lucene/search/TopScoreDocCollector.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/grouping/BlockGroupingCollector.h"
#include "org/apache/lucene/search/grouping/FakeScorer.h"
#include "org/apache/lucene/search/grouping/GroupDocs.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/PriorityQueue.h"

@class OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue;

@interface OrgApacheLuceneSearchGroupingBlockGroupingCollector () {
 @public
  IOSIntArray *pendingSubDocs_;
  IOSFloatArray *pendingSubScores_;
  jint subDocUpto_;
  OrgApacheLuceneSearchSort *groupSort_;
  jint topNGroups_;
  OrgApacheLuceneSearchWeight *lastDocPerGroup_;
  jboolean needsScores_;
  IOSObjectArray *comparators_;
  IOSObjectArray *leafComparators_;
  IOSIntArray *reversed_;
  jint compIDXEnd_;
  jint bottomSlot_;
  jboolean queueFull_;
  OrgApacheLuceneIndexLeafReaderContext *currentReaderContext_;
  jint topGroupDoc_;
  jint totalHitCount_;
  jint totalGroupCount_;
  jint docBase_;
  jint groupEndDocID_;
  OrgApacheLuceneSearchDocIdSetIterator *lastDocPerGroupBits_;
  OrgApacheLuceneSearchScorer *scorer_;
  OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue *groupQueue_;
  jboolean groupCompetes_;
}

- (void)processGroup;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector, pendingSubDocs_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector, pendingSubScores_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector, groupSort_, OrgApacheLuceneSearchSort *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector, lastDocPerGroup_, OrgApacheLuceneSearchWeight *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector, comparators_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector, leafComparators_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector, reversed_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector, currentReaderContext_, OrgApacheLuceneIndexLeafReaderContext *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector, lastDocPerGroupBits_, OrgApacheLuceneSearchDocIdSetIterator *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector, scorer_, OrgApacheLuceneSearchScorer *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector, groupQueue_, OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue *)

__attribute__((unused)) static void OrgApacheLuceneSearchGroupingBlockGroupingCollector_processGroup(OrgApacheLuceneSearchGroupingBlockGroupingCollector *self);

@interface OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup : NSObject {
 @public
  OrgApacheLuceneIndexLeafReaderContext *readerContext_;
  jint topGroupDoc_;
  IOSIntArray *docs_;
  IOSFloatArray *scores_;
  jint count_;
  jint comparatorSlot_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup, readerContext_, OrgApacheLuceneIndexLeafReaderContext *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup, docs_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup, scores_, IOSFloatArray *)

__attribute__((unused)) static void OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup_init(OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *self);

__attribute__((unused)) static OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *new_OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup)

@interface OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue : OrgApacheLuceneUtilPriorityQueue {
 @public
  OrgApacheLuceneSearchGroupingBlockGroupingCollector *this$0_;
}

- (instancetype)initWithOrgApacheLuceneSearchGroupingBlockGroupingCollector:(OrgApacheLuceneSearchGroupingBlockGroupingCollector *)outer$
                                                                    withInt:(jint)size;

- (jboolean)lessThanWithId:(OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *)group1
                    withId:(OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *)group2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue, this$0_, OrgApacheLuceneSearchGroupingBlockGroupingCollector *)

__attribute__((unused)) static void OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue_initWithOrgApacheLuceneSearchGroupingBlockGroupingCollector_withInt_(OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue *self, OrgApacheLuceneSearchGroupingBlockGroupingCollector *outer$, jint size);

__attribute__((unused)) static OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue *new_OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue_initWithOrgApacheLuceneSearchGroupingBlockGroupingCollector_withInt_(OrgApacheLuceneSearchGroupingBlockGroupingCollector *outer$, jint size) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue)

@implementation OrgApacheLuceneSearchGroupingBlockGroupingCollector

- (void)processGroup {
  OrgApacheLuceneSearchGroupingBlockGroupingCollector_processGroup(self);
}

- (instancetype)initWithOrgApacheLuceneSearchSort:(OrgApacheLuceneSearchSort *)groupSort
                                          withInt:(jint)topNGroups
                                      withBoolean:(jboolean)needsScores
                  withOrgApacheLuceneSearchWeight:(OrgApacheLuceneSearchWeight *)lastDocPerGroup {
  OrgApacheLuceneSearchGroupingBlockGroupingCollector_initWithOrgApacheLuceneSearchSort_withInt_withBoolean_withOrgApacheLuceneSearchWeight_(self, groupSort, topNGroups, needsScores, lastDocPerGroup);
  return self;
}

- (OrgApacheLuceneSearchGroupingTopGroups *)getTopGroupsWithOrgApacheLuceneSearchSort:(OrgApacheLuceneSearchSort *)withinGroupSort
                                                                              withInt:(jint)groupOffset
                                                                              withInt:(jint)withinGroupOffset
                                                                              withInt:(jint)maxDocsPerGroup
                                                                          withBoolean:(jboolean)fillSortFields {
  if (subDocUpto_ != 0) {
    OrgApacheLuceneSearchGroupingBlockGroupingCollector_processGroup(self);
  }
  if (groupOffset >= [((OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue *) nil_chk(groupQueue_)) size]) {
    return nil;
  }
  jint totalGroupedHitCount = 0;
  OrgApacheLuceneSearchGroupingFakeScorer *fakeScorer = [new_OrgApacheLuceneSearchGroupingFakeScorer_init() autorelease];
  jfloat maxScore = JavaLangFloat_MIN_VALUE;
  IOSObjectArray *groups = [IOSObjectArray arrayWithLength:[groupQueue_ size] - groupOffset type:OrgApacheLuceneSearchGroupingGroupDocs_class_()];
  for (jint downTo = [groupQueue_ size] - groupOffset - 1; downTo >= 0; downTo--) {
    OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *og = [groupQueue_ pop];
    OrgApacheLuceneSearchTopDocsCollector *collector;
    if (withinGroupSort == nil) {
      if (!needsScores_) {
        @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot sort by relevance within group: needsScores=false") autorelease];
      }
      collector = OrgApacheLuceneSearchTopScoreDocCollector_createWithInt_(maxDocsPerGroup);
    }
    else {
      collector = OrgApacheLuceneSearchTopFieldCollector_createWithOrgApacheLuceneSearchSort_withInt_withBoolean_withBoolean_withBoolean_(withinGroupSort, maxDocsPerGroup, fillSortFields, needsScores_, needsScores_);
    }
    id<OrgApacheLuceneSearchLeafCollector> leafCollector = [((OrgApacheLuceneSearchTopDocsCollector *) nil_chk(collector)) getLeafCollectorWithOrgApacheLuceneIndexLeafReaderContext:((OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *) nil_chk(og))->readerContext_];
    [((id<OrgApacheLuceneSearchLeafCollector>) nil_chk(leafCollector)) setScorerWithOrgApacheLuceneSearchScorer:fakeScorer];
    for (jint docIDX = 0; docIDX < og->count_; docIDX++) {
      jint doc = IOSIntArray_Get(nil_chk(og->docs_), docIDX);
      fakeScorer->doc_ = doc;
      if (needsScores_) {
        fakeScorer->score_ = IOSFloatArray_Get(nil_chk(og->scores_), docIDX);
      }
      [leafCollector collectWithInt:doc];
    }
    totalGroupedHitCount += og->count_;
    IOSObjectArray *groupSortValues;
    if (fillSortFields) {
      groupSortValues = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(comparators_))->size_ type:JavaLangComparable_class_()];
      for (jint sortFieldIDX = 0; sortFieldIDX < comparators_->size_; sortFieldIDX++) {
        IOSObjectArray_Set(groupSortValues, sortFieldIDX, [((OrgApacheLuceneSearchFieldComparator *) nil_chk(IOSObjectArray_Get(comparators_, sortFieldIDX))) valueWithInt:og->comparatorSlot_]);
      }
    }
    else {
      groupSortValues = nil;
    }
    OrgApacheLuceneSearchTopDocs *topDocs = [collector topDocsWithInt:withinGroupOffset withInt:maxDocsPerGroup];
    IOSObjectArray_SetAndConsume(groups, downTo, new_OrgApacheLuceneSearchGroupingGroupDocs_initWithFloat_withFloat_withInt_withOrgApacheLuceneSearchScoreDocArray_withId_withNSObjectArray_(JavaLangFloat_NaN, [((OrgApacheLuceneSearchTopDocs *) nil_chk(topDocs)) getMaxScore], og->count_, topDocs->scoreDocs_, nil, groupSortValues));
    maxScore = JavaLangMath_maxWithFloat_withFloat_(maxScore, [topDocs getMaxScore]);
  }
  return [new_OrgApacheLuceneSearchGroupingTopGroups_initWithOrgApacheLuceneSearchGroupingTopGroups_withJavaLangInteger_([new_OrgApacheLuceneSearchGroupingTopGroups_initWithOrgApacheLuceneSearchSortFieldArray_withOrgApacheLuceneSearchSortFieldArray_withInt_withInt_withOrgApacheLuceneSearchGroupingGroupDocsArray_withFloat_([((OrgApacheLuceneSearchSort *) nil_chk(groupSort_)) getSort], withinGroupSort == nil ? nil : [withinGroupSort getSort], totalHitCount_, totalGroupedHitCount, groups, maxScore) autorelease], JavaLangInteger_valueOfWithInt_(totalGroupCount_)) autorelease];
}

- (void)setScorerWithOrgApacheLuceneSearchScorer:(OrgApacheLuceneSearchScorer *)scorer {
  JreStrongAssign(&self->scorer_, scorer);
  {
    IOSObjectArray *a__ = leafComparators_;
    id<OrgApacheLuceneSearchLeafFieldComparator> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<OrgApacheLuceneSearchLeafFieldComparator> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<OrgApacheLuceneSearchLeafFieldComparator> comparator = *b__++;
      [((id<OrgApacheLuceneSearchLeafFieldComparator>) nil_chk(comparator)) setScorerWithOrgApacheLuceneSearchScorer:scorer];
    }
  }
}

- (void)collectWithInt:(jint)doc {
  if (doc > groupEndDocID_) {
    if (subDocUpto_ != 0) {
      OrgApacheLuceneSearchGroupingBlockGroupingCollector_processGroup(self);
    }
    groupEndDocID_ = [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(lastDocPerGroupBits_)) advanceWithInt:doc];
    subDocUpto_ = 0;
    groupCompetes_ = !queueFull_;
  }
  totalHitCount_++;
  if (subDocUpto_ == ((IOSIntArray *) nil_chk(pendingSubDocs_))->size_) {
    JreStrongAssign(&pendingSubDocs_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_(pendingSubDocs_));
  }
  *IOSIntArray_GetRef(nil_chk(pendingSubDocs_), subDocUpto_) = doc;
  if (needsScores_) {
    if (subDocUpto_ == ((IOSFloatArray *) nil_chk(pendingSubScores_))->size_) {
      JreStrongAssign(&pendingSubScores_, OrgApacheLuceneUtilArrayUtil_growWithFloatArray_(pendingSubScores_));
    }
    *IOSFloatArray_GetRef(nil_chk(pendingSubScores_), subDocUpto_) = [((OrgApacheLuceneSearchScorer *) nil_chk(scorer_)) score];
  }
  subDocUpto_++;
  if (groupCompetes_) {
    if (subDocUpto_ == 1) {
      JreAssert((!queueFull_), (@"org/apache/lucene/search/grouping/BlockGroupingCollector.java:405 condition failed: assert !queueFull;"));
      {
        IOSObjectArray *a__ = leafComparators_;
        id<OrgApacheLuceneSearchLeafFieldComparator> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id<OrgApacheLuceneSearchLeafFieldComparator> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<OrgApacheLuceneSearchLeafFieldComparator> fc = *b__++;
          [((id<OrgApacheLuceneSearchLeafFieldComparator>) nil_chk(fc)) copy__WithInt:bottomSlot_ withInt:doc];
          [fc setBottomWithInt:bottomSlot_];
        }
      }
      topGroupDoc_ = doc;
    }
    else {
      for (jint compIDX = 0; ; compIDX++) {
        jint c = IOSIntArray_Get(nil_chk(reversed_), compIDX) * [((id<OrgApacheLuceneSearchLeafFieldComparator>) nil_chk(IOSObjectArray_Get(nil_chk(leafComparators_), compIDX))) compareBottomWithInt:doc];
        if (c < 0) {
          return;
        }
        else if (c > 0) {
          break;
        }
        else if (compIDX == compIDXEnd_) {
          return;
        }
      }
      {
        IOSObjectArray *a__ = leafComparators_;
        id<OrgApacheLuceneSearchLeafFieldComparator> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id<OrgApacheLuceneSearchLeafFieldComparator> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<OrgApacheLuceneSearchLeafFieldComparator> fc = *b__++;
          [((id<OrgApacheLuceneSearchLeafFieldComparator>) nil_chk(fc)) copy__WithInt:bottomSlot_ withInt:doc];
          [fc setBottomWithInt:bottomSlot_];
        }
      }
      topGroupDoc_ = doc;
    }
  }
  else {
    for (jint compIDX = 0; ; compIDX++) {
      jint c = IOSIntArray_Get(nil_chk(reversed_), compIDX) * [((id<OrgApacheLuceneSearchLeafFieldComparator>) nil_chk(IOSObjectArray_Get(nil_chk(leafComparators_), compIDX))) compareBottomWithInt:doc];
      if (c < 0) {
        return;
      }
      else if (c > 0) {
        break;
      }
      else if (compIDX == compIDXEnd_) {
        return;
      }
    }
    groupCompetes_ = YES;
    {
      IOSObjectArray *a__ = leafComparators_;
      id<OrgApacheLuceneSearchLeafFieldComparator> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<OrgApacheLuceneSearchLeafFieldComparator> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<OrgApacheLuceneSearchLeafFieldComparator> fc = *b__++;
        [((id<OrgApacheLuceneSearchLeafFieldComparator>) nil_chk(fc)) copy__WithInt:bottomSlot_ withInt:doc];
        [fc setBottomWithInt:bottomSlot_];
      }
    }
    topGroupDoc_ = doc;
  }
}

- (void)doSetNextReaderWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)readerContext {
  if (subDocUpto_ != 0) {
    OrgApacheLuceneSearchGroupingBlockGroupingCollector_processGroup(self);
  }
  subDocUpto_ = 0;
  docBase_ = ((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(readerContext))->docBase_;
  JreStrongAssign(&lastDocPerGroupBits_, [((OrgApacheLuceneSearchWeight *) nil_chk(lastDocPerGroup_)) scorerWithOrgApacheLuceneIndexLeafReaderContext:readerContext]);
  groupEndDocID_ = -1;
  JreStrongAssign(&currentReaderContext_, readerContext);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(comparators_))->size_; i++) {
    IOSObjectArray_Set(nil_chk(leafComparators_), i, [((OrgApacheLuceneSearchFieldComparator *) nil_chk(IOSObjectArray_Get(comparators_, i))) getLeafComparatorWithOrgApacheLuceneIndexLeafReaderContext:readerContext]);
  }
}

- (jboolean)needsScores {
  return needsScores_;
}

- (void)dealloc {
  RELEASE_(pendingSubDocs_);
  RELEASE_(pendingSubScores_);
  RELEASE_(groupSort_);
  RELEASE_(lastDocPerGroup_);
  RELEASE_(comparators_);
  RELEASE_(leafComparators_);
  RELEASE_(reversed_);
  RELEASE_(currentReaderContext_);
  RELEASE_(lastDocPerGroupBits_);
  RELEASE_(scorer_);
  RELEASE_(groupQueue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processGroup", NULL, "V", 0x2, NULL, NULL },
    { "initWithOrgApacheLuceneSearchSort:withInt:withBoolean:withOrgApacheLuceneSearchWeight:", "BlockGroupingCollector", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "getTopGroupsWithOrgApacheLuceneSearchSort:withInt:withInt:withInt:withBoolean:", "getTopGroups", "Lorg.apache.lucene.search.grouping.TopGroups;", 0x1, "Ljava.io.IOException;", NULL },
    { "setScorerWithOrgApacheLuceneSearchScorer:", "setScorer", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "collectWithInt:", "collect", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "doSetNextReaderWithOrgApacheLuceneIndexLeafReaderContext:", "doSetNextReader", "V", 0x4, "Ljava.io.IOException;", NULL },
    { "needsScores", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pendingSubDocs_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "pendingSubScores_", NULL, 0x2, "[F", NULL, NULL, .constantValue.asLong = 0 },
    { "subDocUpto_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "groupSort_", NULL, 0x12, "Lorg.apache.lucene.search.Sort;", NULL, NULL, .constantValue.asLong = 0 },
    { "topNGroups_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastDocPerGroup_", NULL, 0x12, "Lorg.apache.lucene.search.Weight;", NULL, NULL, .constantValue.asLong = 0 },
    { "needsScores_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "comparators_", NULL, 0x12, "[Lorg.apache.lucene.search.FieldComparator;", NULL, "[Lorg/apache/lucene/search/FieldComparator<*>;", .constantValue.asLong = 0 },
    { "leafComparators_", NULL, 0x12, "[Lorg.apache.lucene.search.LeafFieldComparator;", NULL, NULL, .constantValue.asLong = 0 },
    { "reversed_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "compIDXEnd_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "bottomSlot_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "queueFull_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "currentReaderContext_", NULL, 0x2, "Lorg.apache.lucene.index.LeafReaderContext;", NULL, NULL, .constantValue.asLong = 0 },
    { "topGroupDoc_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "totalHitCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "totalGroupCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "docBase_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "groupEndDocID_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastDocPerGroupBits_", NULL, 0x2, "Lorg.apache.lucene.search.DocIdSetIterator;", NULL, NULL, .constantValue.asLong = 0 },
    { "scorer_", NULL, 0x2, "Lorg.apache.lucene.search.Scorer;", NULL, NULL, .constantValue.asLong = 0 },
    { "groupQueue_", NULL, 0x12, "Lorg.apache.lucene.search.grouping.BlockGroupingCollector$GroupQueue;", NULL, NULL, .constantValue.asLong = 0 },
    { "groupCompetes_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.search.grouping.BlockGroupingCollector$OneGroup;", "Lorg.apache.lucene.search.grouping.BlockGroupingCollector$GroupQueue;"};
  static const J2ObjcClassInfo _OrgApacheLuceneSearchGroupingBlockGroupingCollector = { 2, "BlockGroupingCollector", "org.apache.lucene.search.grouping", NULL, 0x1, 7, methods, 23, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneSearchGroupingBlockGroupingCollector;
}

@end

void OrgApacheLuceneSearchGroupingBlockGroupingCollector_processGroup(OrgApacheLuceneSearchGroupingBlockGroupingCollector *self) {
  self->totalGroupCount_++;
  if (self->groupCompetes_) {
    if (!self->queueFull_) {
      OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *og = [new_OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup_init() autorelease];
      og->count_ = self->subDocUpto_;
      og->topGroupDoc_ = self->docBase_ + self->topGroupDoc_;
      JreStrongAssign(&og->docs_, self->pendingSubDocs_);
      JreStrongAssignAndConsume(&self->pendingSubDocs_, [IOSIntArray newArrayWithLength:10]);
      if (self->needsScores_) {
        JreStrongAssign(&og->scores_, self->pendingSubScores_);
        JreStrongAssignAndConsume(&self->pendingSubScores_, [IOSFloatArray newArrayWithLength:10]);
      }
      JreStrongAssign(&og->readerContext_, self->currentReaderContext_);
      og->comparatorSlot_ = self->bottomSlot_;
      OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *bottomGroup = [((OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue *) nil_chk(self->groupQueue_)) addWithId:og];
      self->queueFull_ = ([self->groupQueue_ size] == self->topNGroups_);
      if (self->queueFull_) {
        self->bottomSlot_ = ((OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *) nil_chk(bottomGroup))->comparatorSlot_;
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->comparators_))->size_; i++) {
          [((id<OrgApacheLuceneSearchLeafFieldComparator>) nil_chk(IOSObjectArray_Get(nil_chk(self->leafComparators_), i))) setBottomWithInt:self->bottomSlot_];
        }
      }
      else {
        self->bottomSlot_ = [self->groupQueue_ size];
      }
    }
    else {
      OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *og = [((OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue *) nil_chk(self->groupQueue_)) top];
      JreAssert((og != nil), (@"org/apache/lucene/search/grouping/BlockGroupingCollector.java:176 condition failed: assert og != null;"));
      ((OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *) nil_chk(og))->count_ = self->subDocUpto_;
      og->topGroupDoc_ = self->docBase_ + self->topGroupDoc_;
      IOSIntArray *savDocs = og->docs_;
      JreStrongAssign(&og->docs_, self->pendingSubDocs_);
      JreStrongAssign(&self->pendingSubDocs_, savDocs);
      if (self->needsScores_) {
        IOSFloatArray *savScores = og->scores_;
        JreStrongAssign(&og->scores_, self->pendingSubScores_);
        JreStrongAssign(&self->pendingSubScores_, savScores);
      }
      JreStrongAssign(&og->readerContext_, self->currentReaderContext_);
      self->bottomSlot_ = ((OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *) nil_chk([self->groupQueue_ updateTop]))->comparatorSlot_;
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->comparators_))->size_; i++) {
        [((id<OrgApacheLuceneSearchLeafFieldComparator>) nil_chk(IOSObjectArray_Get(nil_chk(self->leafComparators_), i))) setBottomWithInt:self->bottomSlot_];
      }
    }
  }
  self->subDocUpto_ = 0;
}

void OrgApacheLuceneSearchGroupingBlockGroupingCollector_initWithOrgApacheLuceneSearchSort_withInt_withBoolean_withOrgApacheLuceneSearchWeight_(OrgApacheLuceneSearchGroupingBlockGroupingCollector *self, OrgApacheLuceneSearchSort *groupSort, jint topNGroups, jboolean needsScores, OrgApacheLuceneSearchWeight *lastDocPerGroup) {
  OrgApacheLuceneSearchSimpleCollector_init(self);
  if (topNGroups < 1) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"topNGroups must be >= 1 (got ", topNGroups, ')')) autorelease];
  }
  JreStrongAssignAndConsume(&self->groupQueue_, new_OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue_initWithOrgApacheLuceneSearchGroupingBlockGroupingCollector_withInt_(self, topNGroups));
  JreStrongAssignAndConsume(&self->pendingSubDocs_, [IOSIntArray newArrayWithLength:10]);
  if (needsScores) {
    JreStrongAssignAndConsume(&self->pendingSubScores_, [IOSFloatArray newArrayWithLength:10]);
  }
  self->needsScores_ = needsScores;
  JreStrongAssign(&self->lastDocPerGroup_, lastDocPerGroup);
  JreStrongAssign(&self->groupSort_, groupSort);
  self->topNGroups_ = topNGroups;
  IOSObjectArray *sortFields = [((OrgApacheLuceneSearchSort *) nil_chk(groupSort)) getSort];
  JreStrongAssignAndConsume(&self->comparators_, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(sortFields))->size_ type:OrgApacheLuceneSearchFieldComparator_class_()]);
  JreStrongAssignAndConsume(&self->leafComparators_, [IOSObjectArray newArrayWithLength:sortFields->size_ type:OrgApacheLuceneSearchLeafFieldComparator_class_()]);
  self->compIDXEnd_ = self->comparators_->size_ - 1;
  JreStrongAssignAndConsume(&self->reversed_, [IOSIntArray newArrayWithLength:sortFields->size_]);
  for (jint i = 0; i < sortFields->size_; i++) {
    OrgApacheLuceneSearchSortField *sortField = IOSObjectArray_Get(sortFields, i);
    IOSObjectArray_Set(self->comparators_, i, [((OrgApacheLuceneSearchSortField *) nil_chk(sortField)) getComparatorWithInt:topNGroups withInt:i]);
    *IOSIntArray_GetRef(self->reversed_, i) = [sortField getReverse] ? -1 : 1;
  }
}

OrgApacheLuceneSearchGroupingBlockGroupingCollector *new_OrgApacheLuceneSearchGroupingBlockGroupingCollector_initWithOrgApacheLuceneSearchSort_withInt_withBoolean_withOrgApacheLuceneSearchWeight_(OrgApacheLuceneSearchSort *groupSort, jint topNGroups, jboolean needsScores, OrgApacheLuceneSearchWeight *lastDocPerGroup) {
  OrgApacheLuceneSearchGroupingBlockGroupingCollector *self = [OrgApacheLuceneSearchGroupingBlockGroupingCollector alloc];
  OrgApacheLuceneSearchGroupingBlockGroupingCollector_initWithOrgApacheLuceneSearchSort_withInt_withBoolean_withOrgApacheLuceneSearchWeight_(self, groupSort, topNGroups, needsScores, lastDocPerGroup);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchGroupingBlockGroupingCollector)

@implementation OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup

- (instancetype)init {
  OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(readerContext_);
  RELEASE_(docs_);
  RELEASE_(scores_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "readerContext_", NULL, 0x0, "Lorg.apache.lucene.index.LeafReaderContext;", NULL, NULL, .constantValue.asLong = 0 },
    { "topGroupDoc_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "docs_", NULL, 0x0, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "scores_", NULL, 0x0, "[F", NULL, NULL, .constantValue.asLong = 0 },
    { "count_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "comparatorSlot_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup = { 2, "OneGroup", "org.apache.lucene.search.grouping", "BlockGroupingCollector", 0x1a, 1, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup;
}

@end

void OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup_init(OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *self) {
  NSObject_init(self);
}

OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *new_OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup_init() {
  OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *self = [OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup alloc];
  OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup)

@implementation OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue

- (instancetype)initWithOrgApacheLuceneSearchGroupingBlockGroupingCollector:(OrgApacheLuceneSearchGroupingBlockGroupingCollector *)outer$
                                                                    withInt:(jint)size {
  OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue_initWithOrgApacheLuceneSearchGroupingBlockGroupingCollector_withInt_(self, outer$, size);
  return self;
}

- (jboolean)lessThanWithId:(OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *)group1
                    withId:(OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *)group2 {
  JreAssert((group1 != group2), (@"org/apache/lucene/search/grouping/BlockGroupingCollector.java:120 condition failed: assert group1 != group2;"));
  JreAssert((((OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *) nil_chk(group1))->comparatorSlot_ != ((OrgApacheLuceneSearchGroupingBlockGroupingCollector_OneGroup *) nil_chk(group2))->comparatorSlot_), (@"org/apache/lucene/search/grouping/BlockGroupingCollector.java:121 condition failed: assert group1.comparatorSlot != group2.comparatorSlot;"));
  jint numComparators = ((IOSObjectArray *) nil_chk(this$0_->comparators_))->size_;
  for (jint compIDX = 0; compIDX < numComparators; compIDX++) {
    jint c = IOSIntArray_Get(nil_chk(this$0_->reversed_), compIDX) * [((OrgApacheLuceneSearchFieldComparator *) nil_chk(IOSObjectArray_Get(this$0_->comparators_, compIDX))) compareWithInt:group1->comparatorSlot_ withInt:group2->comparatorSlot_];
    if (c != 0) {
      return c > 0;
    }
  }
  return group1->topGroupDoc_ > group2->topGroupDoc_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneSearchGroupingBlockGroupingCollector:withInt:", "GroupQueue", NULL, 0x1, NULL, NULL },
    { "lessThanWithId:withId:", "lessThan", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.search.grouping.BlockGroupingCollector;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Lorg.apache.lucene.search.grouping.BlockGroupingCollector$OneGroup;"};
  static const J2ObjcClassInfo _OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue = { 2, "GroupQueue", "org.apache.lucene.search.grouping", "BlockGroupingCollector", 0x12, 2, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/search/grouping/BlockGroupingCollector$OneGroup;>;" };
  return &_OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue;
}

@end

void OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue_initWithOrgApacheLuceneSearchGroupingBlockGroupingCollector_withInt_(OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue *self, OrgApacheLuceneSearchGroupingBlockGroupingCollector *outer$, jint size) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneUtilPriorityQueue_initWithInt_(self, size);
}

OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue *new_OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue_initWithOrgApacheLuceneSearchGroupingBlockGroupingCollector_withInt_(OrgApacheLuceneSearchGroupingBlockGroupingCollector *outer$, jint size) {
  OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue *self = [OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue alloc];
  OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue_initWithOrgApacheLuceneSearchGroupingBlockGroupingCollector_withInt_(self, outer$, size);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchGroupingBlockGroupingCollector_GroupQueue)
