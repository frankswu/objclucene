//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/NavigableSet.h"
#include "java/util/TreeSet.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"

@interface OrgApacheLuceneSearchGroupingSearchGroup_ShardIter : NSObject {
 @public
  id<JavaUtilIterator> iter_;
  jint shardIndex_;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)shard
                                   withInt:(jint)shardIndex;

- (OrgApacheLuceneSearchGroupingSearchGroup *)next;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchGroupingSearchGroup_ShardIter)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingSearchGroup_ShardIter, iter_, id<JavaUtilIterator>)

__attribute__((unused)) static void OrgApacheLuceneSearchGroupingSearchGroup_ShardIter_initWithJavaUtilCollection_withInt_(OrgApacheLuceneSearchGroupingSearchGroup_ShardIter *self, id<JavaUtilCollection> shard, jint shardIndex);

__attribute__((unused)) static OrgApacheLuceneSearchGroupingSearchGroup_ShardIter *new_OrgApacheLuceneSearchGroupingSearchGroup_ShardIter_initWithJavaUtilCollection_withInt_(id<JavaUtilCollection> shard, jint shardIndex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchGroupingSearchGroup_ShardIter)

@interface OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup : NSObject {
 @public
  id groupValue_;
  IOSObjectArray *topValues_;
  id<JavaUtilList> shards_;
  jint minShardIndex_;
  jboolean processed_;
  jboolean inQueue_;
}

- (instancetype)initWithId:(id)groupValue;

- (jboolean)neverEqualsWithId:(id)_other;

- (jboolean)isEqual:(id)_other;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup, groupValue_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup, topValues_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup, shards_, id<JavaUtilList>)

__attribute__((unused)) static void OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup_initWithId_(OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *self, id groupValue);

__attribute__((unused)) static OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *new_OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup_initWithId_(id groupValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static jboolean OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup_neverEqualsWithId_(OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *self, id _other);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup)

@interface OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator : NSObject < JavaUtilComparator > {
 @public
  IOSObjectArray *comparators_;
  IOSIntArray *reversed_;
}

- (instancetype)initWithOrgApacheLuceneSearchSort:(OrgApacheLuceneSearchSort *)groupSort;

- (jint)compareWithId:(OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *)group
               withId:(OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *)other;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator, comparators_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator, reversed_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator_initWithOrgApacheLuceneSearchSort_(OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator *self, OrgApacheLuceneSearchSort *groupSort);

__attribute__((unused)) static OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator *new_OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator_initWithOrgApacheLuceneSearchSort_(OrgApacheLuceneSearchSort *groupSort) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator)

@interface OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger : NSObject {
 @public
  OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator *groupComp_;
  id<JavaUtilNavigableSet> queue_;
  id<JavaUtilMap> groupsSeen_;
}

- (instancetype)initWithOrgApacheLuceneSearchSort:(OrgApacheLuceneSearchSort *)groupSort;

- (void)updateNextGroupWithInt:(jint)topN
withOrgApacheLuceneSearchGroupingSearchGroup_ShardIter:(OrgApacheLuceneSearchGroupingSearchGroup_ShardIter *)shard;

- (id<JavaUtilCollection>)mergeWithJavaUtilList:(id<JavaUtilList>)shards
                                        withInt:(jint)offset
                                        withInt:(jint)topN;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger, groupComp_, OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger, queue_, id<JavaUtilNavigableSet>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger, groupsSeen_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger_initWithOrgApacheLuceneSearchSort_(OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger *self, OrgApacheLuceneSearchSort *groupSort);

__attribute__((unused)) static OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger *new_OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger_initWithOrgApacheLuceneSearchSort_(OrgApacheLuceneSearchSort *groupSort) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger_updateNextGroupWithInt_withOrgApacheLuceneSearchGroupingSearchGroup_ShardIter_(OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger *self, jint topN, OrgApacheLuceneSearchGroupingSearchGroup_ShardIter *shard);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger)

@implementation OrgApacheLuceneSearchGroupingSearchGroup

- (NSString *)description {
  return (JreStrcat("$@$$C", @"SearchGroup(groupValue=", groupValue_, @" sortValues=", JavaUtilArrays_toStringWithNSObjectArray_(sortValues_), ')'));
}

- (jboolean)isEqual:(id)o {
  if (self == o) return YES;
  if (o == nil || [self getClass] != [o getClass]) return NO;
  OrgApacheLuceneSearchGroupingSearchGroup *that = (OrgApacheLuceneSearchGroupingSearchGroup *) check_class_cast(o, [OrgApacheLuceneSearchGroupingSearchGroup class]);
  if (groupValue_ == nil) {
    if (((OrgApacheLuceneSearchGroupingSearchGroup *) nil_chk(that))->groupValue_ != nil) {
      return NO;
    }
  }
  else if (![groupValue_ isEqual:((OrgApacheLuceneSearchGroupingSearchGroup *) nil_chk(that))->groupValue_]) {
    return NO;
  }
  return YES;
}

- (NSUInteger)hash {
  return groupValue_ != nil ? ((jint) [groupValue_ hash]) : 0;
}

+ (id<JavaUtilCollection>)mergeWithJavaUtilList:(id<JavaUtilList>)topGroups
                                        withInt:(jint)offset
                                        withInt:(jint)topN
                  withOrgApacheLuceneSearchSort:(OrgApacheLuceneSearchSort *)groupSort {
  return OrgApacheLuceneSearchGroupingSearchGroup_mergeWithJavaUtilList_withInt_withInt_withOrgApacheLuceneSearchSort_(topGroups, offset, topN, groupSort);
}

- (instancetype)init {
  OrgApacheLuceneSearchGroupingSearchGroup_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(groupValue_);
  RELEASE_(sortValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "mergeWithJavaUtilList:withInt:withInt:withOrgApacheLuceneSearchSort:", "merge", "Ljava.util.Collection;", 0x9, "Ljava.io.IOException;", "<T:Ljava/lang/Object;>(Ljava/util/List<Ljava/util/Collection<Lorg/apache/lucene/search/grouping/SearchGroup<TT;>;>;>;IILorg/apache/lucene/search/Sort;)Ljava/util/Collection<Lorg/apache/lucene/search/grouping/SearchGroup<TT;>;>;" },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "groupValue_", NULL, 0x1, "TGROUP_VALUE_TYPE;", NULL, "TGROUP_VALUE_TYPE;", .constantValue.asLong = 0 },
    { "sortValues_", NULL, 0x1, "[Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.search.grouping.SearchGroup$ShardIter;", "Lorg.apache.lucene.search.grouping.SearchGroup$MergedGroup;", "Lorg.apache.lucene.search.grouping.SearchGroup$GroupComparator;", "Lorg.apache.lucene.search.grouping.SearchGroup$GroupMerger;"};
  static const J2ObjcClassInfo _OrgApacheLuceneSearchGroupingSearchGroup = { 2, "SearchGroup", "org.apache.lucene.search.grouping", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 4, inner_classes, NULL, "<GROUP_VALUE_TYPE:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_OrgApacheLuceneSearchGroupingSearchGroup;
}

@end

id<JavaUtilCollection> OrgApacheLuceneSearchGroupingSearchGroup_mergeWithJavaUtilList_withInt_withInt_withOrgApacheLuceneSearchSort_(id<JavaUtilList> topGroups, jint offset, jint topN, OrgApacheLuceneSearchSort *groupSort) {
  OrgApacheLuceneSearchGroupingSearchGroup_initialize();
  if ([((id<JavaUtilList>) nil_chk(topGroups)) size] == 0) {
    return nil;
  }
  else {
    return [((OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger *) [new_OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger_initWithOrgApacheLuceneSearchSort_(groupSort) autorelease]) mergeWithJavaUtilList:topGroups withInt:offset withInt:topN];
  }
}

void OrgApacheLuceneSearchGroupingSearchGroup_init(OrgApacheLuceneSearchGroupingSearchGroup *self) {
  NSObject_init(self);
}

OrgApacheLuceneSearchGroupingSearchGroup *new_OrgApacheLuceneSearchGroupingSearchGroup_init() {
  OrgApacheLuceneSearchGroupingSearchGroup *self = [OrgApacheLuceneSearchGroupingSearchGroup alloc];
  OrgApacheLuceneSearchGroupingSearchGroup_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchGroupingSearchGroup)

@implementation OrgApacheLuceneSearchGroupingSearchGroup_ShardIter

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)shard
                                   withInt:(jint)shardIndex {
  OrgApacheLuceneSearchGroupingSearchGroup_ShardIter_initWithJavaUtilCollection_withInt_(self, shard, shardIndex);
  return self;
}

- (OrgApacheLuceneSearchGroupingSearchGroup *)next {
  JreAssert(([((id<JavaUtilIterator>) nil_chk(iter_)) hasNext]), (@"org/apache/lucene/search/grouping/SearchGroup.java:84 condition failed: assert iter.hasNext();"));
  OrgApacheLuceneSearchGroupingSearchGroup *group = [iter_ next];
  if (((OrgApacheLuceneSearchGroupingSearchGroup *) nil_chk(group))->sortValues_ == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"group.sortValues is null; you must pass fillFields=true to the first pass collector") autorelease];
  }
  return group;
}

- (NSString *)description {
  return JreStrcat("$IC", @"ShardIter(shard=", shardIndex_, ')');
}

- (void)dealloc {
  RELEASE_(iter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilCollection:withInt:", "ShardIter", NULL, 0x1, NULL, NULL },
    { "next", NULL, "Lorg.apache.lucene.search.grouping.SearchGroup;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iter_", NULL, 0x11, "Ljava.util.Iterator;", NULL, "Ljava/util/Iterator<Lorg/apache/lucene/search/grouping/SearchGroup<TT;>;>;", .constantValue.asLong = 0 },
    { "shardIndex_", NULL, 0x11, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchGroupingSearchGroup_ShardIter = { 2, "ShardIter", "org.apache.lucene.search.grouping", "SearchGroup", 0xa, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_OrgApacheLuceneSearchGroupingSearchGroup_ShardIter;
}

@end

void OrgApacheLuceneSearchGroupingSearchGroup_ShardIter_initWithJavaUtilCollection_withInt_(OrgApacheLuceneSearchGroupingSearchGroup_ShardIter *self, id<JavaUtilCollection> shard, jint shardIndex) {
  NSObject_init(self);
  self->shardIndex_ = shardIndex;
  JreStrongAssign(&self->iter_, [((id<JavaUtilCollection>) nil_chk(shard)) iterator]);
  JreAssert(([((id<JavaUtilIterator>) nil_chk(self->iter_)) hasNext]), (@"org/apache/lucene/search/grouping/SearchGroup.java:80 condition failed: assert iter.hasNext();"));
}

OrgApacheLuceneSearchGroupingSearchGroup_ShardIter *new_OrgApacheLuceneSearchGroupingSearchGroup_ShardIter_initWithJavaUtilCollection_withInt_(id<JavaUtilCollection> shard, jint shardIndex) {
  OrgApacheLuceneSearchGroupingSearchGroup_ShardIter *self = [OrgApacheLuceneSearchGroupingSearchGroup_ShardIter alloc];
  OrgApacheLuceneSearchGroupingSearchGroup_ShardIter_initWithJavaUtilCollection_withInt_(self, shard, shardIndex);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchGroupingSearchGroup_ShardIter)

@implementation OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup

- (instancetype)initWithId:(id)groupValue {
  OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup_initWithId_(self, groupValue);
  return self;
}

- (jboolean)neverEqualsWithId:(id)_other {
  return OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup_neverEqualsWithId_(self, _other);
}

- (jboolean)isEqual:(id)_other {
  JreAssert((OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup_neverEqualsWithId_(self, _other)), (@"org/apache/lucene/search/grouping/SearchGroup.java:131 condition failed: assert neverEquals(_other);"));
  if ([_other isKindOfClass:[OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup class]]) {
    OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *other = (OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *) check_class_cast(_other, [OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup class]);
    if (groupValue_ == nil) {
      return other == nil;
    }
    else {
      return [groupValue_ isEqual:other];
    }
  }
  else {
    return NO;
  }
}

- (NSUInteger)hash {
  if (groupValue_ == nil) {
    return 0;
  }
  else {
    return ((jint) [groupValue_ hash]);
  }
}

- (void)dealloc {
  RELEASE_(groupValue_);
  RELEASE_(topValues_);
  RELEASE_(shards_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:", "MergedGroup", NULL, 0x1, NULL, "(TT;)V" },
    { "neverEqualsWithId:", "neverEquals", "Z", 0x2, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "groupValue_", NULL, 0x11, "TT;", NULL, "TT;", .constantValue.asLong = 0 },
    { "topValues_", NULL, 0x1, "[Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "shards_", NULL, 0x11, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/search/grouping/SearchGroup$ShardIter<TT;>;>;", .constantValue.asLong = 0 },
    { "minShardIndex_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "processed_", NULL, 0x1, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "inQueue_", NULL, 0x1, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup = { 2, "MergedGroup", "org.apache.lucene.search.grouping", "SearchGroup", 0xa, 4, methods, 6, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup;
}

@end

void OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup_initWithId_(OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *self, id groupValue) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->shards_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->groupValue_, groupValue);
}

OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *new_OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup_initWithId_(id groupValue) {
  OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *self = [OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup alloc];
  OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup_initWithId_(self, groupValue);
  return self;
}

jboolean OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup_neverEqualsWithId_(OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *self, id _other) {
  if ([_other isKindOfClass:[OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup class]]) {
    OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *other = (OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *) check_class_cast(_other, [OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup class]);
    if (self->groupValue_ == nil) {
      JreAssert((((OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *) nil_chk(other))->groupValue_ != nil), (@"org/apache/lucene/search/grouping/SearchGroup.java:119 condition failed: assert other.groupValue != null;"));
    }
    else {
      JreAssert((![self->groupValue_ isEqual:((OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *) nil_chk(other))->groupValue_]), (@"org/apache/lucene/search/grouping/SearchGroup.java:121 condition failed: assert !groupValue.equals(other.groupValue);"));
    }
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup)

@implementation OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator

- (instancetype)initWithOrgApacheLuceneSearchSort:(OrgApacheLuceneSearchSort *)groupSort {
  OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator_initWithOrgApacheLuceneSearchSort_(self, groupSort);
  return self;
}

- (jint)compareWithId:(OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *)group
               withId:(OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *)other {
  if (group == other) {
    return 0;
  }
  IOSObjectArray *groupValues = ((OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *) nil_chk(group))->topValues_;
  IOSObjectArray *otherValues = ((OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *) nil_chk(other))->topValues_;
  for (jint compIDX = 0; compIDX < ((IOSObjectArray *) nil_chk(comparators_))->size_; compIDX++) {
    jint c = IOSIntArray_Get(nil_chk(reversed_), compIDX) * [((OrgApacheLuceneSearchFieldComparator *) nil_chk(IOSObjectArray_Get(comparators_, compIDX))) compareValuesWithId:IOSObjectArray_Get(nil_chk(groupValues), compIDX) withId:IOSObjectArray_Get(nil_chk(otherValues), compIDX)];
    if (c != 0) {
      return c;
    }
  }
  JreAssert((group->minShardIndex_ != other->minShardIndex_), (@"org/apache/lucene/search/grouping/SearchGroup.java:190 condition failed: assert group.minShardIndex != other.minShardIndex;"));
  return group->minShardIndex_ - other->minShardIndex_;
}

- (void)dealloc {
  RELEASE_(comparators_);
  RELEASE_(reversed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneSearchSort:", "GroupComparator", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "comparators_", NULL, 0x11, "[Lorg.apache.lucene.search.FieldComparator;", NULL, NULL, .constantValue.asLong = 0 },
    { "reversed_", NULL, 0x11, "[I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator = { 2, "GroupComparator", "org.apache.lucene.search.grouping", "SearchGroup", 0xa, 2, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/lucene/search/grouping/SearchGroup$MergedGroup<TT;>;>;" };
  return &_OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator;
}

@end

void OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator_initWithOrgApacheLuceneSearchSort_(OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator *self, OrgApacheLuceneSearchSort *groupSort) {
  NSObject_init(self);
  IOSObjectArray *sortFields = [((OrgApacheLuceneSearchSort *) nil_chk(groupSort)) getSort];
  JreStrongAssignAndConsume(&self->comparators_, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(sortFields))->size_ type:OrgApacheLuceneSearchFieldComparator_class_()]);
  JreStrongAssignAndConsume(&self->reversed_, [IOSIntArray newArrayWithLength:sortFields->size_]);
  for (jint compIDX = 0; compIDX < sortFields->size_; compIDX++) {
    OrgApacheLuceneSearchSortField *sortField = IOSObjectArray_Get(sortFields, compIDX);
    IOSObjectArray_Set(self->comparators_, compIDX, [((OrgApacheLuceneSearchSortField *) nil_chk(sortField)) getComparatorWithInt:1 withInt:compIDX]);
    *IOSIntArray_GetRef(self->reversed_, compIDX) = [sortField getReverse] ? -1 : 1;
  }
}

OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator *new_OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator_initWithOrgApacheLuceneSearchSort_(OrgApacheLuceneSearchSort *groupSort) {
  OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator *self = [OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator alloc];
  OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator_initWithOrgApacheLuceneSearchSort_(self, groupSort);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator)

@implementation OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger

- (instancetype)initWithOrgApacheLuceneSearchSort:(OrgApacheLuceneSearchSort *)groupSort {
  OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger_initWithOrgApacheLuceneSearchSort_(self, groupSort);
  return self;
}

- (void)updateNextGroupWithInt:(jint)topN
withOrgApacheLuceneSearchGroupingSearchGroup_ShardIter:(OrgApacheLuceneSearchGroupingSearchGroup_ShardIter *)shard {
  OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger_updateNextGroupWithInt_withOrgApacheLuceneSearchGroupingSearchGroup_ShardIter_(self, topN, shard);
}

- (id<JavaUtilCollection>)mergeWithJavaUtilList:(id<JavaUtilList>)shards
                                        withInt:(jint)offset
                                        withInt:(jint)topN {
  jint maxQueueSize = offset + topN;
  for (jint shardIDX = 0; shardIDX < [((id<JavaUtilList>) nil_chk(shards)) size]; shardIDX++) {
    id<JavaUtilCollection> shard = [shards getWithInt:shardIDX];
    if (![((id<JavaUtilCollection>) nil_chk(shard)) isEmpty]) {
      OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger_updateNextGroupWithInt_withOrgApacheLuceneSearchGroupingSearchGroup_ShardIter_(self, maxQueueSize, [new_OrgApacheLuceneSearchGroupingSearchGroup_ShardIter_initWithJavaUtilCollection_withInt_(shard, shardIDX) autorelease]);
    }
  }
  id<JavaUtilList> newTopGroups = [new_JavaUtilArrayList_init() autorelease];
  jint count = 0;
  while ([((id<JavaUtilNavigableSet>) nil_chk(queue_)) size] != 0) {
    OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *group = [queue_ pollFirst];
    ((OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *) nil_chk(group))->processed_ = YES;
    if (count++ >= offset) {
      OrgApacheLuceneSearchGroupingSearchGroup *newGroup = [new_OrgApacheLuceneSearchGroupingSearchGroup_init() autorelease];
      JreStrongAssign(&newGroup->groupValue_, group->groupValue_);
      JreStrongAssign(&newGroup->sortValues_, group->topValues_);
      [newTopGroups addWithId:newGroup];
      if ([newTopGroups size] == topN) {
        break;
      }
    }
    for (OrgApacheLuceneSearchGroupingSearchGroup_ShardIter * __strong shardIter in nil_chk(group->shards_)) {
      OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger_updateNextGroupWithInt_withOrgApacheLuceneSearchGroupingSearchGroup_ShardIter_(self, maxQueueSize, shardIter);
    }
  }
  if ([newTopGroups size] == 0) {
    return nil;
  }
  else {
    return newTopGroups;
  }
}

- (void)dealloc {
  RELEASE_(groupComp_);
  RELEASE_(queue_);
  RELEASE_(groupsSeen_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneSearchSort:", "GroupMerger", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "updateNextGroupWithInt:withOrgApacheLuceneSearchGroupingSearchGroup_ShardIter:", "updateNextGroup", "V", 0x2, NULL, NULL },
    { "mergeWithJavaUtilList:withInt:withInt:", "merge", "Ljava.util.Collection;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "groupComp_", NULL, 0x12, "Lorg.apache.lucene.search.grouping.SearchGroup$GroupComparator;", NULL, "Lorg/apache/lucene/search/grouping/SearchGroup$GroupComparator<TT;>;", .constantValue.asLong = 0 },
    { "queue_", NULL, 0x12, "Ljava.util.NavigableSet;", NULL, "Ljava/util/NavigableSet<Lorg/apache/lucene/search/grouping/SearchGroup$MergedGroup<TT;>;>;", .constantValue.asLong = 0 },
    { "groupsSeen_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<TT;Lorg/apache/lucene/search/grouping/SearchGroup$MergedGroup<TT;>;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger = { 2, "GroupMerger", "org.apache.lucene.search.grouping", "SearchGroup", 0xa, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger;
}

@end

void OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger_initWithOrgApacheLuceneSearchSort_(OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger *self, OrgApacheLuceneSearchSort *groupSort) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->groupComp_, new_OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator_initWithOrgApacheLuceneSearchSort_(groupSort));
  JreStrongAssignAndConsume(&self->queue_, new_JavaUtilTreeSet_initWithJavaUtilComparator_(self->groupComp_));
  JreStrongAssignAndConsume(&self->groupsSeen_, new_JavaUtilHashMap_init());
}

OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger *new_OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger_initWithOrgApacheLuceneSearchSort_(OrgApacheLuceneSearchSort *groupSort) {
  OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger *self = [OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger alloc];
  OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger_initWithOrgApacheLuceneSearchSort_(self, groupSort);
  return self;
}

void OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger_updateNextGroupWithInt_withOrgApacheLuceneSearchGroupingSearchGroup_ShardIter_(OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger *self, jint topN, OrgApacheLuceneSearchGroupingSearchGroup_ShardIter *shard) {
  while ([((id<JavaUtilIterator>) nil_chk(((OrgApacheLuceneSearchGroupingSearchGroup_ShardIter *) nil_chk(shard))->iter_)) hasNext]) {
    OrgApacheLuceneSearchGroupingSearchGroup *group = [shard next];
    OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *mergedGroup = [((id<JavaUtilMap>) nil_chk(self->groupsSeen_)) getWithId:((OrgApacheLuceneSearchGroupingSearchGroup *) nil_chk(group))->groupValue_];
    jboolean isNew = mergedGroup == nil;
    if (isNew) {
      mergedGroup = [new_OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup_initWithId_(group->groupValue_) autorelease];
      mergedGroup->minShardIndex_ = shard->shardIndex_;
      JreAssert((group->sortValues_ != nil), (@"org/apache/lucene/search/grouping/SearchGroup.java:220 condition failed: assert group.sortValues != null;"));
      JreStrongAssign(&mergedGroup->topValues_, group->sortValues_);
      [self->groupsSeen_ putWithId:group->groupValue_ withId:mergedGroup];
      mergedGroup->inQueue_ = YES;
      [((id<JavaUtilNavigableSet>) nil_chk(self->queue_)) addWithId:mergedGroup];
    }
    else if (((OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *) nil_chk(mergedGroup))->processed_) {
      continue;
    }
    else {
      jboolean competes = NO;
      for (jint compIDX = 0; compIDX < ((IOSObjectArray *) nil_chk(((OrgApacheLuceneSearchGroupingSearchGroup_GroupComparator *) nil_chk(self->groupComp_))->comparators_))->size_; compIDX++) {
        jint cmp = IOSIntArray_Get(nil_chk(self->groupComp_->reversed_), compIDX) * [((OrgApacheLuceneSearchFieldComparator *) nil_chk(IOSObjectArray_Get(self->groupComp_->comparators_, compIDX))) compareValuesWithId:IOSObjectArray_Get(nil_chk(group->sortValues_), compIDX) withId:IOSObjectArray_Get(nil_chk(mergedGroup->topValues_), compIDX)];
        if (cmp < 0) {
          competes = YES;
          break;
        }
        else if (cmp > 0) {
          break;
        }
        else if (compIDX == self->groupComp_->comparators_->size_ - 1) {
          if (shard->shardIndex_ < mergedGroup->minShardIndex_) {
            competes = YES;
          }
        }
      }
      if (competes) {
        if (mergedGroup->inQueue_) {
          [((id<JavaUtilNavigableSet>) nil_chk(self->queue_)) removeWithId:mergedGroup];
        }
        JreStrongAssign(&mergedGroup->topValues_, group->sortValues_);
        mergedGroup->minShardIndex_ = shard->shardIndex_;
        [((id<JavaUtilNavigableSet>) nil_chk(self->queue_)) addWithId:mergedGroup];
        mergedGroup->inQueue_ = YES;
      }
    }
    [((id<JavaUtilList>) nil_chk(((OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *) nil_chk(mergedGroup))->shards_)) addWithId:shard];
    break;
  }
  while ([((id<JavaUtilNavigableSet>) nil_chk(self->queue_)) size] > topN) {
    OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *group = [self->queue_ pollLast];
    ((OrgApacheLuceneSearchGroupingSearchGroup_MergedGroup *) nil_chk(group))->inQueue_ = NO;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchGroupingSearchGroup_GroupMerger)
