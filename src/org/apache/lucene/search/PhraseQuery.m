//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/PhraseQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/ExactPhraseScorer.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/MatchNoDocsQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/SloppyPhraseScorer.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/ToStringUtils.h"

@interface OrgApacheLuceneSearchPhraseQuery () {
 @public
  jboolean mutable__;
  jint slop_;
  NSString *field_;
  id<JavaUtilList> terms_;
  id<JavaUtilList> positions_;
}

- (instancetype)initWithInt:(jint)slop
withOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms
               withIntArray:(IOSIntArray *)positions;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery, terms_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery, positions_, id<JavaUtilList>)

__attribute__((unused)) static void OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(OrgApacheLuceneSearchPhraseQuery *self, jint slop, IOSObjectArray *terms, IOSIntArray *positions);

__attribute__((unused)) static OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(jint slop, IOSObjectArray *terms, IOSIntArray *positions) NS_RETURNS_RETAINED;

@interface OrgApacheLuceneSearchPhraseQuery_Builder () {
 @public
  jint slop_;
  id<JavaUtilList> terms_;
  id<JavaUtilList> positions_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_Builder, terms_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_Builder, positions_, id<JavaUtilList>)

@interface OrgApacheLuceneSearchPhraseQuery_PhraseWeight : OrgApacheLuceneSearchWeight {
 @public
  OrgApacheLuceneSearchPhraseQuery *this$0_;
  OrgApacheLuceneSearchSimilaritiesSimilarity *similarity_;
  OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *stats_;
  jboolean needsScores_;
  IOSObjectArray *states_;
  IOSObjectArray *terms_;
  IOSIntArray *positions_;
}

- (instancetype)initWithOrgApacheLuceneSearchPhraseQuery:(OrgApacheLuceneSearchPhraseQuery *)outer$
                  withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                             withBoolean:(jboolean)needsScores;

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)queryTerms;

- (NSString *)description;

- (jfloat)getValueForNormalization;

- (void)normalizeWithFloat:(jfloat)queryNorm
                 withFloat:(jfloat)topLevelBoost;

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

- (jboolean)termNotInReaderWithOrgApacheLuceneIndexLeafReader:(OrgApacheLuceneIndexLeafReader *)reader
                                 withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchPhraseQuery_PhraseWeight)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_PhraseWeight, this$0_, OrgApacheLuceneSearchPhraseQuery *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_PhraseWeight, similarity_, OrgApacheLuceneSearchSimilaritiesSimilarity *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_PhraseWeight, stats_, OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_PhraseWeight, states_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_PhraseWeight, terms_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_PhraseWeight, positions_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchPhraseQuery_PhraseWeight *self, OrgApacheLuceneSearchPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores);

__attribute__((unused)) static OrgApacheLuceneSearchPhraseQuery_PhraseWeight *new_OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores) NS_RETURNS_RETAINED;

__attribute__((unused)) static jboolean OrgApacheLuceneSearchPhraseQuery_PhraseWeight_termNotInReaderWithOrgApacheLuceneIndexLeafReader_withOrgApacheLuceneIndexTerm_(OrgApacheLuceneSearchPhraseQuery_PhraseWeight *self, OrgApacheLuceneIndexLeafReader *reader, OrgApacheLuceneIndexTerm *term);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchPhraseQuery_PhraseWeight)

@implementation OrgApacheLuceneSearchPhraseQuery

- (instancetype)initWithInt:(jint)slop
withOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms
               withIntArray:(IOSIntArray *)positions {
  OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(self, slop, terms, positions);
  return self;
}

- (jint)getSlop {
  return slop_;
}

- (IOSObjectArray *)getTerms {
  return [((id<JavaUtilList>) nil_chk(terms_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneIndexTerm_class_()]];
}

- (IOSIntArray *)getPositions {
  IOSIntArray *result = [IOSIntArray arrayWithLength:[((id<JavaUtilList>) nil_chk(positions_)) size]];
  for (jint i = 0; i < [positions_ size]; i++) *IOSIntArray_GetRef(result, i) = [((JavaLangInteger *) nil_chk([positions_ getWithInt:i])) intValue];
  return result;
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  if ([((id<JavaUtilList>) nil_chk(terms_)) isEmpty]) {
    OrgApacheLuceneSearchMatchNoDocsQuery *q = [new_OrgApacheLuceneSearchMatchNoDocsQuery_init() autorelease];
    [q setBoostWithFloat:[self getBoost]];
    return q;
  }
  else if ([terms_ size] == 1) {
    OrgApacheLuceneSearchTermQuery *tq = [new_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_([terms_ getWithInt:0]) autorelease];
    [tq setBoostWithFloat:[self getBoost]];
    return tq;
  }
  else if ([((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(positions_)) getWithInt:0])) intValue] != 0) {
    IOSIntArray *oldPositions = [self getPositions];
    IOSIntArray *newPositions = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(oldPositions))->size_];
    for (jint i = 0; i < oldPositions->size_; ++i) {
      *IOSIntArray_GetRef(newPositions, i) = IOSIntArray_Get(oldPositions, i) - IOSIntArray_Get(oldPositions, 0);
    }
    OrgApacheLuceneSearchPhraseQuery *rewritten = [new_OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(slop_, [self getTerms], newPositions) autorelease];
    [rewritten setBoostWithFloat:[self getBoost]];
    return rewritten;
  }
  else {
    return [super rewriteWithOrgApacheLuceneIndexIndexReader:reader];
  }
}

- (OrgApacheLuceneSearchWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                        withBoolean:(jboolean)needsScores {
  return [new_OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(self, searcher, needsScores) autorelease];
}

- (NSString *)toStringWithNSString:(NSString *)f {
  IOSObjectArray *terms = [self getTerms];
  IOSIntArray *positions = [self getPositions];
  JavaLangStringBuilder *buffer = [new_JavaLangStringBuilder_init() autorelease];
  if (field_ != nil && ![field_ isEqual:f]) {
    [buffer appendWithNSString:field_];
    [buffer appendWithNSString:@":"];
  }
  [buffer appendWithNSString:@"\""];
  jint maxPosition;
  if (((IOSIntArray *) nil_chk(positions))->size_ == 0) {
    maxPosition = -1;
  }
  else {
    maxPosition = IOSIntArray_Get(positions, positions->size_ - 1);
  }
  IOSObjectArray *pieces = [IOSObjectArray arrayWithLength:maxPosition + 1 type:NSString_class_()];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(terms))->size_; i++) {
    jint pos = IOSIntArray_Get(positions, i);
    NSString *s = IOSObjectArray_Get(pieces, pos);
    if (s == nil) {
      s = [((OrgApacheLuceneIndexTerm *) nil_chk((IOSObjectArray_Get(terms, i)))) text];
    }
    else {
      s = JreStrcat("$C$", s, '|', [((OrgApacheLuceneIndexTerm *) nil_chk((IOSObjectArray_Get(terms, i)))) text]);
    }
    IOSObjectArray_Set(pieces, pos, s);
  }
  for (jint i = 0; i < pieces->size_; i++) {
    if (i > 0) {
      [buffer appendWithChar:' '];
    }
    NSString *s = IOSObjectArray_Get(pieces, i);
    if (s == nil) {
      [buffer appendWithChar:'?'];
    }
    else {
      [buffer appendWithNSString:s];
    }
  }
  [buffer appendWithNSString:@"\""];
  if (slop_ != 0) {
    [buffer appendWithNSString:@"~"];
    [buffer appendWithInt:slop_];
  }
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (jboolean)isEqual:(id)o {
  if ([super isEqual:o] == NO) {
    return NO;
  }
  OrgApacheLuceneSearchPhraseQuery *that = (OrgApacheLuceneSearchPhraseQuery *) check_class_cast(o, [OrgApacheLuceneSearchPhraseQuery class]);
  return slop_ == ((OrgApacheLuceneSearchPhraseQuery *) nil_chk(that))->slop_ && [((id<JavaUtilList>) nil_chk(terms_)) isEqual:that->terms_] && [((id<JavaUtilList>) nil_chk(positions_)) isEqual:that->positions_];
}

- (NSUInteger)hash {
  jint h = ((jint) [super hash]);
  h = 31 * h + slop_;
  h = 31 * h + ((jint) [((id<JavaUtilList>) nil_chk(terms_)) hash]);
  h = 31 * h + ((jint) [((id<JavaUtilList>) nil_chk(positions_)) hash]);
  return h;
}

- (instancetype)init {
  OrgApacheLuceneSearchPhraseQuery_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(terms_);
  RELEASE_(positions_);
  [super dealloc];
}

+ (IOSObjectArray *)__annotations_init {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withOrgApacheLuceneIndexTermArray:withIntArray:", "PhraseQuery", NULL, 0x2, NULL, NULL },
    { "getSlop", NULL, "I", 0x1, NULL, NULL },
    { "getTerms", NULL, "[Lorg.apache.lucene.index.Term;", 0x1, NULL, NULL },
    { "getPositions", NULL, "[I", 0x1, NULL, NULL },
    { "rewriteWithOrgApacheLuceneIndexIndexReader:", "rewrite", "Lorg.apache.lucene.search.Query;", 0x1, "Ljava.io.IOException;", NULL },
    { "createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:", "createWeight", "Lorg.apache.lucene.search.Weight;", 0x1, "Ljava.io.IOException;", NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "init", "PhraseQuery", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mutable__", "mutable", 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "slop_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "field_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "terms_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/index/Term;>;", .constantValue.asLong = 0 },
    { "positions_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.search.PhraseQuery$Builder;", "Lorg.apache.lucene.search.PhraseQuery$PostingsAndFreq;", "Lorg.apache.lucene.search.PhraseQuery$PhraseWeight;"};
  static const J2ObjcClassInfo _OrgApacheLuceneSearchPhraseQuery = { 2, "PhraseQuery", "org.apache.lucene.search", NULL, 0x1, 10, methods, 5, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneSearchPhraseQuery;
}

@end

void OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(OrgApacheLuceneSearchPhraseQuery *self, jint slop, IOSObjectArray *terms, IOSIntArray *positions) {
  OrgApacheLuceneSearchQuery_init(self);
  if (((IOSObjectArray *) nil_chk(terms))->size_ != ((IOSIntArray *) nil_chk(positions))->size_) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Must have as many terms as positions") autorelease];
  }
  if (slop < 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Slop must be >= 0, got ", slop)) autorelease];
  }
  for (jint i = 1; i < terms->size_; ++i) {
    if ([((NSString *) nil_chk([((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, i - 1))) field])) isEqual:[((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, i))) field]] == NO) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"All terms should have the same field") autorelease];
    }
  }
  {
    IOSIntArray *a__ = positions;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint position = *b__++;
      if (position < 0) {
        @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Positions must be >= 0, got ", position)) autorelease];
      }
    }
  }
  for (jint i = 1; i < positions->size_; ++i) {
    if (IOSIntArray_Get(positions, i) < IOSIntArray_Get(positions, i - 1)) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Positions should not go backwards, got ", IOSIntArray_Get(positions, i - 1), @" before ", IOSIntArray_Get(positions, i))) autorelease];
    }
  }
  self->slop_ = slop;
  JreStrongAssign(&self->terms_, JavaUtilArrays_asListWithNSObjectArray_(terms));
  JreStrongAssignAndConsume(&self->positions_, new_JavaUtilArrayList_initWithInt_(positions->size_));
  {
    IOSIntArray *a__ = positions;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint pos = *b__++;
      [self->positions_ addWithId:JavaLangInteger_valueOfWithInt_(pos)];
    }
  }
  JreStrongAssign(&self->field_, terms->size_ == 0 ? nil : [((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, 0))) field]);
  self->mutable__ = NO;
}

OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(jint slop, IOSObjectArray *terms, IOSIntArray *positions) {
  OrgApacheLuceneSearchPhraseQuery *self = [OrgApacheLuceneSearchPhraseQuery alloc];
  OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(self, slop, terms, positions);
  return self;
}

void OrgApacheLuceneSearchPhraseQuery_init(OrgApacheLuceneSearchPhraseQuery *self) {
  OrgApacheLuceneSearchQuery_init(self);
  JreStrongAssignAndConsume(&self->terms_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->positions_, new_JavaUtilArrayList_init());
  self->mutable__ = YES;
}

OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_init() {
  OrgApacheLuceneSearchPhraseQuery *self = [OrgApacheLuceneSearchPhraseQuery alloc];
  OrgApacheLuceneSearchPhraseQuery_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchPhraseQuery)

@implementation OrgApacheLuceneSearchPhraseQuery_Builder

- (instancetype)init {
  OrgApacheLuceneSearchPhraseQuery_Builder_init(self);
  return self;
}

- (OrgApacheLuceneSearchPhraseQuery_Builder *)setSlopWithInt:(jint)slop {
  self->slop_ = slop;
  return self;
}

- (OrgApacheLuceneSearchPhraseQuery_Builder *)addWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                                      withInt:(jint)position {
  term = [new_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_([((OrgApacheLuceneIndexTerm *) nil_chk(term)) field], OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_([term bytes])) autorelease];
  if (position < 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Positions must be >= 0, got ", position)) autorelease];
  }
  if ([((id<JavaUtilList>) nil_chk(positions_)) isEmpty] == NO) {
    jint lastPosition = [((JavaLangInteger *) nil_chk([positions_ getWithInt:[positions_ size] - 1])) intValue];
    if (position < lastPosition) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Positions must be added in order, got ", position, @" after ", lastPosition)) autorelease];
    }
  }
  if ([((id<JavaUtilList>) nil_chk(terms_)) isEmpty] == NO && [((NSString *) nil_chk([term field])) isEqual:[((OrgApacheLuceneIndexTerm *) nil_chk([terms_ getWithInt:0])) field]] == NO) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"All terms must be on the same field, got ", [term field], @" and ", [((OrgApacheLuceneIndexTerm *) nil_chk([terms_ getWithInt:0])) field])) autorelease];
  }
  [terms_ addWithId:term];
  [positions_ addWithId:JavaLangInteger_valueOfWithInt_(position)];
  return self;
}

- (OrgApacheLuceneSearchPhraseQuery *)build {
  IOSObjectArray *terms = [self->terms_ toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(self->terms_)) size] type:OrgApacheLuceneIndexTerm_class_()]];
  IOSIntArray *positions = [IOSIntArray arrayWithLength:[((id<JavaUtilList>) nil_chk(self->positions_)) size]];
  for (jint i = 0; i < positions->size_; ++i) {
    *IOSIntArray_GetRef(positions, i) = [((JavaLangInteger *) nil_chk([self->positions_ getWithInt:i])) intValue];
  }
  return [new_OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(slop_, terms, positions) autorelease];
}

- (void)dealloc {
  RELEASE_(terms_);
  RELEASE_(positions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Builder", NULL, 0x1, NULL, NULL },
    { "setSlopWithInt:", "setSlop", "Lorg.apache.lucene.search.PhraseQuery$Builder;", 0x1, NULL, NULL },
    { "addWithOrgApacheLuceneIndexTerm:withInt:", "add", "Lorg.apache.lucene.search.PhraseQuery$Builder;", 0x1, NULL, NULL },
    { "build", NULL, "Lorg.apache.lucene.search.PhraseQuery;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "slop_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "terms_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/index/Term;>;", .constantValue.asLong = 0 },
    { "positions_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchPhraseQuery_Builder = { 2, "Builder", "org.apache.lucene.search", "PhraseQuery", 0x9, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchPhraseQuery_Builder;
}

@end

void OrgApacheLuceneSearchPhraseQuery_Builder_init(OrgApacheLuceneSearchPhraseQuery_Builder *self) {
  NSObject_init(self);
  self->slop_ = 0;
  JreStrongAssignAndConsume(&self->terms_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->positions_, new_JavaUtilArrayList_init());
}

OrgApacheLuceneSearchPhraseQuery_Builder *new_OrgApacheLuceneSearchPhraseQuery_Builder_init() {
  OrgApacheLuceneSearchPhraseQuery_Builder *self = [OrgApacheLuceneSearchPhraseQuery_Builder alloc];
  OrgApacheLuceneSearchPhraseQuery_Builder_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchPhraseQuery_Builder)

@implementation OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq

- (instancetype)initWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)postings
                                                 withInt:(jint)position
                       withOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms {
  OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(self, postings, position, terms);
  return self;
}

- (jint)compareToWithId:(OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *)other {
  check_class_cast(other, [OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq class]);
  if (position_ != ((OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *) nil_chk(other))->position_) {
    return position_ - other->position_;
  }
  if (nTerms_ != other->nTerms_) {
    return nTerms_ - other->nTerms_;
  }
  if (nTerms_ == 0) {
    return 0;
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(terms_))->size_; i++) {
    jint res = [((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms_, i))) compareToWithId:IOSObjectArray_Get(other->terms_, i)];
    if (res != 0) return res;
  }
  return 0;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + position_;
  for (jint i = 0; i < nTerms_; i++) {
    result = prime * result + ((jint) [((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(nil_chk(terms_), i))) hash]);
  }
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return YES;
  if (obj == nil) return NO;
  if ([self getClass] != [nil_chk(obj) getClass]) return NO;
  OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *other = (OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *) check_class_cast(obj, [OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq class]);
  if (position_ != other->position_) return NO;
  if (terms_ == nil) return other->terms_ == nil;
  return JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(terms_, other->terms_);
}

- (void)dealloc {
  RELEASE_(postings_);
  RELEASE_(terms_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexPostingsEnum:withInt:withOrgApacheLuceneIndexTermArray:", "PostingsAndFreq", NULL, 0x81, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "postings_", NULL, 0x10, "Lorg.apache.lucene.index.PostingsEnum;", NULL, NULL, .constantValue.asLong = 0 },
    { "position_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "terms_", NULL, 0x10, "[Lorg.apache.lucene.index.Term;", NULL, NULL, .constantValue.asLong = 0 },
    { "nTerms_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq = { 2, "PostingsAndFreq", "org.apache.lucene.search", "PhraseQuery", 0x8, 4, methods, 4, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/search/PhraseQuery$PostingsAndFreq;>;" };
  return &_OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq;
}

@end

void OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *self, OrgApacheLuceneIndexPostingsEnum *postings, jint position, IOSObjectArray *terms) {
  NSObject_init(self);
  JreStrongAssign(&self->postings_, postings);
  self->position_ = position;
  self->nTerms_ = terms == nil ? 0 : terms->size_;
  if (self->nTerms_ > 0) {
    if (((IOSObjectArray *) nil_chk(terms))->size_ == 1) {
      JreStrongAssign(&self->terms_, terms);
    }
    else {
      IOSObjectArray *terms2 = [IOSObjectArray arrayWithLength:terms->size_ type:OrgApacheLuceneIndexTerm_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(terms, 0, terms2, 0, terms->size_);
      JavaUtilArrays_sortWithNSObjectArray_(terms2);
      JreStrongAssign(&self->terms_, terms2);
    }
  }
  else {
    JreStrongAssign(&self->terms_, nil);
  }
}

OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *new_OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(OrgApacheLuceneIndexPostingsEnum *postings, jint position, IOSObjectArray *terms) {
  OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *self = [OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq alloc];
  OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(self, postings, position, terms);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq)

@implementation OrgApacheLuceneSearchPhraseQuery_PhraseWeight

- (instancetype)initWithOrgApacheLuceneSearchPhraseQuery:(OrgApacheLuceneSearchPhraseQuery *)outer$
                  withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                             withBoolean:(jboolean)needsScores {
  OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(self, outer$, searcher, needsScores);
  return self;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)queryTerms {
  JavaUtilCollections_addAllWithJavaUtilCollection_withNSObjectArray_(queryTerms, terms_);
}

- (NSString *)description {
  return JreStrcat("$@C", @"weight(", this$0_, ')');
}

- (jfloat)getValueForNormalization {
  return [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *) nil_chk(stats_)) getValueForNormalization];
}

- (void)normalizeWithFloat:(jfloat)queryNorm
                 withFloat:(jfloat)topLevelBoost {
  [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *) nil_chk(stats_)) normalizeWithFloat:queryNorm withFloat:topLevelBoost];
}

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  JreAssert((((IOSObjectArray *) nil_chk(terms_))->size_ > 0), (@"org/apache/lucene/search/PhraseQuery.java:413 condition failed: assert terms.length > 0;"));
  OrgApacheLuceneIndexLeafReader *reader = [((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader];
  IOSObjectArray *postingsFreqs = [IOSObjectArray arrayWithLength:terms_->size_ type:OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_class_()];
  OrgApacheLuceneIndexTerms *fieldTerms = [((OrgApacheLuceneIndexLeafReader *) nil_chk(reader)) termsWithNSString:this$0_->field_];
  if (fieldTerms == nil) {
    return nil;
  }
  if ([((OrgApacheLuceneIndexTerms *) nil_chk(fieldTerms)) hasPositions] == NO) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$@C", @"field \"", this$0_->field_, @"\" was indexed without position data; cannot run PhraseQuery (phrase=", [self getQuery], ')')) autorelease];
  }
  OrgApacheLuceneIndexTermsEnum *te = [fieldTerms iterator];
  for (jint i = 0; i < terms_->size_; i++) {
    OrgApacheLuceneIndexTerm *t = IOSObjectArray_Get(terms_, i);
    OrgApacheLuceneIndexTermState *state = [((OrgApacheLuceneIndexTermContext *) nil_chk(IOSObjectArray_Get(nil_chk(states_), i))) getWithInt:context->ord_];
    if (state == nil) {
      JreAssert((OrgApacheLuceneSearchPhraseQuery_PhraseWeight_termNotInReaderWithOrgApacheLuceneIndexLeafReader_withOrgApacheLuceneIndexTerm_(self, reader, t)), (@"no termstate found but term exists in reader"));
      return nil;
    }
    [((OrgApacheLuceneIndexTermsEnum *) nil_chk(te)) seekExactWithOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneIndexTerm *) nil_chk(t)) bytes] withOrgApacheLuceneIndexTermState:state];
    OrgApacheLuceneIndexPostingsEnum *postingsEnum = [te postingsWithOrgApacheLuceneIndexPostingsEnum:nil withInt:OrgApacheLuceneIndexPostingsEnum_POSITIONS];
    IOSObjectArray_SetAndConsume(postingsFreqs, i, new_OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(postingsEnum, IOSIntArray_Get(nil_chk(positions_), i), [IOSObjectArray arrayWithObjects:(id[]){ t } count:1 type:OrgApacheLuceneIndexTerm_class_()]));
  }
  if (this$0_->slop_ == 0) {
    OrgApacheLuceneUtilArrayUtil_timSortWithJavaLangComparableArray_(postingsFreqs);
  }
  if (this$0_->slop_ == 0) {
    return [new_OrgApacheLuceneSearchExactPhraseScorer_initWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_withBoolean_(self, postingsFreqs, [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(similarity_)) simScorerWithOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight:stats_ withOrgApacheLuceneIndexLeafReaderContext:context], needsScores_) autorelease];
  }
  else {
    return [new_OrgApacheLuceneSearchSloppyPhraseScorer_initWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withInt_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_withBoolean_(self, postingsFreqs, this$0_->slop_, [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(similarity_)) simScorerWithOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight:stats_ withOrgApacheLuceneIndexLeafReaderContext:context], needsScores_) autorelease];
  }
}

- (jboolean)termNotInReaderWithOrgApacheLuceneIndexLeafReader:(OrgApacheLuceneIndexLeafReader *)reader
                                 withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  return OrgApacheLuceneSearchPhraseQuery_PhraseWeight_termNotInReaderWithOrgApacheLuceneIndexLeafReader_withOrgApacheLuceneIndexTerm_(self, reader, term);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(similarity_);
  RELEASE_(stats_);
  RELEASE_(states_);
  RELEASE_(terms_);
  RELEASE_(positions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneSearchPhraseQuery:withOrgApacheLuceneSearchIndexSearcher:withBoolean:", "PhraseWeight", NULL, 0x1, NULL, NULL },
    { "extractTermsWithJavaUtilSet:", "extractTerms", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getValueForNormalization", NULL, "F", 0x1, NULL, NULL },
    { "normalizeWithFloat:withFloat:", "normalize", "V", 0x1, NULL, NULL },
    { "scorerWithOrgApacheLuceneIndexLeafReaderContext:", "scorer", "Lorg.apache.lucene.search.Scorer;", 0x1, "Ljava.io.IOException;", NULL },
    { "termNotInReaderWithOrgApacheLuceneIndexLeafReader:withOrgApacheLuceneIndexTerm:", "termNotInReader", "Z", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.search.PhraseQuery;", NULL, NULL, .constantValue.asLong = 0 },
    { "similarity_", NULL, 0x12, "Lorg.apache.lucene.search.similarities.Similarity;", NULL, NULL, .constantValue.asLong = 0 },
    { "stats_", NULL, 0x12, "Lorg.apache.lucene.search.similarities.Similarity$SimWeight;", NULL, NULL, .constantValue.asLong = 0 },
    { "needsScores_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "states_", NULL, 0x82, "[Lorg.apache.lucene.index.TermContext;", NULL, NULL, .constantValue.asLong = 0 },
    { "terms_", NULL, 0x12, "[Lorg.apache.lucene.index.Term;", NULL, NULL, .constantValue.asLong = 0 },
    { "positions_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchPhraseQuery_PhraseWeight = { 2, "PhraseWeight", "org.apache.lucene.search", "PhraseQuery", 0x2, 7, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchPhraseQuery_PhraseWeight;
}

@end

void OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchPhraseQuery_PhraseWeight *self, OrgApacheLuceneSearchPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchWeight_initWithOrgApacheLuceneSearchQuery_(self, outer$);
  JreStrongAssign(&self->terms_, [outer$ getTerms]);
  JreStrongAssign(&self->positions_, [outer$ getPositions]);
  IOSIntArray *positions = [outer$ getPositions];
  if (((IOSIntArray *) nil_chk(positions))->size_ < 2) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"PhraseWeight does not support less than 2 terms, call rewrite first") autorelease];
  }
  else if (IOSIntArray_Get(positions, 0) != 0) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"PhraseWeight requires that the first position is 0, call rewrite first") autorelease];
  }
  self->needsScores_ = needsScores;
  JreStrongAssign(&self->similarity_, [((OrgApacheLuceneSearchIndexSearcher *) nil_chk(searcher)) getSimilarityWithBoolean:needsScores]);
  OrgApacheLuceneIndexIndexReaderContext *context = [searcher getTopReaderContext];
  JreStrongAssignAndConsume(&self->states_, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->terms_))->size_ type:OrgApacheLuceneIndexTermContext_class_()]);
  IOSObjectArray *termStats = [IOSObjectArray arrayWithLength:self->terms_->size_ type:OrgApacheLuceneSearchTermStatistics_class_()];
  for (jint i = 0; i < self->terms_->size_; i++) {
    OrgApacheLuceneIndexTerm *term = IOSObjectArray_Get(self->terms_, i);
    IOSObjectArray_Set(self->states_, i, OrgApacheLuceneIndexTermContext_buildWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTerm_(context, term));
    IOSObjectArray_Set(termStats, i, [searcher termStatisticsWithOrgApacheLuceneIndexTerm:term withOrgApacheLuceneIndexTermContext:IOSObjectArray_Get(self->states_, i)]);
  }
  JreStrongAssign(&self->stats_, [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(self->similarity_)) computeWeightWithFloat:[outer$ getBoost] withOrgApacheLuceneSearchCollectionStatistics:[searcher collectionStatisticsWithNSString:outer$->field_] withOrgApacheLuceneSearchTermStatisticsArray:termStats]);
}

OrgApacheLuceneSearchPhraseQuery_PhraseWeight *new_OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores) {
  OrgApacheLuceneSearchPhraseQuery_PhraseWeight *self = [OrgApacheLuceneSearchPhraseQuery_PhraseWeight alloc];
  OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(self, outer$, searcher, needsScores);
  return self;
}

jboolean OrgApacheLuceneSearchPhraseQuery_PhraseWeight_termNotInReaderWithOrgApacheLuceneIndexLeafReader_withOrgApacheLuceneIndexTerm_(OrgApacheLuceneSearchPhraseQuery_PhraseWeight *self, OrgApacheLuceneIndexLeafReader *reader, OrgApacheLuceneIndexTerm *term) {
  return [((OrgApacheLuceneIndexLeafReader *) nil_chk(reader)) docFreqWithOrgApacheLuceneIndexTerm:term] == 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchPhraseQuery_PhraseWeight)
