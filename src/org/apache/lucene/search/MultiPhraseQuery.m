//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Objects.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/ExactPhraseScorer.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/MatchNoDocsQuery.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/SloppyPhraseScorer.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/PriorityQueue.h"
#include "org/apache/lucene/util/ToStringUtils.h"

@interface OrgApacheLuceneSearchMultiPhraseQuery () {
 @public
  NSString *field_;
  JavaUtilArrayList *termArrays_;
  JavaUtilArrayList *positions_;
  jint slop_;
}

- (jint)termArraysHashCode;

- (jboolean)termArraysEqualsWithJavaUtilList:(id<JavaUtilList>)termArrays1
                            withJavaUtilList:(id<JavaUtilList>)termArrays2;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery, termArrays_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery, positions_, JavaUtilArrayList *)

__attribute__((unused)) static jint OrgApacheLuceneSearchMultiPhraseQuery_termArraysHashCode(OrgApacheLuceneSearchMultiPhraseQuery *self);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchMultiPhraseQuery_termArraysEqualsWithJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchMultiPhraseQuery *self, id<JavaUtilList> termArrays1, id<JavaUtilList> termArrays2);

@interface OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight : OrgApacheLuceneSearchWeight {
 @public
  OrgApacheLuceneSearchMultiPhraseQuery *this$0_;
  OrgApacheLuceneSearchSimilaritiesSimilarity *similarity_;
  OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *stats_;
  id<JavaUtilMap> termContexts_;
  jboolean needsScores_;
}

- (instancetype)initWithOrgApacheLuceneSearchMultiPhraseQuery:(OrgApacheLuceneSearchMultiPhraseQuery *)outer$
                       withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                  withBoolean:(jboolean)needsScores;

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms;

- (jfloat)getValueForNormalization;

- (void)normalizeWithFloat:(jfloat)queryNorm
                 withFloat:(jfloat)topLevelBoost;

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

- (OrgApacheLuceneSearchExplanation *)explainWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                                               withInt:(jint)doc;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight, this$0_, OrgApacheLuceneSearchMultiPhraseQuery *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight, similarity_, OrgApacheLuceneSearchSimilaritiesSimilarity *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight, stats_, OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight, termContexts_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *self, OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores);

__attribute__((unused)) static OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *new_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight)

@interface OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue () {
 @public
  jint arraySize_;
  jint index_;
  jint size_;
  IOSIntArray *array_;
}

- (void)growArray;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue, array_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_growArray(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *self);

@implementation OrgApacheLuceneSearchMultiPhraseQuery

- (void)setSlopWithInt:(jint)s {
  if (s < 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"slop value cannot be negative") autorelease];
  }
  slop_ = s;
}

- (jint)getSlop {
  return slop_;
}

- (void)addWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  [self addWithOrgApacheLuceneIndexTermArray:[IOSObjectArray arrayWithObjects:(id[]){ term } count:1 type:OrgApacheLuceneIndexTerm_class_()]];
}

- (void)addWithOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms {
  jint position = 0;
  if ([((JavaUtilArrayList *) nil_chk(positions_)) size] > 0) position = [((JavaLangInteger *) nil_chk([positions_ getWithInt:[positions_ size] - 1])) intValue] + 1;
  [self addWithOrgApacheLuceneIndexTermArray:terms withInt:position];
}

- (void)addWithOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms
                                     withInt:(jint)position {
  JavaUtilObjects_requireNonNullWithId_withNSString_(terms, @"Term array must not be null");
  if ([((JavaUtilArrayList *) nil_chk(termArrays_)) size] == 0) JreStrongAssign(&field_, [((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(nil_chk(terms), 0))) field]);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(terms))->size_; i++) {
    if (![((NSString *) nil_chk([((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, i))) field])) isEqual:field_]) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$@", @"All phrase terms must be in the same field (", field_, @"): ", IOSObjectArray_Get(terms, i))) autorelease];
    }
  }
  [termArrays_ addWithId:terms];
  [((JavaUtilArrayList *) nil_chk(positions_)) addWithId:JavaLangInteger_valueOfWithInt_(position)];
}

- (id<JavaUtilList>)getTermArrays {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(termArrays_);
}

- (IOSIntArray *)getPositions {
  IOSIntArray *result = [IOSIntArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(positions_)) size]];
  for (jint i = 0; i < [positions_ size]; i++) *IOSIntArray_GetRef(result, i) = [((JavaLangInteger *) nil_chk([positions_ getWithInt:i])) intValue];
  return result;
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  if ([((JavaUtilArrayList *) nil_chk(termArrays_)) isEmpty]) {
    OrgApacheLuceneSearchMatchNoDocsQuery *rewritten = [new_OrgApacheLuceneSearchMatchNoDocsQuery_init() autorelease];
    [rewritten setBoostWithFloat:[self getBoost]];
    return rewritten;
  }
  else if ([termArrays_ size] == 1) {
    IOSObjectArray *terms = [termArrays_ getWithInt:0];
    OrgApacheLuceneSearchBooleanQuery_Builder *builder = [new_OrgApacheLuceneSearchBooleanQuery_Builder_init() autorelease];
    [builder setDisableCoordWithBoolean:true];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(terms))->size_; i++) {
      [builder addWithOrgApacheLuceneSearchQuery:[new_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_(IOSObjectArray_Get(terms, i)) autorelease] withOrgApacheLuceneSearchBooleanClause_OccurEnum:JreLoadStatic(OrgApacheLuceneSearchBooleanClause_OccurEnum, SHOULD)];
    }
    OrgApacheLuceneSearchBooleanQuery *boq = [builder build];
    [((OrgApacheLuceneSearchBooleanQuery *) nil_chk(boq)) setBoostWithFloat:[self getBoost]];
    return boq;
  }
  else {
    return self;
  }
}

- (OrgApacheLuceneSearchWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                        withBoolean:(jboolean)needsScores {
  return [new_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(self, searcher, needsScores) autorelease];
}

- (NSString *)toStringWithNSString:(NSString *)f {
  JavaLangStringBuilder *buffer = [new_JavaLangStringBuilder_init() autorelease];
  if (field_ == nil || ![field_ isEqual:f]) {
    [buffer appendWithNSString:field_];
    [buffer appendWithNSString:@":"];
  }
  [buffer appendWithNSString:@"\""];
  jint k = 0;
  id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(termArrays_)) iterator];
  jint lastPos = -1;
  jboolean first = true;
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    IOSObjectArray *terms = [i next];
    jint position = [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(positions_)) getWithInt:k])) intValue];
    if (first) {
      first = false;
    }
    else {
      [buffer appendWithNSString:@" "];
      for (jint j = 1; j < (position - lastPos); j++) {
        [buffer appendWithNSString:@"? "];
      }
    }
    if (((IOSObjectArray *) nil_chk(terms))->size_ > 1) {
      [buffer appendWithNSString:@"("];
      for (jint j = 0; j < terms->size_; j++) {
        [buffer appendWithNSString:[((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, j))) text]];
        if (j < terms->size_ - 1) [buffer appendWithNSString:@" "];
      }
      [buffer appendWithNSString:@")"];
    }
    else {
      [buffer appendWithNSString:[((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, 0))) text]];
    }
    lastPos = position;
    ++k;
  }
  [buffer appendWithNSString:@"\""];
  if (slop_ != 0) {
    [buffer appendWithNSString:@"~"];
    [buffer appendWithInt:slop_];
  }
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[OrgApacheLuceneSearchMultiPhraseQuery class]])) return false;
  OrgApacheLuceneSearchMultiPhraseQuery *other = (OrgApacheLuceneSearchMultiPhraseQuery *) check_class_cast(o, [OrgApacheLuceneSearchMultiPhraseQuery class]);
  return [super isEqual:o] && self->slop_ == ((OrgApacheLuceneSearchMultiPhraseQuery *) nil_chk(other))->slop_ && OrgApacheLuceneSearchMultiPhraseQuery_termArraysEqualsWithJavaUtilList_withJavaUtilList_(self, self->termArrays_, other->termArrays_) && [((JavaUtilArrayList *) nil_chk(self->positions_)) isEqual:other->positions_];
}

- (NSUInteger)hash {
  return ((jint) [super hash]) ^ slop_ ^ OrgApacheLuceneSearchMultiPhraseQuery_termArraysHashCode(self) ^ ((jint) [((JavaUtilArrayList *) nil_chk(positions_)) hash]);
}

- (jint)termArraysHashCode {
  return OrgApacheLuceneSearchMultiPhraseQuery_termArraysHashCode(self);
}

- (jboolean)termArraysEqualsWithJavaUtilList:(id<JavaUtilList>)termArrays1
                            withJavaUtilList:(id<JavaUtilList>)termArrays2 {
  return OrgApacheLuceneSearchMultiPhraseQuery_termArraysEqualsWithJavaUtilList_withJavaUtilList_(self, termArrays1, termArrays2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchMultiPhraseQuery_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(termArrays_);
  RELEASE_(positions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setSlopWithInt:", "setSlop", "V", 0x1, NULL, NULL },
    { "getSlop", NULL, "I", 0x1, NULL, NULL },
    { "addWithOrgApacheLuceneIndexTerm:", "add", "V", 0x1, NULL, NULL },
    { "addWithOrgApacheLuceneIndexTermArray:", "add", "V", 0x1, NULL, NULL },
    { "addWithOrgApacheLuceneIndexTermArray:withInt:", "add", "V", 0x1, NULL, NULL },
    { "getTermArrays", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "getPositions", NULL, "[I", 0x1, NULL, NULL },
    { "rewriteWithOrgApacheLuceneIndexIndexReader:", "rewrite", "Lorg.apache.lucene.search.Query;", 0x1, NULL, NULL },
    { "createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:", "createWeight", "Lorg.apache.lucene.search.Weight;", 0x1, "Ljava.io.IOException;", NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "termArraysHashCode", NULL, "I", 0x2, NULL, NULL },
    { "termArraysEqualsWithJavaUtilList:withJavaUtilList:", "termArraysEquals", "Z", 0x2, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "field_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "termArrays_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<L[Lorg/apache/lucene/index/Term;;>;", .constantValue.asLong = 0 },
    { "positions_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
    { "slop_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight;", "Lorg.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum;"};
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiPhraseQuery = { 2, "MultiPhraseQuery", "org.apache.lucene.search", NULL, 0x1, 15, methods, 4, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneSearchMultiPhraseQuery;
}

@end

jint OrgApacheLuceneSearchMultiPhraseQuery_termArraysHashCode(OrgApacheLuceneSearchMultiPhraseQuery *self) {
  jint hashCode = 1;
  for (IOSObjectArray * __strong termArray in nil_chk(self->termArrays_)) {
    hashCode = 31 * hashCode + (termArray == nil ? 0 : JavaUtilArrays_hashCodeWithNSObjectArray_(termArray));
  }
  return hashCode;
}

jboolean OrgApacheLuceneSearchMultiPhraseQuery_termArraysEqualsWithJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchMultiPhraseQuery *self, id<JavaUtilList> termArrays1, id<JavaUtilList> termArrays2) {
  if ([((id<JavaUtilList>) nil_chk(termArrays1)) size] != [((id<JavaUtilList>) nil_chk(termArrays2)) size]) {
    return false;
  }
  id<JavaUtilListIterator> iterator1 = [termArrays1 listIterator];
  id<JavaUtilListIterator> iterator2 = [termArrays2 listIterator];
  while ([((id<JavaUtilListIterator>) nil_chk(iterator1)) hasNext]) {
    IOSObjectArray *termArray1 = [iterator1 next];
    IOSObjectArray *termArray2 = [((id<JavaUtilListIterator>) nil_chk(iterator2)) next];
    if (!(termArray1 == nil ? termArray2 == nil : JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(termArray1, termArray2))) {
      return false;
    }
  }
  return true;
}

void OrgApacheLuceneSearchMultiPhraseQuery_init(OrgApacheLuceneSearchMultiPhraseQuery *self) {
  OrgApacheLuceneSearchQuery_init(self);
  JreStrongAssignAndConsume(&self->termArrays_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->positions_, new_JavaUtilArrayList_init());
  self->slop_ = 0;
}

OrgApacheLuceneSearchMultiPhraseQuery *new_OrgApacheLuceneSearchMultiPhraseQuery_init() {
  OrgApacheLuceneSearchMultiPhraseQuery *self = [OrgApacheLuceneSearchMultiPhraseQuery alloc];
  OrgApacheLuceneSearchMultiPhraseQuery_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiPhraseQuery)

@implementation OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight

- (instancetype)initWithOrgApacheLuceneSearchMultiPhraseQuery:(OrgApacheLuceneSearchMultiPhraseQuery *)outer$
                       withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                  withBoolean:(jboolean)needsScores {
  OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(self, outer$, searcher, needsScores);
  return self;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  for (IOSObjectArray * __strong arr in nil_chk(this$0_->termArrays_)) {
    {
      IOSObjectArray *a__ = arr;
      OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexTerm *term = *b__++;
        [((id<JavaUtilSet>) nil_chk(terms)) addWithId:term];
      }
    }
  }
}

- (jfloat)getValueForNormalization {
  return [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *) nil_chk(stats_)) getValueForNormalization];
}

- (void)normalizeWithFloat:(jfloat)queryNorm
                 withFloat:(jfloat)topLevelBoost {
  [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *) nil_chk(stats_)) normalizeWithFloat:queryNorm withFloat:topLevelBoost];
}

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  JreAssert((![((JavaUtilArrayList *) nil_chk(this$0_->termArrays_)) isEmpty]), (@"org/apache/lucene/search/MultiPhraseQuery.java:176 condition failed: assert !termArrays.isEmpty();"));
  OrgApacheLuceneIndexLeafReader *reader = [((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader];
  IOSObjectArray *postingsFreqs = [IOSObjectArray arrayWithLength:[this$0_->termArrays_ size] type:OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_class_()];
  OrgApacheLuceneIndexTerms *fieldTerms = [((OrgApacheLuceneIndexLeafReader *) nil_chk(reader)) termsWithNSString:this$0_->field_];
  if (fieldTerms == nil) {
    return nil;
  }
  if ([((OrgApacheLuceneIndexTerms *) nil_chk(fieldTerms)) hasPositions] == false) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$@C", @"field \"", this$0_->field_, @"\" was indexed without position data; cannot run MultiPhraseQuery (phrase=", [self getQuery], ')')) autorelease];
  }
  OrgApacheLuceneIndexTermsEnum *termsEnum = [fieldTerms iterator];
  for (jint pos = 0; pos < postingsFreqs->size_; pos++) {
    IOSObjectArray *terms = [this$0_->termArrays_ getWithInt:pos];
    id<JavaUtilList> postings = [new_JavaUtilArrayList_init() autorelease];
    {
      IOSObjectArray *a__ = terms;
      OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexTerm *term = *b__++;
        OrgApacheLuceneIndexTermState *termState = [((OrgApacheLuceneIndexTermContext *) nil_chk([((id<JavaUtilMap>) nil_chk(termContexts_)) getWithId:term])) getWithInt:context->ord_];
        if (termState != nil) {
          [((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) seekExactWithOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneIndexTerm *) nil_chk(term)) bytes] withOrgApacheLuceneIndexTermState:termState];
          [postings addWithId:[termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:nil withInt:OrgApacheLuceneIndexPostingsEnum_POSITIONS]];
        }
      }
    }
    if ([postings isEmpty]) {
      return nil;
    }
    OrgApacheLuceneIndexPostingsEnum *postingsEnum;
    if ([postings size] == 1) {
      postingsEnum = [postings getWithInt:0];
    }
    else {
      postingsEnum = [new_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_initWithJavaUtilCollection_(postings) autorelease];
    }
    IOSObjectArray_SetAndConsume(postingsFreqs, pos, new_OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(postingsEnum, [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(this$0_->positions_)) getWithInt:pos])) intValue], terms));
  }
  if (this$0_->slop_ == 0) {
    OrgApacheLuceneUtilArrayUtil_timSortWithJavaLangComparableArray_(postingsFreqs);
  }
  if (this$0_->slop_ == 0) {
    return [new_OrgApacheLuceneSearchExactPhraseScorer_initWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_withBoolean_(self, postingsFreqs, [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(similarity_)) simScorerWithOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight:stats_ withOrgApacheLuceneIndexLeafReaderContext:context], needsScores_) autorelease];
  }
  else {
    return [new_OrgApacheLuceneSearchSloppyPhraseScorer_initWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withInt_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_withBoolean_(self, postingsFreqs, this$0_->slop_, [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(similarity_)) simScorerWithOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight:stats_ withOrgApacheLuceneIndexLeafReaderContext:context], needsScores_) autorelease];
  }
}

- (OrgApacheLuceneSearchExplanation *)explainWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                                               withInt:(jint)doc {
  OrgApacheLuceneSearchScorer *scorer = [self scorerWithOrgApacheLuceneIndexLeafReaderContext:context];
  if (scorer != nil) {
    jint newDoc = [scorer advanceWithInt:doc];
    if (newDoc == doc) {
      jfloat freq = this$0_->slop_ == 0 ? [scorer freq] : [((OrgApacheLuceneSearchSloppyPhraseScorer *) check_class_cast(scorer, [OrgApacheLuceneSearchSloppyPhraseScorer class])) sloppyFreq];
      OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *docScorer = [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(similarity_)) simScorerWithOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight:stats_ withOrgApacheLuceneIndexLeafReaderContext:context];
      OrgApacheLuceneSearchExplanation *freqExplanation = OrgApacheLuceneSearchExplanation_matchWithFloat_withNSString_withOrgApacheLuceneSearchExplanationArray_(freq, JreStrcat("$F", @"phraseFreq=", freq), [IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchExplanation_class_()]);
      OrgApacheLuceneSearchExplanation *scoreExplanation = [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *) nil_chk(docScorer)) explainWithInt:doc withOrgApacheLuceneSearchExplanation:freqExplanation];
      return OrgApacheLuceneSearchExplanation_matchWithFloat_withNSString_withOrgApacheLuceneSearchExplanationArray_([((OrgApacheLuceneSearchExplanation *) nil_chk(scoreExplanation)) getValue], JreStrcat("$@$I$$$", @"weight(", [self getQuery], @" in ", doc, @") [", [[similarity_ getClass] getSimpleName], @"], result of:"), [IOSObjectArray arrayWithObjects:(id[]){ scoreExplanation } count:1 type:OrgApacheLuceneSearchExplanation_class_()]);
    }
  }
  return OrgApacheLuceneSearchExplanation_noMatchWithNSString_withOrgApacheLuceneSearchExplanationArray_(@"no matching term", [IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchExplanation_class_()]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(similarity_);
  RELEASE_(stats_);
  RELEASE_(termContexts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneSearchMultiPhraseQuery:withOrgApacheLuceneSearchIndexSearcher:withBoolean:", "MultiPhraseWeight", NULL, 0x1, NULL, NULL },
    { "extractTermsWithJavaUtilSet:", "extractTerms", "V", 0x1, NULL, NULL },
    { "getValueForNormalization", NULL, "F", 0x1, NULL, NULL },
    { "normalizeWithFloat:withFloat:", "normalize", "V", 0x1, NULL, NULL },
    { "scorerWithOrgApacheLuceneIndexLeafReaderContext:", "scorer", "Lorg.apache.lucene.search.Scorer;", 0x1, "Ljava.io.IOException;", NULL },
    { "explainWithOrgApacheLuceneIndexLeafReaderContext:withInt:", "explain", "Lorg.apache.lucene.search.Explanation;", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.search.MultiPhraseQuery;", NULL, NULL, .constantValue.asLong = 0 },
    { "similarity_", NULL, 0x12, "Lorg.apache.lucene.search.similarities.Similarity;", NULL, NULL, .constantValue.asLong = 0 },
    { "stats_", NULL, 0x12, "Lorg.apache.lucene.search.similarities.Similarity$SimWeight;", NULL, NULL, .constantValue.asLong = 0 },
    { "termContexts_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;>;", .constantValue.asLong = 0 },
    { "needsScores_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight = { 2, "MultiPhraseWeight", "org.apache.lucene.search", "MultiPhraseQuery", 0x2, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight;
}

@end

void OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *self, OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchWeight_initWithOrgApacheLuceneSearchQuery_(self, outer$);
  JreStrongAssignAndConsume(&self->termContexts_, new_JavaUtilHashMap_init());
  self->needsScores_ = needsScores;
  JreStrongAssign(&self->similarity_, [((OrgApacheLuceneSearchIndexSearcher *) nil_chk(searcher)) getSimilarityWithBoolean:needsScores]);
  OrgApacheLuceneIndexIndexReaderContext *context = [searcher getTopReaderContext];
  JavaUtilArrayList *allTermStats = [new_JavaUtilArrayList_init() autorelease];
  for (IOSObjectArray * __strong terms in nil_chk(outer$->termArrays_)) {
    {
      IOSObjectArray *a__ = terms;
      OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexTerm *term = *b__++;
        OrgApacheLuceneIndexTermContext *termContext = [self->termContexts_ getWithId:term];
        if (termContext == nil) {
          termContext = OrgApacheLuceneIndexTermContext_buildWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTerm_(context, term);
          [self->termContexts_ putWithId:term withId:termContext];
        }
        [allTermStats addWithId:[searcher termStatisticsWithOrgApacheLuceneIndexTerm:term withOrgApacheLuceneIndexTermContext:termContext]];
      }
    }
  }
  JreStrongAssign(&self->stats_, [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(self->similarity_)) computeWeightWithFloat:[outer$ getBoost] withOrgApacheLuceneSearchCollectionStatistics:[searcher collectionStatisticsWithNSString:outer$->field_] withOrgApacheLuceneSearchTermStatisticsArray:[allTermStats toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[allTermStats size] type:OrgApacheLuceneSearchTermStatistics_class_()]]]);
}

OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *new_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores) {
  OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *self = [OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight alloc];
  OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(self, outer$, searcher, needsScores);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight)

@implementation OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)subs {
  OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_initWithJavaUtilCollection_(self, subs);
  return self;
}

- (jint)freq {
  jint doc = [self docID];
  if (doc != posQueueDoc_) {
    [((OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *) nil_chk(posQueue_)) clear];
    {
      IOSObjectArray *a__ = subs_;
      OrgApacheLuceneIndexPostingsEnum * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneIndexPostingsEnum * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexPostingsEnum *sub = *b__++;
        if ([((OrgApacheLuceneIndexPostingsEnum *) nil_chk(sub)) docID] == doc) {
          jint freq = [sub freq];
          for (jint i = 0; i < freq; i++) {
            [posQueue_ addWithInt:[sub nextPosition]];
          }
        }
      }
    }
    [posQueue_ sort];
    posQueueDoc_ = doc;
  }
  return [((OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *) nil_chk(posQueue_)) size];
}

- (jint)nextPosition {
  return [((OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *) nil_chk(posQueue_)) next];
}

- (jint)docID {
  return [((OrgApacheLuceneIndexPostingsEnum *) nil_chk([((OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue *) nil_chk(docsQueue_)) top])) docID];
}

- (jint)nextDoc {
  OrgApacheLuceneIndexPostingsEnum *top = [((OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue *) nil_chk(docsQueue_)) top];
  jint doc = [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(top)) docID];
  do {
    [top nextDoc];
    top = [docsQueue_ updateTop];
  }
  while ([((OrgApacheLuceneIndexPostingsEnum *) nil_chk(top)) docID] == doc);
  return [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(top)) docID];
}

- (jint)advanceWithInt:(jint)target {
  OrgApacheLuceneIndexPostingsEnum *top = [((OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue *) nil_chk(docsQueue_)) top];
  do {
    [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(top)) advanceWithInt:target];
    top = [docsQueue_ updateTop];
  }
  while ([((OrgApacheLuceneIndexPostingsEnum *) nil_chk(top)) docID] < target);
  return [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(top)) docID];
}

- (jlong)cost {
  return cost_;
}

- (jint)startOffset {
  return -1;
}

- (jint)endOffset {
  return -1;
}

- (OrgApacheLuceneUtilBytesRef *)getPayload {
  return nil;
}

- (void)dealloc {
  RELEASE_(docsQueue_);
  RELEASE_(posQueue_);
  RELEASE_(subs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilCollection:", "UnionPostingsEnum", NULL, 0x0, NULL, NULL },
    { "freq", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "nextPosition", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "docID", NULL, "I", 0x1, NULL, NULL },
    { "nextDoc", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "advanceWithInt:", "advance", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "cost", NULL, "J", 0x1, NULL, NULL },
    { "startOffset", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "endOffset", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "getPayload", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "docsQueue_", NULL, 0x10, "Lorg.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum$DocsQueue;", NULL, NULL, .constantValue.asLong = 0 },
    { "cost_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "posQueue_", NULL, 0x10, "Lorg.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum$PositionsQueue;", NULL, NULL, .constantValue.asLong = 0 },
    { "posQueueDoc_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "subs_", NULL, 0x10, "[Lorg.apache.lucene.index.PostingsEnum;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum$DocsQueue;", "Lorg.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum$PositionsQueue;"};
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum = { 2, "UnionPostingsEnum", "org.apache.lucene.search", "MultiPhraseQuery", 0x8, 10, methods, 5, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum;
}

@end

void OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_initWithJavaUtilCollection_(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum *self, id<JavaUtilCollection> subs) {
  OrgApacheLuceneIndexPostingsEnum_init(self);
  JreStrongAssignAndConsume(&self->posQueue_, new_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_init());
  self->posQueueDoc_ = -2;
  JreStrongAssignAndConsume(&self->docsQueue_, new_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue_initWithInt_([((id<JavaUtilCollection>) nil_chk(subs)) size]));
  jlong cost = 0;
  for (OrgApacheLuceneIndexPostingsEnum * __strong sub in subs) {
    [self->docsQueue_ addWithId:sub];
    cost += [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(sub)) cost];
  }
  self->cost_ = cost;
  JreStrongAssign(&self->subs_, [subs toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[subs size] type:OrgApacheLuceneIndexPostingsEnum_class_()]]);
}

OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum *new_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_initWithJavaUtilCollection_(id<JavaUtilCollection> subs) {
  OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum *self = [OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum alloc];
  OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_initWithJavaUtilCollection_(self, subs);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum)

@implementation OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue

- (instancetype)initWithInt:(jint)size {
  OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue_initWithInt_(self, size);
  return self;
}

- (jboolean)lessThanWithId:(OrgApacheLuceneIndexPostingsEnum *)a
                    withId:(OrgApacheLuceneIndexPostingsEnum *)b {
  return [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(a)) docID] < [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(b)) docID];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "DocsQueue", NULL, 0x0, NULL, NULL },
    { "lessThanWithId:withId:", "lessThan", "Z", 0x11, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lorg.apache.lucene.index.PostingsEnum;"};
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue = { 2, "DocsQueue", "org.apache.lucene.search", "MultiPhraseQuery$UnionPostingsEnum", 0x8, 2, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/index/PostingsEnum;>;" };
  return &_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue;
}

@end

void OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue_initWithInt_(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue *self, jint size) {
  OrgApacheLuceneUtilPriorityQueue_initWithInt_(self, size);
}

OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue *new_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue_initWithInt_(jint size) {
  OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue *self = [OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue alloc];
  OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue_initWithInt_(self, size);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue)

@implementation OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue

- (void)addWithInt:(jint)i {
  if (size_ == arraySize_) OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_growArray(self);
  *IOSIntArray_GetRef(nil_chk(array_), size_++) = i;
}

- (jint)next {
  return IOSIntArray_Get(nil_chk(array_), index_++);
}

- (void)sort {
  JavaUtilArrays_sortWithIntArray_withInt_withInt_(array_, index_, size_);
}

- (void)clear {
  index_ = 0;
  size_ = 0;
}

- (jint)size {
  return size_;
}

- (void)growArray {
  OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_growArray(self);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(array_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addWithInt:", "add", "V", 0x0, NULL, NULL },
    { "next", NULL, "I", 0x0, NULL, NULL },
    { "sort", NULL, "V", 0x0, NULL, NULL },
    { "clear", NULL, "V", 0x0, NULL, NULL },
    { "size", NULL, "I", 0x0, NULL, NULL },
    { "growArray", NULL, "V", 0x2, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "arraySize_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "index_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "size_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "array_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue = { 2, "PositionsQueue", "org.apache.lucene.search", "MultiPhraseQuery$UnionPostingsEnum", 0x8, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue;
}

@end

void OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_growArray(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *self) {
  IOSIntArray *newArray = [IOSIntArray arrayWithLength:self->arraySize_ * 2];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->array_, 0, newArray, 0, self->arraySize_);
  JreStrongAssign(&self->array_, newArray);
  self->arraySize_ *= 2;
}

void OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_init(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *self) {
  NSObject_init(self);
  self->arraySize_ = 16;
  self->index_ = 0;
  self->size_ = 0;
  JreStrongAssignAndConsume(&self->array_, [IOSIntArray newArrayWithLength:self->arraySize_]);
}

OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *new_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_init() {
  OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *self = [OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue alloc];
  OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue)
