//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/ConjunctionDISI.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/ConjunctionDISI.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/util/CollectionUtil.h"

@interface OrgApacheLuceneSearchConjunctionDISI ()

/*!
 @brief Adds the iterator, possibly splitting up into two phases or collapsing if it is another conjunction
 */
+ (void)addIteratorWithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)disi
                                            withJavaUtilList:(id<JavaUtilList>)allIterators
                                            withJavaUtilList:(id<JavaUtilList>)twoPhaseIterators;

- (jint)doNextWithInt:(jint)doc;

@end

__attribute__((unused)) static void OrgApacheLuceneSearchConjunctionDISI_addIteratorWithOrgApacheLuceneSearchDocIdSetIterator_withJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchDocIdSetIterator *disi, id<JavaUtilList> allIterators, id<JavaUtilList> twoPhaseIterators);

__attribute__((unused)) static jint OrgApacheLuceneSearchConjunctionDISI_doNextWithInt_(OrgApacheLuceneSearchConjunctionDISI *self, jint doc);

/*!
 @brief <code>TwoPhaseIterator</code> view of a <code>TwoPhase</code> conjunction.
 */
@interface OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI : OrgApacheLuceneSearchTwoPhaseIterator {
 @public
  IOSObjectArray *twoPhaseIterators_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)iterators
                    withJavaUtilList:(id<JavaUtilList>)twoPhaseIterators;

- (jboolean)matches;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI, twoPhaseIterators_, IOSObjectArray *)

__attribute__((unused)) static void OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *self, id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators);

__attribute__((unused)) static OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *new_OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *create_OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI)

/*!
 @brief A conjunction DISI built on top of approximations.
 This implementation
 verifies that documents actually match by consulting the provided
 <code>TwoPhaseIterator</code>s.
 Another important difference with <code>ConjunctionDISI</code> is that this
 implementation supports approximations too: the approximation of this
 impl is the conjunction of the approximations of the wrapped iterators.
 This allows eg. <code>+"A B" +C</code> to be approximated as
 <code>+(+A +B) +C</code>.
 */
@interface OrgApacheLuceneSearchConjunctionDISI_TwoPhase : OrgApacheLuceneSearchConjunctionDISI {
 @public
  OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *twoPhaseView_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)iterators
                    withJavaUtilList:(id<JavaUtilList>)twoPhaseIterators;

- (OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *)asTwoPhaseIterator;

- (jboolean)matches;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchConjunctionDISI_TwoPhase)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchConjunctionDISI_TwoPhase, twoPhaseView_, OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *)

__attribute__((unused)) static void OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchConjunctionDISI_TwoPhase *self, id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators);

__attribute__((unused)) static OrgApacheLuceneSearchConjunctionDISI_TwoPhase *new_OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchConjunctionDISI_TwoPhase *create_OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchConjunctionDISI_TwoPhase)

@interface OrgApacheLuceneSearchConjunctionDISI_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(OrgApacheLuceneSearchDocIdSetIterator *)o1
               withId:(OrgApacheLuceneSearchDocIdSetIterator *)o2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchConjunctionDISI_$1)

__attribute__((unused)) static void OrgApacheLuceneSearchConjunctionDISI_$1_init(OrgApacheLuceneSearchConjunctionDISI_$1 *self);

__attribute__((unused)) static OrgApacheLuceneSearchConjunctionDISI_$1 *new_OrgApacheLuceneSearchConjunctionDISI_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchConjunctionDISI_$1 *create_OrgApacheLuceneSearchConjunctionDISI_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchConjunctionDISI_$1)

@implementation OrgApacheLuceneSearchConjunctionDISI

+ (OrgApacheLuceneSearchConjunctionDISI *)intersectWithJavaUtilList:(id<JavaUtilList>)iterators {
  return OrgApacheLuceneSearchConjunctionDISI_intersectWithJavaUtilList_(iterators);
}

+ (void)addIteratorWithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)disi
                                            withJavaUtilList:(id<JavaUtilList>)allIterators
                                            withJavaUtilList:(id<JavaUtilList>)twoPhaseIterators {
  OrgApacheLuceneSearchConjunctionDISI_addIteratorWithOrgApacheLuceneSearchDocIdSetIterator_withJavaUtilList_withJavaUtilList_(disi, allIterators, twoPhaseIterators);
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)iterators {
  OrgApacheLuceneSearchConjunctionDISI_initWithJavaUtilList_(self, iterators);
  return self;
}

- (jboolean)matches {
  return true;
}

- (OrgApacheLuceneSearchTwoPhaseIterator *)asTwoPhaseIterator {
  return nil;
}

- (jint)doNextWithInt:(jint)doc {
  return OrgApacheLuceneSearchConjunctionDISI_doNextWithInt_(self, doc);
}

- (jint)advanceWithInt:(jint)target {
  return OrgApacheLuceneSearchConjunctionDISI_doNextWithInt_(self, [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(lead_)) advanceWithInt:target]);
}

- (jint)docID {
  return [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(lead_)) docID];
}

- (jint)nextDoc {
  return OrgApacheLuceneSearchConjunctionDISI_doNextWithInt_(self, [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(lead_)) nextDoc]);
}

- (jlong)cost {
  return [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(lead_)) cost];
}

- (void)dealloc {
  RELEASE_(lead_);
  RELEASE_(others_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "intersectWithJavaUtilList:", "intersect", "Lorg.apache.lucene.search.ConjunctionDISI;", 0x9, NULL, "(Ljava/util/List<+Lorg/apache/lucene/search/DocIdSetIterator;>;)Lorg/apache/lucene/search/ConjunctionDISI;" },
    { "addIteratorWithOrgApacheLuceneSearchDocIdSetIterator:withJavaUtilList:withJavaUtilList:", "addIterator", "V", 0xa, NULL, "(Lorg/apache/lucene/search/DocIdSetIterator;Ljava/util/List<Lorg/apache/lucene/search/DocIdSetIterator;>;Ljava/util/List<Lorg/apache/lucene/search/TwoPhaseIterator;>;)V" },
    { "initWithJavaUtilList:", "ConjunctionDISI", NULL, 0x0, NULL, "(Ljava/util/List<+Lorg/apache/lucene/search/DocIdSetIterator;>;)V" },
    { "matches", NULL, "Z", 0x4, "Ljava.io.IOException;", NULL },
    { "asTwoPhaseIterator", NULL, "Lorg.apache.lucene.search.TwoPhaseIterator;", 0x0, NULL, NULL },
    { "doNextWithInt:", "doNext", "I", 0x2, "Ljava.io.IOException;", NULL },
    { "advanceWithInt:", "advance", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "docID", NULL, "I", 0x1, NULL, NULL },
    { "nextDoc", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "cost", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lead_", NULL, 0x10, "Lorg.apache.lucene.search.DocIdSetIterator;", NULL, NULL, .constantValue.asLong = 0 },
    { "others_", NULL, 0x10, "[Lorg.apache.lucene.search.DocIdSetIterator;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.search.ConjunctionDISI$TwoPhaseConjunctionDISI;", "Lorg.apache.lucene.search.ConjunctionDISI$TwoPhase;"};
  static const J2ObjcClassInfo _OrgApacheLuceneSearchConjunctionDISI = { 2, "ConjunctionDISI", "org.apache.lucene.search", NULL, 0x1, 10, methods, 2, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneSearchConjunctionDISI;
}

@end

OrgApacheLuceneSearchConjunctionDISI *OrgApacheLuceneSearchConjunctionDISI_intersectWithJavaUtilList_(id<JavaUtilList> iterators) {
  OrgApacheLuceneSearchConjunctionDISI_initialize();
  if ([((id<JavaUtilList>) nil_chk(iterators)) size] < 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot make a ConjunctionDISI of less than 2 iterators");
  }
  id<JavaUtilList> allIterators = create_JavaUtilArrayList_init();
  id<JavaUtilList> twoPhaseIterators = create_JavaUtilArrayList_init();
  for (OrgApacheLuceneSearchDocIdSetIterator * __strong iter in iterators) {
    OrgApacheLuceneSearchConjunctionDISI_addIteratorWithOrgApacheLuceneSearchDocIdSetIterator_withJavaUtilList_withJavaUtilList_(iter, allIterators, twoPhaseIterators);
  }
  if ([twoPhaseIterators isEmpty]) {
    return create_OrgApacheLuceneSearchConjunctionDISI_initWithJavaUtilList_(allIterators);
  }
  else {
    return create_OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(allIterators, twoPhaseIterators);
  }
}

void OrgApacheLuceneSearchConjunctionDISI_addIteratorWithOrgApacheLuceneSearchDocIdSetIterator_withJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchDocIdSetIterator *disi, id<JavaUtilList> allIterators, id<JavaUtilList> twoPhaseIterators) {
  OrgApacheLuceneSearchConjunctionDISI_initialize();
  if ([((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(disi)) getClass] == (id) OrgApacheLuceneSearchConjunctionDISI_class_() || [disi getClass] == (id) OrgApacheLuceneSearchConjunctionDISI_TwoPhase_class_()) {
    OrgApacheLuceneSearchConjunctionDISI *conjunction = (OrgApacheLuceneSearchConjunctionDISI *) cast_chk(disi, [OrgApacheLuceneSearchConjunctionDISI class]);
    [((id<JavaUtilList>) nil_chk(allIterators)) addWithId:conjunction->lead_];
    JavaUtilCollections_addAllWithJavaUtilCollection_withNSObjectArray_(allIterators, conjunction->others_);
    if ([conjunction getClass] == (id) OrgApacheLuceneSearchConjunctionDISI_TwoPhase_class_()) {
      OrgApacheLuceneSearchConjunctionDISI_TwoPhase *twoPhase = (OrgApacheLuceneSearchConjunctionDISI_TwoPhase *) cast_chk(conjunction, [OrgApacheLuceneSearchConjunctionDISI_TwoPhase class]);
      JavaUtilCollections_addAllWithJavaUtilCollection_withNSObjectArray_(twoPhaseIterators, ((OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *) nil_chk(twoPhase->twoPhaseView_))->twoPhaseIterators_);
    }
  }
  else {
    OrgApacheLuceneSearchTwoPhaseIterator *twoPhaseIter = OrgApacheLuceneSearchTwoPhaseIterator_asTwoPhaseIteratorWithOrgApacheLuceneSearchDocIdSetIterator_(disi);
    if (twoPhaseIter != nil) {
      [((id<JavaUtilList>) nil_chk(allIterators)) addWithId:[twoPhaseIter approximation]];
      [((id<JavaUtilList>) nil_chk(twoPhaseIterators)) addWithId:twoPhaseIter];
    }
    else {
      [((id<JavaUtilList>) nil_chk(allIterators)) addWithId:disi];
    }
  }
}

void OrgApacheLuceneSearchConjunctionDISI_initWithJavaUtilList_(OrgApacheLuceneSearchConjunctionDISI *self, id<JavaUtilList> iterators) {
  OrgApacheLuceneSearchDocIdSetIterator_init(self);
  JreAssert(([((id<JavaUtilList>) nil_chk(iterators)) size] >= 2), (@"org/apache/lucene/search/ConjunctionDISI.java:82 condition failed: assert iterators.size() >= 2;"));
  OrgApacheLuceneUtilCollectionUtil_timSortWithJavaUtilList_withJavaUtilComparator_(iterators, create_OrgApacheLuceneSearchConjunctionDISI_$1_init());
  JreStrongAssign(&self->lead_, [iterators getWithInt:0]);
  JreStrongAssign(&self->others_, [((id<JavaUtilList>) nil_chk([iterators subListWithInt:1 withInt:[iterators size]])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchDocIdSetIterator_class_()]]);
}

OrgApacheLuceneSearchConjunctionDISI *new_OrgApacheLuceneSearchConjunctionDISI_initWithJavaUtilList_(id<JavaUtilList> iterators) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchConjunctionDISI, initWithJavaUtilList_, iterators)
}

OrgApacheLuceneSearchConjunctionDISI *create_OrgApacheLuceneSearchConjunctionDISI_initWithJavaUtilList_(id<JavaUtilList> iterators) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchConjunctionDISI, initWithJavaUtilList_, iterators)
}

jint OrgApacheLuceneSearchConjunctionDISI_doNextWithInt_(OrgApacheLuceneSearchConjunctionDISI *self, jint doc) {
  for (; ; ) {
    if (doc == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
      return OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
    }
    for (; ; ) {
      {
        IOSObjectArray *a__ = self->others_;
        OrgApacheLuceneSearchDocIdSetIterator * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgApacheLuceneSearchDocIdSetIterator * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgApacheLuceneSearchDocIdSetIterator *other = *b__++;
          if ([((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(other)) docID] < doc) {
            jint next = [other advanceWithInt:doc];
            if (next > doc) {
              doc = [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(self->lead_)) advanceWithInt:next];
              goto break_advanceHead;
            }
          }
        }
      }
      if ([self matches]) {
        return doc;
      }
      else {
        doc = [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(self->lead_)) nextDoc];
        goto break_advanceHead;
      }
    }
    break_advanceHead: ;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchConjunctionDISI)

@implementation OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)iterators
                    withJavaUtilList:(id<JavaUtilList>)twoPhaseIterators {
  OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(self, iterators, twoPhaseIterators);
  return self;
}

- (jboolean)matches {
  {
    IOSObjectArray *a__ = twoPhaseIterators_;
    OrgApacheLuceneSearchTwoPhaseIterator * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneSearchTwoPhaseIterator * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneSearchTwoPhaseIterator *twoPhaseIterator = *b__++;
      if ([((OrgApacheLuceneSearchTwoPhaseIterator *) nil_chk(twoPhaseIterator)) matches] == false) {
        return false;
      }
    }
  }
  return true;
}

- (void)dealloc {
  RELEASE_(twoPhaseIterators_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilList:withJavaUtilList:", "TwoPhaseConjunctionDISI", NULL, 0x2, NULL, "(Ljava/util/List<+Lorg/apache/lucene/search/DocIdSetIterator;>;Ljava/util/List<Lorg/apache/lucene/search/TwoPhaseIterator;>;)V" },
    { "matches", NULL, "Z", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "twoPhaseIterators_", NULL, 0x12, "[Lorg.apache.lucene.search.TwoPhaseIterator;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI = { 2, "TwoPhaseConjunctionDISI", "org.apache.lucene.search", "ConjunctionDISI", 0xa, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI;
}

@end

void OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *self, id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) {
  OrgApacheLuceneSearchTwoPhaseIterator_initWithOrgApacheLuceneSearchDocIdSetIterator_(self, create_OrgApacheLuceneSearchConjunctionDISI_initWithJavaUtilList_(iterators));
  JreAssert(([((id<JavaUtilList>) nil_chk(twoPhaseIterators)) size] > 0), (@"org/apache/lucene/search/ConjunctionDISI.java:168 condition failed: assert twoPhaseIterators.size() > 0;"));
  JreStrongAssign(&self->twoPhaseIterators_, [twoPhaseIterators toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[twoPhaseIterators size] type:OrgApacheLuceneSearchTwoPhaseIterator_class_()]]);
}

OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *new_OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI, initWithJavaUtilList_withJavaUtilList_, iterators, twoPhaseIterators)
}

OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *create_OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI, initWithJavaUtilList_withJavaUtilList_, iterators, twoPhaseIterators)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI)

@implementation OrgApacheLuceneSearchConjunctionDISI_TwoPhase

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)iterators
                    withJavaUtilList:(id<JavaUtilList>)twoPhaseIterators {
  OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(self, iterators, twoPhaseIterators);
  return self;
}

- (OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *)asTwoPhaseIterator {
  return twoPhaseView_;
}

- (jboolean)matches {
  return [((OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *) nil_chk(twoPhaseView_)) matches];
}

- (void)dealloc {
  RELEASE_(twoPhaseView_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilList:withJavaUtilList:", "TwoPhase", NULL, 0x2, NULL, "(Ljava/util/List<+Lorg/apache/lucene/search/DocIdSetIterator;>;Ljava/util/List<Lorg/apache/lucene/search/TwoPhaseIterator;>;)V" },
    { "asTwoPhaseIterator", NULL, "Lorg.apache.lucene.search.ConjunctionDISI$TwoPhaseConjunctionDISI;", 0x1, NULL, NULL },
    { "matches", NULL, "Z", 0x4, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "twoPhaseView_", NULL, 0x10, "Lorg.apache.lucene.search.ConjunctionDISI$TwoPhaseConjunctionDISI;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchConjunctionDISI_TwoPhase = { 2, "TwoPhase", "org.apache.lucene.search", "ConjunctionDISI", 0xa, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchConjunctionDISI_TwoPhase;
}

@end

void OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchConjunctionDISI_TwoPhase *self, id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) {
  OrgApacheLuceneSearchConjunctionDISI_initWithJavaUtilList_(self, iterators);
  JreStrongAssignAndConsume(&self->twoPhaseView_, new_OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(iterators, twoPhaseIterators));
}

OrgApacheLuceneSearchConjunctionDISI_TwoPhase *new_OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchConjunctionDISI_TwoPhase, initWithJavaUtilList_withJavaUtilList_, iterators, twoPhaseIterators)
}

OrgApacheLuceneSearchConjunctionDISI_TwoPhase *create_OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchConjunctionDISI_TwoPhase, initWithJavaUtilList_withJavaUtilList_, iterators, twoPhaseIterators)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchConjunctionDISI_TwoPhase)

@implementation OrgApacheLuceneSearchConjunctionDISI_$1

- (jint)compareWithId:(OrgApacheLuceneSearchDocIdSetIterator *)o1
               withId:(OrgApacheLuceneSearchDocIdSetIterator *)o2 {
  return JavaLangLong_compareWithLong_withLong_([((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(o1)) cost], [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(o2)) cost]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchConjunctionDISI_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheLuceneSearchConjunctionDISI", "initWithJavaUtilList:" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchConjunctionDISI_$1 = { 2, "", "org.apache.lucene.search", "ConjunctionDISI", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/lucene/search/DocIdSetIterator;>;" };
  return &_OrgApacheLuceneSearchConjunctionDISI_$1;
}

@end

void OrgApacheLuceneSearchConjunctionDISI_$1_init(OrgApacheLuceneSearchConjunctionDISI_$1 *self) {
  NSObject_init(self);
}

OrgApacheLuceneSearchConjunctionDISI_$1 *new_OrgApacheLuceneSearchConjunctionDISI_$1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchConjunctionDISI_$1, init)
}

OrgApacheLuceneSearchConjunctionDISI_$1 *create_OrgApacheLuceneSearchConjunctionDISI_$1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchConjunctionDISI_$1, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchConjunctionDISI_$1)
