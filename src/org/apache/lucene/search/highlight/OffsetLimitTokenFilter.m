//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./highlighter/src/java/org/apache/lucene/search/highlight/OffsetLimitTokenFilter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/search/highlight/OffsetLimitTokenFilter.h"
#include "org/apache/lucene/util/AttributeSource.h"

@interface OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter () {
 @public
  jint offsetCount_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAttrib_;
  jint offsetLimit_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter, offsetAttrib_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)

@implementation OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                                   withInt:(jint)offsetLimit {
  OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(self, input, offsetLimit);
  return self;
}

- (jboolean)incrementToken {
  if (offsetCount_ < offsetLimit_ && [((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) incrementToken]) {
    jint offsetLength = [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAttrib_)) endOffset] - [offsetAttrib_ startOffset];
    offsetCount_ += offsetLength;
    return true;
  }
  return false;
}

- (void)reset {
  [super reset];
  offsetCount_ = 0;
}

- (void)dealloc {
  RELEASE_(offsetAttrib_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneAnalysisTokenStream:withInt:", "OffsetLimitTokenFilter", NULL, 0x1, NULL, NULL },
    { "incrementToken", NULL, "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "reset", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "offsetCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "offsetAttrib_", NULL, 0x2, "Lorg.apache.lucene.analysis.tokenattributes.OffsetAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "offsetLimit_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter = { 2, "OffsetLimitTokenFilter", "org.apache.lucene.search.highlight", NULL, 0x11, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter;
}

@end

void OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *input, jint offsetLimit) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, input);
  JreStrongAssign(&self->offsetAttrib_, [self getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  self->offsetLimit_ = offsetLimit;
}

OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter *new_OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *input, jint offsetLimit) {
  OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter *self = [OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter alloc];
  OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(self, input, offsetLimit);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter)
