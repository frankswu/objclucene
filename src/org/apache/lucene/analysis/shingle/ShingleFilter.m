//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilter.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/AttributeSource.h"

@class OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence;
@class OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken;

@interface OrgApacheLuceneAnalysisShingleShingleFilter () {
 @public
  /*!
   @brief The sequence of input stream tokens (or filler tokens, if necessary)
 that will be composed to form output shingles.
   */
  JavaUtilLinkedList *inputWindow_;
  /*!
   @brief The number of input tokens in the next output token.
   This is the "n" in
 "token n-grams".
   */
  OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *gramSize_;
  /*!
   @brief Shingle and unigram text is composed here.
   */
  JavaLangStringBuilder *gramBuilder_;
  /*!
   @brief The token type attribute value to use - default is "shingle"
   */
  NSString *tokenType_;
  /*!
   @brief The string to use when joining adjacent tokens to form a shingle
   */
  NSString *tokenSeparator_;
  /*!
   @brief The string to insert for each position at which there is no token
 (i.e., when position increment is greater than one).
   */
  IOSCharArray *fillerToken_;
  /*!
   @brief By default, we output unigrams (individual tokens) as well as shingles
 (token n-grams).
   */
  jboolean outputUnigrams_;
  /*!
   @brief By default, we don't override behavior of outputUnigrams.
   */
  jboolean outputUnigramsIfNoShingles_;
  /*!
   @brief maximum shingle size (number of tokens)
   */
  jint maxShingleSize_;
  /*!
   @brief minimum shingle size (number of tokens)
   */
  jint minShingleSize_;
  /*!
   @brief The remaining number of filler tokens to be inserted into the input stream
 from which shingles are composed, to handle position increments greater
 than one.
   */
  jint numFillerTokensToInsert_;
  /*!
   @brief When the next input stream token has a position increment greater than
 one, it is stored in this field until sufficient filler tokens have been
 inserted to account for the position increment.
   */
  OrgApacheLuceneUtilAttributeSource *nextInputStreamToken_;
  /*!
   @brief Whether or not there is a next input stream token.
   */
  jboolean isNextInputStreamToken_;
  /*!
   @brief Whether at least one unigram or shingle has been output at the current 
 position.
   */
  jboolean isOutputHere_;
  /*!
   @brief Holds the State after input.end() was called, so we can
 restore it in our end() impl.
   */
  OrgApacheLuceneUtilAttributeSource_State *endState_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posIncrAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute> posLenAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute> typeAtt_;
  jboolean exhausted_;
}

/*!
 @brief <p>Get the next token from the input stream.
 <p>If the next token has <code>positionIncrement &gt; 1</code>,
 <code>positionIncrement - 1</code> <code>fillerToken</code>s are
 inserted first.
 @param target Where to put the new token; if null, a new instance is created.
 @return On success, the populated token; null otherwise
 @throws IOException if the input stream has a problem
 */
- (OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *)getNextTokenWithOrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken:(OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *)target;

/*!
 @brief <p>Fills <code>inputWindow</code> with input stream tokens, if available, 
 shifting to the right if the window was previously full.
 <p>Resets <code>gramSize</code> to its minimum value.
 @throws IOException if there's a problem getting the next token
 */
- (void)shiftInputWindow;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter, inputWindow_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter, gramSize_, OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter, gramBuilder_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter, tokenType_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter, tokenSeparator_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter, fillerToken_, IOSCharArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter, nextInputStreamToken_, OrgApacheLuceneUtilAttributeSource *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter, endState_, OrgApacheLuceneUtilAttributeSource_State *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter, offsetAtt_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter, posIncrAtt_, id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter, posLenAtt_, id<OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter, typeAtt_, id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>)

__attribute__((unused)) static OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *OrgApacheLuceneAnalysisShingleShingleFilter_getNextTokenWithOrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_(OrgApacheLuceneAnalysisShingleShingleFilter *self, OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *target);

__attribute__((unused)) static void OrgApacheLuceneAnalysisShingleShingleFilter_shiftInputWindow(OrgApacheLuceneAnalysisShingleShingleFilter *self);

/*!
 @brief <p>An instance of this class is used to maintain the number of input
 stream tokens that will be used to compose the next unigram or shingle:
 <code>gramSize</code>.
 <p><code>gramSize</code> will take on values from the circular sequence
 <b>{ [ 1, ] <code>minShingleSize</code> [ , ... , <code>maxShingleSize</code> ] }</b>.
 <p>1 is included in the circular sequence only if 
 <code>outputUnigrams</code> = true.
 */
@interface OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence : NSObject {
 @public
  OrgApacheLuceneAnalysisShingleShingleFilter *this$0_;
  jint value_;
  jint previousValue_;
  jint minValue_;
}

- (instancetype)initWithOrgApacheLuceneAnalysisShingleShingleFilter:(OrgApacheLuceneAnalysisShingleShingleFilter *)outer$;

/*!
 @return the current value.
 - seealso: #advance()
 */
- (jint)getValue;

/*!
 @brief <p>Increments this circular number's value to the next member in the
 circular sequence
 <code>gramSize</code> will take on values from the circular sequence
 <b>{ [ 1, ] <code>minShingleSize</code> [ , ... , <code>maxShingleSize</code> ] }</b>.
 <p>1 is included in the circular sequence only if 
 <code>outputUnigrams</code> = true.
 */
- (void)advance;

/*!
 @brief <p>Sets this circular number's value to the first member of the 
 circular sequence
 <p><code>gramSize</code> will take on values from the circular sequence
 <b>{ [ 1, ] <code>minShingleSize</code> [ , ... , <code>maxShingleSize</code> ] }</b>.
 <p>1 is included in the circular sequence only if 
 <code>outputUnigrams</code> = true.
 */
- (void)reset;

/*!
 @brief <p>Returns true if the current value is the first member of the circular
 sequence.
 <p>If <code>outputUnigrams</code> = true, the first member of the circular
 sequence will be 1; otherwise, it will be <code>minShingleSize</code>.
 @return true if the current value is the first member of the circular
 sequence; false otherwise
 */
- (jboolean)atMinValue;

/*!
 @return the value this instance had before the last advance() call
 */
- (jint)getPreviousValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence, this$0_, OrgApacheLuceneAnalysisShingleShingleFilter *)

__attribute__((unused)) static void OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence_initWithOrgApacheLuceneAnalysisShingleShingleFilter_(OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *self, OrgApacheLuceneAnalysisShingleShingleFilter *outer$);

__attribute__((unused)) static OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *new_OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence_initWithOrgApacheLuceneAnalysisShingleShingleFilter_(OrgApacheLuceneAnalysisShingleShingleFilter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *create_OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence_initWithOrgApacheLuceneAnalysisShingleShingleFilter_(OrgApacheLuceneAnalysisShingleShingleFilter *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence)

@interface OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken : NSObject {
 @public
  OrgApacheLuceneUtilAttributeSource *attSource_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAtt_;
  jboolean isFiller_;
}

- (instancetype)initWithOrgApacheLuceneAnalysisShingleShingleFilter:(OrgApacheLuceneAnalysisShingleShingleFilter *)outer$
                             withOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)attSource;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken, attSource_, OrgApacheLuceneUtilAttributeSource *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken, offsetAtt_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)

__attribute__((unused)) static void OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_initWithOrgApacheLuceneAnalysisShingleShingleFilter_withOrgApacheLuceneUtilAttributeSource_(OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *self, OrgApacheLuceneAnalysisShingleShingleFilter *outer$, OrgApacheLuceneUtilAttributeSource *attSource);

__attribute__((unused)) static OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *new_OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_initWithOrgApacheLuceneAnalysisShingleShingleFilter_withOrgApacheLuceneUtilAttributeSource_(OrgApacheLuceneAnalysisShingleShingleFilter *outer$, OrgApacheLuceneUtilAttributeSource *attSource) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *create_OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_initWithOrgApacheLuceneAnalysisShingleShingleFilter_withOrgApacheLuceneUtilAttributeSource_(OrgApacheLuceneAnalysisShingleShingleFilter *outer$, OrgApacheLuceneUtilAttributeSource *attSource);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken)

NSString *OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_FILLER_TOKEN = @"_";
NSString *OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_TOKEN_TYPE = @"shingle";
NSString *OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_TOKEN_SEPARATOR = @" ";

@implementation OrgApacheLuceneAnalysisShingleShingleFilter

+ (NSString *)DEFAULT_FILLER_TOKEN {
  return OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_FILLER_TOKEN;
}

+ (jint)DEFAULT_MAX_SHINGLE_SIZE {
  return OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_MAX_SHINGLE_SIZE;
}

+ (jint)DEFAULT_MIN_SHINGLE_SIZE {
  return OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_MIN_SHINGLE_SIZE;
}

+ (NSString *)DEFAULT_TOKEN_TYPE {
  return OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_TOKEN_TYPE;
}

+ (NSString *)DEFAULT_TOKEN_SEPARATOR {
  return OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_TOKEN_SEPARATOR;
}

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                                   withInt:(jint)minShingleSize
                                                   withInt:(jint)maxShingleSize {
  OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withInt_(self, input, minShingleSize, maxShingleSize);
  return self;
}

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                                   withInt:(jint)maxShingleSize {
  OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(self, input, maxShingleSize);
  return self;
}

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input {
  OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, input);
  return self;
}

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                              withNSString:(NSString *)tokenType {
  OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withNSString_(self, input, tokenType);
  return self;
}

- (void)setTokenTypeWithNSString:(NSString *)tokenType {
  JreStrongAssign(&self->tokenType_, tokenType);
}

- (void)setOutputUnigramsWithBoolean:(jboolean)outputUnigrams {
  self->outputUnigrams_ = outputUnigrams;
  JreStrongAssignAndConsume(&gramSize_, new_OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence_initWithOrgApacheLuceneAnalysisShingleShingleFilter_(self));
}

- (void)setOutputUnigramsIfNoShinglesWithBoolean:(jboolean)outputUnigramsIfNoShingles {
  self->outputUnigramsIfNoShingles_ = outputUnigramsIfNoShingles;
}

- (void)setMaxShingleSizeWithInt:(jint)maxShingleSize {
  if (maxShingleSize < 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Max shingle size must be >= 2");
  }
  self->maxShingleSize_ = maxShingleSize;
}

- (void)setMinShingleSizeWithInt:(jint)minShingleSize {
  if (minShingleSize < 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Min shingle size must be >= 2");
  }
  if (minShingleSize > maxShingleSize_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Min shingle size must be <= max shingle size");
  }
  self->minShingleSize_ = minShingleSize;
  JreStrongAssignAndConsume(&gramSize_, new_OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence_initWithOrgApacheLuceneAnalysisShingleShingleFilter_(self));
}

- (void)setTokenSeparatorWithNSString:(NSString *)tokenSeparator {
  JreStrongAssign(&self->tokenSeparator_, nil == tokenSeparator ? @"" : tokenSeparator);
}

- (void)setFillerTokenWithNSString:(NSString *)fillerToken {
  JreStrongAssign(&self->fillerToken_, nil == fillerToken ? [IOSCharArray arrayWithLength:0] : [fillerToken toCharArray]);
}

- (jboolean)incrementToken {
  jboolean tokenAvailable = false;
  jint builtGramSize = 0;
  if ([((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(gramSize_)) atMinValue] || [((JavaUtilLinkedList *) nil_chk(inputWindow_)) size] < [((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(gramSize_)) getValue]) {
    OrgApacheLuceneAnalysisShingleShingleFilter_shiftInputWindow(self);
    [((JavaLangStringBuilder *) nil_chk(gramBuilder_)) setLengthWithInt:0];
  }
  else {
    builtGramSize = [((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(gramSize_)) getPreviousValue];
  }
  if ([((JavaUtilLinkedList *) nil_chk(inputWindow_)) size] >= [((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(gramSize_)) getValue]) {
    jboolean isAllFiller = true;
    OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *nextToken = nil;
    id<JavaUtilIterator> iter = [((JavaUtilLinkedList *) nil_chk(inputWindow_)) iterator];
    for (jint gramNum = 1; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext] && builtGramSize < [((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(gramSize_)) getValue]; ++gramNum) {
      nextToken = [iter next];
      if (builtGramSize < gramNum) {
        if (builtGramSize > 0) {
          [((JavaLangStringBuilder *) nil_chk(gramBuilder_)) appendWithNSString:tokenSeparator_];
        }
        [((JavaLangStringBuilder *) nil_chk(gramBuilder_)) appendWithCharArray:[((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(((OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *) nil_chk(nextToken))->termAtt_)) buffer] withInt:0 withInt:[nextToken->termAtt_ length]];
        ++builtGramSize;
      }
      if (isAllFiller && ((OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *) nil_chk(nextToken))->isFiller_) {
        if (gramNum == [((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(gramSize_)) getValue]) {
          [((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(gramSize_)) advance];
        }
      }
      else {
        isAllFiller = false;
      }
    }
    if (!isAllFiller && builtGramSize == [((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(gramSize_)) getValue]) {
      [((OrgApacheLuceneUtilAttributeSource *) nil_chk(((OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *) nil_chk([((JavaUtilLinkedList *) nil_chk(inputWindow_)) getFirst]))->attSource_)) copyToWithOrgApacheLuceneUtilAttributeSource:self];
      [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncrAtt_)) setPositionIncrementWithInt:isOutputHere_ ? 0 : 1];
      [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk([((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) setEmpty])) appendWithJavaLangStringBuilder:gramBuilder_];
      if ([((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(gramSize_)) getValue] > 1) {
        [((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(typeAtt_)) setTypeWithNSString:tokenType_];
        noShingleOutput_ = false;
      }
      [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:[offsetAtt_ startOffset] withInt:[((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(((OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *) nil_chk(nextToken))->offsetAtt_)) endOffset]];
      [((id<OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute>) nil_chk(posLenAtt_)) setPositionLengthWithInt:builtGramSize];
      isOutputHere_ = true;
      [((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(gramSize_)) advance];
      tokenAvailable = true;
    }
  }
  return tokenAvailable;
}

- (OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *)getNextTokenWithOrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken:(OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *)target {
  return OrgApacheLuceneAnalysisShingleShingleFilter_getNextTokenWithOrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_(self, target);
}

- (void)end {
  if (!exhausted_) {
    [super end];
  }
  else {
    [self restoreStateWithOrgApacheLuceneUtilAttributeSource_State:endState_];
  }
}

- (void)shiftInputWindow {
  OrgApacheLuceneAnalysisShingleShingleFilter_shiftInputWindow(self);
}

- (void)reset {
  [super reset];
  [((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(gramSize_)) reset];
  [((JavaUtilLinkedList *) nil_chk(inputWindow_)) clear];
  JreStrongAssign(&nextInputStreamToken_, nil);
  isNextInputStreamToken_ = false;
  numFillerTokensToInsert_ = 0;
  isOutputHere_ = false;
  noShingleOutput_ = true;
  exhausted_ = false;
  JreStrongAssign(&endState_, nil);
  if (outputUnigramsIfNoShingles_ && !outputUnigrams_) {
    ((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(gramSize_))->minValue_ = minShingleSize_;
  }
}

- (void)dealloc {
  RELEASE_(inputWindow_);
  RELEASE_(gramSize_);
  RELEASE_(gramBuilder_);
  RELEASE_(tokenType_);
  RELEASE_(tokenSeparator_);
  RELEASE_(fillerToken_);
  RELEASE_(nextInputStreamToken_);
  RELEASE_(endState_);
  RELEASE_(termAtt_);
  RELEASE_(offsetAtt_);
  RELEASE_(posIncrAtt_);
  RELEASE_(posLenAtt_);
  RELEASE_(typeAtt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneAnalysisTokenStream:withInt:withInt:", "ShingleFilter", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheLuceneAnalysisTokenStream:withInt:", "ShingleFilter", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheLuceneAnalysisTokenStream:", "ShingleFilter", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheLuceneAnalysisTokenStream:withNSString:", "ShingleFilter", NULL, 0x1, NULL, NULL },
    { "setTokenTypeWithNSString:", "setTokenType", "V", 0x1, NULL, NULL },
    { "setOutputUnigramsWithBoolean:", "setOutputUnigrams", "V", 0x1, NULL, NULL },
    { "setOutputUnigramsIfNoShinglesWithBoolean:", "setOutputUnigramsIfNoShingles", "V", 0x1, NULL, NULL },
    { "setMaxShingleSizeWithInt:", "setMaxShingleSize", "V", 0x1, NULL, NULL },
    { "setMinShingleSizeWithInt:", "setMinShingleSize", "V", 0x1, NULL, NULL },
    { "setTokenSeparatorWithNSString:", "setTokenSeparator", "V", 0x1, NULL, NULL },
    { "setFillerTokenWithNSString:", "setFillerToken", "V", 0x1, NULL, NULL },
    { "incrementToken", NULL, "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "getNextTokenWithOrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken:", "getNextToken", "Lorg.apache.lucene.analysis.shingle.ShingleFilter$InputWindowToken;", 0x2, "Ljava.io.IOException;", NULL },
    { "end", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "shiftInputWindow", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "reset", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_FILLER_TOKEN", "DEFAULT_FILLER_TOKEN", 0x19, "Ljava.lang.String;", &OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_FILLER_TOKEN, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_MAX_SHINGLE_SIZE", "DEFAULT_MAX_SHINGLE_SIZE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_MAX_SHINGLE_SIZE },
    { "DEFAULT_MIN_SHINGLE_SIZE", "DEFAULT_MIN_SHINGLE_SIZE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_MIN_SHINGLE_SIZE },
    { "DEFAULT_TOKEN_TYPE", "DEFAULT_TOKEN_TYPE", 0x19, "Ljava.lang.String;", &OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_TOKEN_TYPE, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_TOKEN_SEPARATOR", "DEFAULT_TOKEN_SEPARATOR", 0x19, "Ljava.lang.String;", &OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_TOKEN_SEPARATOR, NULL, .constantValue.asLong = 0 },
    { "inputWindow_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/apache/lucene/analysis/shingle/ShingleFilter$InputWindowToken;>;", .constantValue.asLong = 0 },
    { "gramSize_", NULL, 0x2, "Lorg.apache.lucene.analysis.shingle.ShingleFilter$CircularSequence;", NULL, NULL, .constantValue.asLong = 0 },
    { "gramBuilder_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "tokenType_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "tokenSeparator_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "fillerToken_", NULL, 0x2, "[C", NULL, NULL, .constantValue.asLong = 0 },
    { "outputUnigrams_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "outputUnigramsIfNoShingles_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "maxShingleSize_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "minShingleSize_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "numFillerTokensToInsert_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "nextInputStreamToken_", NULL, 0x2, "Lorg.apache.lucene.util.AttributeSource;", NULL, NULL, .constantValue.asLong = 0 },
    { "isNextInputStreamToken_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isOutputHere_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "noShingleOutput_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "endState_", NULL, 0x2, "Lorg.apache.lucene.util.AttributeSource$State;", NULL, NULL, .constantValue.asLong = 0 },
    { "termAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.CharTermAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "offsetAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.OffsetAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "posIncrAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "posLenAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.PositionLengthAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "typeAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.TypeAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "exhausted_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.analysis.shingle.ShingleFilter$CircularSequence;", "Lorg.apache.lucene.analysis.shingle.ShingleFilter$InputWindowToken;"};
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisShingleShingleFilter = { 2, "ShingleFilter", "org.apache.lucene.analysis.shingle", NULL, 0x11, 16, methods, 27, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneAnalysisShingleShingleFilter;
}

@end

void OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withInt_(OrgApacheLuceneAnalysisShingleShingleFilter *self, OrgApacheLuceneAnalysisTokenStream *input, jint minShingleSize, jint maxShingleSize) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, input);
  JreStrongAssignAndConsume(&self->inputWindow_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->gramBuilder_, new_JavaLangStringBuilder_init());
  JreStrongAssign(&self->tokenType_, OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_TOKEN_TYPE);
  JreStrongAssign(&self->tokenSeparator_, OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_TOKEN_SEPARATOR);
  JreStrongAssign(&self->fillerToken_, [((NSString *) nil_chk(OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_FILLER_TOKEN)) toCharArray]);
  self->outputUnigrams_ = true;
  self->outputUnigramsIfNoShingles_ = false;
  self->isNextInputStreamToken_ = false;
  self->isOutputHere_ = false;
  self->noShingleOutput_ = true;
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  JreStrongAssign(&self->posIncrAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
  JreStrongAssign(&self->posLenAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute_class_()]);
  JreStrongAssign(&self->typeAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_()]);
  [self setMaxShingleSizeWithInt:maxShingleSize];
  [self setMinShingleSizeWithInt:minShingleSize];
}

OrgApacheLuceneAnalysisShingleShingleFilter *new_OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withInt_(OrgApacheLuceneAnalysisTokenStream *input, jint minShingleSize, jint maxShingleSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisShingleShingleFilter, initWithOrgApacheLuceneAnalysisTokenStream_withInt_withInt_, input, minShingleSize, maxShingleSize)
}

OrgApacheLuceneAnalysisShingleShingleFilter *create_OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withInt_(OrgApacheLuceneAnalysisTokenStream *input, jint minShingleSize, jint maxShingleSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisShingleShingleFilter, initWithOrgApacheLuceneAnalysisTokenStream_withInt_withInt_, input, minShingleSize, maxShingleSize)
}

void OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisShingleShingleFilter *self, OrgApacheLuceneAnalysisTokenStream *input, jint maxShingleSize) {
  OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withInt_(self, input, OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_MIN_SHINGLE_SIZE, maxShingleSize);
}

OrgApacheLuceneAnalysisShingleShingleFilter *new_OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *input, jint maxShingleSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisShingleShingleFilter, initWithOrgApacheLuceneAnalysisTokenStream_withInt_, input, maxShingleSize)
}

OrgApacheLuceneAnalysisShingleShingleFilter *create_OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *input, jint maxShingleSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisShingleShingleFilter, initWithOrgApacheLuceneAnalysisTokenStream_withInt_, input, maxShingleSize)
}

void OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisShingleShingleFilter *self, OrgApacheLuceneAnalysisTokenStream *input) {
  OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withInt_(self, input, OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_MIN_SHINGLE_SIZE, OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_MAX_SHINGLE_SIZE);
}

OrgApacheLuceneAnalysisShingleShingleFilter *new_OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *input) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisShingleShingleFilter, initWithOrgApacheLuceneAnalysisTokenStream_, input)
}

OrgApacheLuceneAnalysisShingleShingleFilter *create_OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *input) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisShingleShingleFilter, initWithOrgApacheLuceneAnalysisTokenStream_, input)
}

void OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withNSString_(OrgApacheLuceneAnalysisShingleShingleFilter *self, OrgApacheLuceneAnalysisTokenStream *input, NSString *tokenType) {
  OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withInt_(self, input, OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_MIN_SHINGLE_SIZE, OrgApacheLuceneAnalysisShingleShingleFilter_DEFAULT_MAX_SHINGLE_SIZE);
  [self setTokenTypeWithNSString:tokenType];
}

OrgApacheLuceneAnalysisShingleShingleFilter *new_OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withNSString_(OrgApacheLuceneAnalysisTokenStream *input, NSString *tokenType) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisShingleShingleFilter, initWithOrgApacheLuceneAnalysisTokenStream_withNSString_, input, tokenType)
}

OrgApacheLuceneAnalysisShingleShingleFilter *create_OrgApacheLuceneAnalysisShingleShingleFilter_initWithOrgApacheLuceneAnalysisTokenStream_withNSString_(OrgApacheLuceneAnalysisTokenStream *input, NSString *tokenType) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisShingleShingleFilter, initWithOrgApacheLuceneAnalysisTokenStream_withNSString_, input, tokenType)
}

OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *OrgApacheLuceneAnalysisShingleShingleFilter_getNextTokenWithOrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_(OrgApacheLuceneAnalysisShingleShingleFilter *self, OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *target) {
  OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *newTarget = target;
  if (self->numFillerTokensToInsert_ > 0) {
    if (nil == target) {
      newTarget = create_OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_initWithOrgApacheLuceneAnalysisShingleShingleFilter_withOrgApacheLuceneUtilAttributeSource_(self, [((OrgApacheLuceneUtilAttributeSource *) nil_chk(self->nextInputStreamToken_)) cloneAttributes]);
    }
    else {
      [((OrgApacheLuceneUtilAttributeSource *) nil_chk(self->nextInputStreamToken_)) copyToWithOrgApacheLuceneUtilAttributeSource:target->attSource_];
    }
    [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(((OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *) nil_chk(newTarget))->offsetAtt_)) setOffsetWithInt:[newTarget->offsetAtt_ startOffset] withInt:[newTarget->offsetAtt_ startOffset]];
    [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(newTarget->termAtt_)) copyBufferWithCharArray:self->fillerToken_ withInt:0 withInt:((IOSCharArray *) nil_chk(self->fillerToken_))->size_];
    newTarget->isFiller_ = true;
    --self->numFillerTokensToInsert_;
  }
  else if (self->isNextInputStreamToken_) {
    if (nil == target) {
      newTarget = create_OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_initWithOrgApacheLuceneAnalysisShingleShingleFilter_withOrgApacheLuceneUtilAttributeSource_(self, [((OrgApacheLuceneUtilAttributeSource *) nil_chk(self->nextInputStreamToken_)) cloneAttributes]);
    }
    else {
      [((OrgApacheLuceneUtilAttributeSource *) nil_chk(self->nextInputStreamToken_)) copyToWithOrgApacheLuceneUtilAttributeSource:target->attSource_];
    }
    self->isNextInputStreamToken_ = false;
    ((OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *) nil_chk(newTarget))->isFiller_ = false;
  }
  else if (!self->exhausted_) {
    if ([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(self->input_)) incrementToken]) {
      if (nil == target) {
        newTarget = create_OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_initWithOrgApacheLuceneAnalysisShingleShingleFilter_withOrgApacheLuceneUtilAttributeSource_(self, [self cloneAttributes]);
      }
      else {
        [self copyToWithOrgApacheLuceneUtilAttributeSource:target->attSource_];
      }
      if ([((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(self->posIncrAtt_)) getPositionIncrement] > 1) {
        self->numFillerTokensToInsert_ = JavaLangMath_minWithInt_withInt_([self->posIncrAtt_ getPositionIncrement] - 1, self->maxShingleSize_ - 1);
        if (nil == self->nextInputStreamToken_) {
          JreStrongAssign(&self->nextInputStreamToken_, [self cloneAttributes]);
        }
        else {
          [self copyToWithOrgApacheLuceneUtilAttributeSource:self->nextInputStreamToken_];
        }
        self->isNextInputStreamToken_ = true;
        [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(((OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *) nil_chk(newTarget))->offsetAtt_)) setOffsetWithInt:[((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(self->offsetAtt_)) startOffset] withInt:[self->offsetAtt_ startOffset]];
        [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(newTarget->termAtt_)) copyBufferWithCharArray:self->fillerToken_ withInt:0 withInt:((IOSCharArray *) nil_chk(self->fillerToken_))->size_];
        newTarget->isFiller_ = true;
        --self->numFillerTokensToInsert_;
      }
      else {
        ((OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *) nil_chk(newTarget))->isFiller_ = false;
      }
    }
    else {
      self->exhausted_ = true;
      [self->input_ end];
      JreStrongAssign(&self->endState_, [self captureState]);
      self->numFillerTokensToInsert_ = JavaLangMath_minWithInt_withInt_([((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(self->posIncrAtt_)) getPositionIncrement], self->maxShingleSize_ - 1);
      if (self->numFillerTokensToInsert_ > 0) {
        JreStrongAssignAndConsume(&self->nextInputStreamToken_, new_OrgApacheLuceneUtilAttributeSource_initWithOrgApacheLuceneUtilAttributeFactory_([self getAttributeFactory]));
        [self->nextInputStreamToken_ addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()];
        id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> newOffsetAtt = [((OrgApacheLuceneUtilAttributeSource *) nil_chk(self->nextInputStreamToken_)) addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()];
        [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(newOffsetAtt)) setOffsetWithInt:[((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(self->offsetAtt_)) endOffset] withInt:[self->offsetAtt_ endOffset]];
        return OrgApacheLuceneAnalysisShingleShingleFilter_getNextTokenWithOrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_(self, target);
      }
      else {
        newTarget = nil;
      }
    }
  }
  else {
    newTarget = nil;
  }
  return newTarget;
}

void OrgApacheLuceneAnalysisShingleShingleFilter_shiftInputWindow(OrgApacheLuceneAnalysisShingleShingleFilter *self) {
  OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *firstToken = nil;
  if ([((JavaUtilLinkedList *) nil_chk(self->inputWindow_)) size] > 0) {
    firstToken = [((JavaUtilLinkedList *) nil_chk(self->inputWindow_)) removeFirst];
  }
  while ([((JavaUtilLinkedList *) nil_chk(self->inputWindow_)) size] < self->maxShingleSize_) {
    if (nil != firstToken) {
      if (nil != OrgApacheLuceneAnalysisShingleShingleFilter_getNextTokenWithOrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_(self, firstToken)) {
        [((JavaUtilLinkedList *) nil_chk(self->inputWindow_)) addWithId:firstToken];
        firstToken = nil;
      }
      else {
        break;
      }
    }
    else {
      OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *nextToken = OrgApacheLuceneAnalysisShingleShingleFilter_getNextTokenWithOrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_(self, nil);
      if (nil != nextToken) {
        [((JavaUtilLinkedList *) nil_chk(self->inputWindow_)) addWithId:nextToken];
      }
      else {
        break;
      }
    }
  }
  if (self->outputUnigramsIfNoShingles_ && self->noShingleOutput_ && ((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(self->gramSize_))->minValue_ > 1 && [((JavaUtilLinkedList *) nil_chk(self->inputWindow_)) size] < self->minShingleSize_) {
    ((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(self->gramSize_))->minValue_ = 1;
  }
  [((OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *) nil_chk(self->gramSize_)) reset];
  self->isOutputHere_ = false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisShingleShingleFilter)

@implementation OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence

- (instancetype)initWithOrgApacheLuceneAnalysisShingleShingleFilter:(OrgApacheLuceneAnalysisShingleShingleFilter *)outer$ {
  OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence_initWithOrgApacheLuceneAnalysisShingleShingleFilter_(self, outer$);
  return self;
}

- (jint)getValue {
  return value_;
}

- (void)advance {
  previousValue_ = value_;
  if (value_ == 1) {
    value_ = this$0_->minShingleSize_;
  }
  else if (value_ == this$0_->maxShingleSize_) {
    [self reset];
  }
  else {
    ++value_;
  }
}

- (void)reset {
  previousValue_ = value_ = minValue_;
}

- (jboolean)atMinValue {
  return value_ == minValue_;
}

- (jint)getPreviousValue {
  return previousValue_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneAnalysisShingleShingleFilter:", "CircularSequence", NULL, 0x1, NULL, NULL },
    { "getValue", NULL, "I", 0x1, NULL, NULL },
    { "advance", NULL, "V", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "atMinValue", NULL, "Z", 0x1, NULL, NULL },
    { "getPreviousValue", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.analysis.shingle.ShingleFilter;", NULL, NULL, .constantValue.asLong = 0 },
    { "value_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "previousValue_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "minValue_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence = { 2, "CircularSequence", "org.apache.lucene.analysis.shingle", "ShingleFilter", 0x2, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence;
}

@end

void OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence_initWithOrgApacheLuceneAnalysisShingleShingleFilter_(OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *self, OrgApacheLuceneAnalysisShingleShingleFilter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->minValue_ = outer$->outputUnigrams_ ? 1 : outer$->minShingleSize_;
  [self reset];
}

OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *new_OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence_initWithOrgApacheLuceneAnalysisShingleShingleFilter_(OrgApacheLuceneAnalysisShingleShingleFilter *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence, initWithOrgApacheLuceneAnalysisShingleShingleFilter_, outer$)
}

OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence *create_OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence_initWithOrgApacheLuceneAnalysisShingleShingleFilter_(OrgApacheLuceneAnalysisShingleShingleFilter *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence, initWithOrgApacheLuceneAnalysisShingleShingleFilter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisShingleShingleFilter_CircularSequence)

@implementation OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken

- (instancetype)initWithOrgApacheLuceneAnalysisShingleShingleFilter:(OrgApacheLuceneAnalysisShingleShingleFilter *)outer$
                             withOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)attSource {
  OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_initWithOrgApacheLuceneAnalysisShingleShingleFilter_withOrgApacheLuceneUtilAttributeSource_(self, outer$, attSource);
  return self;
}

- (void)dealloc {
  RELEASE_(attSource_);
  RELEASE_(termAtt_);
  RELEASE_(offsetAtt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneAnalysisShingleShingleFilter:withOrgApacheLuceneUtilAttributeSource:", "InputWindowToken", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "attSource_", NULL, 0x10, "Lorg.apache.lucene.util.AttributeSource;", NULL, NULL, .constantValue.asLong = 0 },
    { "termAtt_", NULL, 0x10, "Lorg.apache.lucene.analysis.tokenattributes.CharTermAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "offsetAtt_", NULL, 0x10, "Lorg.apache.lucene.analysis.tokenattributes.OffsetAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "isFiller_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken = { 2, "InputWindowToken", "org.apache.lucene.analysis.shingle", "ShingleFilter", 0x2, 1, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken;
}

@end

void OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_initWithOrgApacheLuceneAnalysisShingleShingleFilter_withOrgApacheLuceneUtilAttributeSource_(OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *self, OrgApacheLuceneAnalysisShingleShingleFilter *outer$, OrgApacheLuceneUtilAttributeSource *attSource) {
  NSObject_init(self);
  self->isFiller_ = false;
  JreStrongAssign(&self->attSource_, attSource);
  JreStrongAssign(&self->termAtt_, [((OrgApacheLuceneUtilAttributeSource *) nil_chk(attSource)) getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [attSource getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
}

OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *new_OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_initWithOrgApacheLuceneAnalysisShingleShingleFilter_withOrgApacheLuceneUtilAttributeSource_(OrgApacheLuceneAnalysisShingleShingleFilter *outer$, OrgApacheLuceneUtilAttributeSource *attSource) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken, initWithOrgApacheLuceneAnalysisShingleShingleFilter_withOrgApacheLuceneUtilAttributeSource_, outer$, attSource)
}

OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken *create_OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken_initWithOrgApacheLuceneAnalysisShingleShingleFilter_withOrgApacheLuceneUtilAttributeSource_(OrgApacheLuceneAnalysisShingleShingleFilter *outer$, OrgApacheLuceneUtilAttributeSource *attSource) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken, initWithOrgApacheLuceneAnalysisShingleShingleFilter_withOrgApacheLuceneUtilAttributeSource_, outer$, attSource)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisShingleShingleFilter_InputWindowToken)
