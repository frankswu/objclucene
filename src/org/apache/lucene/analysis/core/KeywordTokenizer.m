//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/core/KeywordTokenizer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizer.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/AttributeSource.h"

@interface OrgApacheLuceneAnalysisCoreKeywordTokenizer () {
 @public
  jboolean done_;
  jint finalOffset_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAtt_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCoreKeywordTokenizer, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCoreKeywordTokenizer, offsetAtt_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)

@implementation OrgApacheLuceneAnalysisCoreKeywordTokenizer

- (instancetype)init {
  OrgApacheLuceneAnalysisCoreKeywordTokenizer_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)bufferSize {
  OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithInt_(self, bufferSize);
  return self;
}

- (instancetype)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory
                                                    withInt:(jint)bufferSize {
  OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_(self, factory, bufferSize);
  return self;
}

- (jboolean)incrementToken {
  if (!done_) {
    [self clearAttributes];
    done_ = YES;
    jint upto = 0;
    IOSCharArray *buffer = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) buffer];
    while (YES) {
      jint length = [((JavaIoReader *) nil_chk(input_)) readWithCharArray:buffer withInt:upto withInt:((IOSCharArray *) nil_chk(buffer))->size_ - upto];
      if (length == -1) break;
      upto += length;
      if (upto == buffer->size_) buffer = [termAtt_ resizeBufferWithInt:1 + buffer->size_];
    }
    [termAtt_ setLengthWithInt:upto];
    finalOffset_ = [self correctOffsetWithInt:upto];
    [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:[self correctOffsetWithInt:0] withInt:finalOffset_];
    return YES;
  }
  return NO;
}

- (void)end {
  [super end];
  [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:finalOffset_ withInt:finalOffset_];
}

- (void)reset {
  [super reset];
  self->done_ = NO;
}

- (void)dealloc {
  RELEASE_(termAtt_);
  RELEASE_(offsetAtt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "KeywordTokenizer", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "KeywordTokenizer", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheLuceneUtilAttributeFactory:withInt:", "KeywordTokenizer", NULL, 0x1, NULL, NULL },
    { "incrementToken", NULL, "Z", 0x11, "Ljava.io.IOException;", NULL },
    { "end", NULL, "V", 0x11, "Ljava.io.IOException;", NULL },
    { "reset", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_BUFFER_SIZE", "DEFAULT_BUFFER_SIZE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisCoreKeywordTokenizer_DEFAULT_BUFFER_SIZE },
    { "done_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "finalOffset_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "termAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.CharTermAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "offsetAtt_", NULL, 0x2, "Lorg.apache.lucene.analysis.tokenattributes.OffsetAttribute;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCoreKeywordTokenizer = { 2, "KeywordTokenizer", "org.apache.lucene.analysis.core", NULL, 0x11, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisCoreKeywordTokenizer;
}

@end

void OrgApacheLuceneAnalysisCoreKeywordTokenizer_init(OrgApacheLuceneAnalysisCoreKeywordTokenizer *self) {
  OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithInt_(self, OrgApacheLuceneAnalysisCoreKeywordTokenizer_DEFAULT_BUFFER_SIZE);
}

OrgApacheLuceneAnalysisCoreKeywordTokenizer *new_OrgApacheLuceneAnalysisCoreKeywordTokenizer_init() {
  OrgApacheLuceneAnalysisCoreKeywordTokenizer *self = [OrgApacheLuceneAnalysisCoreKeywordTokenizer alloc];
  OrgApacheLuceneAnalysisCoreKeywordTokenizer_init(self);
  return self;
}

void OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithInt_(OrgApacheLuceneAnalysisCoreKeywordTokenizer *self, jint bufferSize) {
  OrgApacheLuceneAnalysisTokenizer_init(self);
  self->done_ = NO;
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  if (bufferSize <= 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"bufferSize must be > 0") autorelease];
  }
  [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(self->termAtt_)) resizeBufferWithInt:bufferSize];
}

OrgApacheLuceneAnalysisCoreKeywordTokenizer *new_OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithInt_(jint bufferSize) {
  OrgApacheLuceneAnalysisCoreKeywordTokenizer *self = [OrgApacheLuceneAnalysisCoreKeywordTokenizer alloc];
  OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithInt_(self, bufferSize);
  return self;
}

void OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_(OrgApacheLuceneAnalysisCoreKeywordTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory, jint bufferSize) {
  OrgApacheLuceneAnalysisTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(self, factory);
  self->done_ = NO;
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  if (bufferSize <= 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"bufferSize must be > 0") autorelease];
  }
  [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(self->termAtt_)) resizeBufferWithInt:bufferSize];
}

OrgApacheLuceneAnalysisCoreKeywordTokenizer *new_OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, jint bufferSize) {
  OrgApacheLuceneAnalysisCoreKeywordTokenizer *self = [OrgApacheLuceneAnalysisCoreKeywordTokenizer alloc];
  OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_(self, factory, bufferSize);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCoreKeywordTokenizer)
