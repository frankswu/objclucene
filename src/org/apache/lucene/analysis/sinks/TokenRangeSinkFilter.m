//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter.h"
#include "org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.h"
#include "org/apache/lucene/util/AttributeSource.h"

@interface OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter () {
 @public
  jint lower_;
  jint upper_;
  jint count_;
}

@end

@implementation OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter

- (instancetype)initWithInt:(jint)lower
                    withInt:(jint)upper {
  OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter_initWithInt_withInt_(self, lower, upper);
  return self;
}

- (jboolean)acceptWithOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)source {
  @try {
    if (count_ >= lower_ && count_ < upper_) {
      return true;
    }
    return false;
  }
  @finally {
    count_++;
  }
}

- (void)reset {
  count_ = 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "TokenRangeSinkFilter", NULL, 0x1, NULL, NULL },
    { "acceptWithOrgApacheLuceneUtilAttributeSource:", "accept", "Z", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lower_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "upper_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "count_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter = { 2, "TokenRangeSinkFilter", "org.apache.lucene.analysis.sinks", NULL, 0x1, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter;
}

@end

void OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter_initWithInt_withInt_(OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter *self, jint lower, jint upper) {
  OrgApacheLuceneAnalysisSinksTeeSinkTokenFilter_SinkFilter_init(self);
  if (lower < 1) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"lower must be greater than zero") autorelease];
  }
  if (lower > upper) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"lower must not be greater than upper") autorelease];
  }
  self->lower_ = lower;
  self->upper_ = upper;
}

OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter *new_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter_initWithInt_withInt_(jint lower, jint upper) {
  OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter *self = [OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter alloc];
  OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter_initWithInt_withInt_(self, lower, upper);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter)
