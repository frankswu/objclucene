//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.h"
#include "org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.h"
#include "org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory.h"
#include "org/apache/lucene/analysis/compound/Lucene43DictionaryCompoundWordTokenFilter.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/TokenFilterFactory.h"
#include "org/apache/lucene/util/Version.h"

@interface OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory () {
 @public
  OrgApacheLuceneAnalysisUtilCharArraySet *dictionary_;
  NSString *dictFile_;
  jint minWordSize_;
  jint minSubwordSize_;
  jint maxSubwordSize_;
  jboolean onlyLongestMatch_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory, dictionary_, OrgApacheLuceneAnalysisUtilCharArraySet *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory, dictFile_, NSString *)

@implementation OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)args {
  OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory_initWithJavaUtilMap_(self, args);
  return self;
}

- (void)informWithOrgApacheLuceneAnalysisUtilResourceLoader:(id<OrgApacheLuceneAnalysisUtilResourceLoader>)loader {
  JreStrongAssign(&dictionary_, [super getWordSetWithOrgApacheLuceneAnalysisUtilResourceLoader:loader withNSString:dictFile_ withBoolean:NO]);
}

- (OrgApacheLuceneAnalysisTokenStream *)createWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input {
  if (dictionary_ == nil) {
    return input;
  }
  if ([((OrgApacheLuceneUtilVersion *) nil_chk(luceneMatchVersion_)) onOrAfterWithOrgApacheLuceneUtilVersion:JreLoadStatic(OrgApacheLuceneUtilVersion, LUCENE_4_4_0_)]) {
    return [new_OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisUtilCharArraySet_withInt_withInt_withInt_withBoolean_(input, dictionary_, minWordSize_, minSubwordSize_, maxSubwordSize_, onlyLongestMatch_) autorelease];
  }
  return [new_OrgApacheLuceneAnalysisCompoundLucene43DictionaryCompoundWordTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisUtilCharArraySet_withInt_withInt_withInt_withBoolean_(input, dictionary_, minWordSize_, minSubwordSize_, maxSubwordSize_, onlyLongestMatch_) autorelease];
}

- (void)dealloc {
  RELEASE_(dictionary_);
  RELEASE_(dictFile_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilMap:", "DictionaryCompoundWordTokenFilterFactory", NULL, 0x1, NULL, NULL },
    { "informWithOrgApacheLuceneAnalysisUtilResourceLoader:", "inform", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "createWithOrgApacheLuceneAnalysisTokenStream:", "create", "Lorg.apache.lucene.analysis.TokenStream;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dictionary_", NULL, 0x2, "Lorg.apache.lucene.analysis.util.CharArraySet;", NULL, NULL, .constantValue.asLong = 0 },
    { "dictFile_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "minWordSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "minSubwordSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "maxSubwordSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "onlyLongestMatch_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory = { 2, "DictionaryCompoundWordTokenFilterFactory", "org.apache.lucene.analysis.compound", NULL, 0x1, 3, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory;
}

@end

void OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory_initWithJavaUtilMap_(OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory *self, id<JavaUtilMap> args) {
  OrgApacheLuceneAnalysisUtilTokenFilterFactory_initWithJavaUtilMap_(self, args);
  JreStrongAssign(&self->dictFile_, [self requireWithJavaUtilMap:args withNSString:@"dictionary"]);
  self->minWordSize_ = [self getIntWithJavaUtilMap:args withNSString:@"minWordSize" withInt:OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_DEFAULT_MIN_WORD_SIZE];
  self->minSubwordSize_ = [self getIntWithJavaUtilMap:args withNSString:@"minSubwordSize" withInt:OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_DEFAULT_MIN_SUBWORD_SIZE];
  self->maxSubwordSize_ = [self getIntWithJavaUtilMap:args withNSString:@"maxSubwordSize" withInt:OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_DEFAULT_MAX_SUBWORD_SIZE];
  self->onlyLongestMatch_ = [self getBooleanWithJavaUtilMap:args withNSString:@"onlyLongestMatch" withBoolean:YES];
  if (![((id<JavaUtilMap>) nil_chk(args)) isEmpty]) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unknown parameters: ", args)) autorelease];
  }
}

OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory *new_OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory_initWithJavaUtilMap_(id<JavaUtilMap> args) {
  OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory *self = [OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory alloc];
  OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory_initWithJavaUtilMap_(self, args);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCompoundDictionaryCompoundWordTokenFilterFactory)
