//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "org/apache/lucene/analysis/compound/hyphenation/ByteVector.h"
#include "org/apache/lucene/analysis/compound/hyphenation/CharVector.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphenation.h"
#include "org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternParser.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree.h"
#include "org/xml/sax/InputSource.h"

@interface OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree () {
 @public
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *ivalues_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree, ivalues_, OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *)

@implementation OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree

- (instancetype)init {
  OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree_init(self);
  return self;
}

- (jint)packValuesWithNSString:(NSString *)values {
  jint i, n = ((jint) [((NSString *) nil_chk(values)) length]);
  jint m = (n & 1) == 1 ? (JreRShift32(n, 1)) + 2 : (JreRShift32(n, 1)) + 1;
  jint offset = [((OrgApacheLuceneAnalysisCompoundHyphenationByteVector *) nil_chk(vspace_)) alloc__WithInt:m];
  IOSByteArray *va = [vspace_ getArray];
  for (i = 0; i < n; i++) {
    jint j = JreRShift32(i, 1);
    jbyte v = (jbyte) (([values charAtWithInt:i] - '0' + 1) & (jint) 0x0f);
    if ((i & 1) == 1) {
      *IOSByteArray_GetRef(nil_chk(va), j + offset) = (jbyte) (IOSByteArray_Get(va, j + offset) | v);
    }
    else {
      *IOSByteArray_GetRef(nil_chk(va), j + offset) = (jbyte) (JreLShift32(v, 4));
    }
  }
  *IOSByteArray_GetRef(nil_chk(va), m - 1 + offset) = 0;
  return offset;
}

- (NSString *)unpackValuesWithInt:(jint)k {
  JavaLangStringBuilder *buf = [new_JavaLangStringBuilder_init() autorelease];
  jbyte v = [((OrgApacheLuceneAnalysisCompoundHyphenationByteVector *) nil_chk(vspace_)) getWithInt:k++];
  while (v != 0) {
    jchar c = (jchar) ((JreURShift32(v, 4)) - 1 + '0');
    [buf appendWithChar:c];
    c = (jchar) (v & (jint) 0x0f);
    if (c == 0) {
      break;
    }
    c = (jchar) (c - 1 + '0');
    [buf appendWithChar:c];
    v = [vspace_ getWithInt:k++];
  }
  return [buf description];
}

- (void)loadPatternsWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)source {
  OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *pp = [new_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_initWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer_(self) autorelease];
  JreStrongAssignAndConsume(&ivalues_, new_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_init());
  [pp parseWithOrgXmlSaxInputSource:source];
  [self trimToSize];
  [((OrgApacheLuceneAnalysisCompoundHyphenationByteVector *) nil_chk(vspace_)) trimToSize];
  [((OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *) nil_chk(classmap_)) trimToSize];
  JreStrongAssign(&ivalues_, nil);
}

- (NSString *)findPatternWithNSString:(NSString *)pat {
  jint k = [super findWithNSString:pat];
  if (k >= 0) {
    return [self unpackValuesWithInt:k];
  }
  return @"";
}

- (jint)hstrcmpWithCharArray:(IOSCharArray *)s
                     withInt:(jint)si
               withCharArray:(IOSCharArray *)t
                     withInt:(jint)ti {
  for (; IOSCharArray_Get(nil_chk(s), si) == IOSCharArray_Get(nil_chk(t), ti); si++, ti++) {
    if (IOSCharArray_Get(s, si) == 0) {
      return 0;
    }
  }
  if (IOSCharArray_Get(t, ti) == 0) {
    return 0;
  }
  return IOSCharArray_Get(s, si) - IOSCharArray_Get(t, ti);
}

- (IOSByteArray *)getValuesWithInt:(jint)k {
  JavaLangStringBuilder *buf = [new_JavaLangStringBuilder_init() autorelease];
  jbyte v = [((OrgApacheLuceneAnalysisCompoundHyphenationByteVector *) nil_chk(vspace_)) getWithInt:k++];
  while (v != 0) {
    jchar c = (jchar) ((JreURShift32(v, 4)) - 1);
    [buf appendWithChar:c];
    c = (jchar) (v & (jint) 0x0f);
    if (c == 0) {
      break;
    }
    c = (jchar) (c - 1);
    [buf appendWithChar:c];
    v = [vspace_ getWithInt:k++];
  }
  IOSByteArray *res = [IOSByteArray arrayWithLength:[buf length]];
  for (jint i = 0; i < res->size_; i++) {
    *IOSByteArray_GetRef(res, i) = (jbyte) [buf charAtWithInt:i];
  }
  return res;
}

- (void)searchPatternsWithCharArray:(IOSCharArray *)word
                            withInt:(jint)index
                      withByteArray:(IOSByteArray *)il {
  IOSByteArray *values;
  jint i = index;
  jchar p, q;
  jchar sp = IOSCharArray_Get(nil_chk(word), i);
  p = root_;
  while (p > 0 && p < ((IOSCharArray *) nil_chk(sc_))->size_) {
    if (IOSCharArray_Get(nil_chk(sc_), p) == (jint) 0xFFFF) {
      if ([self hstrcmpWithCharArray:word withInt:i withCharArray:[((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(kv_)) getArray] withInt:IOSCharArray_Get(nil_chk(lo_), p)] == 0) {
        values = [self getValuesWithInt:IOSCharArray_Get(nil_chk(eq_), p)];
        jint j = index;
        for (jint k = 0; k < ((IOSByteArray *) nil_chk(values))->size_; k++) {
          if (j < ((IOSByteArray *) nil_chk(il))->size_ && IOSByteArray_Get(values, k) > IOSByteArray_Get(il, j)) {
            *IOSByteArray_GetRef(il, j) = IOSByteArray_Get(values, k);
          }
          j++;
        }
      }
      return;
    }
    jint d = sp - IOSCharArray_Get(sc_, p);
    if (d == 0) {
      if (sp == 0) {
        break;
      }
      sp = IOSCharArray_Get(word, ++i);
      p = IOSCharArray_Get(nil_chk(eq_), p);
      q = p;
      while (q > 0 && q < sc_->size_) {
        if (IOSCharArray_Get(sc_, q) == (jint) 0xFFFF) {
          break;
        }
        if (IOSCharArray_Get(sc_, q) == 0) {
          values = [self getValuesWithInt:IOSCharArray_Get(eq_, q)];
          jint j = index;
          for (jint k = 0; k < ((IOSByteArray *) nil_chk(values))->size_; k++) {
            if (j < ((IOSByteArray *) nil_chk(il))->size_ && IOSByteArray_Get(values, k) > IOSByteArray_Get(il, j)) {
              *IOSByteArray_GetRef(il, j) = IOSByteArray_Get(values, k);
            }
            j++;
          }
          break;
        }
        else {
          q = IOSCharArray_Get(nil_chk(lo_), q);
        }
      }
    }
    else {
      p = d < 0 ? IOSCharArray_Get(nil_chk(lo_), p) : IOSCharArray_Get(nil_chk(hi_), p);
    }
  }
}

- (OrgApacheLuceneAnalysisCompoundHyphenationHyphenation *)hyphenateWithNSString:(NSString *)word
                                                                         withInt:(jint)remainCharCount
                                                                         withInt:(jint)pushCharCount {
  IOSCharArray *w = [((NSString *) nil_chk(word)) toCharArray];
  return [self hyphenateWithCharArray:w withInt:0 withInt:((IOSCharArray *) nil_chk(w))->size_ withInt:remainCharCount withInt:pushCharCount];
}

- (OrgApacheLuceneAnalysisCompoundHyphenationHyphenation *)hyphenateWithCharArray:(IOSCharArray *)w
                                                                          withInt:(jint)offset
                                                                          withInt:(jint)len
                                                                          withInt:(jint)remainCharCount
                                                                          withInt:(jint)pushCharCount {
  jint i;
  IOSCharArray *word = [IOSCharArray arrayWithLength:len + 3];
  IOSCharArray *c = [IOSCharArray arrayWithLength:2];
  jint iIgnoreAtBeginning = 0;
  jint iLength = len;
  jboolean bEndOfLetters = NO;
  for (i = 1; i <= len; i++) {
    *IOSCharArray_GetRef(c, 0) = IOSCharArray_Get(nil_chk(w), offset + i - 1);
    jint nc = [((OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *) nil_chk(classmap_)) findWithCharArray:c withInt:0];
    if (nc < 0) {
      if (i == (1 + iIgnoreAtBeginning)) {
        iIgnoreAtBeginning++;
      }
      else {
        bEndOfLetters = YES;
      }
      iLength--;
    }
    else {
      if (!bEndOfLetters) {
        *IOSCharArray_GetRef(word, i - iIgnoreAtBeginning) = (jchar) nc;
      }
      else {
        return nil;
      }
    }
  }
  len = iLength;
  if (len < (remainCharCount + pushCharCount)) {
    return nil;
  }
  IOSIntArray *result = [IOSIntArray arrayWithLength:len + 1];
  jint k = 0;
  NSString *sw = [NSString stringWithCharacters:word offset:1 length:len];
  if ([((JavaUtilHashMap *) nil_chk(stoplist_)) containsKeyWithId:sw]) {
    JavaUtilArrayList *hw = [stoplist_ getWithId:sw];
    jint j = 0;
    for (i = 0; i < [((JavaUtilArrayList *) nil_chk(hw)) size]; i++) {
      id o = [hw getWithInt:i];
      if ([o isKindOfClass:[NSString class]]) {
        j += ((jint) [((NSString *) nil_chk(((NSString *) check_class_cast(o, [NSString class])))) length]);
        if (j >= remainCharCount && j < (len - pushCharCount)) {
          *IOSIntArray_GetRef(result, k++) = j + iIgnoreAtBeginning;
        }
      }
    }
  }
  else {
    *IOSCharArray_GetRef(word, 0) = '.';
    *IOSCharArray_GetRef(word, len + 1) = '.';
    *IOSCharArray_GetRef(word, len + 2) = 0;
    IOSByteArray *il = [IOSByteArray arrayWithLength:len + 3];
    for (i = 0; i < len + 1; i++) {
      [self searchPatternsWithCharArray:word withInt:i withByteArray:il];
    }
    for (i = 0; i < len; i++) {
      if (((IOSByteArray_Get(il, i + 1) & 1) == 1) && i >= remainCharCount && i <= (len - pushCharCount)) {
        *IOSIntArray_GetRef(result, k++) = i + iIgnoreAtBeginning;
      }
    }
  }
  if (k > 0) {
    IOSIntArray *res = [IOSIntArray arrayWithLength:k + 2];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(result, 0, res, 1, k);
    *IOSIntArray_GetRef(res, 0) = 0;
    *IOSIntArray_GetRef(res, k + 1) = len;
    return [new_OrgApacheLuceneAnalysisCompoundHyphenationHyphenation_initWithIntArray_(res) autorelease];
  }
  else {
    return nil;
  }
}

- (void)addClassWithNSString:(NSString *)chargroup {
  if (((jint) [((NSString *) nil_chk(chargroup)) length]) > 0) {
    jchar equivChar = [chargroup charAtWithInt:0];
    IOSCharArray *key = [IOSCharArray arrayWithLength:2];
    *IOSCharArray_GetRef(key, 1) = 0;
    for (jint i = 0; i < ((jint) [chargroup length]); i++) {
      *IOSCharArray_GetRef(key, 0) = [chargroup charAtWithInt:i];
      [((OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *) nil_chk(classmap_)) insertWithCharArray:key withInt:0 withChar:equivChar];
    }
  }
}

- (void)addExceptionWithNSString:(NSString *)word
           withJavaUtilArrayList:(JavaUtilArrayList *)hyphenatedword {
  [((JavaUtilHashMap *) nil_chk(stoplist_)) putWithId:word withId:hyphenatedword];
}

- (void)addPatternWithNSString:(NSString *)pattern
                  withNSString:(NSString *)ivalue {
  jint k = [((OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *) nil_chk(ivalues_)) findWithNSString:ivalue];
  if (k <= 0) {
    k = [self packValuesWithNSString:ivalue];
    [ivalues_ insertWithNSString:ivalue withChar:(jchar) k];
  }
  [self insertWithNSString:pattern withChar:(jchar) k];
}

- (void)printStatsWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:JreStrcat("$$", @"Value space size = ", JavaLangInteger_toStringWithInt_([((OrgApacheLuceneAnalysisCompoundHyphenationByteVector *) nil_chk(vspace_)) length]))];
  [super printStatsWithJavaIoPrintStream:outArg];
}

- (void)dealloc {
  RELEASE_(vspace_);
  RELEASE_(stoplist_);
  RELEASE_(classmap_);
  RELEASE_(ivalues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "HyphenationTree", NULL, 0x1, NULL, NULL },
    { "packValuesWithNSString:", "packValues", "I", 0x4, NULL, NULL },
    { "unpackValuesWithInt:", "unpackValues", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "loadPatternsWithOrgXmlSaxInputSource:", "loadPatterns", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "findPatternWithNSString:", "findPattern", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "hstrcmpWithCharArray:withInt:withCharArray:withInt:", "hstrcmp", "I", 0x4, NULL, NULL },
    { "getValuesWithInt:", "getValues", "[B", 0x4, NULL, NULL },
    { "searchPatternsWithCharArray:withInt:withByteArray:", "searchPatterns", "V", 0x4, NULL, NULL },
    { "hyphenateWithNSString:withInt:withInt:", "hyphenate", "Lorg.apache.lucene.analysis.compound.hyphenation.Hyphenation;", 0x1, NULL, NULL },
    { "hyphenateWithCharArray:withInt:withInt:withInt:withInt:", "hyphenate", "Lorg.apache.lucene.analysis.compound.hyphenation.Hyphenation;", 0x1, NULL, NULL },
    { "addClassWithNSString:", "addClass", "V", 0x1, NULL, NULL },
    { "addExceptionWithNSString:withJavaUtilArrayList:", "addException", "V", 0x1, NULL, NULL },
    { "addPatternWithNSString:withNSString:", "addPattern", "V", 0x1, NULL, NULL },
    { "printStatsWithJavaIoPrintStream:", "printStats", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vspace_", NULL, 0x4, "Lorg.apache.lucene.analysis.compound.hyphenation.ByteVector;", NULL, NULL, .constantValue.asLong = 0 },
    { "stoplist_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/Object;>;>;", .constantValue.asLong = 0 },
    { "classmap_", NULL, 0x4, "Lorg.apache.lucene.analysis.compound.hyphenation.TernaryTree;", NULL, NULL, .constantValue.asLong = 0 },
    { "ivalues_", NULL, 0x82, "Lorg.apache.lucene.analysis.compound.hyphenation.TernaryTree;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree = { 2, "HyphenationTree", "org.apache.lucene.analysis.compound.hyphenation", NULL, 0x1, 14, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree;
}

@end

void OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree_init(OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree *self) {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_init(self);
  JreStrongAssignAndConsume(&self->stoplist_, new_JavaUtilHashMap_initWithInt_(23));
  JreStrongAssignAndConsume(&self->classmap_, new_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_init());
  JreStrongAssignAndConsume(&self->vspace_, new_OrgApacheLuceneAnalysisCompoundHyphenationByteVector_init());
  [self->vspace_ alloc__WithInt:1];
}

OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree *new_OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree_init() {
  OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree *self = [OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree alloc];
  OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree)
