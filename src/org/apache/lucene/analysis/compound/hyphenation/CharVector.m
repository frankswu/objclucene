//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/CharVector.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/apache/lucene/analysis/compound/hyphenation/CharVector.h"

@interface OrgApacheLuceneAnalysisCompoundHyphenationCharVector () {
 @public
  jint blockSize_;
  /*!
   @brief The encapsulated array
   */
  IOSCharArray *array_;
  /*!
   @brief Points to next free item
   */
  jint n_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, array_, IOSCharArray *)

/*!
 @brief Capacity increment size
 */
inline jint OrgApacheLuceneAnalysisCompoundHyphenationCharVector_get_DEFAULT_BLOCK_SIZE();
#define OrgApacheLuceneAnalysisCompoundHyphenationCharVector_DEFAULT_BLOCK_SIZE 2048
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, DEFAULT_BLOCK_SIZE, jint)

@implementation OrgApacheLuceneAnalysisCompoundHyphenationCharVector

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisCompoundHyphenationCharVector_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)capacity {
  OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)a {
  OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_(self, a);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)a
                          withInt:(jint)capacity {
  OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_withInt_(self, a, capacity);
  return self;
}

- (void)clear {
  n_ = 0;
}

- (OrgApacheLuceneAnalysisCompoundHyphenationCharVector *)clone {
  OrgApacheLuceneAnalysisCompoundHyphenationCharVector *cv = create_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_withInt_([((IOSCharArray *) nil_chk(array_)) clone], blockSize_);
  cv->n_ = self->n_;
  return cv;
}

- (IOSCharArray *)getArray {
  return array_;
}

- (jint)length {
  return n_;
}

- (jint)capacity {
  return ((IOSCharArray *) nil_chk(array_))->size_;
}

- (void)putWithInt:(jint)index
          withChar:(jchar)val {
  *IOSCharArray_GetRef(nil_chk(array_), index) = val;
}

- (jchar)getWithInt:(jint)index {
  return IOSCharArray_Get(nil_chk(array_), index);
}

- (jint)alloc__WithInt:(jint)size {
  jint index = n_;
  jint len = ((IOSCharArray *) nil_chk(array_))->size_;
  if (n_ + size >= len) {
    IOSCharArray *aux = [IOSCharArray arrayWithLength:len + blockSize_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array_, 0, aux, 0, len);
    JreStrongAssign(&array_, aux);
  }
  n_ += size;
  return index;
}

- (void)trimToSize {
  if (n_ < ((IOSCharArray *) nil_chk(array_))->size_) {
    IOSCharArray *aux = [IOSCharArray arrayWithLength:n_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array_, 0, aux, 0, n_);
    JreStrongAssign(&array_, aux);
  }
}

- (void)dealloc {
  RELEASE_(array_);
  [super dealloc];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CharVector", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "CharVector", NULL, 0x1, NULL, NULL },
    { "initWithCharArray:", "CharVector", NULL, 0x1, NULL, NULL },
    { "initWithCharArray:withInt:", "CharVector", NULL, 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "clone", NULL, "Lorg.apache.lucene.analysis.compound.hyphenation.CharVector;", 0x1, NULL, NULL },
    { "getArray", NULL, "[C", 0x1, NULL, NULL },
    { "length", NULL, "I", 0x1, NULL, NULL },
    { "capacity", NULL, "I", 0x1, NULL, NULL },
    { "putWithInt:withChar:", "put", "V", 0x1, NULL, NULL },
    { "getWithInt:", "get", "C", 0x1, NULL, NULL },
    { "alloc__WithInt:", "alloc", "I", 0x1, NULL, NULL },
    { "trimToSize", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_BLOCK_SIZE", "DEFAULT_BLOCK_SIZE", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisCompoundHyphenationCharVector_DEFAULT_BLOCK_SIZE },
    { "blockSize_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "array_", NULL, 0x2, "[C", NULL, NULL, .constantValue.asLong = 0 },
    { "n_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCompoundHyphenationCharVector = { 2, "CharVector", "org.apache.lucene.analysis.compound.hyphenation", NULL, 0x1, 13, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisCompoundHyphenationCharVector;
}

@end

void OrgApacheLuceneAnalysisCompoundHyphenationCharVector_init(OrgApacheLuceneAnalysisCompoundHyphenationCharVector *self) {
  OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithInt_(self, OrgApacheLuceneAnalysisCompoundHyphenationCharVector_DEFAULT_BLOCK_SIZE);
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *new_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, init)
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *create_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, init)
}

void OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithInt_(OrgApacheLuceneAnalysisCompoundHyphenationCharVector *self, jint capacity) {
  NSObject_init(self);
  if (capacity > 0) {
    self->blockSize_ = capacity;
  }
  else {
    self->blockSize_ = OrgApacheLuceneAnalysisCompoundHyphenationCharVector_DEFAULT_BLOCK_SIZE;
  }
  JreStrongAssignAndConsume(&self->array_, [IOSCharArray newArrayWithLength:self->blockSize_]);
  self->n_ = 0;
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *new_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, initWithInt_, capacity)
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *create_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, initWithInt_, capacity)
}

void OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_(OrgApacheLuceneAnalysisCompoundHyphenationCharVector *self, IOSCharArray *a) {
  NSObject_init(self);
  self->blockSize_ = OrgApacheLuceneAnalysisCompoundHyphenationCharVector_DEFAULT_BLOCK_SIZE;
  JreStrongAssign(&self->array_, a);
  self->n_ = ((IOSCharArray *) nil_chk(a))->size_;
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *new_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_(IOSCharArray *a) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, initWithCharArray_, a)
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *create_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_(IOSCharArray *a) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, initWithCharArray_, a)
}

void OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_withInt_(OrgApacheLuceneAnalysisCompoundHyphenationCharVector *self, IOSCharArray *a, jint capacity) {
  NSObject_init(self);
  if (capacity > 0) {
    self->blockSize_ = capacity;
  }
  else {
    self->blockSize_ = OrgApacheLuceneAnalysisCompoundHyphenationCharVector_DEFAULT_BLOCK_SIZE;
  }
  JreStrongAssign(&self->array_, a);
  self->n_ = ((IOSCharArray *) nil_chk(a))->size_;
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *new_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_withInt_(IOSCharArray *a, jint capacity) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, initWithCharArray_withInt_, a, capacity)
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *create_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_withInt_(IOSCharArray *a, jint capacity) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, initWithCharArray_withInt_, a, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCompoundHyphenationCharVector)
