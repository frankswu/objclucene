//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Character.h"
#include "java/lang/Error.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"

#define OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_UNKNOWN_ERROR 0
#define OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_NO_MATCH 1
#define OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_PUSHBACK_2BIG 2

@interface OrgApacheLuceneAnalysisStandardStandardTokenizerImpl () {
 @public
  jint ZZ_BUFFERSIZE_;
  JavaIoReader *zzReader_;
  jint zzState_;
  jint zzLexicalState_;
  IOSCharArray *zzBuffer_;
  jint zzMarkedPos_;
  jint zzCurrentPos_;
  jint zzStartRead_;
  jint zzEndRead_;
  jint yyline_;
  jint yychar_;
  jint yycolumn_;
  jboolean zzAtBOL_;
  jboolean zzAtEOF_;
  jboolean zzEOFDone_;
  jint zzFinalHighSurrogate_;
}

+ (IOSIntArray *)zzUnpackAction;

+ (jint)zzUnpackActionWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackRowMap;

+ (jint)zzUnpackRowMapWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackTrans;

+ (jint)zzUnpackTransWithNSString:(NSString *)packed
                          withInt:(jint)offset
                     withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackAttribute;

+ (jint)zzUnpackAttributeWithNSString:(NSString *)packed
                              withInt:(jint)offset
                         withIntArray:(IOSIntArray *)result;

+ (IOSCharArray *)zzUnpackCMapWithNSString:(NSString *)packed;

- (jboolean)zzRefill;

- (void)zzScanErrorWithInt:(jint)errorCode;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, zzReader_, JavaIoReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, zzBuffer_, IOSCharArray *)

static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_LEXSTATE_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_LEXSTATE_, IOSIntArray *)

static NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP_PACKED_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_CMAP_PACKED_, NSString *)

static IOSCharArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_CMAP_, IOSCharArray *)

static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ACTION_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_ACTION_, IOSIntArray *)

static NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ACTION_PACKED_0_ = @"\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x01\x01\x06\x01\x07\x01\x02\x01\x01\x01\x08\x01\x02\x01\x00\x01\x02\x01\x00\x01\x04\x01\x00\x02\x02\x02\x00\x01\x01\x01\x00";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_ACTION_PACKED_0_, NSString *)

static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ROWMAP_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_ROWMAP_, IOSIntArray *)

static NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ROWMAP_PACKED_0_ = @"\x00\x00\x00\x12\x00$\x00""6\x00H\x00Z\x00l\x00~\x00\xc2\x90\x00\u00a2\x00\u00b4\x00\u00c6\x00\u00d8\x00\u00ea\x00\u00fc\x00\u010e\x00\u0120\x00l\x00\u0132\x00\u0144\x00\u0156\x00\u00b4\x00\u0168\x00\u017a";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_ROWMAP_PACKED_0_, NSString *)

static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_TRANS_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_TRANS_, IOSIntArray *)

static NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_TRANS_PACKED_0_ = @"\x01\x02\x01\x03\x01\x04\x01\x02\x01\x05\x01\x06\x03\x02\x01\x07\x01\x08\x01\t\x02\x02\x01\n\x01\x0b\x02\x0c\x13\x00\x03\x03\x01\x0d\x01\x00\x01\x0e\x01\x00\x01\x0e\x01\x0f\x02\x00\x01\x0e\x01\x00\x01\n\x02\x00\x01\x03\x01\x00\x01\x03\x02\x04\x01\x0d\x01\x00\x01\x0e\x01\x00\x01\x0e\x01\x0f\x02\x00\x01\x0e\x01\x00\x01\n\x02\x00\x01\x04\x01\x00\x02\x03\x02\x05\x02\x00\x02\x10\x01\x11\x02\x00\x01\x10\x01\x00\x01\n\x02\x00\x01\x05\x03\x00\x01\x06\x01\x00\x01\x06\x03\x00\x01\x0f\x07\x00\x01\x06\x01\x00\x02\x03\x01\x12\x01\x05\x01\x13\x03\x00\x01\x12\x04\x00\x01\n\x02\x00\x01\x12\x03\x00\x01\x08\x0d\x00\x01\x08\x03\x00\x01\t\x0d\x00\x01\t\x01\x00\x02\x03\x01\n\x01\x0d\x01\x00\x01\x0e\x01\x00\x01\x0e\x01\x0f\x02\x00\x01\x14\x01\x15\x01\n\x02\x00\x01\n\x03\x00\x01\x16\x0b\x00\x01\x17\x01\x00\x01\x16\x03\x00\x01\x0c\x0c\x00\x02\x0c\x01\x00\x02\x03\x02\x0d\x02\x00\x02\x18\x01\x0f\x02\x00\x01\x18\x01\x00\x01\n\x02\x00\x01\x0d\x01\x00\x02\x03\x01\x0e\n\x00\x01\x03\x02\x00\x01\x0e\x01\x00\x02\x03\x01\x0f\x01\x0d\x01\x13\x03\x00\x01\x0f\x04\x00\x01\n\x02\x00\x01\x0f\x03\x00\x01\x10\x01\x05\x0c\x00\x01\x10\x01\x00\x02\x03\x01\x11\x01\x05\x01\x13\x03\x00\x01\x11\x04\x00\x01\n\x02\x00\x01\x11\x03\x00\x01\x13\x01\x00\x01\x13\x03\x00\x01\x0f\x07\x00\x01\x13\x01\x00\x02\x03\x01\x14\x01\x0d\x04\x00\x01\x0f\x04\x00\x01\n\x02\x00\x01\x14\x03\x00\x01\x15\n\x00\x01\x14\x02\x00\x01\x15\x03\x00\x01\x17\x0b\x00\x01\x17\x01\x00\x01\x17\x03\x00\x01\x18\x01\x0d\x0c\x00\x01\x18";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_TRANS_PACKED_0_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_UNKNOWN_ERROR, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_NO_MATCH, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_PUSHBACK_2BIG, jint)

static IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ERROR_MSG_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_ERROR_MSG_, IOSObjectArray *)

static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ATTRIBUTE_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_ATTRIBUTE_, IOSIntArray *)

static NSString *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ATTRIBUTE_PACKED_0_ = @"\x01\x00\x01\t\x0b\x01\x01\x00\x01\x01\x01\x00\x01\x01\x01\x00\x02\x01\x02\x00\x01\x01\x01\x00";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl, ZZ_ATTRIBUTE_PACKED_0_, NSString *)

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAction();

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackActionWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMap();

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMapWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTrans();

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTransWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttribute();

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttributeWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSCharArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackCMapWithNSString_(NSString *packed);

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzRefill(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self);

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_yylength(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self);

__attribute__((unused)) static void OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzScanErrorWithInt_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self, jint errorCode);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl)

@implementation OrgApacheLuceneAnalysisStandardStandardTokenizerImpl

+ (IOSIntArray *)zzUnpackAction {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAction();
}

+ (jint)zzUnpackActionWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackActionWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackRowMap {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMap();
}

+ (jint)zzUnpackRowMapWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMapWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackTrans {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTrans();
}

+ (jint)zzUnpackTransWithNSString:(NSString *)packed
                          withInt:(jint)offset
                     withIntArray:(IOSIntArray *)result {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTransWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackAttribute {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttribute();
}

+ (jint)zzUnpackAttributeWithNSString:(NSString *)packed
                              withInt:(jint)offset
                         withIntArray:(IOSIntArray *)result {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttributeWithNSString_withInt_withIntArray_(packed, offset, result);
}

- (jint)yychar {
  return yychar_;
}

- (void)getTextWithOrgApacheLuceneAnalysisTokenattributesCharTermAttribute:(id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)t {
  [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(t)) copyBufferWithCharArray:zzBuffer_ withInt:zzStartRead_ withInt:zzMarkedPos_ - zzStartRead_];
}

- (void)setBufferSizeWithInt:(jint)numChars {
  ZZ_BUFFERSIZE_ = numChars;
  IOSCharArray *newZzBuffer = [IOSCharArray arrayWithLength:ZZ_BUFFERSIZE_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(zzBuffer_, 0, newZzBuffer, 0, JavaLangMath_minWithInt_withInt_(((IOSCharArray *) nil_chk(zzBuffer_))->size_, ZZ_BUFFERSIZE_));
  JreStrongAssign(&zzBuffer_, newZzBuffer);
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initWithJavaIoReader_(self, inArg);
  return self;
}

+ (IOSCharArray *)zzUnpackCMapWithNSString:(NSString *)packed {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackCMapWithNSString_(packed);
}

- (jboolean)zzRefill {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzRefill(self);
}

- (void)yyclose {
  zzAtEOF_ = true;
  zzEndRead_ = zzStartRead_;
  if (zzReader_ != nil) [zzReader_ close];
}

- (void)yyresetWithJavaIoReader:(JavaIoReader *)reader {
  JreStrongAssign(&zzReader_, reader);
  zzAtBOL_ = true;
  zzAtEOF_ = false;
  zzEOFDone_ = false;
  zzEndRead_ = zzStartRead_ = 0;
  zzCurrentPos_ = zzMarkedPos_ = 0;
  zzFinalHighSurrogate_ = 0;
  yyline_ = yychar_ = yycolumn_ = 0;
  zzLexicalState_ = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYINITIAL;
  if (((IOSCharArray *) nil_chk(zzBuffer_))->size_ > ZZ_BUFFERSIZE_) JreStrongAssignAndConsume(&zzBuffer_, [IOSCharArray newArrayWithLength:ZZ_BUFFERSIZE_]);
}

- (jint)yystate {
  return zzLexicalState_;
}

- (void)yybeginWithInt:(jint)newState {
  zzLexicalState_ = newState;
}

- (NSString *)yytext {
  return [NSString stringWithCharacters:zzBuffer_ offset:zzStartRead_ length:zzMarkedPos_ - zzStartRead_];
}

- (jchar)yycharatWithInt:(jint)pos {
  return IOSCharArray_Get(nil_chk(zzBuffer_), zzStartRead_ + pos);
}

- (jint)yylength {
  return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_yylength(self);
}

- (void)zzScanErrorWithInt:(jint)errorCode {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzScanErrorWithInt_(self, errorCode);
}

- (void)yypushbackWithInt:(jint)number {
  if (number > OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_yylength(self)) OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzScanErrorWithInt_(self, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_PUSHBACK_2BIG);
  zzMarkedPos_ -= number;
}

- (jint)getNextToken {
  jint zzInput;
  jint zzAction;
  jint zzCurrentPosL;
  jint zzMarkedPosL;
  jint zzEndReadL = zzEndRead_;
  IOSCharArray *zzBufferL = zzBuffer_;
  IOSCharArray *zzCMapL = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP_;
  IOSIntArray *zzTransL = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_TRANS_;
  IOSIntArray *zzRowMapL = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ROWMAP_;
  IOSIntArray *zzAttrL = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ATTRIBUTE_;
  while (true) {
    zzMarkedPosL = zzMarkedPos_;
    yychar_ += zzMarkedPosL - zzStartRead_;
    zzAction = -1;
    zzCurrentPosL = zzCurrentPos_ = zzStartRead_ = zzMarkedPosL;
    zzState_ = IOSIntArray_Get(nil_chk(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_LEXSTATE_), zzLexicalState_);
    jint zzAttributes = IOSIntArray_Get(nil_chk(zzAttrL), zzState_);
    if ((zzAttributes & 1) == 1) {
      zzAction = zzState_;
    }
    {
      while (true) {
        if (zzCurrentPosL < zzEndReadL) {
          zzInput = JavaLangCharacter_codePointAtWithCharArray_withInt_withInt_(zzBufferL, zzCurrentPosL, zzEndReadL);
          zzCurrentPosL += JavaLangCharacter_charCountWithInt_(zzInput);
        }
        else if (zzAtEOF_) {
          zzInput = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYEOF;
          goto break_zzForAction;
        }
        else {
          zzCurrentPos_ = zzCurrentPosL;
          zzMarkedPos_ = zzMarkedPosL;
          jboolean eof = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzRefill(self);
          zzCurrentPosL = zzCurrentPos_;
          zzMarkedPosL = zzMarkedPos_;
          zzBufferL = zzBuffer_;
          zzEndReadL = zzEndRead_;
          if (eof) {
            zzInput = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYEOF;
            goto break_zzForAction;
          }
          else {
            zzInput = JavaLangCharacter_codePointAtWithCharArray_withInt_withInt_(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += JavaLangCharacter_charCountWithInt_(zzInput);
          }
        }
        jint zzNext = IOSIntArray_Get(nil_chk(zzTransL), IOSIntArray_Get(nil_chk(zzRowMapL), zzState_) + IOSCharArray_Get(nil_chk(zzCMapL), zzInput));
        if (zzNext == -1) goto break_zzForAction;
        zzState_ = zzNext;
        zzAttributes = IOSIntArray_Get(zzAttrL, zzState_);
        if ((zzAttributes & 1) == 1) {
          zzAction = zzState_;
          zzMarkedPosL = zzCurrentPosL;
          if ((zzAttributes & 8) == 8) goto break_zzForAction;
        }
      }
    }
    break_zzForAction: ;
    zzMarkedPos_ = zzMarkedPosL;
    switch (zzAction < 0 ? zzAction : IOSIntArray_Get(nil_chk(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ACTION_), zzAction)) {
      case 1:
      {
        break;
      }
      case 9:
      break;
      case 2:
      {
        return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_WORD_TYPE;
      }
      case 10:
      break;
      case 3:
      {
        return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_HANGUL_TYPE;
      }
      case 11:
      break;
      case 4:
      {
        return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_NUMERIC_TYPE;
      }
      case 12:
      break;
      case 5:
      {
        return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_KATAKANA_TYPE;
      }
      case 13:
      break;
      case 6:
      {
        return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_IDEOGRAPHIC_TYPE;
      }
      case 14:
      break;
      case 7:
      {
        return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_HIRAGANA_TYPE;
      }
      case 15:
      break;
      case 8:
      {
        return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_SOUTH_EAST_ASIAN_TYPE;
      }
      case 16:
      break;
      default:
      if (zzInput == OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYEOF && zzStartRead_ == zzCurrentPos_) {
        zzAtEOF_ = true;
        {
          return OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYEOF;
        }
      }
      else {
        OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzScanErrorWithInt_(self, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_NO_MATCH);
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(zzReader_);
  RELEASE_(zzBuffer_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisStandardStandardTokenizerImpl class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_LEXSTATE_, [IOSIntArray newArrayWithInts:(jint[]){ 0, 0 } count:2]);
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP_PACKED_, JreStrcat("$$$", @"\"\x00\x01\x0d\x04\x00\x01\x0c\x04\x00\x01\x07\x01\x00\x01\x08\x01\x00\n\x04\x01\x06\x01\x07\x05\x00\x1a\x01\x04\x00\x01\t\x01\x00\x1a\x01/\x00\x01\x01\x02\x00\x01\x03\x07\x00\x01\x01\x01\x00\x01\x06\x02\x00\x01\x01\x05\x00\x17\x01\x01\x00\x1f\x01\x01\x00\u01ca\x01\x04\x00\x0c\x01\x05\x00\x01\x06\x08\x00\x05\x01\x07\x00\x01\x01\x01\x00\x01\x01\x11\x00p\x03\x05\x01\x01\x00\x02\x01\x02\x00\x04\x01\x01\x07\x07\x00\x01\x01\x01\x06\x03\x01\x01\x00\x01\x01\x01\x00\x14\x01\x01\x00S\x01\x01\x00\xc2\x8b\x01\x01\x00\x07\x03\xc2\x9e\x01\t\x00&\x01\x02\x00\x01\x01\x07\x00'\x01\x01\x00\x01\x07\x07\x00-\x03\x01\x00\x01\x03\x01\x00\x02\x03\x01\x00\x02\x03\x01\x00\x01\x03\x08\x00\x1b\x0e\x05\x00\x03\x0e\x01\x01\x01\x06\x0b\x00\x05\x03\x07\x00\x02\x07\x02\x00\x0b\x03\x01\x00\x01\x03\x03\x00+\x01\x15\x03\n\x04\x01\x00\x01\x04\x01\x07\x01\x00\x02\x01\x01\x03""c\x01\x01\x00\x01\x01\x08\x03\x01\x00\x06\x03\x02\x01\x02\x03\x01\x00\x04\x03\x02\x01\n\x04\x03\x01\x02\x00\x01\x01\x0f\x00\x01\x03\x01\x01\x01\x03\x1e\x01\x1b\x03\x02\x00Y\x01\x0b\x03\x01\x01\x0e\x00\n\x04!\x01\t\x03\x02\x01\x02\x00\x01\x07\x01\x00\x01\x01\x05\x00\x16\x01\x04\x03\x01\x01\t\x03\x01\x01\x03\x03\x01\x01\x05\x03\x12\x00\x19\x01\x03\x03""D\x00\x01\x01\x01\x00\x0b\x01""7\x00\x1b\x03\x01\x00\x04\x03""6\x01\x03\x03\x01\x01\x12\x03\x01\x01\x07\x03\n\x01\x02\x03\x02\x00\n\x04\x01\x00\x07\x01\x01\x00\x07\x01\x01\x00\x03\x03\x01\x00\x08\x01\x02\x00\x02\x01\x02\x00\x16\x01\x01\x00\x07\x01\x01\x00\x01\x01\x03\x00\x04\x01\x02\x00\x01\x03\x01\x01\x07\x03\x02\x00\x02\x03\x02\x00\x03\x03\x01\x01\x08\x00\x01\x03\x04\x00\x02\x01\x01\x00\x03\x01\x02\x03\x02\x00\n\x04\x02\x01\x0f\x00\x03\x03\x01\x00\x06\x01\x04\x00\x02\x01\x02\x00\x16\x01\x01\x00\x07\x01\x01\x00\x02\x01\x01\x00\x02\x01\x01\x00\x02\x01\x02\x00\x01\x03\x01\x00\x05\x03\x04\x00\x02\x03\x02\x00\x03\x03\x03\x00\x01\x03\x07\x00\x04\x01\x01\x00\x01\x01\x07\x00\n\x04\x02\x03\x03\x01\x01\x03\x0b\x00\x03\x03\x01\x00\t\x01\x01\x00\x03\x01\x01\x00\x16\x01\x01\x00\x07\x01\x01\x00\x02\x01\x01\x00\x05\x01\x02\x00\x01\x03\x01\x01\x08\x03\x01\x00\x03\x03\x01\x00\x03\x03\x02\x00\x01\x01\x0f\x00\x02\x01\x02\x03\x02\x00\n\x04\x11\x00\x03\x03\x01\x00\x08\x01\x02\x00\x02\x01\x02\x00\x16\x01\x01\x00\x07\x01\x01\x00\x02\x01\x01\x00\x05\x01\x02\x00\x01\x03\x01\x01\x07\x03\x02\x00\x02\x03\x02\x00\x03\x03\x08\x00\x02\x03\x04\x00\x02\x01\x01\x00\x03\x01\x02\x03\x02\x00\n\x04\x01\x00\x01\x01\x10\x00\x01\x03\x01\x01\x01\x00\x06\x01\x03\x00\x03\x01\x01\x00\x04\x01\x03\x00\x02\x01\x01\x00\x01\x01\x01\x00\x02\x01\x03\x00\x02\x01\x03\x00\x03\x01\x03\x00\x0c\x01\x04\x00\x05\x03\x03\x00\x03\x03\x01\x00\x04\x03\x02\x00\x01\x01\x06\x00\x01\x03\x0e\x00\n\x04\x11\x00\x03\x03\x01\x00\x08\x01\x01\x00\x03\x01\x01\x00\x17\x01\x01\x00\n\x01\x01\x00\x05\x01\x03\x00\x01\x01\x07\x03\x01\x00\x03\x03\x01\x00\x04\x03\x07\x00\x02\x03\x01\x00\x02\x01\x06\x00\x02\x01\x02\x03\x02\x00\n\x04\x12\x00\x02\x03\x01\x00\x08\x01\x01\x00\x03\x01\x01\x00\x17\x01\x01\x00\n\x01\x01\x00\x05\x01\x02\x00\x01\x03\x01\x01\x07\x03\x01\x00\x03\x03\x01\x00\x04\x03\x07\x00\x02\x03\x07\x00\x01\x01\x01\x00\x02\x01\x02\x03\x02\x00\n\x04\x01\x00\x02\x01\x0f\x00\x02\x03\x01\x00\x08\x01\x01\x00\x03\x01\x01\x00)\x01\x02\x00\x01\x01\x07\x03\x01\x00\x03\x03\x01\x00\x04\x03\x01\x01\x08\x00\x01\x03\x08\x00\x02\x01\x02\x03\x02\x00\n\x04\n\x00\x06\x01\x02\x00\x02\x03\x01\x00\x12\x01\x03\x00\x18\x01\x01\x00\t\x01\x01\x00\x01\x01\x02\x00\x07\x01\x03\x00\x01\x03\x04\x00\x06\x03\x01\x00\x01\x03\x01\x00\x08\x03\x12\x00\x02\x03\x0d\x00""0\x10\x01\x11\x02\x10\x07\x11\x05\x00\x07\x10\x08\x11\x01\x00\n\x04'\x00\x02\x10\x01\x00\x01\x10\x02\x00\x02\x10\x01\x00\x01\x10\x02\x00\x01\x10\x06\x00\x04\x10\x01\x00\x07\x10\x01\x00\x03\x10\x01\x00\x01\x10\x01\x00\x01\x10\x02\x00\x02\x10\x01\x00\x04\x10\x01\x11\x02\x10\x06\x11\x01\x00\x02\x11\x01\x10\x02\x00\x05\x10\x01\x00\x01\x10\x01\x00\x06\x11\x02\x00\n\x04\x02\x00\x04\x10 \x00\x01\x01\x17\x00\x02\x03\x06\x00\n\x04\x0b\x00\x01\x03\x01\x00\x01\x03\x01\x00\x01\x03\x04\x00\x02\x03\x08\x01\x01\x00$\x01\x04\x00\x14\x03\x01\x00\x02\x03\x05\x01\x0b\x03\x01\x00$\x03\t\x00\x01\x03""9\x00+\x10\x14\x11\x01\x10\n\x04\x06\x00\x06\x10\x04\x11\x04\x10\x03\x11\x01\x10\x03\x11\x02\x10\x07\x11\x03\x10\x04\x11\x0d\x10\x0c\x11\x01\x10\x01\x11\n\x04\x04\x11\x02\x10&\x01\x01\x00\x01\x01\x05\x00\x01\x01\x02\x00+\x01\x01\x00\x04\x01\u0100\x02I\x01\x01\x00\x04\x01\x02\x00\x07\x01\x01\x00\x01\x01\x01\x00\x04\x01\x02\x00)\x01\x01\x00\x04\x01\x02\x00!\x01\x01\x00\x04\x01\x02\x00\x07\x01\x01\x00\x01\x01\x01\x00\x04\x01\x02\x00\x0f\x01\x01\x00""9\x01\x01\x00\x04\x01\x02\x00""C\x01\x02\x00\x03\x03 \x00\x10\x01\x10\x00U\x01\x0c\x00\u026c\x01\x02\x00\x11\x01\x01\x00\x1a\x01\x05\x00K\x01\x03\x00\x03\x01\x0f\x00\x0d\x01\x01\x00\x04\x01\x03\x03\x0b\x00\x12\x01\x03\x03\x0b\x00\x12\x01\x02\x03\x0c\x00\x0d\x01\x01\x00\x03\x01\x01\x00\x02\x03\x0c\x00""4\x10 \x11\x03\x00\x01\x10\x04\x00\x01\x10\x01\x11\x02\x00\n\x04!\x00\x04\x03\x01\x00\n\x04\x06\x00X\x01\x08\x00)\x01\x01\x03\x01\x01\x05\x00""F\x01\n\x00\x1d\x01\x03\x00\x0c\x03\x04\x00\x0c\x03\n\x00\n\x04\x1e\x10\x02\x00\x05\x10\x0b\x00,\x10\x04\x00\x11\x11\x07\x10\x02\x11\x06\x00\n\x04\x01\x10\x03\x00\x02\x10 \x00\x17\x01\x05\x03\x04\x00""5\x10\n\x11\x01\x00\x1d\x11\x02\x00\x01\x03\n\x04\x06\x00\n\x04\x06\x00\x0e\x10R\x00\x05\x03/\x01\x11\x03\x07\x01\x04\x00\n\x04\x11\x00\t\x03\x0c\x00\x03\x03\x1e\x01\x0d\x03\x02\x01\n\x04,\x01\x0e\x03\x0c\x00$\x01\x14\x03\x08\x00\n\x04\x03\x00\x03\x01\n\x04$\x01R\x00\x03\x03\x01\x00\x15\x03\x04\x01\x01\x03\x04\x01\x03\x03\x02\x01\t\x00\u00c0\x01'\x03\x15\x00\x04\x03\u0116\x01\x02\x00\x06\x01\x02\x00&\x01\x02\x00\x06\x01\x02\x00\x08\x01\x01\x00\x01\x01\x01\x00\x01\x01\x01\x00\x01\x01\x01\x00\x1f\x01\x02\x00""5\x01\x01\x00\x07\x01\x01\x00\x01\x01\x03\x00\x03\x01\x01\x00\x07\x01\x03\x00\x04\x01\x02\x00\x06\x01\x04\x00\x0d\x01\x05\x00\x03\x01\x01\x00\x07\x01\x0f\x00\x04\x03\x08\x00\x02\x08\n\x00\x01\x08\x02\x00\x01\x06\x02\x00\x05\x03\x10\x00\x02\t\x03\x00\x01\x07\x0f\x00\x01\t\x0b\x00\x05\x03\x01\x00\n\x03\x01\x00\x01\x01\x0d\x00\x01\x01\x10\x00\x0d\x01""3\x00!\x03\x11\x00\x01\x01\x04\x00\x01\x01\x02\x00\n\x01\x01\x00\x01\x01\x03\x00\x05\x01\x06\x00\x01\x01\x01\x00\x01\x01\x01\x00\x01\x01\x01\x00\x04\x01\x01\x00\x0b\x01\x02\x00\x04\x01\x05\x00\x05\x01\x04\x00\x01\x01\x11\x00)\x01\u032d\x00""4\x01\u0716\x00/\x01\x01\x00/\x01\x01\x00\xc2\x85\x01\x06\x00\x04\x01\x03\x03\x02\x01\x0c\x00&\x01\x01\x00\x01\x01\x05\x00\x01\x01\x02\x00""8\x01\x07\x00\x01\x01\x0f\x00\x01\x03\x17\x01\t\x00\x07\x01\x01\x00\x07\x01\x01\x00\x07\x01\x01\x00\x07\x01\x01\x00\x07\x01\x01\x00\x07\x01\x01\x00\x07\x01\x01\x00\x07\x01\x01\x00 \x03/\x00\x01\x01P\x00\x1a\n\x01\x00Y\n\x0c\x00\u00d6\n/\x00\x01\x01\x01\x00\x01\n\x19\x00\t\n\x06\x03\x01\x00\x05\x05\x02\x00\x03\n\x01\x01\x01\x01\x04\x00V\x0b\x02\x00\x02\x03\x02\x05\x03\x0b[\x05\x01\x00\x04\x05\x05\x00)\x01\x03\x00^\x02\x11\x00\x1b\x01""5\x00\x10\x05\u00d0\x00/\x05\x01\x00X\x05\u00a8\x00\u19b6\nJ\x00\u51cd\n3\x00\u048d\x01""C\x00.\x01\x02\x00\u010d\x01\x03\x00\x10\x01\n\x04\x02\x01\x14\x00/\x01\x04\x03\x01\x00\n\x03\x01\x00\x19\x01\x07\x00\x01\x03P\x01\x02\x03%\x00\t\x01\x02\x00g\x01\x02\x00\x04\x01\x01\x00\x04\x01\x0c\x00\x0b\x01M\x00\n\x01\x01\x03\x03\x01\x01\x03\x04\x01\x01\x03\x17\x01\x05\x03\x18\x00""4\x01\x0c\x00\x02\x03""2\x01\x11\x03\x0b\x00\n\x04\x06\x00\x12\x03\x06\x01\x03\x00\x01\x01\x04\x00\n\x04\x1c\x01\x08\x03\x02\x00\x17\x01\x0d\x03\x0c\x00\x1d\x02\x03\x00\x04\x03/\x01\x0e\x03\x0e\x00\x01\x01\n\x04&\x00)\x01\x0e\x03\t\x00\x03\x01\x01\x03\x08\x01\x02\x03\x02\x00\n\x04\x06\x00\x1b\x10\x01\x11\x04\x00""0\x10\x01\x11\x01\x10\x03\x11\x02\x10\x02\x11\x05\x10\x02\x11\x01\x10\x01\x11\x01\x10\x18\x00\x05\x10\x0b\x01\x05\x03\x02\x00\x03\x01\x02\x03\n\x00\x06\x01\x02\x00\x06\x01\x02\x00\x06\x01\t\x00\x07\x01\x01\x00\x07\x01\xc2\x91\x00#\x01\x08\x03\x01\x00\x02\x03\x02\x00\n\x04\x06\x00\u2ba4\x02\x0c\x00\x17\x02\x04\x00""1\x02\u2104\x00\u016e\n\x02\x00j\n&\x00\x07\x01\x0c\x00\x05\x01\x05\x00\x01\x0e\x01\x03\n\x0e\x01\x00\x0d\x0e\x01\x00\x05\x0e\x01\x00\x01\x0e\x01\x00\x02\x0e\x01\x00\x02\x0e\x01\x00\n\x0e""b\x01!\x00\u016b\x01\x12\x00@\x01\x02\x00""6\x01(\x00\x0c\x01\x04\x00\x10\x03\x01\x07\x02\x00\x01\x06\x01\x07\x0b\x00\x07\x03\x0c\x00\x02\t\x18\x00\x03\t\x01\x07\x01\x00\x01\x08\x01\x00\x01\x07\x01\x06\x1a\x00\x05\x01\x01\x00\xc2\x87\x01\x02\x00\x01\x03\x07\x00\x01\x08\x04\x00\x01\x07\x01\x00\x01\x08\x01\x00\n\x04\x01\x06\x01\x07\x05\x00\x1a\x01\x04\x00\x01\t\x01\x00\x1a\x01\x0b\x00""8\x05\x02\x03\x1f\x02\x03\x00\x06\x02\x02\x00\x06\x02\x02\x00\x06\x02\x02\x00\x03\x02\x1c\x00\x03\x03\x04\x00\x0c\x01\x01\x00\x1a\x01\x01\x00\x13\x01\x01\x00\x02\x01\x01\x00\x0f\x01\x02\x00\x0e\x01\"\x00{\x01""E\x00""5\x01\xc2\x88\x00\x01\x03\xc2\x82\x00\x1d\x01\x03\x00""1\x01/\x00\x1f\x01\x11\x00\x1b\x01""5\x00\x1e\x01\x02\x00$\x01\x04\x00\x08\x01\x01\x00\x05\x01*\x00\xc2\x9e\x01\x02\x00\n\x04\u0356\x00\x06\x01\x02\x00\x01\x01\x01\x00,\x01\x01\x00\x02\x01\x03\x00\x01\x01\x02\x00\x17\x01\u00aa\x00\x16\x01\n\x00\x1a\x01""F\x00""8\x01\x06\x00\x02\x01@\x00\x01\x01\x03\x03\x01\x00\x02\x03\x05\x00\x04\x03\x04\x01\x01\x00\x03\x01\x01\x00\x1b\x01\x04\x00\x03\x03\x04\x00\x01\x03 \x00\x1d\x01\xc2\x83\x00""6\x01\n\x00\x16\x01\n\x00\x13\x01\xc2\x8d\x00I\x01\u03b7\x00\x03\x03""5\x01\x0f\x03\x1f\x00\n\x04\x10\x00\x03\x03-\x01\x0b\x03\x02\x00\x01\x03\x12\x00\x19\x01\x07\x00\n\x04\x06\x00\x03\x03$\x01\x0e\x03\x01\x00\n\x04@\x00\x03\x03""0\x01\x0e\x03\x04\x01\x0b\x00\n\x04\u04a6\x00+\x01\x0d\x03\x08\x00\n\x04\u0936\x00\u036f\x01\xc2\x91\x00""c\x01\u0b9d\x00\u042f\x01\u33d1\x00\u0239\x01\u04c7\x00""E\x01\x0b\x00\x01\x01.\x03\x10\x00\x04\x03\x0d\x01\u4060\x00\x01\x05\x01\x0b\u2163\x00\x05\x03\x03\x00\x16\x03\x02\x00\x07\x03\x1e\x00\x04\x03\xc2\x94\x00\x03\x03\u01bb\x00U\x01\x01\x00G\x01\x01\x00\x02\x01\x02\x00\x01\x01\x02\x00\x02\x01\x02\x00\x04\x01\x01\x00\x0c\x01\x01\x00\x01\x01\x01\x00\x07\x01\x01\x00""A\x01\x01\x00\x04\x01\x02\x00\x08\x01\x01\x00\x07\x01\x01\x00\x1c\x01\x01\x00\x04\x01\x01\x00\x05\x01\x01\x00\x01\x01\x03\x00\x07\x01\x01\x00\u0154\x01\x02\x00\x19\x01\x01\x00\x19\x01\x01\x00\x1f\x01\x01\x00\x19\x01\x01\x00\x1f\x01\x01\x00\x19\x01\x01\x00\x1f\x01\x01\x00\x19\x01\x01\x00\x1f\x01\x01\x00\x19\x01\x01\x00\x08\x01\x02\x00""2\x04\u1600\x00\x04\x01\x01\x00\x1b\x01\x01\x00\x02\x01\x01\x00\x01\x01\x02\x00\x01\x01\x01\x00\n\x01\x01\x00\x04\x01\x01\x00\x01\x01\x01\x00\x01\x01\x06\x00\x01\x01\x04\x00\x01\x01\x01\x00\x01\x01\x01\x00\x01\x01\x01\x00\x03\x01\x01\x00\x02\x01\x01\x00\x01\x01\x02\x00\x01\x01\x01\x00\x01\x01\x01\x00\x01\x01\x01\x00\x01\x01\x01\x00\x01\x01\x01\x00\x02\x01\x01\x00\x01\x01\x02\x00\x04\x01\x01\x00\x07\x01\x01\x00\x04\x01\x01\x00\x04\x01\x01\x00\x01\x01\x01\x00\n\x01\x01\x00\x11\x01\x05\x00\x03\x01\x01\x00\x05\x01\x01\x00\x11\x01\u032a\x00\x1a\x0f\x01\x0b", [NSString stringWithCharacters:(jchar[]) { (int) 0xdff, (int) 0x0, (int) 0xa6d7, (int) 0xa, (int) 0x29, (int) 0x0, (int) 0x1035, (int) 0xa, (int) 0xb, (int) 0x0, (int) 0xde, (int) 0xa, (int) 0x3fe2, (int) 0x0, (int) 0x21e, (int) 0xa, (int) 0xffff, (int) 0x0, (int) 0xffff, (int) 0x0, (int) 0xffff, (int) 0x0, (int) 0xffff, (int) 0x0, (int) 0xffff, (int) 0x0, (int) 0xffff, (int) 0x0, (int) 0xffff, (int) 0x0, (int) 0xffff, (int) 0x0, (int) 0xffff, (int) 0x0, (int) 0xffff, (int) 0x0, (int) 0xffff, (int) 0x0, (int) 0x5ee, (int) 0x0 } length:40], [NSString stringWithCharacters:(jchar[]) { (int) 0x1, (int) 0x3, (int) 0x1e, (int) 0x0, (int) 0x60, (int) 0x3, (int) 0x80, (int) 0x0, (int) 0xf0, (int) 0x3, (int) 0xffff, (int) 0x0, (int) 0xffff, (int) 0x0, (int) 0xfe12, (int) 0x0 } length:16]));
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP_, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackCMapWithNSString_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP_PACKED_));
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ACTION_, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAction());
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ROWMAP_, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMap());
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_TRANS_, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTrans());
    JreStrongAssignAndConsume(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ERROR_MSG_, [IOSObjectArray newArrayWithObjects:(id[]){ @"Unkown internal scanner error", @"Error: could not match input", @"Error: pushback value was too large" } count:3 type:NSString_class_()]);
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ATTRIBUTE_, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttribute());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "zzUnpackAction", NULL, "[I", 0xa, NULL, NULL },
    { "zzUnpackActionWithNSString:withInt:withIntArray:", "zzUnpackAction", "I", 0xa, NULL, NULL },
    { "zzUnpackRowMap", NULL, "[I", 0xa, NULL, NULL },
    { "zzUnpackRowMapWithNSString:withInt:withIntArray:", "zzUnpackRowMap", "I", 0xa, NULL, NULL },
    { "zzUnpackTrans", NULL, "[I", 0xa, NULL, NULL },
    { "zzUnpackTransWithNSString:withInt:withIntArray:", "zzUnpackTrans", "I", 0xa, NULL, NULL },
    { "zzUnpackAttribute", NULL, "[I", 0xa, NULL, NULL },
    { "zzUnpackAttributeWithNSString:withInt:withIntArray:", "zzUnpackAttribute", "I", 0xa, NULL, NULL },
    { "yychar", NULL, "I", 0x11, NULL, NULL },
    { "getTextWithOrgApacheLuceneAnalysisTokenattributesCharTermAttribute:", "getText", "V", 0x11, NULL, NULL },
    { "setBufferSizeWithInt:", "setBufferSize", "V", 0x11, NULL, NULL },
    { "initWithJavaIoReader:", "StandardTokenizerImpl", NULL, 0x1, NULL, NULL },
    { "zzUnpackCMapWithNSString:", "zzUnpackCMap", "[C", 0xa, NULL, NULL },
    { "zzRefill", NULL, "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "yyclose", NULL, "V", 0x11, "Ljava.io.IOException;", NULL },
    { "yyresetWithJavaIoReader:", "yyreset", "V", 0x11, NULL, NULL },
    { "yystate", NULL, "I", 0x11, NULL, NULL },
    { "yybeginWithInt:", "yybegin", "V", 0x11, NULL, NULL },
    { "yytext", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "yycharatWithInt:", "yycharat", "C", 0x11, NULL, NULL },
    { "yylength", NULL, "I", 0x11, NULL, NULL },
    { "zzScanErrorWithInt:", "zzScanError", "V", 0x2, NULL, NULL },
    { "yypushbackWithInt:", "yypushback", "V", 0x1, NULL, NULL },
    { "getNextToken", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "YYEOF", "YYEOF", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYEOF },
    { "ZZ_BUFFERSIZE_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "YYINITIAL", "YYINITIAL", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYINITIAL },
    { "ZZ_LEXSTATE_", NULL, 0x1a, "[I", &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_LEXSTATE_, NULL, .constantValue.asLong = 0 },
    { "ZZ_CMAP_PACKED_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP_PACKED_, NULL, .constantValue.asLong = 0 },
    { "ZZ_CMAP_", NULL, 0x1a, "[C", &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_CMAP_, NULL, .constantValue.asLong = 0 },
    { "ZZ_ACTION_", NULL, 0x1a, "[I", &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ACTION_, NULL, .constantValue.asLong = 0 },
    { "ZZ_ACTION_PACKED_0_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ACTION_PACKED_0_, NULL, .constantValue.asLong = 0 },
    { "ZZ_ROWMAP_", NULL, 0x1a, "[I", &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ROWMAP_, NULL, .constantValue.asLong = 0 },
    { "ZZ_ROWMAP_PACKED_0_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ROWMAP_PACKED_0_, NULL, .constantValue.asLong = 0 },
    { "ZZ_TRANS_", NULL, 0x1a, "[I", &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_TRANS_, NULL, .constantValue.asLong = 0 },
    { "ZZ_TRANS_PACKED_0_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_TRANS_PACKED_0_, NULL, .constantValue.asLong = 0 },
    { "ZZ_UNKNOWN_ERROR", "ZZ_UNKNOWN_ERROR", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_UNKNOWN_ERROR },
    { "ZZ_NO_MATCH", "ZZ_NO_MATCH", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_NO_MATCH },
    { "ZZ_PUSHBACK_2BIG", "ZZ_PUSHBACK_2BIG", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_PUSHBACK_2BIG },
    { "ZZ_ERROR_MSG_", NULL, 0x1a, "[Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ERROR_MSG_, NULL, .constantValue.asLong = 0 },
    { "ZZ_ATTRIBUTE_", NULL, 0x1a, "[I", &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ATTRIBUTE_, NULL, .constantValue.asLong = 0 },
    { "ZZ_ATTRIBUTE_PACKED_0_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ATTRIBUTE_PACKED_0_, NULL, .constantValue.asLong = 0 },
    { "zzReader_", NULL, 0x2, "Ljava.io.Reader;", NULL, NULL, .constantValue.asLong = 0 },
    { "zzState_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "zzLexicalState_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "zzBuffer_", NULL, 0x2, "[C", NULL, NULL, .constantValue.asLong = 0 },
    { "zzMarkedPos_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "zzCurrentPos_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "zzStartRead_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "zzEndRead_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "yyline_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "yychar_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "yycolumn_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "zzAtBOL_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "zzAtEOF_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "zzEOFDone_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "zzFinalHighSurrogate_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "WORD_TYPE", "WORD_TYPE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_WORD_TYPE },
    { "NUMERIC_TYPE", "NUMERIC_TYPE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_NUMERIC_TYPE },
    { "SOUTH_EAST_ASIAN_TYPE", "SOUTH_EAST_ASIAN_TYPE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_SOUTH_EAST_ASIAN_TYPE },
    { "IDEOGRAPHIC_TYPE", "IDEOGRAPHIC_TYPE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_IDEOGRAPHIC_TYPE },
    { "HIRAGANA_TYPE", "HIRAGANA_TYPE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_HIRAGANA_TYPE },
    { "KATAKANA_TYPE", "KATAKANA_TYPE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_KATAKANA_TYPE },
    { "HANGUL_TYPE", "HANGUL_TYPE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_HANGUL_TYPE },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisStandardStandardTokenizerImpl = { 2, "StandardTokenizerImpl", "org.apache.lucene.analysis.standard", NULL, 0x11, 24, methods, 40, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisStandardStandardTokenizerImpl;
}

@end

IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAction() {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  IOSIntArray *result = [IOSIntArray arrayWithLength:24];
  jint offset = 0;
  offset = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackActionWithNSString_withInt_withIntArray_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ACTION_PACKED_0_, offset, result);
  return result;
}

jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackActionWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMap() {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  IOSIntArray *result = [IOSIntArray arrayWithLength:24];
  jint offset = 0;
  offset = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMapWithNSString_withInt_withIntArray_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ROWMAP_PACKED_0_, offset, result);
  return result;
}

jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackRowMapWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint high = JreLShift32([packed charAtWithInt:i++], 16);
    *IOSIntArray_GetRef(nil_chk(result), j++) = high | [packed charAtWithInt:i++];
  }
  return j;
}

IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTrans() {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  IOSIntArray *result = [IOSIntArray arrayWithLength:396];
  jint offset = 0;
  offset = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTransWithNSString_withInt_withIntArray_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_TRANS_PACKED_0_, offset, result);
  return result;
}

jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackTransWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    value--;
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

IOSIntArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttribute() {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  IOSIntArray *result = [IOSIntArray arrayWithLength:24];
  jint offset = 0;
  offset = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttributeWithNSString_withInt_withIntArray_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ATTRIBUTE_PACKED_0_, offset, result);
  return result;
}

jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackAttributeWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

void OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initWithJavaIoReader_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self, JavaIoReader *inArg) {
  NSObject_init(self);
  self->ZZ_BUFFERSIZE_ = 255;
  self->zzLexicalState_ = OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYINITIAL;
  JreStrongAssignAndConsume(&self->zzBuffer_, [IOSCharArray newArrayWithLength:self->ZZ_BUFFERSIZE_]);
  self->zzAtBOL_ = true;
  self->zzFinalHighSurrogate_ = 0;
  JreStrongAssign(&self->zzReader_, inArg);
}

OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *new_OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initWithJavaIoReader_(JavaIoReader *inArg) {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self = [OrgApacheLuceneAnalysisStandardStandardTokenizerImpl alloc];
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initWithJavaIoReader_(self, inArg);
  return self;
}

IOSCharArray *OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzUnpackCMapWithNSString_(NSString *packed) {
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initialize();
  IOSCharArray *map = [IOSCharArray arrayWithLength:(jint) 0x110000];
  jint i = 0;
  jint j = 0;
  while (i < 2836) {
    jint count = [((NSString *) nil_chk(packed)) charAtWithInt:i++];
    jchar value = [packed charAtWithInt:i++];
    do *IOSCharArray_GetRef(map, j++) = value;
    while (--count > 0);
  }
  return map;
}

jboolean OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzRefill(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self) {
  if (self->zzStartRead_ > 0) {
    self->zzEndRead_ += self->zzFinalHighSurrogate_;
    self->zzFinalHighSurrogate_ = 0;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->zzBuffer_, self->zzStartRead_, self->zzBuffer_, 0, self->zzEndRead_ - self->zzStartRead_);
    self->zzEndRead_ -= self->zzStartRead_;
    self->zzCurrentPos_ -= self->zzStartRead_;
    self->zzMarkedPos_ -= self->zzStartRead_;
    self->zzStartRead_ = 0;
  }
  jint requested = ((IOSCharArray *) nil_chk(self->zzBuffer_))->size_ - self->zzEndRead_ - self->zzFinalHighSurrogate_;
  jint totalRead = 0;
  while (totalRead < requested) {
    jint numRead = [((JavaIoReader *) nil_chk(self->zzReader_)) readWithCharArray:self->zzBuffer_ withInt:self->zzEndRead_ + totalRead withInt:requested - totalRead];
    if (numRead == -1) {
      break;
    }
    totalRead += numRead;
  }
  if (totalRead > 0) {
    self->zzEndRead_ += totalRead;
    if (totalRead == requested) {
      if (JavaLangCharacter_isHighSurrogateWithChar_(IOSCharArray_Get(self->zzBuffer_, self->zzEndRead_ - 1))) {
        --self->zzEndRead_;
        self->zzFinalHighSurrogate_ = 1;
        if (totalRead == 1) {
          return true;
        }
      }
    }
    return false;
  }
  return true;
}

jint OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_yylength(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self) {
  return self->zzMarkedPos_ - self->zzStartRead_;
}

void OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_zzScanErrorWithInt_(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *self, jint errorCode) {
  NSString *message;
  @try {
    message = IOSObjectArray_Get(nil_chk(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ERROR_MSG_), errorCode);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    message = IOSObjectArray_Get(nil_chk(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_ERROR_MSG_), OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_ZZ_UNKNOWN_ERROR);
  }
  @throw [new_JavaLangError_initWithNSString_(message) autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisStandardStandardTokenizerImpl)
