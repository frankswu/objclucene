//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicFilter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/standard/ClassicFilter.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizer.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/util/AttributeSource.h"

@interface OrgApacheLuceneAnalysisStandardClassicFilter () {
 @public
  id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute> typeAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardClassicFilter, typeAtt_, id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardClassicFilter, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)

static NSString *OrgApacheLuceneAnalysisStandardClassicFilter_APOSTROPHE_TYPE_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardClassicFilter, APOSTROPHE_TYPE_, NSString *)

static NSString *OrgApacheLuceneAnalysisStandardClassicFilter_ACRONYM_TYPE_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardClassicFilter, ACRONYM_TYPE_, NSString *)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisStandardClassicFilter)

@implementation OrgApacheLuceneAnalysisStandardClassicFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg {
  OrgApacheLuceneAnalysisStandardClassicFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, inArg);
  return self;
}

- (jboolean)incrementToken {
  if (![((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) incrementToken]) {
    return false;
  }
  IOSCharArray *buffer = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) buffer];
  jint bufferLength = [termAtt_ length];
  NSString *type = [((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(typeAtt_)) type];
  if (type == OrgApacheLuceneAnalysisStandardClassicFilter_APOSTROPHE_TYPE_ && bufferLength >= 2 && IOSCharArray_Get(nil_chk(buffer), bufferLength - 2) == '\'' && (IOSCharArray_Get(buffer, bufferLength - 1) == 's' || IOSCharArray_Get(buffer, bufferLength - 1) == 'S')) {
    [termAtt_ setLengthWithInt:bufferLength - 2];
  }
  else if (type == OrgApacheLuceneAnalysisStandardClassicFilter_ACRONYM_TYPE_) {
    jint upto = 0;
    for (jint i = 0; i < bufferLength; i++) {
      jchar c = IOSCharArray_Get(nil_chk(buffer), i);
      if (c != '.') *IOSCharArray_GetRef(buffer, upto++) = c;
    }
    [termAtt_ setLengthWithInt:upto];
  }
  return true;
}

- (void)dealloc {
  RELEASE_(typeAtt_);
  RELEASE_(termAtt_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisStandardClassicFilter class]) {
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardClassicFilter_APOSTROPHE_TYPE_, IOSObjectArray_Get(nil_chk(JreLoadStatic(OrgApacheLuceneAnalysisStandardClassicTokenizer, TOKEN_TYPES_)), OrgApacheLuceneAnalysisStandardClassicTokenizer_APOSTROPHE));
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardClassicFilter_ACRONYM_TYPE_, IOSObjectArray_Get(JreLoadStatic(OrgApacheLuceneAnalysisStandardClassicTokenizer, TOKEN_TYPES_), OrgApacheLuceneAnalysisStandardClassicTokenizer_ACRONYM));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisStandardClassicFilter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneAnalysisTokenStream:", "ClassicFilter", NULL, 0x1, NULL, NULL },
    { "incrementToken", NULL, "Z", 0x11, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "APOSTROPHE_TYPE_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardClassicFilter_APOSTROPHE_TYPE_, NULL, .constantValue.asLong = 0 },
    { "ACRONYM_TYPE_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardClassicFilter_ACRONYM_TYPE_, NULL, .constantValue.asLong = 0 },
    { "typeAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.TypeAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "termAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.CharTermAttribute;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisStandardClassicFilter = { 2, "ClassicFilter", "org.apache.lucene.analysis.standard", NULL, 0x1, 2, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisStandardClassicFilter;
}

@end

void OrgApacheLuceneAnalysisStandardClassicFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisStandardClassicFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, inArg);
  JreStrongAssign(&self->typeAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_()]);
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
}

OrgApacheLuceneAnalysisStandardClassicFilter *new_OrgApacheLuceneAnalysisStandardClassicFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *inArg) {
  OrgApacheLuceneAnalysisStandardClassicFilter *self = [OrgApacheLuceneAnalysisStandardClassicFilter alloc];
  OrgApacheLuceneAnalysisStandardClassicFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, inArg);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisStandardClassicFilter)
