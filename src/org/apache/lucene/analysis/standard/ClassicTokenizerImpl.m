//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Error.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizerImpl.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"

@interface OrgApacheLuceneAnalysisStandardClassicTokenizerImpl () {
 @public
  /*!
   @brief the input device
   */
  JavaIoReader *zzReader_;
  /*!
   @brief the current state of the DFA
   */
  jint zzState_;
  /*!
   @brief the current lexical state
   */
  jint zzLexicalState_;
  /*!
   @brief this buffer contains the current text to be matched and is
 the source of the yytext() string
   */
  IOSCharArray *zzBuffer_;
  /*!
   @brief the textposition at the last accepting state
   */
  jint zzMarkedPos_;
  /*!
   @brief the current text position in the buffer
   */
  jint zzCurrentPos_;
  /*!
   @brief startRead marks the beginning of the yytext() string in the buffer
   */
  jint zzStartRead_;
  /*!
   @brief endRead marks the last character in the buffer, that has been read
 from input
   */
  jint zzEndRead_;
  /*!
   @brief number of newlines encountered up to the start of the matched text
   */
  jint yyline_;
  /*!
   @brief the number of characters up to the start of the matched text
   */
  jint yychar_;
  /*!
   @brief the number of characters from the last newline up to the start of the 
 matched text
   */
  jint yycolumn_;
  /*!
   @brief zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  jboolean zzAtBOL_;
  /*!
   @brief zzAtEOF == true <=> the scanner is at the EOF
   */
  jboolean zzAtEOF_;
  /*!
   @brief denotes if the user-EOF-code has already been executed
   */
  jboolean zzEOFDone_;
}

+ (IOSIntArray *)zzUnpackAction;

+ (jint)zzUnpackActionWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackRowMap;

+ (jint)zzUnpackRowMapWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackTrans;

+ (jint)zzUnpackTransWithNSString:(NSString *)packed
                          withInt:(jint)offset
                     withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackAttribute;

+ (jint)zzUnpackAttributeWithNSString:(NSString *)packed
                              withInt:(jint)offset
                         withIntArray:(IOSIntArray *)result;

/*!
 @brief Unpacks the compressed character translation table.
 @param packed   the packed character translation table
 @return the unpacked character translation table
 */
+ (IOSCharArray *)zzUnpackCMapWithNSString:(NSString *)packed;

/*!
 @brief Refills the input buffer.
 @return <code>false</code>, iff there was new input.
 @exception java.io.IOException  if any I/O-Error occurs
 */
- (jboolean)zzRefill;

/*!
 @brief Reports an error that occured while scanning.
 In a wellformed scanner (no or only correct usage of 
 yypushback(int) and a match-all fallback rule) this method 
 will only be called with things that "Can't Possibly Happen".
 If this method is called, something is seriously wrong
 (e.g. a JFlex bug producing a faulty scanner etc.).
 Usual syntax/scanner level error handling should be done
 in error fallback rules.
 @param errorCode  the code of the errormessage to display
 */
- (void)zzScanErrorWithInt:(jint)errorCode;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, zzReader_, JavaIoReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, zzBuffer_, IOSCharArray *)

/*!
 @brief initial size of the lookahead buffer
 */
inline jint OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_BUFFERSIZE();
#define OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_BUFFERSIZE 4096
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_BUFFERSIZE, jint)

/*!
 @brief ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
 ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
 at the beginning of a line
 l is of the form l = 2*k, k a non negative integer
 */
inline IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_LEXSTATE();
static IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_LEXSTATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_LEXSTATE, IOSIntArray *)

/*!
 @brief Translates characters to character classes
 */
inline NSString *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_CMAP_PACKED();
static NSString *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_CMAP_PACKED = @"&\x00\x01\x05\x01\x03\x04\x00\x01\t\x01\x07\x01\x04\x01\t\n\x02\x06\x00\x01\x06\x1a\n\x04\x00\x01\x08\x01\x00\x1a\n/\x00\x01\n\n\x00\x01\n\x04\x00\x01\n\x05\x00\x17\n\x01\x00\x1f\n\x01\x00\u0128\n\x02\x00\x12\n\x1c\x00^\n\x02\x00\t\n\x02\x00\x07\n\x0e\x00\x02\n\x0e\x00\x05\n\t\x00\x01\n\xc2\x8b\x00\x01\n\x0b\x00\x01\n\x01\x00\x03\n\x01\x00\x01\n\x01\x00\x14\n\x01\x00,\n\x01\x00\x08\n\x02\x00\x1a\n\x0c\x00\xc2\x82\n\n\x00""9\n\x02\x00\x02\n\x02\x00\x02\n\x03\x00&\n\x02\x00\x02\n7\x00&\n\x02\x00\x01\n\x07\x00'\nH\x00\x1b\n\x05\x00\x03\n.\x00\x1a\n\x05\x00\x0b\n\x15\x00\n\x02\x07\x00""c\n\x01\x00\x01\n\x0f\x00\x02\n\t\x00\n\x02\x03\n\x13\x00\x01\n\x01\x00\x1b\nS\x00&\n\u015f\x00""5\n\x03\x00\x01\n\x12\x00\x01\n\x07\x00\n\n\x04\x00\n\x02\x15\x00\x08\n\x02\x00\x02\n\x02\x00\x16\n\x01\x00\x07\n\x01\x00\x01\n\x03\x00\x04\n\"\x00\x02\n\x01\x00\x03\n\x04\x00\n\x02\x02\n\x13\x00\x06\n\x04\x00\x02\n\x02\x00\x16\n\x01\x00\x07\n\x01\x00\x02\n\x01\x00\x02\n\x01\x00\x02\n\x1f\x00\x04\n\x01\x00\x01\n\x07\x00\n\x02\x02\x00\x03\n\x10\x00\x07\n\x01\x00\x01\n\x01\x00\x03\n\x01\x00\x16\n\x01\x00\x07\n\x01\x00\x02\n\x01\x00\x05\n\x03\x00\x01\n\x12\x00\x01\n\x0f\x00\x01\n\x05\x00\n\x02\x15\x00\x08\n\x02\x00\x02\n\x02\x00\x16\n\x01\x00\x07\n\x01\x00\x02\n\x02\x00\x04\n\x03\x00\x01\n\x1e\x00\x02\n\x01\x00\x03\n\x04\x00\n\x02\x15\x00\x06\n\x03\x00\x03\n\x01\x00\x04\n\x03\x00\x02\n\x01\x00\x01\n\x01\x00\x02\n\x03\x00\x02\n\x03\x00\x03\n\x03\x00\x08\n\x01\x00\x03\n-\x00\t\x02\x15\x00\x08\n\x01\x00\x03\n\x01\x00\x17\n\x01\x00\n\n\x01\x00\x05\n&\x00\x02\n\x04\x00\n\x02\x15\x00\x08\n\x01\x00\x03\n\x01\x00\x17\n\x01\x00\n\n\x01\x00\x05\n$\x00\x01\n\x01\x00\x02\n\x04\x00\n\x02\x15\x00\x08\n\x01\x00\x03\n\x01\x00\x17\n\x01\x00\x10\n&\x00\x02\n\x04\x00\n\x02\x15\x00\x12\n\x03\x00\x18\n\x01\x00\t\n\x01\x00\x01\n\x02\x00\x07\n9\x00\x01\x01""0\n\x01\x01\x02\n\x0c\x01\x07\n\t\x01\n\x02'\x00\x02\n\x01\x00\x01\n\x02\x00\x02\n\x01\x00\x01\n\x02\x00\x01\n\x06\x00\x04\n\x01\x00\x07\n\x01\x00\x03\n\x01\x00\x01\n\x01\x00\x01\n\x02\x00\x02\n\x01\x00\x04\n\x01\x00\x02\n\t\x00\x01\n\x02\x00\x05\n\x01\x00\x01\n\t\x00\n\x02\x02\x00\x02\n\"\x00\x01\n\x1f\x00\n\x02\x16\x00\x08\n\x01\x00\"\n\x1d\x00\x04\nt\x00\"\n\x01\x00\x05\n\x01\x00\x02\n\x15\x00\n\x02\x06\x00\x06\nJ\x00&\n\n\x00'\n\t\x00Z\n\x05\x00""D\n\x05\x00R\n\x06\x00\x07\n\x01\x00?\n\x01\x00\x01\n\x01\x00\x04\n\x02\x00\x07\n\x01\x00\x01\n\x01\x00\x04\n\x02\x00'\n\x01\x00\x01\n\x01\x00\x04\n\x02\x00\x1f\n\x01\x00\x01\n\x01\x00\x04\n\x02\x00\x07\n\x01\x00\x01\n\x01\x00\x04\n\x02\x00\x07\n\x01\x00\x07\n\x01\x00\x17\n\x01\x00\x1f\n\x01\x00\x01\n\x01\x00\x04\n\x02\x00\x07\n\x01\x00'\n\x01\x00\x13\n\x0e\x00\t\x02.\x00U\n\x0c\x00\u026c\n\x02\x00\x08\n\n\x00\x1a\n\x05\x00K\n\xc2\x95\x00""4\n,\x00\n\x02&\x00\n\x02\x06\x00X\n\x08\x00)\n\u0557\x00\xc2\x9c\n\x04\x00Z\n\x06\x00\x16\n\x02\x00\x06\n\x02\x00&\n\x02\x00\x06\n\x02\x00\x08\n\x01\x00\x01\n\x01\x00\x01\n\x01\x00\x01\n\x01\x00\x1f\n\x02\x00""5\n\x01\x00\x07\n\x01\x00\x01\n\x03\x00\x03\n\x01\x00\x07\n\x03\x00\x04\n\x02\x00\x06\n\x04\x00\x0d\n\x05\x00\x03\n\x01\x00\x07\n\xc2\x82\x00\x01\n\xc2\x82\x00\x01\n\x04\x00\x01\n\x02\x00\n\n\x01\x00\x01\n\x03\x00\x05\n\x06\x00\x01\n\x01\x00\x01\n\x01\x00\x01\n\x01\x00\x04\n\x01\x00\x03\n\x01\x00\x07\n\u0ecb\x00\x02\n*\x00\x05\n\n\x00\x01\x0bT\x0b\x08\x0b\x02\x0b\x02\x0bZ\x0b\x01\x0b\x03\x0b\x06\x0b(\x0b\x03\x0b\x01\x00^\n\x11\x00\x18\n8\x00\x10\x0b\u0100\x00\xc2\x80\x0b\xc2\x80\x00\u19b6\x0b\n\x0b@\x00\u51a6\x0bZ\x0b\u048d\n\u0773\x00\u2ba4\n\u215c\x00\u012e\x0b\u00d2\x0b\x07\n\x0c\x00\x05\n\x05\x00\x01\n\x01\x00\n\n\x01\x00\x0d\n\x01\x00\x05\n\x01\x00\x01\n\x01\x00\x02\n\x01\x00\x02\n\x01\x00l\n!\x00\u016b\n\x12\x00@\n\x02\x00""6\n(\x00\x0c\nt\x00\x03\n\x01\x00\x01\n\x01\x00\xc2\x87\n\x13\x00\n\x02\x07\x00\x1a\n\x06\x00\x1a\n\n\x00\x01\x0b:\x0b\x1f\n\x03\x00\x06\n\x02\x00\x06\n\x02\x00\x06\n\x02\x00\x03\n#\x00";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_CMAP_PACKED, NSString *)

/*!
 @brief Translates characters to character classes
 */
inline IOSCharArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_CMAP();
static IOSCharArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_CMAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_CMAP, IOSCharArray *)

/*!
 @brief Translates DFA states to action switch labels.
 */
inline IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_ACTION();
static IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ACTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_ACTION, IOSIntArray *)

inline NSString *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_ACTION_PACKED_0();
static NSString *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ACTION_PACKED_0 = @"\x01\x00\x01\x01\x03\x02\x01\x03\x0b\x00\x01\x02\x03\x04\x02\x00\x01\x05\x01\x00\x01\x05\x03\x04\x06\x05\x01\x06\x01\x04\x02\x07\x01\x08\x01\x00\x01\x08\x03\x00\x02\x08\x01\t\x01\n\x01\x04";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_ACTION_PACKED_0, NSString *)

/*!
 @brief Translates a state to a row index in the transition table
 */
inline IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_ROWMAP();
static IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ROWMAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_ROWMAP, IOSIntArray *)

inline NSString *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_ROWMAP_PACKED_0();
static NSString *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ROWMAP_PACKED_0 = @"\x00\x00\x00\x0c\x00\x18\x00$\x00""0\x00\x0c\x00<\x00H\x00T\x00`\x00l\x00x\x00\xc2\x84\x00\xc2\x90\x00\xc2\x9c\x00\u00a8\x00\u00b4\x00\u00c0\x00\u00cc\x00\u00d8\x00\u00e4\x00\u00f0\x00\u00fc\x00\u0108\x00\u0114\x00\u0120\x00\u012c\x00\u0138\x00\u0144\x00\u0150\x00\u015c\x00\u0168\x00\u0174\x00\u0180\x00\u018c\x00\u0198\x00\u01a4\x00\u00a8\x00\u01b0\x00\u01bc\x00\u01c8\x00\u01d4\x00\u01e0\x00\u01ec\x00\u01f8\x00<\x00l\x00\u0204\x00\u0210\x00\u021c";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_ROWMAP_PACKED_0, NSString *)

/*!
 @brief The transition table of the DFA
 */
inline IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_TRANS();
static IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_TRANS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_TRANS, IOSIntArray *)

inline NSString *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_TRANS_PACKED_0();
static NSString *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_TRANS_PACKED_0 = @"\x01\x02\x01\x03\x01\x04\x07\x02\x01\x05\x01\x06\x0d\x00\x02\x03\x01\x00\x01\x07\x01\x00\x01\x08\x02\t\x01\n\x01\x03\x02\x00\x01\x03\x01\x04\x01\x00\x01\x0b\x01\x00\x01\x08\x02\x0c\x01\x0d\x01\x04\x02\x00\x01\x03\x01\x04\x01\x0e\x01\x0f\x01\x10\x01\x11\x02\t\x01\n\x01\x12\x02\x00\x01\x13\x01\x14\x07\x00\x01\x15\x02\x00\x02\x16\x07\x00\x01\x16\x02\x00\x01\x17\x01\x18\x07\x00\x01\x19\x03\x00\x01\x1a\x07\x00\x01\n\x02\x00\x01\x1b\x01\x1c\x07\x00\x01\x1d\x02\x00\x01\x1e\x01\x1f\x07\x00\x01 \x02\x00\x01!\x01\"\x07\x00\x01#\x0b\x00\x01$\x02\x00\x01\x13\x01\x14\x07\x00\x01%\x0b\x00\x01&\x02\x00\x02\x16\x07\x00\x01'\x02\x00\x01\x03\x01\x04\x01\x0e\x01\x07\x01\x10\x01\x11\x02\t\x01\n\x01\x12\x02\x00\x02\x13\x01\x00\x01(\x01\x00\x01\x08\x02)\x01\x00\x01\x13\x02\x00\x01\x13\x01\x14\x01\x00\x01*\x01\x00\x01\x08\x02+\x01,\x01\x14\x02\x00\x01\x13\x01\x14\x01\x00\x01(\x01\x00\x01\x08\x02)\x01\x00\x01\x15\x02\x00\x02\x16\x01\x00\x01-\x02\x00\x01-\x02\x00\x01\x16\x02\x00\x02\x17\x01\x00\x01)\x01\x00\x01\x08\x02)\x01\x00\x01\x17\x02\x00\x01\x17\x01\x18\x01\x00\x01+\x01\x00\x01\x08\x02+\x01,\x01\x18\x02\x00\x01\x17\x01\x18\x01\x00\x01)\x01\x00\x01\x08\x02)\x01\x00\x01\x19\x03\x00\x01\x1a\x01\x00\x01,\x02\x00\x03,\x01\x1a\x02\x00\x02\x1b\x01\x00\x01.\x01\x00\x01\x08\x02\t\x01\n\x01\x1b\x02\x00\x01\x1b\x01\x1c\x01\x00\x01/\x01\x00\x01\x08\x02\x0c\x01\x0d\x01\x1c\x02\x00\x01\x1b\x01\x1c\x01\x00\x01.\x01\x00\x01\x08\x02\t\x01\n\x01\x1d\x02\x00\x02\x1e\x01\x00\x01\t\x01\x00\x01\x08\x02\t\x01\n\x01\x1e\x02\x00\x01\x1e\x01\x1f\x01\x00\x01\x0c\x01\x00\x01\x08\x02\x0c\x01\x0d\x01\x1f\x02\x00\x01\x1e\x01\x1f\x01\x00\x01\t\x01\x00\x01\x08\x02\t\x01\n\x01 \x02\x00\x02!\x01\x00\x01\n\x02\x00\x03\n\x01!\x02\x00\x01!\x01\"\x01\x00\x01\x0d\x02\x00\x03\x0d\x01\"\x02\x00\x01!\x01\"\x01\x00\x01\n\x02\x00\x03\n\x01#\x04\x00\x01\x0e\x06\x00\x01$\x02\x00\x01\x13\x01\x14\x01\x00\x01""0\x01\x00\x01\x08\x02)\x01\x00\x01\x15\x02\x00\x02\x16\x01\x00\x01-\x02\x00\x01-\x02\x00\x01'\x02\x00\x02\x13\x07\x00\x01\x13\x02\x00\x02\x17\x07\x00\x01\x17\x02\x00\x02\x1b\x07\x00\x01\x1b\x02\x00\x02\x1e\x07\x00\x01\x1e\x02\x00\x02!\x07\x00\x01!\x02\x00\x02""1\x07\x00\x01""1\x02\x00\x02\x13\x07\x00\x01""2\x02\x00\x02""1\x01\x00\x01-\x02\x00\x01-\x02\x00\x01""1\x02\x00\x02\x13\x01\x00\x01""0\x01\x00\x01\x08\x02)\x01\x00\x01\x13\x01\x00";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_TRANS_PACKED_0, NSString *)

inline jint OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_UNKNOWN_ERROR();
#define OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_UNKNOWN_ERROR 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_UNKNOWN_ERROR, jint)

inline jint OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_NO_MATCH();
#define OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_NO_MATCH 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_NO_MATCH, jint)

inline jint OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_PUSHBACK_2BIG();
#define OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_PUSHBACK_2BIG 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_PUSHBACK_2BIG, jint)

inline IOSObjectArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_ERROR_MSG();
static IOSObjectArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ERROR_MSG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_ERROR_MSG, IOSObjectArray *)

/*!
 @brief ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
 */
inline IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_ATTRIBUTE();
static IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ATTRIBUTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_ATTRIBUTE, IOSIntArray *)

inline NSString *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_get_ZZ_ATTRIBUTE_PACKED_0();
static NSString *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ATTRIBUTE_PACKED_0 = @"\x01\x00\x01\t\x03\x01\x01\t\x0b\x00\x04\x01\x02\x00\x01\x01\x01\x00\x0f\x01\x01\x00\x01\x01\x03\x00\x05\x01";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, ZZ_ATTRIBUTE_PACKED_0, NSString *)

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackAction();

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackActionWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackRowMap();

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackRowMapWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackTrans();

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackTransWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackAttribute();

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackAttributeWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSCharArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackCMapWithNSString_(NSString *packed);

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzRefill(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *self);

__attribute__((unused)) static jint OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_yylength(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *self);

__attribute__((unused)) static void OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzScanErrorWithInt_(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *self, jint errorCode);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl)

IOSObjectArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_TOKEN_TYPES;

@implementation OrgApacheLuceneAnalysisStandardClassicTokenizerImpl

+ (jint)YYEOF {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_YYEOF;
}

+ (jint)YYINITIAL {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_YYINITIAL;
}

+ (jint)ALPHANUM {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ALPHANUM;
}

+ (jint)APOSTROPHE {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_APOSTROPHE;
}

+ (jint)ACRONYM {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ACRONYM;
}

+ (jint)COMPANY {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_COMPANY;
}

+ (jint)EMAIL {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_EMAIL;
}

+ (jint)HOST {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_HOST;
}

+ (jint)NUM {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_NUM;
}

+ (jint)CJ {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_CJ;
}

+ (jint)ACRONYM_DEP {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ACRONYM_DEP;
}

+ (IOSObjectArray *)TOKEN_TYPES {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_TOKEN_TYPES;
}

+ (IOSIntArray *)zzUnpackAction {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackAction();
}

+ (jint)zzUnpackActionWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackActionWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackRowMap {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackRowMap();
}

+ (jint)zzUnpackRowMapWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackRowMapWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackTrans {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackTrans();
}

+ (jint)zzUnpackTransWithNSString:(NSString *)packed
                          withInt:(jint)offset
                     withIntArray:(IOSIntArray *)result {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackTransWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackAttribute {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackAttribute();
}

+ (jint)zzUnpackAttributeWithNSString:(NSString *)packed
                              withInt:(jint)offset
                         withIntArray:(IOSIntArray *)result {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackAttributeWithNSString_withInt_withIntArray_(packed, offset, result);
}

- (jint)yychar {
  return yychar_;
}

- (void)getTextWithOrgApacheLuceneAnalysisTokenattributesCharTermAttribute:(id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)t {
  [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(t)) copyBufferWithCharArray:zzBuffer_ withInt:zzStartRead_ withInt:zzMarkedPos_ - zzStartRead_];
}

- (void)setBufferSizeWithInt:(jint)numChars {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg {
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_initWithJavaIoReader_(self, inArg);
  return self;
}

+ (IOSCharArray *)zzUnpackCMapWithNSString:(NSString *)packed {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackCMapWithNSString_(packed);
}

- (jboolean)zzRefill {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzRefill(self);
}

- (void)yyclose {
  zzAtEOF_ = true;
  zzEndRead_ = zzStartRead_;
  if (zzReader_ != nil) [zzReader_ close];
}

- (void)yyresetWithJavaIoReader:(JavaIoReader *)reader {
  JreStrongAssign(&zzReader_, reader);
  zzAtBOL_ = true;
  zzAtEOF_ = false;
  zzEOFDone_ = false;
  zzEndRead_ = zzStartRead_ = 0;
  zzCurrentPos_ = zzMarkedPos_ = 0;
  yyline_ = yychar_ = yycolumn_ = 0;
  zzLexicalState_ = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_YYINITIAL;
  if (((IOSCharArray *) nil_chk(zzBuffer_))->size_ > OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_BUFFERSIZE) JreStrongAssignAndConsume(&zzBuffer_, [IOSCharArray newArrayWithLength:OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_BUFFERSIZE]);
}

- (jint)yystate {
  return zzLexicalState_;
}

- (void)yybeginWithInt:(jint)newState {
  zzLexicalState_ = newState;
}

- (NSString *)yytext {
  return [NSString stringWithCharacters:zzBuffer_ offset:zzStartRead_ length:zzMarkedPos_ - zzStartRead_];
}

- (jchar)yycharatWithInt:(jint)pos {
  return IOSCharArray_Get(nil_chk(zzBuffer_), zzStartRead_ + pos);
}

- (jint)yylength {
  return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_yylength(self);
}

- (void)zzScanErrorWithInt:(jint)errorCode {
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzScanErrorWithInt_(self, errorCode);
}

- (void)yypushbackWithInt:(jint)number {
  if (number > OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_yylength(self)) OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzScanErrorWithInt_(self, OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_PUSHBACK_2BIG);
  zzMarkedPos_ -= number;
}

- (jint)getNextToken {
  jint zzInput;
  jint zzAction;
  jint zzCurrentPosL;
  jint zzMarkedPosL;
  jint zzEndReadL = zzEndRead_;
  IOSCharArray *zzBufferL = zzBuffer_;
  IOSCharArray *zzCMapL = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_CMAP;
  IOSIntArray *zzTransL = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_TRANS;
  IOSIntArray *zzRowMapL = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ROWMAP;
  IOSIntArray *zzAttrL = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL = zzMarkedPos_;
    yychar_ += zzMarkedPosL - zzStartRead_;
    zzAction = -1;
    zzCurrentPosL = zzCurrentPos_ = zzStartRead_ = zzMarkedPosL;
    zzState_ = IOSIntArray_Get(nil_chk(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_LEXSTATE), zzLexicalState_);
    jint zzAttributes = IOSIntArray_Get(nil_chk(zzAttrL), zzState_);
    if ((zzAttributes & 1) == 1) {
      zzAction = zzState_;
    }
    {
      while (true) {
        if (zzCurrentPosL < zzEndReadL) zzInput = IOSCharArray_Get(nil_chk(zzBufferL), zzCurrentPosL++);
        else if (zzAtEOF_) {
          zzInput = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_YYEOF;
          goto break_zzForAction;
        }
        else {
          zzCurrentPos_ = zzCurrentPosL;
          zzMarkedPos_ = zzMarkedPosL;
          jboolean eof = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzRefill(self);
          zzCurrentPosL = zzCurrentPos_;
          zzMarkedPosL = zzMarkedPos_;
          zzBufferL = zzBuffer_;
          zzEndReadL = zzEndRead_;
          if (eof) {
            zzInput = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_YYEOF;
            goto break_zzForAction;
          }
          else {
            zzInput = IOSCharArray_Get(nil_chk(zzBufferL), zzCurrentPosL++);
          }
        }
        jint zzNext = IOSIntArray_Get(nil_chk(zzTransL), IOSIntArray_Get(nil_chk(zzRowMapL), zzState_) + IOSCharArray_Get(nil_chk(zzCMapL), zzInput));
        if (zzNext == -1) goto break_zzForAction;
        zzState_ = zzNext;
        zzAttributes = IOSIntArray_Get(zzAttrL, zzState_);
        if ((zzAttributes & 1) == 1) {
          zzAction = zzState_;
          zzMarkedPosL = zzCurrentPosL;
          if ((zzAttributes & 8) == 8) goto break_zzForAction;
        }
      }
    }
    break_zzForAction: ;
    zzMarkedPos_ = zzMarkedPosL;
    switch (zzAction < 0 ? zzAction : IOSIntArray_Get(nil_chk(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ACTION), zzAction)) {
      case 1:
      {
        break;
      }
      case 11:
      break;
      case 2:
      {
        return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ALPHANUM;
      }
      case 12:
      break;
      case 3:
      {
        return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_CJ;
      }
      case 13:
      break;
      case 4:
      {
        return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_HOST;
      }
      case 14:
      break;
      case 5:
      {
        return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_NUM;
      }
      case 15:
      break;
      case 6:
      {
        return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_APOSTROPHE;
      }
      case 16:
      break;
      case 7:
      {
        return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_COMPANY;
      }
      case 17:
      break;
      case 8:
      {
        return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ACRONYM_DEP;
      }
      case 18:
      break;
      case 9:
      {
        return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ACRONYM;
      }
      case 19:
      break;
      case 10:
      {
        return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_EMAIL;
      }
      case 20:
      break;
      default:
      if (zzInput == OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_YYEOF && zzStartRead_ == zzCurrentPos_) {
        zzAtEOF_ = true;
        return OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_YYEOF;
      }
      else {
        OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzScanErrorWithInt_(self, OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_NO_MATCH);
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(zzReader_);
  RELEASE_(zzBuffer_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisStandardClassicTokenizerImpl class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_LEXSTATE, [IOSIntArray newArrayWithInts:(jint[]){ 0, 0 } count:2]);
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_CMAP, OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackCMapWithNSString_(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_CMAP_PACKED));
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ACTION, OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackAction());
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ROWMAP, OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackRowMap());
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_TRANS, OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackTrans());
    JreStrongAssignAndConsume(&OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ERROR_MSG, [IOSObjectArray newArrayWithObjects:(id[]){ @"Unkown internal scanner error", @"Error: could not match input", @"Error: pushback value was too large" } count:3 type:NSString_class_()]);
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ATTRIBUTE, OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackAttribute());
    JreStrongAssign(&OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_TOKEN_TYPES, JreLoadStatic(OrgApacheLuceneAnalysisStandardStandardTokenizer, TOKEN_TYPES));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "zzUnpackAction", NULL, "[I", 0xa, NULL, NULL },
    { "zzUnpackActionWithNSString:withInt:withIntArray:", "zzUnpackAction", "I", 0xa, NULL, NULL },
    { "zzUnpackRowMap", NULL, "[I", 0xa, NULL, NULL },
    { "zzUnpackRowMapWithNSString:withInt:withIntArray:", "zzUnpackRowMap", "I", 0xa, NULL, NULL },
    { "zzUnpackTrans", NULL, "[I", 0xa, NULL, NULL },
    { "zzUnpackTransWithNSString:withInt:withIntArray:", "zzUnpackTrans", "I", 0xa, NULL, NULL },
    { "zzUnpackAttribute", NULL, "[I", 0xa, NULL, NULL },
    { "zzUnpackAttributeWithNSString:withInt:withIntArray:", "zzUnpackAttribute", "I", 0xa, NULL, NULL },
    { "yychar", NULL, "I", 0x11, NULL, NULL },
    { "getTextWithOrgApacheLuceneAnalysisTokenattributesCharTermAttribute:", "getText", "V", 0x11, NULL, NULL },
    { "setBufferSizeWithInt:", "setBufferSize", "V", 0x11, NULL, NULL },
    { "initWithJavaIoReader:", "ClassicTokenizerImpl", NULL, 0x0, NULL, NULL },
    { "zzUnpackCMapWithNSString:", "zzUnpackCMap", "[C", 0xa, NULL, NULL },
    { "zzRefill", NULL, "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "yyclose", NULL, "V", 0x11, "Ljava.io.IOException;", NULL },
    { "yyresetWithJavaIoReader:", "yyreset", "V", 0x11, NULL, NULL },
    { "yystate", NULL, "I", 0x11, NULL, NULL },
    { "yybeginWithInt:", "yybegin", "V", 0x11, NULL, NULL },
    { "yytext", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "yycharatWithInt:", "yycharat", "C", 0x11, NULL, NULL },
    { "yylength", NULL, "I", 0x11, NULL, NULL },
    { "zzScanErrorWithInt:", "zzScanError", "V", 0x2, NULL, NULL },
    { "yypushbackWithInt:", "yypushback", "V", 0x1, NULL, NULL },
    { "getNextToken", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "YYEOF", "YYEOF", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_YYEOF },
    { "ZZ_BUFFERSIZE", "ZZ_BUFFERSIZE", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_BUFFERSIZE },
    { "YYINITIAL", "YYINITIAL", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_YYINITIAL },
    { "ZZ_LEXSTATE", "ZZ_LEXSTATE", 0x1a, "[I", &OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_LEXSTATE, NULL, .constantValue.asLong = 0 },
    { "ZZ_CMAP_PACKED", "ZZ_CMAP_PACKED", 0x1a, "Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_CMAP_PACKED, NULL, .constantValue.asLong = 0 },
    { "ZZ_CMAP", "ZZ_CMAP", 0x1a, "[C", &OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_CMAP, NULL, .constantValue.asLong = 0 },
    { "ZZ_ACTION", "ZZ_ACTION", 0x1a, "[I", &OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ACTION, NULL, .constantValue.asLong = 0 },
    { "ZZ_ACTION_PACKED_0", "ZZ_ACTION_PACKED_0", 0x1a, "Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ACTION_PACKED_0, NULL, .constantValue.asLong = 0 },
    { "ZZ_ROWMAP", "ZZ_ROWMAP", 0x1a, "[I", &OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ROWMAP, NULL, .constantValue.asLong = 0 },
    { "ZZ_ROWMAP_PACKED_0", "ZZ_ROWMAP_PACKED_0", 0x1a, "Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ROWMAP_PACKED_0, NULL, .constantValue.asLong = 0 },
    { "ZZ_TRANS", "ZZ_TRANS", 0x1a, "[I", &OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_TRANS, NULL, .constantValue.asLong = 0 },
    { "ZZ_TRANS_PACKED_0", "ZZ_TRANS_PACKED_0", 0x1a, "Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_TRANS_PACKED_0, NULL, .constantValue.asLong = 0 },
    { "ZZ_UNKNOWN_ERROR", "ZZ_UNKNOWN_ERROR", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_UNKNOWN_ERROR },
    { "ZZ_NO_MATCH", "ZZ_NO_MATCH", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_NO_MATCH },
    { "ZZ_PUSHBACK_2BIG", "ZZ_PUSHBACK_2BIG", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_PUSHBACK_2BIG },
    { "ZZ_ERROR_MSG", "ZZ_ERROR_MSG", 0x1a, "[Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ERROR_MSG, NULL, .constantValue.asLong = 0 },
    { "ZZ_ATTRIBUTE", "ZZ_ATTRIBUTE", 0x1a, "[I", &OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ATTRIBUTE, NULL, .constantValue.asLong = 0 },
    { "ZZ_ATTRIBUTE_PACKED_0", "ZZ_ATTRIBUTE_PACKED_0", 0x1a, "Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ATTRIBUTE_PACKED_0, NULL, .constantValue.asLong = 0 },
    { "zzReader_", NULL, 0x2, "Ljava.io.Reader;", NULL, NULL, .constantValue.asLong = 0 },
    { "zzState_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "zzLexicalState_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "zzBuffer_", NULL, 0x2, "[C", NULL, NULL, .constantValue.asLong = 0 },
    { "zzMarkedPos_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "zzCurrentPos_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "zzStartRead_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "zzEndRead_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "yyline_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "yychar_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "yycolumn_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "zzAtBOL_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "zzAtEOF_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "zzEOFDone_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "ALPHANUM", "ALPHANUM", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ALPHANUM },
    { "APOSTROPHE", "APOSTROPHE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_APOSTROPHE },
    { "ACRONYM", "ACRONYM", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ACRONYM },
    { "COMPANY", "COMPANY", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_COMPANY },
    { "EMAIL", "EMAIL", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_EMAIL },
    { "HOST", "HOST", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_HOST },
    { "NUM", "NUM", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_NUM },
    { "CJ", "CJ", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_CJ },
    { "ACRONYM_DEP", "ACRONYM_DEP", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ACRONYM_DEP },
    { "TOKEN_TYPES", "TOKEN_TYPES", 0x19, "[Ljava.lang.String;", &OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_TOKEN_TYPES, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisStandardClassicTokenizerImpl = { 2, "ClassicTokenizerImpl", "org.apache.lucene.analysis.standard", NULL, 0x0, 24, methods, 42, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisStandardClassicTokenizerImpl;
}

@end

IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackAction() {
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_initialize();
  IOSIntArray *result = [IOSIntArray arrayWithLength:50];
  jint offset = 0;
  offset = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackActionWithNSString_withInt_withIntArray_(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ACTION_PACKED_0, offset, result);
  return result;
}

jint OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackActionWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackRowMap() {
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_initialize();
  IOSIntArray *result = [IOSIntArray arrayWithLength:50];
  jint offset = 0;
  offset = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackRowMapWithNSString_withInt_withIntArray_(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ROWMAP_PACKED_0, offset, result);
  return result;
}

jint OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackRowMapWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint high = JreLShift32([packed charAtWithInt:i++], 16);
    *IOSIntArray_GetRef(nil_chk(result), j++) = high | [packed charAtWithInt:i++];
  }
  return j;
}

IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackTrans() {
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_initialize();
  IOSIntArray *result = [IOSIntArray arrayWithLength:552];
  jint offset = 0;
  offset = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackTransWithNSString_withInt_withIntArray_(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_TRANS_PACKED_0, offset, result);
  return result;
}

jint OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackTransWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    value--;
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

IOSIntArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackAttribute() {
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_initialize();
  IOSIntArray *result = [IOSIntArray arrayWithLength:50];
  jint offset = 0;
  offset = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackAttributeWithNSString_withInt_withIntArray_(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ATTRIBUTE_PACKED_0, offset, result);
  return result;
}

jint OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackAttributeWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

void OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_initWithJavaIoReader_(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *self, JavaIoReader *inArg) {
  NSObject_init(self);
  self->zzLexicalState_ = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_YYINITIAL;
  JreStrongAssignAndConsume(&self->zzBuffer_, [IOSCharArray newArrayWithLength:OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_BUFFERSIZE]);
  self->zzAtBOL_ = true;
  JreStrongAssign(&self->zzReader_, inArg);
}

OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *new_OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, initWithJavaIoReader_, inArg)
}

OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *create_OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl, initWithJavaIoReader_, inArg)
}

IOSCharArray *OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzUnpackCMapWithNSString_(NSString *packed) {
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_initialize();
  IOSCharArray *map = [IOSCharArray arrayWithLength:(jint) 0x10000];
  jint i = 0;
  jint j = 0;
  while (i < 1138) {
    jint count = [((NSString *) nil_chk(packed)) charAtWithInt:i++];
    jchar value = [packed charAtWithInt:i++];
    do *IOSCharArray_GetRef(map, j++) = value;
    while (--count > 0);
  }
  return map;
}

jboolean OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzRefill(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *self) {
  if (self->zzStartRead_ > 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->zzBuffer_, self->zzStartRead_, self->zzBuffer_, 0, self->zzEndRead_ - self->zzStartRead_);
    self->zzEndRead_ -= self->zzStartRead_;
    self->zzCurrentPos_ -= self->zzStartRead_;
    self->zzMarkedPos_ -= self->zzStartRead_;
    self->zzStartRead_ = 0;
  }
  if (self->zzCurrentPos_ >= ((IOSCharArray *) nil_chk(self->zzBuffer_))->size_) {
    IOSCharArray *newBuffer = [IOSCharArray arrayWithLength:self->zzCurrentPos_ * 2];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->zzBuffer_, 0, newBuffer, 0, self->zzBuffer_->size_);
    JreStrongAssign(&self->zzBuffer_, newBuffer);
  }
  jint numRead = [((JavaIoReader *) nil_chk(self->zzReader_)) readWithCharArray:self->zzBuffer_ withInt:self->zzEndRead_ withInt:self->zzBuffer_->size_ - self->zzEndRead_];
  if (numRead > 0) {
    self->zzEndRead_ += numRead;
    return false;
  }
  if (numRead == 0) {
    jint c = [((JavaIoReader *) nil_chk(self->zzReader_)) read];
    if (c == -1) {
      return true;
    }
    else {
      *IOSCharArray_GetRef(nil_chk(self->zzBuffer_), self->zzEndRead_++) = (jchar) c;
      return false;
    }
  }
  return true;
}

jint OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_yylength(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *self) {
  return self->zzMarkedPos_ - self->zzStartRead_;
}

void OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_zzScanErrorWithInt_(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *self, jint errorCode) {
  NSString *message;
  @try {
    message = IOSObjectArray_Get(nil_chk(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ERROR_MSG), errorCode);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    message = IOSObjectArray_Get(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_ERROR_MSG, OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ZZ_UNKNOWN_ERROR);
  }
  @throw create_JavaLangError_initWithNSString_(message);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl)
