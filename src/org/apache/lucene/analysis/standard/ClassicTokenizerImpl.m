//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl.java
//

#include "J2ObjC_source.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizerImpl.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation OrgApacheLuceneAnalysisStandardClassicTokenizerImpl

- (instancetype)init {
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "YYEOF", "YYEOF", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_YYEOF },
    { "YYINITIAL", "YYINITIAL", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_YYINITIAL },
    { "ALPHANUM", "ALPHANUM", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ALPHANUM },
    { "APOSTROPHE", "APOSTROPHE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_APOSTROPHE },
    { "ACRONYM", "ACRONYM", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ACRONYM },
    { "COMPANY", "COMPANY", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_COMPANY },
    { "EMAIL", "EMAIL", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_EMAIL },
    { "HOST", "HOST", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_HOST },
    { "NUM", "NUM", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_NUM },
    { "CJ", "CJ", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_CJ },
    { "ACRONYM_DEP", "ACRONYM_DEP", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_ACRONYM_DEP },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisStandardClassicTokenizerImpl = { 2, "ClassicTokenizerImpl", "org.apache.lucene.analysis.standard", NULL, 0x0, 1, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisStandardClassicTokenizerImpl;
}

@end

void OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_init(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *self) {
  NSObject_init(self);
}

OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *new_OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_init() {
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *self = [OrgApacheLuceneAnalysisStandardClassicTokenizerImpl alloc];
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisStandardClassicTokenizerImpl)
