//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/util/OpenStringBuilder.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Appendable.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/apache/lucene/analysis/util/OpenStringBuilder.h"

@implementation OrgApacheLuceneAnalysisUtilOpenStringBuilder

- (instancetype)init {
  OrgApacheLuceneAnalysisUtilOpenStringBuilder_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)size {
  OrgApacheLuceneAnalysisUtilOpenStringBuilder_initWithInt_(self, size);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)arr
                          withInt:(jint)len {
  OrgApacheLuceneAnalysisUtilOpenStringBuilder_initWithCharArray_withInt_(self, arr, len);
  return self;
}

- (void)setLengthWithInt:(jint)len {
  self->len_ = len;
}

- (void)setWithCharArray:(IOSCharArray *)arr
                 withInt:(jint)end {
  JreStrongAssign(&self->buf_, arr);
  self->len_ = end;
}

- (IOSCharArray *)getArray {
  return buf_;
}

- (jint)size {
  return len_;
}

- (jint)length {
  return len_;
}

- (jint)capacity {
  return ((IOSCharArray *) nil_chk(buf_))->size_;
}

- (id<JavaLangAppendable>)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq {
  return [self appendWithJavaLangCharSequence:csq withInt:0 withInt:[((id<JavaLangCharSequence>) nil_chk(csq)) length]];
}

- (id<JavaLangAppendable>)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                                 withInt:(jint)start
                                                 withInt:(jint)end {
  [self reserveWithInt:end - start];
  for (jint i = start; i < end; i++) {
    [self unsafeWriteWithChar:[((id<JavaLangCharSequence>) nil_chk(csq)) charAtWithInt:i]];
  }
  return self;
}

- (id<JavaLangAppendable>)appendWithChar:(jchar)c {
  [self writeWithChar:c];
  return self;
}

- (jchar)charAtWithInt:(jint)index {
  return IOSCharArray_Get(nil_chk(buf_), index);
}

- (void)setCharAtWithInt:(jint)index
                withChar:(jchar)ch {
  *IOSCharArray_GetRef(nil_chk(buf_), index) = ch;
}

- (id<JavaLangCharSequence>)subSequenceFrom:(jint)start
                                         to:(jint)end {
  @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
}

- (void)unsafeWriteWithChar:(jchar)b {
  *IOSCharArray_GetRef(nil_chk(buf_), len_++) = b;
}

- (void)unsafeWriteWithInt:(jint)b {
  [self unsafeWriteWithChar:(jchar) b];
}

- (void)unsafeWriteWithCharArray:(IOSCharArray *)b
                         withInt:(jint)off
                         withInt:(jint)len {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, off, buf_, self->len_, len);
  self->len_ += len;
}

- (void)resizeWithInt:(jint)len {
  IOSCharArray *newbuf = [IOSCharArray arrayWithLength:JavaLangMath_maxWithInt_withInt_(JreLShift32(((IOSCharArray *) nil_chk(buf_))->size_, 1), len)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, newbuf, 0, [self size]);
  JreStrongAssign(&buf_, newbuf);
}

- (void)reserveWithInt:(jint)num {
  if (len_ + num > ((IOSCharArray *) nil_chk(buf_))->size_) [self resizeWithInt:len_ + num];
}

- (void)writeWithChar:(jchar)b {
  if (len_ >= ((IOSCharArray *) nil_chk(buf_))->size_) {
    [self resizeWithInt:len_ + 1];
  }
  [self unsafeWriteWithChar:b];
}

- (void)writeWithInt:(jint)b {
  [self writeWithChar:(jchar) b];
}

- (void)writeWithCharArray:(IOSCharArray *)b {
  [self writeWithCharArray:b withInt:0 withInt:((IOSCharArray *) nil_chk(b))->size_];
}

- (void)writeWithCharArray:(IOSCharArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  [self reserveWithInt:len];
  [self unsafeWriteWithCharArray:b withInt:off withInt:len];
}

- (void)writeWithOrgApacheLuceneAnalysisUtilOpenStringBuilder:(OrgApacheLuceneAnalysisUtilOpenStringBuilder *)arr {
  [self writeWithCharArray:((OrgApacheLuceneAnalysisUtilOpenStringBuilder *) nil_chk(arr))->buf_ withInt:0 withInt:len_];
}

- (void)writeWithNSString:(NSString *)s {
  [self reserveWithInt:((jint) [((NSString *) nil_chk(s)) length])];
  [s getChars:0 sourceEnd:((jint) [s length]) destination:buf_ destinationBegin:len_];
  len_ += ((jint) [s length]);
}

- (void)flush {
}

- (void)reset {
  len_ = 0;
}

- (IOSCharArray *)toCharArray {
  IOSCharArray *newbuf = [IOSCharArray arrayWithLength:[self size]];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, newbuf, 0, [self size]);
  return newbuf;
}

- (NSString *)description {
  return [NSString stringWithCharacters:buf_ offset:0 length:[self size]];
}

- (void)dealloc {
  RELEASE_(buf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "OpenStringBuilder", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "OpenStringBuilder", NULL, 0x1, NULL, NULL },
    { "initWithCharArray:withInt:", "OpenStringBuilder", NULL, 0x1, NULL, NULL },
    { "setLengthWithInt:", "setLength", "V", 0x1, NULL, NULL },
    { "setWithCharArray:withInt:", "set", "V", 0x1, NULL, NULL },
    { "getArray", NULL, "[C", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "length", NULL, "I", 0x1, NULL, NULL },
    { "capacity", NULL, "I", 0x1, NULL, NULL },
    { "appendWithJavaLangCharSequence:", "append", "Ljava.lang.Appendable;", 0x1, NULL, NULL },
    { "appendWithJavaLangCharSequence:withInt:withInt:", "append", "Ljava.lang.Appendable;", 0x1, NULL, NULL },
    { "appendWithChar:", "append", "Ljava.lang.Appendable;", 0x1, NULL, NULL },
    { "charAtWithInt:", "charAt", "C", 0x1, NULL, NULL },
    { "setCharAtWithInt:withChar:", "setCharAt", "V", 0x1, NULL, NULL },
    { "subSequenceFrom:to:", "subSequence", "Ljava.lang.CharSequence;", 0x1, NULL, NULL },
    { "unsafeWriteWithChar:", "unsafeWrite", "V", 0x1, NULL, NULL },
    { "unsafeWriteWithInt:", "unsafeWrite", "V", 0x1, NULL, NULL },
    { "unsafeWriteWithCharArray:withInt:withInt:", "unsafeWrite", "V", 0x1, NULL, NULL },
    { "resizeWithInt:", "resize", "V", 0x4, NULL, NULL },
    { "reserveWithInt:", "reserve", "V", 0x1, NULL, NULL },
    { "writeWithChar:", "write", "V", 0x1, NULL, NULL },
    { "writeWithInt:", "write", "V", 0x1, NULL, NULL },
    { "writeWithCharArray:", "write", "V", 0x11, NULL, NULL },
    { "writeWithCharArray:withInt:withInt:", "write", "V", 0x1, NULL, NULL },
    { "writeWithOrgApacheLuceneAnalysisUtilOpenStringBuilder:", "write", "V", 0x11, NULL, NULL },
    { "writeWithNSString:", "write", "V", 0x1, NULL, NULL },
    { "flush", NULL, "V", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x11, NULL, NULL },
    { "toCharArray", NULL, "[C", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "buf_", NULL, 0x4, "[C", NULL, NULL, .constantValue.asLong = 0 },
    { "len_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisUtilOpenStringBuilder = { 2, "OpenStringBuilder", "org.apache.lucene.analysis.util", NULL, 0x1, 30, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisUtilOpenStringBuilder;
}

@end

void OrgApacheLuceneAnalysisUtilOpenStringBuilder_init(OrgApacheLuceneAnalysisUtilOpenStringBuilder *self) {
  OrgApacheLuceneAnalysisUtilOpenStringBuilder_initWithInt_(self, 32);
}

OrgApacheLuceneAnalysisUtilOpenStringBuilder *new_OrgApacheLuceneAnalysisUtilOpenStringBuilder_init() {
  OrgApacheLuceneAnalysisUtilOpenStringBuilder *self = [OrgApacheLuceneAnalysisUtilOpenStringBuilder alloc];
  OrgApacheLuceneAnalysisUtilOpenStringBuilder_init(self);
  return self;
}

void OrgApacheLuceneAnalysisUtilOpenStringBuilder_initWithInt_(OrgApacheLuceneAnalysisUtilOpenStringBuilder *self, jint size) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->buf_, [IOSCharArray newArrayWithLength:size]);
}

OrgApacheLuceneAnalysisUtilOpenStringBuilder *new_OrgApacheLuceneAnalysisUtilOpenStringBuilder_initWithInt_(jint size) {
  OrgApacheLuceneAnalysisUtilOpenStringBuilder *self = [OrgApacheLuceneAnalysisUtilOpenStringBuilder alloc];
  OrgApacheLuceneAnalysisUtilOpenStringBuilder_initWithInt_(self, size);
  return self;
}

void OrgApacheLuceneAnalysisUtilOpenStringBuilder_initWithCharArray_withInt_(OrgApacheLuceneAnalysisUtilOpenStringBuilder *self, IOSCharArray *arr, jint len) {
  NSObject_init(self);
  [self setWithCharArray:arr withInt:len];
}

OrgApacheLuceneAnalysisUtilOpenStringBuilder *new_OrgApacheLuceneAnalysisUtilOpenStringBuilder_initWithCharArray_withInt_(IOSCharArray *arr, jint len) {
  OrgApacheLuceneAnalysisUtilOpenStringBuilder *self = [OrgApacheLuceneAnalysisUtilOpenStringBuilder alloc];
  OrgApacheLuceneAnalysisUtilOpenStringBuilder_initWithCharArray_withInt_(self, arr, len);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisUtilOpenStringBuilder)
