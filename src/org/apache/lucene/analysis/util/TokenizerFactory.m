//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/util/TokenizerFactory.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassLoader.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/AnalysisSPILoader.h"
#include "org/apache/lucene/analysis/util/TokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"

inline OrgApacheLuceneAnalysisUtilAnalysisSPILoader *OrgApacheLuceneAnalysisUtilTokenizerFactory_get_loader();
static OrgApacheLuceneAnalysisUtilAnalysisSPILoader *OrgApacheLuceneAnalysisUtilTokenizerFactory_loader;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisUtilTokenizerFactory, loader, OrgApacheLuceneAnalysisUtilAnalysisSPILoader *)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisUtilTokenizerFactory)

@implementation OrgApacheLuceneAnalysisUtilTokenizerFactory

+ (OrgApacheLuceneAnalysisUtilTokenizerFactory *)forNameWithNSString:(NSString *)name
                                                     withJavaUtilMap:(id<JavaUtilMap>)args {
  return OrgApacheLuceneAnalysisUtilTokenizerFactory_forNameWithNSString_withJavaUtilMap_(name, args);
}

+ (IOSClass *)lookupClassWithNSString:(NSString *)name {
  return OrgApacheLuceneAnalysisUtilTokenizerFactory_lookupClassWithNSString_(name);
}

+ (id<JavaUtilSet>)availableTokenizers {
  return OrgApacheLuceneAnalysisUtilTokenizerFactory_availableTokenizers();
}

+ (void)reloadTokenizersWithJavaLangClassLoader:(JavaLangClassLoader *)classloader {
  OrgApacheLuceneAnalysisUtilTokenizerFactory_reloadTokenizersWithJavaLangClassLoader_(classloader);
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)args {
  OrgApacheLuceneAnalysisUtilTokenizerFactory_initWithJavaUtilMap_(self, args);
  return self;
}

- (OrgApacheLuceneAnalysisTokenizer *)create {
  return [self createWithOrgApacheLuceneUtilAttributeFactory:JreLoadStatic(OrgApacheLuceneAnalysisTokenStream, DEFAULT_TOKEN_ATTRIBUTE_FACTORY)];
}

- (OrgApacheLuceneAnalysisTokenizer *)createWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisUtilTokenizerFactory class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneAnalysisUtilTokenizerFactory_loader, new_OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initWithIOSClass_(OrgApacheLuceneAnalysisUtilTokenizerFactory_class_()));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisUtilTokenizerFactory)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "forNameWithNSString:withJavaUtilMap:", "forName", "Lorg.apache.lucene.analysis.util.TokenizerFactory;", 0x9, NULL, "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Lorg/apache/lucene/analysis/util/TokenizerFactory;" },
    { "lookupClassWithNSString:", "lookupClass", "Ljava.lang.Class;", 0x9, NULL, "(Ljava/lang/String;)Ljava/lang/Class<+Lorg/apache/lucene/analysis/util/TokenizerFactory;>;" },
    { "availableTokenizers", NULL, "Ljava.util.Set;", 0x9, NULL, "()Ljava/util/Set<Ljava/lang/String;>;" },
    { "reloadTokenizersWithJavaLangClassLoader:", "reloadTokenizers", "V", 0x9, NULL, NULL },
    { "initWithJavaUtilMap:", "TokenizerFactory", NULL, 0x4, NULL, "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V" },
    { "create", NULL, "Lorg.apache.lucene.analysis.Tokenizer;", 0x11, NULL, NULL },
    { "createWithOrgApacheLuceneUtilAttributeFactory:", "create", "Lorg.apache.lucene.analysis.Tokenizer;", 0x401, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "loader", "loader", 0x1a, "Lorg.apache.lucene.analysis.util.AnalysisSPILoader;", &OrgApacheLuceneAnalysisUtilTokenizerFactory_loader, "Lorg/apache/lucene/analysis/util/AnalysisSPILoader<Lorg/apache/lucene/analysis/util/TokenizerFactory;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisUtilTokenizerFactory = { 2, "TokenizerFactory", "org.apache.lucene.analysis.util", NULL, 0x401, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisUtilTokenizerFactory;
}

@end

OrgApacheLuceneAnalysisUtilTokenizerFactory *OrgApacheLuceneAnalysisUtilTokenizerFactory_forNameWithNSString_withJavaUtilMap_(NSString *name, id<JavaUtilMap> args) {
  OrgApacheLuceneAnalysisUtilTokenizerFactory_initialize();
  return [((OrgApacheLuceneAnalysisUtilAnalysisSPILoader *) nil_chk(OrgApacheLuceneAnalysisUtilTokenizerFactory_loader)) newInstanceWithNSString:name withJavaUtilMap:args];
}

IOSClass *OrgApacheLuceneAnalysisUtilTokenizerFactory_lookupClassWithNSString_(NSString *name) {
  OrgApacheLuceneAnalysisUtilTokenizerFactory_initialize();
  return [((OrgApacheLuceneAnalysisUtilAnalysisSPILoader *) nil_chk(OrgApacheLuceneAnalysisUtilTokenizerFactory_loader)) lookupClassWithNSString:name];
}

id<JavaUtilSet> OrgApacheLuceneAnalysisUtilTokenizerFactory_availableTokenizers() {
  OrgApacheLuceneAnalysisUtilTokenizerFactory_initialize();
  return [((OrgApacheLuceneAnalysisUtilAnalysisSPILoader *) nil_chk(OrgApacheLuceneAnalysisUtilTokenizerFactory_loader)) availableServices];
}

void OrgApacheLuceneAnalysisUtilTokenizerFactory_reloadTokenizersWithJavaLangClassLoader_(JavaLangClassLoader *classloader) {
  OrgApacheLuceneAnalysisUtilTokenizerFactory_initialize();
  [((OrgApacheLuceneAnalysisUtilAnalysisSPILoader *) nil_chk(OrgApacheLuceneAnalysisUtilTokenizerFactory_loader)) reloadWithJavaLangClassLoader:classloader];
}

void OrgApacheLuceneAnalysisUtilTokenizerFactory_initWithJavaUtilMap_(OrgApacheLuceneAnalysisUtilTokenizerFactory *self, id<JavaUtilMap> args) {
  OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory_initWithJavaUtilMap_(self, args);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisUtilTokenizerFactory)
