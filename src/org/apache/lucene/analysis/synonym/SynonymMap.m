//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/store/ByteArrayDataOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "org/apache/lucene/util/CharsRefBuilder.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/ByteSequenceOutputs.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Util.h"

@interface OrgApacheLuceneAnalysisSynonymSynonymMap_Builder () {
 @public
  JavaUtilHashMap *workingSet_;
  OrgApacheLuceneUtilBytesRefHash *words_;
  OrgApacheLuceneUtilBytesRefBuilder *utf8Scratch_;
  jint maxHorizontalContext_;
  jboolean dedup_;
}

- (jboolean)hasHolesWithOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *)chars;

- (void)addWithOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *)input
                                   withInt:(jint)numInputWords
           withOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *)output
                                   withInt:(jint)numOutputWords
                               withBoolean:(jboolean)includeOrig;

- (jint)countWordsWithOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *)chars;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder, workingSet_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder, words_, OrgApacheLuceneUtilBytesRefHash *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder, utf8Scratch_, OrgApacheLuceneUtilBytesRefBuilder *)

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_hasHolesWithOrgApacheLuceneUtilCharsRef_(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder *self, OrgApacheLuceneUtilCharsRef *chars);

__attribute__((unused)) static void OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_addWithOrgApacheLuceneUtilCharsRef_withInt_withOrgApacheLuceneUtilCharsRef_withInt_withBoolean_(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder *self, OrgApacheLuceneUtilCharsRef *input, jint numInputWords, OrgApacheLuceneUtilCharsRef *output, jint numOutputWords, jboolean includeOrig);

__attribute__((unused)) static jint OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_countWordsWithOrgApacheLuceneUtilCharsRef_(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder *self, OrgApacheLuceneUtilCharsRef *chars);

@interface OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry : NSObject {
 @public
  jboolean includeOrig_;
  JavaUtilArrayList *ords_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry, ords_, JavaUtilArrayList *)

__attribute__((unused)) static void OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry_init(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry *self);

__attribute__((unused)) static OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry *new_OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry)

@interface OrgApacheLuceneAnalysisSynonymSynonymMap_Parser () {
 @public
  OrgApacheLuceneAnalysisAnalyzer *analyzer_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymMap_Parser, analyzer_, OrgApacheLuceneAnalysisAnalyzer *)

@implementation OrgApacheLuceneAnalysisSynonymSynonymMap

- (instancetype)initWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
              withOrgApacheLuceneUtilBytesRefHash:(OrgApacheLuceneUtilBytesRefHash *)words
                                          withInt:(jint)maxHorizontalContext {
  OrgApacheLuceneAnalysisSynonymSynonymMap_initWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilBytesRefHash_withInt_(self, fst, words, maxHorizontalContext);
  return self;
}

- (void)dealloc {
  RELEASE_(fst_);
  RELEASE_(words_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneUtilFstFST:withOrgApacheLuceneUtilBytesRefHash:withInt:", "SynonymMap", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "WORD_SEPARATOR", "WORD_SEPARATOR", 0x19, "C", NULL, NULL, .constantValue.asUnichar = OrgApacheLuceneAnalysisSynonymSynonymMap_WORD_SEPARATOR },
    { "fst_", NULL, 0x11, "Lorg.apache.lucene.util.fst.FST;", NULL, "Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/BytesRef;>;", .constantValue.asLong = 0 },
    { "words_", NULL, 0x11, "Lorg.apache.lucene.util.BytesRefHash;", NULL, NULL, .constantValue.asLong = 0 },
    { "maxHorizontalContext_", NULL, 0x11, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.analysis.synonym.SynonymMap$Builder;", "Lorg.apache.lucene.analysis.synonym.SynonymMap$Parser;"};
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisSynonymSynonymMap = { 2, "SynonymMap", "org.apache.lucene.analysis.synonym", NULL, 0x1, 1, methods, 4, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneAnalysisSynonymSynonymMap;
}

@end

void OrgApacheLuceneAnalysisSynonymSynonymMap_initWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilBytesRefHash_withInt_(OrgApacheLuceneAnalysisSynonymSynonymMap *self, OrgApacheLuceneUtilFstFST *fst, OrgApacheLuceneUtilBytesRefHash *words, jint maxHorizontalContext) {
  NSObject_init(self);
  JreStrongAssign(&self->fst_, fst);
  JreStrongAssign(&self->words_, words);
  self->maxHorizontalContext_ = maxHorizontalContext;
}

OrgApacheLuceneAnalysisSynonymSynonymMap *new_OrgApacheLuceneAnalysisSynonymSynonymMap_initWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilBytesRefHash_withInt_(OrgApacheLuceneUtilFstFST *fst, OrgApacheLuceneUtilBytesRefHash *words, jint maxHorizontalContext) {
  OrgApacheLuceneAnalysisSynonymSynonymMap *self = [OrgApacheLuceneAnalysisSynonymSynonymMap alloc];
  OrgApacheLuceneAnalysisSynonymSynonymMap_initWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilBytesRefHash_withInt_(self, fst, words, maxHorizontalContext);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisSynonymSynonymMap)

@implementation OrgApacheLuceneAnalysisSynonymSynonymMap_Builder

- (instancetype)initWithBoolean:(jboolean)dedup {
  OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_initWithBoolean_(self, dedup);
  return self;
}

+ (OrgApacheLuceneUtilCharsRef *)joinWithNSStringArray:(IOSObjectArray *)words
                withOrgApacheLuceneUtilCharsRefBuilder:(OrgApacheLuceneUtilCharsRefBuilder *)reuse {
  return OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_joinWithNSStringArray_withOrgApacheLuceneUtilCharsRefBuilder_(words, reuse);
}

- (jboolean)hasHolesWithOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *)chars {
  return OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_hasHolesWithOrgApacheLuceneUtilCharsRef_(self, chars);
}

- (void)addWithOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *)input
                                   withInt:(jint)numInputWords
           withOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *)output
                                   withInt:(jint)numOutputWords
                               withBoolean:(jboolean)includeOrig {
  OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_addWithOrgApacheLuceneUtilCharsRef_withInt_withOrgApacheLuceneUtilCharsRef_withInt_withBoolean_(self, input, numInputWords, output, numOutputWords, includeOrig);
}

- (jint)countWordsWithOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *)chars {
  return OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_countWordsWithOrgApacheLuceneUtilCharsRef_(self, chars);
}

- (void)addWithOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *)input
           withOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *)output
                               withBoolean:(jboolean)includeOrig {
  OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_addWithOrgApacheLuceneUtilCharsRef_withInt_withOrgApacheLuceneUtilCharsRef_withInt_withBoolean_(self, input, OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_countWordsWithOrgApacheLuceneUtilCharsRef_(self, input), output, OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_countWordsWithOrgApacheLuceneUtilCharsRef_(self, output), includeOrig);
}

- (OrgApacheLuceneAnalysisSynonymSynonymMap *)build {
  OrgApacheLuceneUtilFstByteSequenceOutputs *outputs = OrgApacheLuceneUtilFstByteSequenceOutputs_getSingleton();
  OrgApacheLuceneUtilFstBuilder *builder = [new_OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPEEnum_withOrgApacheLuceneUtilFstOutputs_(JreLoadStatic(OrgApacheLuceneUtilFstFST_INPUT_TYPEEnum, BYTE4), outputs) autorelease];
  OrgApacheLuceneUtilBytesRefBuilder *scratch = [new_OrgApacheLuceneUtilBytesRefBuilder_init() autorelease];
  OrgApacheLuceneStoreByteArrayDataOutput *scratchOutput = [new_OrgApacheLuceneStoreByteArrayDataOutput_init() autorelease];
  id<JavaUtilSet> dedupSet;
  if (dedup_) {
    dedupSet = [new_JavaUtilHashSet_init() autorelease];
  }
  else {
    dedupSet = nil;
  }
  IOSByteArray *spare = [IOSByteArray arrayWithLength:5];
  id<JavaUtilSet> keys = [((JavaUtilHashMap *) nil_chk(workingSet_)) keySet];
  IOSObjectArray *sortedKeys = [keys toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilSet>) nil_chk(keys)) size] type:OrgApacheLuceneUtilCharsRef_class_()]];
  JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(sortedKeys, OrgApacheLuceneUtilCharsRef_getUTF16SortedAsUTF8Comparator());
  OrgApacheLuceneUtilIntsRefBuilder *scratchIntsRef = [new_OrgApacheLuceneUtilIntsRefBuilder_init() autorelease];
  for (jint keyIdx = 0; keyIdx < ((IOSObjectArray *) nil_chk(sortedKeys))->size_; keyIdx++) {
    OrgApacheLuceneUtilCharsRef *input = IOSObjectArray_Get(sortedKeys, keyIdx);
    OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry *output = [workingSet_ getWithId:input];
    jint numEntries = [((JavaUtilArrayList *) nil_chk(((OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry *) nil_chk(output))->ords_)) size];
    jint estimatedSize = 5 + numEntries * 5;
    [scratch growWithInt:estimatedSize];
    [scratchOutput resetWithByteArray:[scratch bytes]];
    jint count = 0;
    for (jint i = 0; i < numEntries; i++) {
      if (dedupSet != nil) {
        JavaLangInteger *ent = [output->ords_ getWithInt:i];
        if ([dedupSet containsWithId:ent]) {
          continue;
        }
        [dedupSet addWithId:ent];
      }
      [scratchOutput writeVIntWithInt:[((JavaLangInteger *) nil_chk([output->ords_ getWithInt:i])) intValue]];
      count++;
    }
    jint pos = [scratchOutput getPosition];
    [scratchOutput writeVIntWithInt:(JreLShift32(count, 1)) | (output->includeOrig_ ? 0 : 1)];
    jint pos2 = [scratchOutput getPosition];
    jint vIntLen = pos2 - pos;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([scratch bytes], pos, spare, 0, vIntLen);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([scratch bytes], 0, [scratch bytes], vIntLen, pos);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(spare, 0, [scratch bytes], 0, vIntLen);
    if (dedupSet != nil) {
      [dedupSet clear];
    }
    [scratch setLengthWithInt:[scratchOutput getPosition]];
    [builder addWithOrgApacheLuceneUtilIntsRef:OrgApacheLuceneUtilFstUtil_toUTF32WithJavaLangCharSequence_withOrgApacheLuceneUtilIntsRefBuilder_(input, scratchIntsRef) withId:[scratch toBytesRef]];
  }
  OrgApacheLuceneUtilFstFST *fst = [builder finish];
  return [new_OrgApacheLuceneAnalysisSynonymSynonymMap_initWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilBytesRefHash_withInt_(fst, words_, maxHorizontalContext_) autorelease];
}

- (void)dealloc {
  RELEASE_(workingSet_);
  RELEASE_(words_);
  RELEASE_(utf8Scratch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:", "Builder", NULL, 0x1, NULL, NULL },
    { "joinWithNSStringArray:withOrgApacheLuceneUtilCharsRefBuilder:", "join", "Lorg.apache.lucene.util.CharsRef;", 0x9, NULL, NULL },
    { "hasHolesWithOrgApacheLuceneUtilCharsRef:", "hasHoles", "Z", 0x2, NULL, NULL },
    { "addWithOrgApacheLuceneUtilCharsRef:withInt:withOrgApacheLuceneUtilCharsRef:withInt:withBoolean:", "add", "V", 0x2, NULL, NULL },
    { "countWordsWithOrgApacheLuceneUtilCharsRef:", "countWords", "I", 0x2, NULL, NULL },
    { "addWithOrgApacheLuceneUtilCharsRef:withOrgApacheLuceneUtilCharsRef:withBoolean:", "add", "V", 0x1, NULL, NULL },
    { "build", NULL, "Lorg.apache.lucene.analysis.synonym.SynonymMap;", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "workingSet_", NULL, 0x12, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/analysis/synonym/SynonymMap$Builder$MapEntry;>;", .constantValue.asLong = 0 },
    { "words_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRefHash;", NULL, NULL, .constantValue.asLong = 0 },
    { "utf8Scratch_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRefBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "maxHorizontalContext_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "dedup_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.analysis.synonym.SynonymMap$Builder$MapEntry;"};
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisSynonymSynonymMap_Builder = { 2, "Builder", "org.apache.lucene.analysis.synonym", "SynonymMap", 0x9, 7, methods, 5, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneAnalysisSynonymSynonymMap_Builder;
}

@end

void OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_initWithBoolean_(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder *self, jboolean dedup) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->workingSet_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->words_, new_OrgApacheLuceneUtilBytesRefHash_init());
  JreStrongAssignAndConsume(&self->utf8Scratch_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  self->dedup_ = dedup;
}

OrgApacheLuceneAnalysisSynonymSynonymMap_Builder *new_OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_initWithBoolean_(jboolean dedup) {
  OrgApacheLuceneAnalysisSynonymSynonymMap_Builder *self = [OrgApacheLuceneAnalysisSynonymSynonymMap_Builder alloc];
  OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_initWithBoolean_(self, dedup);
  return self;
}

OrgApacheLuceneUtilCharsRef *OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_joinWithNSStringArray_withOrgApacheLuceneUtilCharsRefBuilder_(IOSObjectArray *words, OrgApacheLuceneUtilCharsRefBuilder *reuse) {
  OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_initialize();
  jint upto = 0;
  IOSCharArray *buffer = [((OrgApacheLuceneUtilCharsRefBuilder *) nil_chk(reuse)) chars];
  {
    IOSObjectArray *a__ = words;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *word = *b__++;
      jint wordLen = ((jint) [((NSString *) nil_chk(word)) length]);
      jint needed = (0 == upto ? wordLen : 1 + upto + wordLen);
      if (needed > ((IOSCharArray *) nil_chk(buffer))->size_) {
        [reuse growWithInt:needed];
        buffer = [reuse chars];
      }
      if (upto > 0) {
        *IOSCharArray_GetRef(nil_chk(buffer), upto++) = OrgApacheLuceneAnalysisSynonymSynonymMap_WORD_SEPARATOR;
      }
      [word getChars:0 sourceEnd:wordLen destination:buffer destinationBegin:upto];
      upto += wordLen;
    }
  }
  [reuse setLengthWithInt:upto];
  return [reuse get];
}

jboolean OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_hasHolesWithOrgApacheLuceneUtilCharsRef_(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder *self, OrgApacheLuceneUtilCharsRef *chars) {
  jint end = ((OrgApacheLuceneUtilCharsRef *) nil_chk(chars))->offset_ + chars->length_;
  for (jint idx = chars->offset_ + 1; idx < end; idx++) {
    if (IOSCharArray_Get(nil_chk(chars->chars_), idx) == OrgApacheLuceneAnalysisSynonymSynonymMap_WORD_SEPARATOR && IOSCharArray_Get(chars->chars_, idx - 1) == OrgApacheLuceneAnalysisSynonymSynonymMap_WORD_SEPARATOR) {
      return true;
    }
  }
  if (IOSCharArray_Get(nil_chk(chars->chars_), chars->offset_) == 0x0000) {
    return true;
  }
  if (IOSCharArray_Get(chars->chars_, chars->offset_ + chars->length_ - 1) == 0x0000) {
    return true;
  }
  return false;
}

void OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_addWithOrgApacheLuceneUtilCharsRef_withInt_withOrgApacheLuceneUtilCharsRef_withInt_withBoolean_(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder *self, OrgApacheLuceneUtilCharsRef *input, jint numInputWords, OrgApacheLuceneUtilCharsRef *output, jint numOutputWords, jboolean includeOrig) {
  if (numInputWords <= 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"numInputWords must be > 0 (got ", numInputWords, ')')) autorelease];
  }
  if (((OrgApacheLuceneUtilCharsRef *) nil_chk(input))->length_ <= 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"input.length must be > 0 (got ", input->length_, ')')) autorelease];
  }
  if (numOutputWords <= 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"numOutputWords must be > 0 (got ", numOutputWords, ')')) autorelease];
  }
  if (((OrgApacheLuceneUtilCharsRef *) nil_chk(output))->length_ <= 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"output.length must be > 0 (got ", output->length_, ')')) autorelease];
  }
  JreAssert((!OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_hasHolesWithOrgApacheLuceneUtilCharsRef_(self, input)), (JreStrcat("$@", @"input has holes: ", input)));
  JreAssert((!OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_hasHolesWithOrgApacheLuceneUtilCharsRef_(self, output)), (JreStrcat("$@", @"output has holes: ", output)));
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->utf8Scratch_)) copyCharsWithCharArray:output->chars_ withInt:output->offset_ withInt:output->length_];
  jint ord = [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(self->words_)) addWithOrgApacheLuceneUtilBytesRef:[self->utf8Scratch_ get]];
  if (ord < 0) {
    ord = (-ord) - 1;
  }
  else {
  }
  OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry *e = [((JavaUtilHashMap *) nil_chk(self->workingSet_)) getWithId:input];
  if (e == nil) {
    e = [new_OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry_init() autorelease];
    [self->workingSet_ putWithId:OrgApacheLuceneUtilCharsRef_deepCopyOfWithOrgApacheLuceneUtilCharsRef_(input) withId:e];
  }
  [((JavaUtilArrayList *) nil_chk(((OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry *) nil_chk(e))->ords_)) addWithId:JavaLangInteger_valueOfWithInt_(ord)];
  e->includeOrig_ |= includeOrig;
  self->maxHorizontalContext_ = JavaLangMath_maxWithInt_withInt_(self->maxHorizontalContext_, numInputWords);
  self->maxHorizontalContext_ = JavaLangMath_maxWithInt_withInt_(self->maxHorizontalContext_, numOutputWords);
}

jint OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_countWordsWithOrgApacheLuceneUtilCharsRef_(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder *self, OrgApacheLuceneUtilCharsRef *chars) {
  jint wordCount = 1;
  jint upto = ((OrgApacheLuceneUtilCharsRef *) nil_chk(chars))->offset_;
  jint limit = chars->offset_ + chars->length_;
  while (upto < limit) {
    if (IOSCharArray_Get(nil_chk(chars->chars_), upto++) == OrgApacheLuceneAnalysisSynonymSynonymMap_WORD_SEPARATOR) {
      wordCount++;
    }
  }
  return wordCount;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder)

@implementation OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(ords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "includeOrig_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "ords_", NULL, 0x0, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry = { 2, "MapEntry", "org.apache.lucene.analysis.synonym", "SynonymMap$Builder", 0xa, 1, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry;
}

@end

void OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry_init(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->ords_, new_JavaUtilArrayList_init());
}

OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry *new_OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry_init() {
  OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry *self = [OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry alloc];
  OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_MapEntry)

@implementation OrgApacheLuceneAnalysisSynonymSynonymMap_Parser

- (instancetype)initWithBoolean:(jboolean)dedup
withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  OrgApacheLuceneAnalysisSynonymSynonymMap_Parser_initWithBoolean_withOrgApacheLuceneAnalysisAnalyzer_(self, dedup, analyzer);
  return self;
}

- (void)parseWithJavaIoReader:(JavaIoReader *)inArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgApacheLuceneUtilCharsRef *)analyzeWithNSString:(NSString *)text
              withOrgApacheLuceneUtilCharsRefBuilder:(OrgApacheLuceneUtilCharsRefBuilder *)reuse {
  {
    OrgApacheLuceneAnalysisTokenStream *ts = [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(analyzer_)) tokenStreamWithNSString:@"" withNSString:text];
    JavaLangThrowable *__primaryException1 = nil;
    @try {
      id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt = [((OrgApacheLuceneAnalysisTokenStream *) nil_chk(ts)) addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()];
      id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posIncAtt = [ts addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()];
      [ts reset];
      [((OrgApacheLuceneUtilCharsRefBuilder *) nil_chk(reuse)) clear];
      while ([ts incrementToken]) {
        jint length = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) length];
        if (length == 0) {
          @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"term: ", text, @" analyzed to a zero-length token")) autorelease];
        }
        if ([((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncAtt)) getPositionIncrement] != 1) {
          @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"term: ", text, @" analyzed to a token with posinc != 1")) autorelease];
        }
        [reuse growWithInt:[reuse length] + length + 1];
        jint end = [reuse length];
        if ([reuse length] > 0) {
          [reuse setCharAtWithInt:end++ withChar:OrgApacheLuceneAnalysisSynonymSynonymMap_WORD_SEPARATOR];
          [reuse setLengthWithInt:[reuse length] + 1];
        }
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([termAtt buffer], 0, [reuse chars], end, length);
        [reuse setLengthWithInt:[reuse length] + length];
      }
      [ts end];
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (ts != nil) {
        if (__primaryException1 != nil) {
          @try {
            [ts close];
          } @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        } else {
          [ts close];
        }
      }
    }
  }
  if ([((OrgApacheLuceneUtilCharsRefBuilder *) nil_chk(reuse)) length] == 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"term: ", text, @" was completely eliminated by analyzer")) autorelease];
  }
  return [reuse get];
}

- (void)dealloc {
  RELEASE_(analyzer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:withOrgApacheLuceneAnalysisAnalyzer:", "Parser", NULL, 0x1, NULL, NULL },
    { "parseWithJavaIoReader:", "parse", "V", 0x401, "Ljava.io.IOException;Ljava.text.ParseException;", NULL },
    { "analyzeWithNSString:withOrgApacheLuceneUtilCharsRefBuilder:", "analyze", "Lorg.apache.lucene.util.CharsRef;", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "analyzer_", NULL, 0x12, "Lorg.apache.lucene.analysis.Analyzer;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisSynonymSynonymMap_Parser = { 2, "Parser", "org.apache.lucene.analysis.synonym", "SynonymMap", 0x409, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisSynonymSynonymMap_Parser;
}

@end

void OrgApacheLuceneAnalysisSynonymSynonymMap_Parser_initWithBoolean_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisSynonymSynonymMap_Parser *self, jboolean dedup, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  OrgApacheLuceneAnalysisSynonymSynonymMap_Builder_initWithBoolean_(self, dedup);
  JreStrongAssign(&self->analyzer_, analyzer);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisSynonymSynonymMap_Parser)
