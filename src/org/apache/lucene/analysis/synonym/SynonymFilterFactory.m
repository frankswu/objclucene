//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetDecoder.h"
#include "java/nio/charset/CodingErrorAction.h"
#include "java/text/ParseException.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilter.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizer.h"
#include "org/apache/lucene/analysis/synonym/SolrSynonymParser.h"
#include "org/apache/lucene/analysis/synonym/SynonymFilter.h"
#include "org/apache/lucene/analysis/synonym/SynonymFilterFactory.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "org/apache/lucene/analysis/synonym/WordnetSynonymParser.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/util/TokenFilterFactory.h"
#include "org/apache/lucene/analysis/util/TokenizerFactory.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/lukhnos/portmobile/charset/StandardCharsets.h"

@interface OrgApacheLuceneAnalysisSynonymSynonymFilterFactory () {
 @public
  jboolean ignoreCase_;
  NSString *tokenizerFactory_;
  NSString *synonyms_;
  NSString *format_;
  jboolean expand_;
  NSString *analyzerName_;
  id<JavaUtilMap> tokArgs_;
  OrgApacheLuceneAnalysisSynonymSynonymMap *map_;
}

- (OrgApacheLuceneAnalysisUtilTokenizerFactory *)loadTokenizerFactoryWithOrgApacheLuceneAnalysisUtilResourceLoader:(id<OrgApacheLuceneAnalysisUtilResourceLoader>)loader
                                                                                                      withNSString:(NSString *)cname;

- (OrgApacheLuceneAnalysisAnalyzer *)loadAnalyzerWithOrgApacheLuceneAnalysisUtilResourceLoader:(id<OrgApacheLuceneAnalysisUtilResourceLoader>)loader
                                                                                  withNSString:(NSString *)cname;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory, tokenizerFactory_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory, synonyms_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory, format_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory, analyzerName_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory, tokArgs_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory, map_, OrgApacheLuceneAnalysisSynonymSynonymMap *)

__attribute__((unused)) static OrgApacheLuceneAnalysisUtilTokenizerFactory *OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_loadTokenizerFactoryWithOrgApacheLuceneAnalysisUtilResourceLoader_withNSString_(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *self, id<OrgApacheLuceneAnalysisUtilResourceLoader> loader, NSString *cname);

__attribute__((unused)) static OrgApacheLuceneAnalysisAnalyzer *OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_loadAnalyzerWithOrgApacheLuceneAnalysisUtilResourceLoader_withNSString_(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *self, id<OrgApacheLuceneAnalysisUtilResourceLoader> loader, NSString *cname);

@interface OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1 : OrgApacheLuceneAnalysisAnalyzer {
 @public
  OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *this$0_;
  OrgApacheLuceneAnalysisUtilTokenizerFactory *val$factory_;
}

- (OrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents *)createComponentsWithNSString:(NSString *)fieldName;

- (instancetype)initWithOrgApacheLuceneAnalysisSynonymSynonymFilterFactory:(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *)outer$
                           withOrgApacheLuceneAnalysisUtilTokenizerFactory:(OrgApacheLuceneAnalysisUtilTokenizerFactory *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1, this$0_, OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1, val$factory_, OrgApacheLuceneAnalysisUtilTokenizerFactory *)

__attribute__((unused)) static void OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1_initWithOrgApacheLuceneAnalysisSynonymSynonymFilterFactory_withOrgApacheLuceneAnalysisUtilTokenizerFactory_(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1 *self, OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *outer$, OrgApacheLuceneAnalysisUtilTokenizerFactory *capture$0);

__attribute__((unused)) static OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1 *new_OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1_initWithOrgApacheLuceneAnalysisSynonymSynonymFilterFactory_withOrgApacheLuceneAnalysisUtilTokenizerFactory_(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *outer$, OrgApacheLuceneAnalysisUtilTokenizerFactory *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1 *create_OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1_initWithOrgApacheLuceneAnalysisSynonymSynonymFilterFactory_withOrgApacheLuceneAnalysisUtilTokenizerFactory_(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *outer$, OrgApacheLuceneAnalysisUtilTokenizerFactory *capture$0);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1)

@implementation OrgApacheLuceneAnalysisSynonymSynonymFilterFactory

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)args {
  OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_initWithJavaUtilMap_(self, args);
  return self;
}

- (OrgApacheLuceneAnalysisTokenStream *)createWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input {
  return ((OrgApacheLuceneAnalysisSynonymSynonymMap *) nil_chk(map_))->fst_ == nil ? input : create_OrgApacheLuceneAnalysisSynonymSynonymFilter_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisSynonymSynonymMap_withBoolean_(input, map_, ignoreCase_);
}

- (void)informWithOrgApacheLuceneAnalysisUtilResourceLoader:(id<OrgApacheLuceneAnalysisUtilResourceLoader>)loader {
  OrgApacheLuceneAnalysisUtilTokenizerFactory *factory = tokenizerFactory_ == nil ? nil : OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_loadTokenizerFactoryWithOrgApacheLuceneAnalysisUtilResourceLoader_withNSString_(self, loader, tokenizerFactory_);
  OrgApacheLuceneAnalysisAnalyzer *analyzer;
  if (analyzerName_ != nil) {
    analyzer = OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_loadAnalyzerWithOrgApacheLuceneAnalysisUtilResourceLoader_withNSString_(self, loader, analyzerName_);
  }
  else {
    analyzer = create_OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1_initWithOrgApacheLuceneAnalysisSynonymSynonymFilterFactory_withOrgApacheLuceneAnalysisUtilTokenizerFactory_(self, factory);
  }
  @try {
    OrgApacheLuceneAnalysisAnalyzer *a = analyzer;
    NSException *__primaryException1 = nil;
    @try {
      NSString *formatClass = format_;
      if (format_ == nil || [format_ isEqual:@"solr"]) {
        formatClass = [OrgApacheLuceneAnalysisSynonymSolrSynonymParser_class_() getName];
      }
      else if ([format_ isEqual:@"wordnet"]) {
        formatClass = [OrgApacheLuceneAnalysisSynonymWordnetSynonymParser_class_() getName];
      }
      JreStrongAssign(&map_, [self loadSynonymsWithOrgApacheLuceneAnalysisUtilResourceLoader:loader withNSString:formatClass withBoolean:true withOrgApacheLuceneAnalysisAnalyzer:a]);
    }
    @catch (NSException *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (a != nil) {
        if (__primaryException1 != nil) {
          @try {
            [a close];
          } @catch (NSException *e) {
            [__primaryException1 addSuppressedWithNSException:e];
          }
        } else {
          [a close];
        }
      }
    }
  }
  @catch (JavaTextParseException *e) {
    @throw create_JavaIoIOException_initWithNSString_withNSException_(@"Error parsing synonyms file:", e);
  }
}

- (OrgApacheLuceneAnalysisSynonymSynonymMap *)loadSynonymsWithOrgApacheLuceneAnalysisUtilResourceLoader:(id<OrgApacheLuceneAnalysisUtilResourceLoader>)loader
                                                                                           withNSString:(NSString *)cname
                                                                                            withBoolean:(jboolean)dedup
                                                                    withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  JavaNioCharsetCharsetDecoder *decoder = [((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharset *) nil_chk(JreLoadStatic(OrgLukhnosPortmobileCharsetStandardCharsets, UTF_8))) newDecoder])) onMalformedInputWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPORT)])) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPORT)];
  OrgApacheLuceneAnalysisSynonymSynonymMap_Parser *parser;
  IOSClass *clazz = [((id<OrgApacheLuceneAnalysisUtilResourceLoader>) nil_chk(loader)) findClassWithNSString:cname withIOSClass:OrgApacheLuceneAnalysisSynonymSynonymMap_Parser_class_()];
  @try {
    parser = [((JavaLangReflectConstructor *) nil_chk([((IOSClass *) nil_chk(clazz)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass booleanClass], [IOSClass booleanClass], OrgApacheLuceneAnalysisAnalyzer_class_() } count:3 type:IOSClass_class_()]])) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_(dedup), JavaLangBoolean_valueOfWithBoolean_(expand_), analyzer } count:3 type:NSObject_class_()]];
  }
  @catch (JavaLangException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
  id<JavaUtilList> files = [self splitFileNamesWithNSString:synonyms_];
  for (NSString * __strong file in nil_chk(files)) {
    [((JavaNioCharsetCharsetDecoder *) nil_chk(decoder)) reset];
    [((OrgApacheLuceneAnalysisSynonymSynonymMap_Parser *) nil_chk(parser)) parseWithJavaIoReader:create_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharsetDecoder_([loader openResourceWithNSString:file], decoder)];
  }
  return [((OrgApacheLuceneAnalysisSynonymSynonymMap_Parser *) nil_chk(parser)) build];
}

- (OrgApacheLuceneAnalysisUtilTokenizerFactory *)loadTokenizerFactoryWithOrgApacheLuceneAnalysisUtilResourceLoader:(id<OrgApacheLuceneAnalysisUtilResourceLoader>)loader
                                                                                                      withNSString:(NSString *)cname {
  return OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_loadTokenizerFactoryWithOrgApacheLuceneAnalysisUtilResourceLoader_withNSString_(self, loader, cname);
}

- (OrgApacheLuceneAnalysisAnalyzer *)loadAnalyzerWithOrgApacheLuceneAnalysisUtilResourceLoader:(id<OrgApacheLuceneAnalysisUtilResourceLoader>)loader
                                                                                  withNSString:(NSString *)cname {
  return OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_loadAnalyzerWithOrgApacheLuceneAnalysisUtilResourceLoader_withNSString_(self, loader, cname);
}

- (void)dealloc {
  RELEASE_(tokenizerFactory_);
  RELEASE_(synonyms_);
  RELEASE_(format_);
  RELEASE_(analyzerName_);
  RELEASE_(tokArgs_);
  RELEASE_(map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilMap:", "SynonymFilterFactory", NULL, 0x1, NULL, "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V" },
    { "createWithOrgApacheLuceneAnalysisTokenStream:", "create", "Lorg.apache.lucene.analysis.TokenStream;", 0x1, NULL, NULL },
    { "informWithOrgApacheLuceneAnalysisUtilResourceLoader:", "inform", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "loadSynonymsWithOrgApacheLuceneAnalysisUtilResourceLoader:withNSString:withBoolean:withOrgApacheLuceneAnalysisAnalyzer:", "loadSynonyms", "Lorg.apache.lucene.analysis.synonym.SynonymMap;", 0x4, "Ljava.io.IOException;Ljava.text.ParseException;", NULL },
    { "loadTokenizerFactoryWithOrgApacheLuceneAnalysisUtilResourceLoader:withNSString:", "loadTokenizerFactory", "Lorg.apache.lucene.analysis.util.TokenizerFactory;", 0x2, "Ljava.io.IOException;", NULL },
    { "loadAnalyzerWithOrgApacheLuceneAnalysisUtilResourceLoader:withNSString:", "loadAnalyzer", "Lorg.apache.lucene.analysis.Analyzer;", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ignoreCase_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "tokenizerFactory_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "synonyms_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "format_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "expand_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "analyzerName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "tokArgs_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "map_", NULL, 0x2, "Lorg.apache.lucene.analysis.synonym.SynonymMap;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisSynonymSynonymFilterFactory = { 2, "SynonymFilterFactory", "org.apache.lucene.analysis.synonym", NULL, 0x1, 6, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisSynonymSynonymFilterFactory;
}

@end

void OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_initWithJavaUtilMap_(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *self, id<JavaUtilMap> args) {
  OrgApacheLuceneAnalysisUtilTokenFilterFactory_initWithJavaUtilMap_(self, args);
  JreStrongAssignAndConsume(&self->tokArgs_, new_JavaUtilHashMap_init());
  self->ignoreCase_ = [self getBooleanWithJavaUtilMap:args withNSString:@"ignoreCase" withBoolean:false];
  JreStrongAssign(&self->synonyms_, [self requireWithJavaUtilMap:args withNSString:@"synonyms"]);
  JreStrongAssign(&self->format_, [self getWithJavaUtilMap:args withNSString:@"format"]);
  self->expand_ = [self getBooleanWithJavaUtilMap:args withNSString:@"expand" withBoolean:true];
  JreStrongAssign(&self->analyzerName_, [self getWithJavaUtilMap:args withNSString:@"analyzer"]);
  JreStrongAssign(&self->tokenizerFactory_, [self getWithJavaUtilMap:args withNSString:@"tokenizerFactory"]);
  if (self->analyzerName_ != nil && self->tokenizerFactory_ != nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Analyzer and TokenizerFactory can't be specified both: ", self->analyzerName_, @" and ", self->tokenizerFactory_));
  }
  if (self->tokenizerFactory_ != nil) {
    [self->tokArgs_ putWithId:@"luceneMatchVersion" withId:[((OrgApacheLuceneUtilVersion *) nil_chk([self getLuceneMatchVersion])) description]];
    for (id<JavaUtilIterator> itr = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(args)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(itr)) hasNext]; ) {
      NSString *key = [itr next];
      [self->tokArgs_ putWithId:[((NSString *) nil_chk(key)) replaceAll:@"^tokenizerFactory\\." withReplacement:@""] withId:[args getWithId:key]];
      [itr remove];
    }
  }
  if (![((id<JavaUtilMap>) nil_chk(args)) isEmpty]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unknown parameters: ", args));
  }
}

OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *new_OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_initWithJavaUtilMap_(id<JavaUtilMap> args) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory, initWithJavaUtilMap_, args)
}

OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *create_OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_initWithJavaUtilMap_(id<JavaUtilMap> args) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory, initWithJavaUtilMap_, args)
}

OrgApacheLuceneAnalysisUtilTokenizerFactory *OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_loadTokenizerFactoryWithOrgApacheLuceneAnalysisUtilResourceLoader_withNSString_(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *self, id<OrgApacheLuceneAnalysisUtilResourceLoader> loader, NSString *cname) {
  IOSClass *clazz = [((id<OrgApacheLuceneAnalysisUtilResourceLoader>) nil_chk(loader)) findClassWithNSString:cname withIOSClass:OrgApacheLuceneAnalysisUtilTokenizerFactory_class_()];
  @try {
    OrgApacheLuceneAnalysisUtilTokenizerFactory *tokFactory = [((JavaLangReflectConstructor *) nil_chk([((IOSClass *) nil_chk(clazz)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilMap_class_() } count:1 type:IOSClass_class_()]])) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self->tokArgs_ } count:1 type:NSObject_class_()]];
    if ([OrgApacheLuceneAnalysisUtilResourceLoaderAware_class_() isInstance:tokFactory]) {
      [((id<OrgApacheLuceneAnalysisUtilResourceLoaderAware>) nil_chk(((id<OrgApacheLuceneAnalysisUtilResourceLoaderAware>) cast_check(tokFactory, OrgApacheLuceneAnalysisUtilResourceLoaderAware_class_())))) informWithOrgApacheLuceneAnalysisUtilResourceLoader:loader];
    }
    return tokFactory;
  }
  @catch (JavaLangException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

OrgApacheLuceneAnalysisAnalyzer *OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_loadAnalyzerWithOrgApacheLuceneAnalysisUtilResourceLoader_withNSString_(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *self, id<OrgApacheLuceneAnalysisUtilResourceLoader> loader, NSString *cname) {
  IOSClass *clazz = [((id<OrgApacheLuceneAnalysisUtilResourceLoader>) nil_chk(loader)) findClassWithNSString:cname withIOSClass:OrgApacheLuceneAnalysisAnalyzer_class_()];
  @try {
    OrgApacheLuceneAnalysisAnalyzer *analyzer = [((JavaLangReflectConstructor *) nil_chk([((IOSClass *) nil_chk(clazz)) getConstructor:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]])) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
    if ([OrgApacheLuceneAnalysisUtilResourceLoaderAware_class_() isInstance:analyzer]) {
      [((id<OrgApacheLuceneAnalysisUtilResourceLoaderAware>) nil_chk(((id<OrgApacheLuceneAnalysisUtilResourceLoaderAware>) cast_check(analyzer, OrgApacheLuceneAnalysisUtilResourceLoaderAware_class_())))) informWithOrgApacheLuceneAnalysisUtilResourceLoader:loader];
    }
    return analyzer;
  }
  @catch (JavaLangException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory)

@implementation OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1

- (OrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents *)createComponentsWithNSString:(NSString *)fieldName {
  OrgApacheLuceneAnalysisTokenizer *tokenizer = val$factory_ == nil ? create_OrgApacheLuceneAnalysisCoreWhitespaceTokenizer_init() : [val$factory_ create];
  OrgApacheLuceneAnalysisTokenStream *stream = this$0_->ignoreCase_ ? create_OrgApacheLuceneAnalysisCoreLowerCaseFilter_initWithOrgApacheLuceneAnalysisTokenStream_(tokenizer) : tokenizer;
  return create_OrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents_initWithOrgApacheLuceneAnalysisTokenizer_withOrgApacheLuceneAnalysisTokenStream_(tokenizer, stream);
}

- (instancetype)initWithOrgApacheLuceneAnalysisSynonymSynonymFilterFactory:(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *)outer$
                           withOrgApacheLuceneAnalysisUtilTokenizerFactory:(OrgApacheLuceneAnalysisUtilTokenizerFactory *)capture$0 {
  OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1_initWithOrgApacheLuceneAnalysisSynonymSynonymFilterFactory_withOrgApacheLuceneAnalysisUtilTokenizerFactory_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$factory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createComponentsWithNSString:", "createComponents", "Lorg.apache.lucene.analysis.Analyzer$TokenStreamComponents;", 0x4, NULL, NULL },
    { "initWithOrgApacheLuceneAnalysisSynonymSynonymFilterFactory:withOrgApacheLuceneAnalysisUtilTokenizerFactory:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.analysis.synonym.SynonymFilterFactory;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$factory_", NULL, 0x1012, "Lorg.apache.lucene.analysis.util.TokenizerFactory;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheLuceneAnalysisSynonymSynonymFilterFactory", "informWithOrgApacheLuceneAnalysisUtilResourceLoader:" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1 = { 2, "", "org.apache.lucene.analysis.synonym", "SynonymFilterFactory", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1;
}

@end

void OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1_initWithOrgApacheLuceneAnalysisSynonymSynonymFilterFactory_withOrgApacheLuceneAnalysisUtilTokenizerFactory_(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1 *self, OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *outer$, OrgApacheLuceneAnalysisUtilTokenizerFactory *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$factory_, capture$0);
  OrgApacheLuceneAnalysisAnalyzer_init(self);
}

OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1 *new_OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1_initWithOrgApacheLuceneAnalysisSynonymSynonymFilterFactory_withOrgApacheLuceneAnalysisUtilTokenizerFactory_(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *outer$, OrgApacheLuceneAnalysisUtilTokenizerFactory *capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1, initWithOrgApacheLuceneAnalysisSynonymSynonymFilterFactory_withOrgApacheLuceneAnalysisUtilTokenizerFactory_, outer$, capture$0)
}

OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1 *create_OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1_initWithOrgApacheLuceneAnalysisSynonymSynonymFilterFactory_withOrgApacheLuceneAnalysisUtilTokenizerFactory_(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory *outer$, OrgApacheLuceneAnalysisUtilTokenizerFactory *capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1, initWithOrgApacheLuceneAnalysisSynonymSynonymFilterFactory_withOrgApacheLuceneAnalysisUtilTokenizerFactory_, outer$, capture$0)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisSynonymSynonymFilterFactory_$1)
