//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/synonym/WordnetSynonymParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/LineNumberReader.h"
#include "java/io/Reader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Throwable.h"
#include "java/text/ParseException.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "org/apache/lucene/analysis/synonym/WordnetSynonymParser.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "org/apache/lucene/util/CharsRefBuilder.h"

@interface OrgApacheLuceneAnalysisSynonymWordnetSynonymParser () {
 @public
  jboolean expand_;
}

- (OrgApacheLuceneUtilCharsRef *)parseSynonymWithNSString:(NSString *)line
                   withOrgApacheLuceneUtilCharsRefBuilder:(OrgApacheLuceneUtilCharsRefBuilder *)reuse;

- (void)addInternalWithOrgApacheLuceneUtilCharsRefArray:(IOSObjectArray *)synset
                                                withInt:(jint)size;

@end

__attribute__((unused)) static OrgApacheLuceneUtilCharsRef *OrgApacheLuceneAnalysisSynonymWordnetSynonymParser_parseSynonymWithNSString_withOrgApacheLuceneUtilCharsRefBuilder_(OrgApacheLuceneAnalysisSynonymWordnetSynonymParser *self, NSString *line, OrgApacheLuceneUtilCharsRefBuilder *reuse);

__attribute__((unused)) static void OrgApacheLuceneAnalysisSynonymWordnetSynonymParser_addInternalWithOrgApacheLuceneUtilCharsRefArray_withInt_(OrgApacheLuceneAnalysisSynonymWordnetSynonymParser *self, IOSObjectArray *synset, jint size);

@implementation OrgApacheLuceneAnalysisSynonymWordnetSynonymParser

- (instancetype)initWithBoolean:(jboolean)dedup
                    withBoolean:(jboolean)expand
withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  OrgApacheLuceneAnalysisSynonymWordnetSynonymParser_initWithBoolean_withBoolean_withOrgApacheLuceneAnalysisAnalyzer_(self, dedup, expand, analyzer);
  return self;
}

- (void)parseWithJavaIoReader:(JavaIoReader *)inArg {
  JavaIoLineNumberReader *br = [new_JavaIoLineNumberReader_initWithJavaIoReader_(inArg) autorelease];
  @try {
    NSString *line = nil;
    NSString *lastSynSetID = @"";
    IOSObjectArray *synset = [IOSObjectArray arrayWithLength:8 type:OrgApacheLuceneUtilCharsRef_class_()];
    jint synsetSize = 0;
    while ((line = [br readLine]) != nil) {
      NSString *synSetID = [((NSString *) nil_chk(line)) substring:2 endIndex:11];
      if (![((NSString *) nil_chk(synSetID)) isEqual:lastSynSetID]) {
        OrgApacheLuceneAnalysisSynonymWordnetSynonymParser_addInternalWithOrgApacheLuceneUtilCharsRefArray_withInt_(self, synset, synsetSize);
        synsetSize = 0;
      }
      if (synset->size_ <= synsetSize + 1) {
        synset = JavaUtilArrays_copyOfWithNSObjectArray_withInt_(synset, synset->size_ * 2);
      }
      IOSObjectArray_Set(nil_chk(synset), synsetSize, OrgApacheLuceneAnalysisSynonymWordnetSynonymParser_parseSynonymWithNSString_withOrgApacheLuceneUtilCharsRefBuilder_(self, line, [new_OrgApacheLuceneUtilCharsRefBuilder_init() autorelease]));
      synsetSize++;
      lastSynSetID = synSetID;
    }
    OrgApacheLuceneAnalysisSynonymWordnetSynonymParser_addInternalWithOrgApacheLuceneUtilCharsRefArray_withInt_(self, synset, synsetSize);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    JavaTextParseException *ex = [new_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$I", @"Invalid synonym rule at line ", [br getLineNumber]), 0) autorelease];
    [ex initCauseWithJavaLangThrowable:e];
    @throw ex;
  }
  @finally {
    [br close];
  }
}

- (OrgApacheLuceneUtilCharsRef *)parseSynonymWithNSString:(NSString *)line
                   withOrgApacheLuceneUtilCharsRefBuilder:(OrgApacheLuceneUtilCharsRefBuilder *)reuse {
  return OrgApacheLuceneAnalysisSynonymWordnetSynonymParser_parseSynonymWithNSString_withOrgApacheLuceneUtilCharsRefBuilder_(self, line, reuse);
}

- (void)addInternalWithOrgApacheLuceneUtilCharsRefArray:(IOSObjectArray *)synset
                                                withInt:(jint)size {
  OrgApacheLuceneAnalysisSynonymWordnetSynonymParser_addInternalWithOrgApacheLuceneUtilCharsRefArray_withInt_(self, synset, size);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:withBoolean:withOrgApacheLuceneAnalysisAnalyzer:", "WordnetSynonymParser", NULL, 0x1, NULL, NULL },
    { "parseWithJavaIoReader:", "parse", "V", 0x1, "Ljava.io.IOException;Ljava.text.ParseException;", NULL },
    { "parseSynonymWithNSString:withOrgApacheLuceneUtilCharsRefBuilder:", "parseSynonym", "Lorg.apache.lucene.util.CharsRef;", 0x2, "Ljava.io.IOException;", NULL },
    { "addInternalWithOrgApacheLuceneUtilCharsRefArray:withInt:", "addInternal", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "expand_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisSynonymWordnetSynonymParser = { 2, "WordnetSynonymParser", "org.apache.lucene.analysis.synonym", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisSynonymWordnetSynonymParser;
}

@end

void OrgApacheLuceneAnalysisSynonymWordnetSynonymParser_initWithBoolean_withBoolean_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisSynonymWordnetSynonymParser *self, jboolean dedup, jboolean expand, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  OrgApacheLuceneAnalysisSynonymSynonymMap_Parser_initWithBoolean_withOrgApacheLuceneAnalysisAnalyzer_(self, dedup, analyzer);
  self->expand_ = expand;
}

OrgApacheLuceneAnalysisSynonymWordnetSynonymParser *new_OrgApacheLuceneAnalysisSynonymWordnetSynonymParser_initWithBoolean_withBoolean_withOrgApacheLuceneAnalysisAnalyzer_(jboolean dedup, jboolean expand, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  OrgApacheLuceneAnalysisSynonymWordnetSynonymParser *self = [OrgApacheLuceneAnalysisSynonymWordnetSynonymParser alloc];
  OrgApacheLuceneAnalysisSynonymWordnetSynonymParser_initWithBoolean_withBoolean_withOrgApacheLuceneAnalysisAnalyzer_(self, dedup, expand, analyzer);
  return self;
}

OrgApacheLuceneUtilCharsRef *OrgApacheLuceneAnalysisSynonymWordnetSynonymParser_parseSynonymWithNSString_withOrgApacheLuceneUtilCharsRefBuilder_(OrgApacheLuceneAnalysisSynonymWordnetSynonymParser *self, NSString *line, OrgApacheLuceneUtilCharsRefBuilder *reuse) {
  if (reuse == nil) {
    reuse = [new_OrgApacheLuceneUtilCharsRefBuilder_init() autorelease];
  }
  jint start = [((NSString *) nil_chk(line)) indexOf:'\''] + 1;
  jint end = [line lastIndexOf:'\''];
  NSString *text = [((NSString *) nil_chk([line substring:start endIndex:end])) replace:@"''" withSequence:@"'"];
  return [self analyzeWithNSString:text withOrgApacheLuceneUtilCharsRefBuilder:reuse];
}

void OrgApacheLuceneAnalysisSynonymWordnetSynonymParser_addInternalWithOrgApacheLuceneUtilCharsRefArray_withInt_(OrgApacheLuceneAnalysisSynonymWordnetSynonymParser *self, IOSObjectArray *synset, jint size) {
  if (size <= 1) {
    return;
  }
  if (self->expand_) {
    for (jint i = 0; i < size; i++) {
      for (jint j = 0; j < size; j++) {
        [self addWithOrgApacheLuceneUtilCharsRef:IOSObjectArray_Get(nil_chk(synset), i) withOrgApacheLuceneUtilCharsRef:IOSObjectArray_Get(synset, j) withBoolean:NO];
      }
    }
  }
  else {
    for (jint i = 0; i < size; i++) {
      [self addWithOrgApacheLuceneUtilCharsRef:IOSObjectArray_Get(nil_chk(synset), i) withOrgApacheLuceneUtilCharsRef:IOSObjectArray_Get(synset, 0) withBoolean:NO];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisSynonymWordnetSynonymParser)
