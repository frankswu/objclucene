//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/synonym/SynonymFilter.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "org/apache/lucene/util/CharsRefBuilder.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Outputs.h"

@interface OrgApacheLuceneAnalysisSynonymSynonymFilter () {
 @public
  OrgApacheLuceneAnalysisSynonymSynonymMap *synonyms_;
  jboolean ignoreCase_;
  jint rollBufferSize_;
  jint captureCount_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posIncrAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute> posLenAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute> typeAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAtt_;
  jint inputSkipCount_;
  IOSObjectArray *futureInputs_;
  OrgApacheLuceneStoreByteArrayDataInput *bytesReader_;
  IOSObjectArray *futureOutputs_;
  jint nextWrite_;
  jint nextRead_;
  jboolean finished_;
  OrgApacheLuceneUtilFstFST_Arc *scratchArc_;
  OrgApacheLuceneUtilFstFST *fst_;
  OrgApacheLuceneUtilFstFST_BytesReader *fstReader_;
  OrgApacheLuceneUtilBytesRef *scratchBytes_;
  OrgApacheLuceneUtilCharsRefBuilder *scratchChars_;
  jint lastStartOffset_;
  jint lastEndOffset_;
}

- (void)capture;

- (void)parse;

- (void)addOutputWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes
                                         withInt:(jint)matchInputLength
                                         withInt:(jint)matchEndOffset;

- (jint)rollIncrWithInt:(jint)count;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter, synonyms_, OrgApacheLuceneAnalysisSynonymSynonymMap *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter, posIncrAtt_, id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter, posLenAtt_, id<OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter, typeAtt_, id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter, offsetAtt_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter, futureInputs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter, bytesReader_, OrgApacheLuceneStoreByteArrayDataInput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter, futureOutputs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter, scratchArc_, OrgApacheLuceneUtilFstFST_Arc *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter, fst_, OrgApacheLuceneUtilFstFST *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter, fstReader_, OrgApacheLuceneUtilFstFST_BytesReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter, scratchBytes_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter, scratchChars_, OrgApacheLuceneUtilCharsRefBuilder *)

__attribute__((unused)) static void OrgApacheLuceneAnalysisSynonymSynonymFilter_capture(OrgApacheLuceneAnalysisSynonymSynonymFilter *self);

__attribute__((unused)) static void OrgApacheLuceneAnalysisSynonymSynonymFilter_parse(OrgApacheLuceneAnalysisSynonymSynonymFilter *self);

__attribute__((unused)) static void OrgApacheLuceneAnalysisSynonymSynonymFilter_addOutputWithOrgApacheLuceneUtilBytesRef_withInt_withInt_(OrgApacheLuceneAnalysisSynonymSynonymFilter *self, OrgApacheLuceneUtilBytesRef *bytes, jint matchInputLength, jint matchEndOffset);

__attribute__((unused)) static jint OrgApacheLuceneAnalysisSynonymSynonymFilter_rollIncrWithInt_(OrgApacheLuceneAnalysisSynonymSynonymFilter *self, jint count);

@interface OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput : NSObject {
 @public
  OrgApacheLuceneUtilCharsRefBuilder *term_;
  OrgApacheLuceneUtilAttributeSource_State *state_;
  jboolean keepOrig_;
  jboolean matched_;
  jboolean consumed_;
  jint startOffset_;
  jint endOffset_;
}

- (void)reset;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput, term_, OrgApacheLuceneUtilCharsRefBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput, state_, OrgApacheLuceneUtilAttributeSource_State *)

__attribute__((unused)) static void OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput_init(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *self);

__attribute__((unused)) static OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *new_OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput)

@interface OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs : NSObject {
 @public
  IOSObjectArray *outputs_;
  IOSIntArray *endOffsets_;
  IOSIntArray *posLengths_;
  jint upto_;
  jint count_;
  jint posIncr_;
  jint lastEndOffset_;
  jint lastPosLength_;
}

- (instancetype)init;

- (void)reset;

- (OrgApacheLuceneUtilCharsRef *)pullNext;

- (jint)getLastEndOffset;

- (jint)getLastPosLength;

- (void)addWithCharArray:(IOSCharArray *)output
                 withInt:(jint)offset
                 withInt:(jint)len
                 withInt:(jint)endOffset
                 withInt:(jint)posLength;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs, outputs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs, endOffsets_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs, posLengths_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs_init(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs *self);

__attribute__((unused)) static OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs *new_OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs)

NSString *OrgApacheLuceneAnalysisSynonymSynonymFilter_TYPE_SYNONYM_ = @"SYNONYM";

@implementation OrgApacheLuceneAnalysisSynonymSynonymFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
              withOrgApacheLuceneAnalysisSynonymSynonymMap:(OrgApacheLuceneAnalysisSynonymSynonymMap *)synonyms
                                               withBoolean:(jboolean)ignoreCase {
  OrgApacheLuceneAnalysisSynonymSynonymFilter_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisSynonymSynonymMap_withBoolean_(self, input, synonyms, ignoreCase);
  return self;
}

- (void)capture {
  OrgApacheLuceneAnalysisSynonymSynonymFilter_capture(self);
}

- (void)parse {
  OrgApacheLuceneAnalysisSynonymSynonymFilter_parse(self);
}

- (void)addOutputWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes
                                         withInt:(jint)matchInputLength
                                         withInt:(jint)matchEndOffset {
  OrgApacheLuceneAnalysisSynonymSynonymFilter_addOutputWithOrgApacheLuceneUtilBytesRef_withInt_withInt_(self, bytes, matchInputLength, matchEndOffset);
}

- (jint)rollIncrWithInt:(jint)count {
  return OrgApacheLuceneAnalysisSynonymSynonymFilter_rollIncrWithInt_(self, count);
}

- (jint)getCaptureCount {
  return captureCount_;
}

- (jboolean)incrementToken {
  while (true) {
    while (inputSkipCount_ != 0) {
      OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *input = IOSObjectArray_Get(nil_chk(futureInputs_), nextRead_);
      OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs *outputs = IOSObjectArray_Get(nil_chk(futureOutputs_), nextRead_);
      if (!((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *) nil_chk(input))->consumed_ && (input->keepOrig_ || !input->matched_)) {
        if (input->state_ != nil) {
          [self restoreStateWithOrgApacheLuceneUtilAttributeSource_State:input->state_];
        }
        else {
          JreAssert((inputSkipCount_ == 1), (JreStrcat("$I$I", @"inputSkipCount=", inputSkipCount_, @" nextRead=", nextRead_)));
        }
        [input reset];
        if (((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs *) nil_chk(outputs))->count_ > 0) {
          outputs->posIncr_ = 0;
        }
        else {
          nextRead_ = OrgApacheLuceneAnalysisSynonymSynonymFilter_rollIncrWithInt_(self, nextRead_);
          inputSkipCount_--;
        }
        return true;
      }
      else if (((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs *) nil_chk(outputs))->upto_ < outputs->count_) {
        [input reset];
        jint posIncr = outputs->posIncr_;
        OrgApacheLuceneUtilCharsRef *output = [outputs pullNext];
        [self clearAttributes];
        [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) copyBufferWithCharArray:((OrgApacheLuceneUtilCharsRef *) nil_chk(output))->chars_ withInt:output->offset_ withInt:output->length_];
        [((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(typeAtt_)) setTypeWithNSString:OrgApacheLuceneAnalysisSynonymSynonymFilter_TYPE_SYNONYM_];
        jint endOffset = [outputs getLastEndOffset];
        if (endOffset == -1) {
          endOffset = input->endOffset_;
        }
        [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:input->startOffset_ withInt:endOffset];
        [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncrAtt_)) setPositionIncrementWithInt:posIncr];
        [((id<OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute>) nil_chk(posLenAtt_)) setPositionLengthWithInt:[outputs getLastPosLength]];
        if (outputs->count_ == 0) {
          nextRead_ = OrgApacheLuceneAnalysisSynonymSynonymFilter_rollIncrWithInt_(self, nextRead_);
          inputSkipCount_--;
        }
        return true;
      }
      else {
        [input reset];
        nextRead_ = OrgApacheLuceneAnalysisSynonymSynonymFilter_rollIncrWithInt_(self, nextRead_);
        inputSkipCount_--;
      }
    }
    if (finished_ && nextRead_ == nextWrite_) {
      OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs *outputs = IOSObjectArray_Get(nil_chk(futureOutputs_), nextRead_);
      if (((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs *) nil_chk(outputs))->upto_ < outputs->count_) {
        jint posIncr = outputs->posIncr_;
        OrgApacheLuceneUtilCharsRef *output = [outputs pullNext];
        [((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *) nil_chk(IOSObjectArray_Get(nil_chk(futureInputs_), nextRead_))) reset];
        if (outputs->count_ == 0) {
          nextWrite_ = nextRead_ = OrgApacheLuceneAnalysisSynonymSynonymFilter_rollIncrWithInt_(self, nextRead_);
        }
        [self clearAttributes];
        [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:lastStartOffset_ withInt:lastEndOffset_];
        [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) copyBufferWithCharArray:((OrgApacheLuceneUtilCharsRef *) nil_chk(output))->chars_ withInt:output->offset_ withInt:output->length_];
        [((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(typeAtt_)) setTypeWithNSString:OrgApacheLuceneAnalysisSynonymSynonymFilter_TYPE_SYNONYM_];
        [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncrAtt_)) setPositionIncrementWithInt:posIncr];
        return true;
      }
      else {
        return false;
      }
    }
    OrgApacheLuceneAnalysisSynonymSynonymFilter_parse(self);
  }
}

- (void)reset {
  [super reset];
  captureCount_ = 0;
  finished_ = false;
  inputSkipCount_ = 0;
  nextRead_ = nextWrite_ = 0;
  {
    IOSObjectArray *a__ = futureInputs_;
    OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *input = *b__++;
      [((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *) nil_chk(input)) reset];
    }
  }
  {
    IOSObjectArray *a__ = futureOutputs_;
    OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs *output = *b__++;
      [((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs *) nil_chk(output)) reset];
    }
  }
}

- (void)dealloc {
  RELEASE_(synonyms_);
  RELEASE_(termAtt_);
  RELEASE_(posIncrAtt_);
  RELEASE_(posLenAtt_);
  RELEASE_(typeAtt_);
  RELEASE_(offsetAtt_);
  RELEASE_(futureInputs_);
  RELEASE_(bytesReader_);
  RELEASE_(futureOutputs_);
  RELEASE_(scratchArc_);
  RELEASE_(fst_);
  RELEASE_(fstReader_);
  RELEASE_(scratchBytes_);
  RELEASE_(scratchChars_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneAnalysisTokenStream:withOrgApacheLuceneAnalysisSynonymSynonymMap:withBoolean:", "SynonymFilter", NULL, 0x1, NULL, NULL },
    { "capture", NULL, "V", 0x2, NULL, NULL },
    { "parse", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "addOutputWithOrgApacheLuceneUtilBytesRef:withInt:withInt:", "addOutput", "V", 0x2, NULL, NULL },
    { "rollIncrWithInt:", "rollIncr", "I", 0x2, NULL, NULL },
    { "getCaptureCount", NULL, "I", 0x0, NULL, NULL },
    { "incrementToken", NULL, "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "reset", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_SYNONYM_", NULL, 0x19, "Ljava.lang.String;", &OrgApacheLuceneAnalysisSynonymSynonymFilter_TYPE_SYNONYM_, NULL, .constantValue.asLong = 0 },
    { "synonyms_", NULL, 0x12, "Lorg.apache.lucene.analysis.synonym.SynonymMap;", NULL, NULL, .constantValue.asLong = 0 },
    { "ignoreCase_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "rollBufferSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "captureCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "termAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.CharTermAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "posIncrAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "posLenAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.PositionLengthAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "typeAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.TypeAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "offsetAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.OffsetAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "inputSkipCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "futureInputs_", NULL, 0x12, "[Lorg.apache.lucene.analysis.synonym.SynonymFilter$PendingInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "bytesReader_", NULL, 0x12, "Lorg.apache.lucene.store.ByteArrayDataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "futureOutputs_", NULL, 0x12, "[Lorg.apache.lucene.analysis.synonym.SynonymFilter$PendingOutputs;", NULL, NULL, .constantValue.asLong = 0 },
    { "nextWrite_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "nextRead_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "finished_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "scratchArc_", NULL, 0x12, "Lorg.apache.lucene.util.fst.FST$Arc;", NULL, "Lorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/util/BytesRef;>;", .constantValue.asLong = 0 },
    { "fst_", NULL, 0x12, "Lorg.apache.lucene.util.fst.FST;", NULL, "Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/BytesRef;>;", .constantValue.asLong = 0 },
    { "fstReader_", NULL, 0x12, "Lorg.apache.lucene.util.fst.FST$BytesReader;", NULL, NULL, .constantValue.asLong = 0 },
    { "scratchBytes_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "scratchChars_", NULL, 0x12, "Lorg.apache.lucene.util.CharsRefBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "lastStartOffset_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastEndOffset_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.analysis.synonym.SynonymFilter$PendingInput;", "Lorg.apache.lucene.analysis.synonym.SynonymFilter$PendingOutputs;"};
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisSynonymSynonymFilter = { 2, "SynonymFilter", "org.apache.lucene.analysis.synonym", NULL, 0x11, 8, methods, 24, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneAnalysisSynonymSynonymFilter;
}

@end

void OrgApacheLuceneAnalysisSynonymSynonymFilter_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisSynonymSynonymMap_withBoolean_(OrgApacheLuceneAnalysisSynonymSynonymFilter *self, OrgApacheLuceneAnalysisTokenStream *input, OrgApacheLuceneAnalysisSynonymSynonymMap *synonyms, jboolean ignoreCase) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, input);
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->posIncrAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
  JreStrongAssign(&self->posLenAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute_class_()]);
  JreStrongAssign(&self->typeAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  JreStrongAssignAndConsume(&self->bytesReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  JreStrongAssignAndConsume(&self->scratchBytes_, new_OrgApacheLuceneUtilBytesRef_init());
  JreStrongAssignAndConsume(&self->scratchChars_, new_OrgApacheLuceneUtilCharsRefBuilder_init());
  JreStrongAssign(&self->synonyms_, synonyms);
  self->ignoreCase_ = ignoreCase;
  JreStrongAssign(&self->fst_, ((OrgApacheLuceneAnalysisSynonymSynonymMap *) nil_chk(synonyms))->fst_);
  if (self->fst_ == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"fst must be non-null") autorelease];
  }
  JreStrongAssign(&self->fstReader_, [((OrgApacheLuceneUtilFstFST *) nil_chk(self->fst_)) getBytesReader]);
  self->rollBufferSize_ = 1 + synonyms->maxHorizontalContext_;
  JreStrongAssignAndConsume(&self->futureInputs_, [IOSObjectArray newArrayWithLength:self->rollBufferSize_ type:OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput_class_()]);
  JreStrongAssignAndConsume(&self->futureOutputs_, [IOSObjectArray newArrayWithLength:self->rollBufferSize_ type:OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs_class_()]);
  for (jint pos = 0; pos < self->rollBufferSize_; pos++) {
    IOSObjectArray_SetAndConsume(self->futureInputs_, pos, new_OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput_init());
    IOSObjectArray_SetAndConsume(self->futureOutputs_, pos, new_OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs_init());
  }
  JreStrongAssignAndConsume(&self->scratchArc_, new_OrgApacheLuceneUtilFstFST_Arc_init());
}

OrgApacheLuceneAnalysisSynonymSynonymFilter *new_OrgApacheLuceneAnalysisSynonymSynonymFilter_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisSynonymSynonymMap_withBoolean_(OrgApacheLuceneAnalysisTokenStream *input, OrgApacheLuceneAnalysisSynonymSynonymMap *synonyms, jboolean ignoreCase) {
  OrgApacheLuceneAnalysisSynonymSynonymFilter *self = [OrgApacheLuceneAnalysisSynonymSynonymFilter alloc];
  OrgApacheLuceneAnalysisSynonymSynonymFilter_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisSynonymSynonymMap_withBoolean_(self, input, synonyms, ignoreCase);
  return self;
}

void OrgApacheLuceneAnalysisSynonymSynonymFilter_capture(OrgApacheLuceneAnalysisSynonymSynonymFilter *self) {
  self->captureCount_++;
  OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *input = IOSObjectArray_Get(nil_chk(self->futureInputs_), self->nextWrite_);
  JreStrongAssign(&((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *) nil_chk(input))->state_, [self captureState]);
  input->consumed_ = false;
  [((OrgApacheLuceneUtilCharsRefBuilder *) nil_chk(input->term_)) copyCharsWithCharArray:[((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(self->termAtt_)) buffer] withInt:0 withInt:[self->termAtt_ length]];
  self->nextWrite_ = OrgApacheLuceneAnalysisSynonymSynonymFilter_rollIncrWithInt_(self, self->nextWrite_);
  JreAssert((self->nextWrite_ != self->nextRead_), (@"org/apache/lucene/analysis/synonym/SynonymFilter.java:303 condition failed: assert nextWrite != nextRead;"));
}

void OrgApacheLuceneAnalysisSynonymSynonymFilter_parse(OrgApacheLuceneAnalysisSynonymSynonymFilter *self) {
  JreAssert((self->inputSkipCount_ == 0), (@"org/apache/lucene/analysis/synonym/SynonymFilter.java:321 condition failed: assert inputSkipCount == 0;"));
  jint curNextRead = self->nextRead_;
  OrgApacheLuceneUtilBytesRef *matchOutput = nil;
  jint matchInputLength = 0;
  jint matchEndOffset = -1;
  OrgApacheLuceneUtilBytesRef *pendingOutput = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(((OrgApacheLuceneUtilFstFST *) nil_chk(self->fst_))->outputs_)) getNoOutput];
  [self->fst_ getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:self->scratchArc_];
  JreAssert((((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(self->scratchArc_))->output_ == [self->fst_->outputs_ getNoOutput]), (@"org/apache/lucene/analysis/synonym/SynonymFilter.java:333 condition failed: assert scratchArc.output == fst.outputs.getNoOutput();"));
  jint tokenCount = 0;
  while (true) {
    IOSCharArray *buffer;
    jint bufferLen;
    jint inputEndOffset = 0;
    if (curNextRead == self->nextWrite_) {
      if (self->finished_) {
        break;
      }
      else {
        JreAssert((((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *) nil_chk(IOSObjectArray_Get(nil_chk(self->futureInputs_), self->nextWrite_)))->consumed_), (@"org/apache/lucene/analysis/synonym/SynonymFilter.java:356 condition failed: assert futureInputs[nextWrite].consumed;"));
        if ([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(self->input_)) incrementToken]) {
          buffer = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(self->termAtt_)) buffer];
          bufferLen = [self->termAtt_ length];
          OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *input = IOSObjectArray_Get(self->futureInputs_, self->nextWrite_);
          self->lastStartOffset_ = ((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *) nil_chk(input))->startOffset_ = [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(self->offsetAtt_)) startOffset];
          self->lastEndOffset_ = input->endOffset_ = [self->offsetAtt_ endOffset];
          inputEndOffset = input->endOffset_;
          if (self->nextRead_ != self->nextWrite_) {
            OrgApacheLuceneAnalysisSynonymSynonymFilter_capture(self);
          }
          else {
            input->consumed_ = false;
          }
        }
        else {
          self->finished_ = true;
          break;
        }
      }
    }
    else {
      buffer = [((OrgApacheLuceneUtilCharsRefBuilder *) nil_chk(((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *) nil_chk(IOSObjectArray_Get(nil_chk(self->futureInputs_), curNextRead)))->term_)) chars];
      bufferLen = [((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *) nil_chk(IOSObjectArray_Get(self->futureInputs_, curNextRead)))->term_ length];
      inputEndOffset = ((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *) nil_chk(IOSObjectArray_Get(self->futureInputs_, curNextRead)))->endOffset_;
    }
    tokenCount++;
    jint bufUpto = 0;
    while (bufUpto < bufferLen) {
      jint codePoint = JavaLangCharacter_codePointAtWithCharArray_withInt_withInt_(buffer, bufUpto, bufferLen);
      if ([self->fst_ findTargetArcWithInt:self->ignoreCase_ ? JavaLangCharacter_toLowerCaseWithInt_(codePoint) : codePoint withOrgApacheLuceneUtilFstFST_Arc:self->scratchArc_ withOrgApacheLuceneUtilFstFST_Arc:self->scratchArc_ withOrgApacheLuceneUtilFstFST_BytesReader:self->fstReader_] == nil) {
        goto break_byToken;
      }
      pendingOutput = [self->fst_->outputs_ addWithId:pendingOutput withId:self->scratchArc_->output_];
      bufUpto += JavaLangCharacter_charCountWithInt_(codePoint);
    }
    if ([self->scratchArc_ isFinal]) {
      matchOutput = [self->fst_->outputs_ addWithId:pendingOutput withId:self->scratchArc_->nextFinalOutput_];
      matchInputLength = tokenCount;
      matchEndOffset = inputEndOffset;
    }
    if ([self->fst_ findTargetArcWithInt:OrgApacheLuceneAnalysisSynonymSynonymMap_WORD_SEPARATOR withOrgApacheLuceneUtilFstFST_Arc:self->scratchArc_ withOrgApacheLuceneUtilFstFST_Arc:self->scratchArc_ withOrgApacheLuceneUtilFstFST_BytesReader:self->fstReader_] == nil) {
      break;
    }
    else {
      pendingOutput = [self->fst_->outputs_ addWithId:pendingOutput withId:self->scratchArc_->output_];
      if (self->nextRead_ == self->nextWrite_) {
        OrgApacheLuceneAnalysisSynonymSynonymFilter_capture(self);
      }
    }
    curNextRead = OrgApacheLuceneAnalysisSynonymSynonymFilter_rollIncrWithInt_(self, curNextRead);
  }
  break_byToken: ;
  if (self->nextRead_ == self->nextWrite_ && !self->finished_) {
    self->nextWrite_ = OrgApacheLuceneAnalysisSynonymSynonymFilter_rollIncrWithInt_(self, self->nextWrite_);
  }
  if (matchOutput != nil) {
    self->inputSkipCount_ = matchInputLength;
    OrgApacheLuceneAnalysisSynonymSynonymFilter_addOutputWithOrgApacheLuceneUtilBytesRef_withInt_withInt_(self, matchOutput, matchInputLength, matchEndOffset);
  }
  else if (self->nextRead_ != self->nextWrite_) {
    self->inputSkipCount_ = 1;
  }
  else {
    JreAssert((self->finished_), (@"org/apache/lucene/analysis/synonym/SynonymFilter.java:450 condition failed: assert finished;"));
  }
}

void OrgApacheLuceneAnalysisSynonymSynonymFilter_addOutputWithOrgApacheLuceneUtilBytesRef_withInt_withInt_(OrgApacheLuceneAnalysisSynonymSynonymFilter *self, OrgApacheLuceneUtilBytesRef *bytes, jint matchInputLength, jint matchEndOffset) {
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(self->bytesReader_)) resetWithByteArray:((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes))->bytes_ withInt:bytes->offset_ withInt:bytes->length_];
  jint code = [self->bytesReader_ readVInt];
  jboolean keepOrig = (code & (jint) 0x1) == 0;
  jint count = JreURShift32(code, 1);
  for (jint outputIDX = 0; outputIDX < count; outputIDX++) {
    [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(((OrgApacheLuceneAnalysisSynonymSynonymMap *) nil_chk(self->synonyms_))->words_)) getWithInt:[self->bytesReader_ readVInt] withOrgApacheLuceneUtilBytesRef:self->scratchBytes_];
    [((OrgApacheLuceneUtilCharsRefBuilder *) nil_chk(self->scratchChars_)) copyUTF8BytesWithOrgApacheLuceneUtilBytesRef:self->scratchBytes_];
    jint lastStart = 0;
    jint chEnd = lastStart + [self->scratchChars_ length];
    jint outputUpto = self->nextRead_;
    for (jint chIDX = lastStart; chIDX <= chEnd; chIDX++) {
      if (chIDX == chEnd || [self->scratchChars_ charAtWithInt:chIDX] == OrgApacheLuceneAnalysisSynonymSynonymMap_WORD_SEPARATOR) {
        jint outputLen = chIDX - lastStart;
        JreAssert((outputLen > 0), (JreStrcat("$@", @"output contains empty string: ", self->scratchChars_)));
        jint endOffset;
        jint posLen;
        if (chIDX == chEnd && lastStart == 0) {
          endOffset = matchEndOffset;
          posLen = keepOrig ? matchInputLength : 1;
        }
        else {
          endOffset = -1;
          posLen = 1;
        }
        [((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs *) nil_chk(IOSObjectArray_Get(nil_chk(self->futureOutputs_), outputUpto))) addWithCharArray:[self->scratchChars_ chars] withInt:lastStart withInt:outputLen withInt:endOffset withInt:posLen];
        lastStart = 1 + chIDX;
        outputUpto = OrgApacheLuceneAnalysisSynonymSynonymFilter_rollIncrWithInt_(self, outputUpto);
        JreAssert((((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs *) nil_chk(IOSObjectArray_Get(self->futureOutputs_, outputUpto)))->posIncr_ == 1), (JreStrcat("$I$I", @"outputUpto=", outputUpto, @" vs nextWrite=", self->nextWrite_)));
      }
    }
  }
  jint upto = self->nextRead_;
  for (jint idx = 0; idx < matchInputLength; idx++) {
    ((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *) nil_chk(IOSObjectArray_Get(nil_chk(self->futureInputs_), upto)))->keepOrig_ |= keepOrig;
    ((OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *) nil_chk(IOSObjectArray_Get(self->futureInputs_, upto)))->matched_ = true;
    upto = OrgApacheLuceneAnalysisSynonymSynonymFilter_rollIncrWithInt_(self, upto);
  }
}

jint OrgApacheLuceneAnalysisSynonymSynonymFilter_rollIncrWithInt_(OrgApacheLuceneAnalysisSynonymSynonymFilter *self, jint count) {
  count++;
  if (count == self->rollBufferSize_) {
    return 0;
  }
  else {
    return count;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisSynonymSynonymFilter)

@implementation OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput

- (void)reset {
  JreStrongAssign(&state_, nil);
  consumed_ = true;
  keepOrig_ = false;
  matched_ = false;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(term_);
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "term_", NULL, 0x10, "Lorg.apache.lucene.util.CharsRefBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "state_", NULL, 0x0, "Lorg.apache.lucene.util.AttributeSource$State;", NULL, NULL, .constantValue.asLong = 0 },
    { "keepOrig_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "matched_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "consumed_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "startOffset_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "endOffset_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput = { 2, "PendingInput", "org.apache.lucene.analysis.synonym", "SynonymFilter", 0xa, 2, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput;
}

@end

void OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput_init(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->term_, new_OrgApacheLuceneUtilCharsRefBuilder_init());
  self->consumed_ = true;
}

OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *new_OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput_init() {
  OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput *self = [OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput alloc];
  OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingInput)

@implementation OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)reset {
  upto_ = count_ = 0;
  posIncr_ = 1;
}

- (OrgApacheLuceneUtilCharsRef *)pullNext {
  JreAssert((upto_ < count_), (@"org/apache/lucene/analysis/synonym/SynonymFilter.java:186 condition failed: assert upto < count;"));
  lastEndOffset_ = IOSIntArray_Get(nil_chk(endOffsets_), upto_);
  lastPosLength_ = IOSIntArray_Get(nil_chk(posLengths_), upto_);
  OrgApacheLuceneUtilCharsRefBuilder *result = IOSObjectArray_Get(nil_chk(outputs_), upto_++);
  posIncr_ = 0;
  if (upto_ == count_) {
    [self reset];
  }
  return [((OrgApacheLuceneUtilCharsRefBuilder *) nil_chk(result)) get];
}

- (jint)getLastEndOffset {
  return lastEndOffset_;
}

- (jint)getLastPosLength {
  return lastPosLength_;
}

- (void)addWithCharArray:(IOSCharArray *)output
                 withInt:(jint)offset
                 withInt:(jint)len
                 withInt:(jint)endOffset
                 withInt:(jint)posLength {
  if (count_ == ((IOSObjectArray *) nil_chk(outputs_))->size_) {
    JreStrongAssign(&outputs_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(outputs_, OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(1 + count_, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF_))));
  }
  if (count_ == ((IOSIntArray *) nil_chk(endOffsets_))->size_) {
    IOSIntArray *next = [IOSIntArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(1 + count_, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(endOffsets_, 0, next, 0, count_);
    JreStrongAssign(&endOffsets_, next);
  }
  if (count_ == ((IOSIntArray *) nil_chk(posLengths_))->size_) {
    IOSIntArray *next = [IOSIntArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(1 + count_, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(posLengths_, 0, next, 0, count_);
    JreStrongAssign(&posLengths_, next);
  }
  if (IOSObjectArray_Get(nil_chk(outputs_), count_) == nil) {
    IOSObjectArray_SetAndConsume(outputs_, count_, new_OrgApacheLuceneUtilCharsRefBuilder_init());
  }
  [((OrgApacheLuceneUtilCharsRefBuilder *) nil_chk(IOSObjectArray_Get(outputs_, count_))) copyCharsWithCharArray:output withInt:offset withInt:len];
  *IOSIntArray_GetRef(endOffsets_, count_) = endOffset;
  *IOSIntArray_GetRef(posLengths_, count_) = posLength;
  count_++;
}

- (void)dealloc {
  RELEASE_(outputs_);
  RELEASE_(endOffsets_);
  RELEASE_(posLengths_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PendingOutputs", NULL, 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "pullNext", NULL, "Lorg.apache.lucene.util.CharsRef;", 0x1, NULL, NULL },
    { "getLastEndOffset", NULL, "I", 0x1, NULL, NULL },
    { "getLastPosLength", NULL, "I", 0x1, NULL, NULL },
    { "addWithCharArray:withInt:withInt:withInt:withInt:", "add", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "outputs_", NULL, 0x0, "[Lorg.apache.lucene.util.CharsRefBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "endOffsets_", NULL, 0x0, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "posLengths_", NULL, 0x0, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "upto_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "count_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "posIncr_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastEndOffset_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastPosLength_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs = { 2, "PendingOutputs", "org.apache.lucene.analysis.synonym", "SynonymFilter", 0xa, 6, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs;
}

@end

void OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs_init(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs *self) {
  NSObject_init(self);
  self->posIncr_ = 1;
  JreStrongAssignAndConsume(&self->outputs_, [IOSObjectArray newArrayWithLength:1 type:OrgApacheLuceneUtilCharsRefBuilder_class_()]);
  JreStrongAssignAndConsume(&self->endOffsets_, [IOSIntArray newArrayWithLength:1]);
  JreStrongAssignAndConsume(&self->posLengths_, [IOSIntArray newArrayWithLength:1]);
}

OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs *new_OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs_init() {
  OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs *self = [OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs alloc];
  OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisSynonymSynonymFilter_PendingOutputs)
