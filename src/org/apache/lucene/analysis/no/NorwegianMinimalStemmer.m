//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianMinimalStemmer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemmer.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemmer.h"
#include "org/apache/lucene/analysis/util/StemmerUtil.h"

@implementation OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer

- (instancetype)initWithInt:(jint)flags {
  OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer_initWithInt_(self, flags);
  return self;
}

- (jint)stemWithCharArray:(IOSCharArray *)s
                  withInt:(jint)len {
  if (len > 4 && IOSCharArray_Get(nil_chk(s), len - 1) == 's') len--;
  if (len > 5 && (OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withNSString_(s, len, @"ene") || (OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withNSString_(s, len, @"ane") && useNynorsk_))) return len - 3;
  if (len > 4 && (OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withNSString_(s, len, @"er") || OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withNSString_(s, len, @"en") || OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withNSString_(s, len, @"et") || (OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withNSString_(s, len, @"ar") && useNynorsk_))) return len - 2;
  if (len > 3) switch (IOSCharArray_Get(nil_chk(s), len - 1)) {
    case 'a':
    case 'e':
    return len - 1;
  }
  return len;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "NorwegianMinimalStemmer", NULL, 0x1, NULL, NULL },
    { "stemWithCharArray:withInt:", "stem", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "useBokmaal_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "useNynorsk_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer = { 2, "NorwegianMinimalStemmer", "org.apache.lucene.analysis.no", NULL, 0x1, 2, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer;
}

@end

void OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer_initWithInt_(OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer *self, jint flags) {
  NSObject_init(self);
  if (flags <= 0 || flags > OrgApacheLuceneAnalysisNoNorwegianLightStemmer_BOKMAAL + OrgApacheLuceneAnalysisNoNorwegianLightStemmer_NYNORSK) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid flags") autorelease];
  }
  self->useBokmaal_ = ((flags & OrgApacheLuceneAnalysisNoNorwegianLightStemmer_BOKMAAL) != 0);
  self->useNynorsk_ = ((flags & OrgApacheLuceneAnalysisNoNorwegianLightStemmer_NYNORSK) != 0);
}

OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer *new_OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer_initWithInt_(jint flags) {
  OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer *self = [OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer alloc];
  OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer_initWithInt_(self, flags);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer)
