//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceFilter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilter.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/util/AttributeSource.h"

@interface OrgApacheLuceneAnalysisPatternPatternReplaceFilter () {
 @public
  NSString *replacement_;
  jboolean all_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  JavaUtilRegexMatcher *m_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternReplaceFilter, replacement_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternReplaceFilter, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternReplaceFilter, m_, JavaUtilRegexMatcher *)

@implementation OrgApacheLuceneAnalysisPatternPatternReplaceFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg
                                  withJavaUtilRegexPattern:(JavaUtilRegexPattern *)p
                                              withNSString:(NSString *)replacement
                                               withBoolean:(jboolean)all {
  OrgApacheLuceneAnalysisPatternPatternReplaceFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilRegexPattern_withNSString_withBoolean_(self, inArg, p, replacement, all);
  return self;
}

- (jboolean)incrementToken {
  if (![((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) incrementToken]) return false;
  [((JavaUtilRegexMatcher *) nil_chk(m_)) reset];
  if ([m_ find]) {
    NSString *transformed = all_ ? [m_ replaceAllWithNSString:replacement_] : [m_ replaceFirstWithNSString:replacement_];
    [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk([((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) setEmpty])) appendWithNSString:transformed];
  }
  return true;
}

- (void)dealloc {
  RELEASE_(replacement_);
  RELEASE_(termAtt_);
  RELEASE_(m_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneAnalysisTokenStream:withJavaUtilRegexPattern:withNSString:withBoolean:", "PatternReplaceFilter", NULL, 0x1, NULL, NULL },
    { "incrementToken", NULL, "Z", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "replacement_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "all_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "termAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.CharTermAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "m_", NULL, 0x12, "Ljava.util.regex.Matcher;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisPatternPatternReplaceFilter = { 2, "PatternReplaceFilter", "org.apache.lucene.analysis.pattern", NULL, 0x11, 2, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisPatternPatternReplaceFilter;
}

@end

void OrgApacheLuceneAnalysisPatternPatternReplaceFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilRegexPattern_withNSString_withBoolean_(OrgApacheLuceneAnalysisPatternPatternReplaceFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg, JavaUtilRegexPattern *p, NSString *replacement, jboolean all) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, inArg);
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->replacement_, (nil == replacement) ? @"" : replacement);
  self->all_ = all;
  JreStrongAssign(&self->m_, [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:self->termAtt_]);
}

OrgApacheLuceneAnalysisPatternPatternReplaceFilter *new_OrgApacheLuceneAnalysisPatternPatternReplaceFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilRegexPattern_withNSString_withBoolean_(OrgApacheLuceneAnalysisTokenStream *inArg, JavaUtilRegexPattern *p, NSString *replacement, jboolean all) {
  OrgApacheLuceneAnalysisPatternPatternReplaceFilter *self = [OrgApacheLuceneAnalysisPatternPatternReplaceFilter alloc];
  OrgApacheLuceneAnalysisPatternPatternReplaceFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilRegexPattern_withNSString_withBoolean_(self, inArg, p, replacement, all);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisPatternPatternReplaceFilter)
