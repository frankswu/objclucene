//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizer.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/AttributeSource.h"

@interface OrgApacheLuceneAnalysisPatternPatternTokenizer () {
 @public
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAtt_;
  JavaLangStringBuilder *str_;
  jint index_;
  jint group_;
  JavaUtilRegexMatcher *matcher_;
}

- (void)fillBufferWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                           withJavaIoReader:(JavaIoReader *)input;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternTokenizer, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternTokenizer, offsetAtt_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternTokenizer, str_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternTokenizer, matcher_, JavaUtilRegexMatcher *)

__attribute__((unused)) static void OrgApacheLuceneAnalysisPatternPatternTokenizer_fillBufferWithJavaLangStringBuilder_withJavaIoReader_(OrgApacheLuceneAnalysisPatternPatternTokenizer *self, JavaLangStringBuilder *sb, JavaIoReader *input);

@implementation OrgApacheLuceneAnalysisPatternPatternTokenizer

- (instancetype)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                     withInt:(jint)group {
  OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithJavaUtilRegexPattern_withInt_(self, pattern, group);
  return self;
}

- (instancetype)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory
                                   withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                                    withInt:(jint)group {
  OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withJavaUtilRegexPattern_withInt_(self, factory, pattern, group);
  return self;
}

- (jboolean)incrementToken {
  if (index_ >= [((JavaLangStringBuilder *) nil_chk(str_)) length]) return false;
  [self clearAttributes];
  if (group_ >= 0) {
    while ([((JavaUtilRegexMatcher *) nil_chk(matcher_)) find]) {
      index_ = [matcher_ startWithInt:group_];
      jint endIndex = [matcher_ endWithInt:group_];
      if (index_ == endIndex) continue;
      [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk([((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) setEmpty])) appendWithJavaLangCharSequence:str_ withInt:index_ withInt:endIndex];
      [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:[self correctOffsetWithInt:index_] withInt:[self correctOffsetWithInt:endIndex]];
      return true;
    }
    index_ = JavaLangInteger_MAX_VALUE;
    return false;
  }
  else {
    while ([((JavaUtilRegexMatcher *) nil_chk(matcher_)) find]) {
      if ([matcher_ start] - index_ > 0) {
        [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk([((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) setEmpty])) appendWithJavaLangCharSequence:str_ withInt:index_ withInt:[matcher_ start]];
        [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:[self correctOffsetWithInt:index_] withInt:[self correctOffsetWithInt:[matcher_ start]]];
        index_ = [matcher_ end];
        return true;
      }
      index_ = [matcher_ end];
    }
    if ([str_ length] - index_ == 0) {
      index_ = JavaLangInteger_MAX_VALUE;
      return false;
    }
    [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk([((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) setEmpty])) appendWithJavaLangCharSequence:str_ withInt:index_ withInt:[str_ length]];
    [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:[self correctOffsetWithInt:index_] withInt:[self correctOffsetWithInt:[str_ length]]];
    index_ = JavaLangInteger_MAX_VALUE;
    return true;
  }
}

- (void)end {
  [super end];
  jint ofs = [self correctOffsetWithInt:[((JavaLangStringBuilder *) nil_chk(str_)) length]];
  [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:ofs withInt:ofs];
}

- (void)reset {
  [super reset];
  OrgApacheLuceneAnalysisPatternPatternTokenizer_fillBufferWithJavaLangStringBuilder_withJavaIoReader_(self, str_, input_);
  [((JavaUtilRegexMatcher *) nil_chk(matcher_)) resetWithJavaLangCharSequence:str_];
  index_ = 0;
}

- (void)fillBufferWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                           withJavaIoReader:(JavaIoReader *)input {
  OrgApacheLuceneAnalysisPatternPatternTokenizer_fillBufferWithJavaLangStringBuilder_withJavaIoReader_(self, sb, input);
}

- (void)dealloc {
  RELEASE_(termAtt_);
  RELEASE_(offsetAtt_);
  RELEASE_(str_);
  RELEASE_(matcher_);
  RELEASE_(buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilRegexPattern:withInt:", "PatternTokenizer", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheLuceneUtilAttributeFactory:withJavaUtilRegexPattern:withInt:", "PatternTokenizer", NULL, 0x1, NULL, NULL },
    { "incrementToken", NULL, "Z", 0x1, NULL, NULL },
    { "end", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "reset", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "fillBufferWithJavaLangStringBuilder:withJavaIoReader:", "fillBuffer", "V", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "termAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.CharTermAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "offsetAtt_", NULL, 0x12, "Lorg.apache.lucene.analysis.tokenattributes.OffsetAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "str_", NULL, 0x12, "Ljava.lang.StringBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "index_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "group_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "matcher_", NULL, 0x12, "Ljava.util.regex.Matcher;", NULL, NULL, .constantValue.asLong = 0 },
    { "buffer_", NULL, 0x10, "[C", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisPatternPatternTokenizer = { 2, "PatternTokenizer", "org.apache.lucene.analysis.pattern", NULL, 0x11, 6, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisPatternPatternTokenizer;
}

@end

void OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithJavaUtilRegexPattern_withInt_(OrgApacheLuceneAnalysisPatternPatternTokenizer *self, JavaUtilRegexPattern *pattern, jint group) {
  OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withJavaUtilRegexPattern_withInt_(self, JreLoadStatic(OrgApacheLuceneAnalysisTokenStream, DEFAULT_TOKEN_ATTRIBUTE_FACTORY_), pattern, group);
}

OrgApacheLuceneAnalysisPatternPatternTokenizer *new_OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithJavaUtilRegexPattern_withInt_(JavaUtilRegexPattern *pattern, jint group) {
  OrgApacheLuceneAnalysisPatternPatternTokenizer *self = [OrgApacheLuceneAnalysisPatternPatternTokenizer alloc];
  OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithJavaUtilRegexPattern_withInt_(self, pattern, group);
  return self;
}

void OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withJavaUtilRegexPattern_withInt_(OrgApacheLuceneAnalysisPatternPatternTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory, JavaUtilRegexPattern *pattern, jint group) {
  OrgApacheLuceneAnalysisTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(self, factory);
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  JreStrongAssignAndConsume(&self->str_, new_JavaLangStringBuilder_init());
  JreStrongAssignAndConsume(&self->buffer_, [IOSCharArray newArrayWithLength:8192]);
  self->group_ = group;
  JreStrongAssign(&self->matcher_, [((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:@""]);
  if (group >= 0 && group > [((JavaUtilRegexMatcher *) nil_chk(self->matcher_)) groupCount]) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"invalid group specified: pattern only has: ", [self->matcher_ groupCount], @" capturing groups")) autorelease];
  }
}

OrgApacheLuceneAnalysisPatternPatternTokenizer *new_OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withJavaUtilRegexPattern_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, JavaUtilRegexPattern *pattern, jint group) {
  OrgApacheLuceneAnalysisPatternPatternTokenizer *self = [OrgApacheLuceneAnalysisPatternPatternTokenizer alloc];
  OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withJavaUtilRegexPattern_withInt_(self, factory, pattern, group);
  return self;
}

void OrgApacheLuceneAnalysisPatternPatternTokenizer_fillBufferWithJavaLangStringBuilder_withJavaIoReader_(OrgApacheLuceneAnalysisPatternPatternTokenizer *self, JavaLangStringBuilder *sb, JavaIoReader *input) {
  jint len;
  [((JavaLangStringBuilder *) nil_chk(sb)) setLengthWithInt:0];
  while ((len = [((JavaIoReader *) nil_chk(input)) readWithCharArray:self->buffer_]) > 0) {
    [sb appendWithCharArray:self->buffer_ withInt:0 withInt:len];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisPatternPatternTokenizer)
