//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/Collections.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/DelegatingAnalyzerWrapper.h"
#include "org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper.h"

@interface OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper () {
 @public
  OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer_;
  id<JavaUtilMap> fieldAnalyzers_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper, defaultAnalyzer_, OrgApacheLuceneAnalysisAnalyzer *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper, fieldAnalyzers_, id<JavaUtilMap>)

@implementation OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper

- (instancetype)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)defaultAnalyzer {
  OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_(self, defaultAnalyzer);
  return self;
}

- (instancetype)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)defaultAnalyzer
                                        withJavaUtilMap:(id<JavaUtilMap>)fieldAnalyzers {
  OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(self, defaultAnalyzer, fieldAnalyzers);
  return self;
}

- (OrgApacheLuceneAnalysisAnalyzer *)getWrappedAnalyzerWithNSString:(NSString *)fieldName {
  OrgApacheLuceneAnalysisAnalyzer *analyzer = [((id<JavaUtilMap>) nil_chk(fieldAnalyzers_)) getWithId:fieldName];
  return (analyzer != nil) ? analyzer : defaultAnalyzer_;
}

- (NSString *)description {
  return JreStrcat("$@$@C", @"PerFieldAnalyzerWrapper(", fieldAnalyzers_, @", default=", defaultAnalyzer_, ')');
}

- (void)dealloc {
  RELEASE_(defaultAnalyzer_);
  RELEASE_(fieldAnalyzers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneAnalysisAnalyzer:", "PerFieldAnalyzerWrapper", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheLuceneAnalysisAnalyzer:withJavaUtilMap:", "PerFieldAnalyzerWrapper", NULL, 0x1, NULL, "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;>;)V" },
    { "getWrappedAnalyzerWithNSString:", "getWrappedAnalyzer", "Lorg.apache.lucene.analysis.Analyzer;", 0x4, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defaultAnalyzer_", NULL, 0x12, "Lorg.apache.lucene.analysis.Analyzer;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldAnalyzers_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper = { 2, "PerFieldAnalyzerWrapper", "org.apache.lucene.analysis.miscellaneous", NULL, 0x11, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper;
}

@end

void OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper *self, OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer) {
  OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(self, defaultAnalyzer, nil);
}

OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper *new_OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper, initWithOrgApacheLuceneAnalysisAnalyzer_, defaultAnalyzer)
}

OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper *create_OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper, initWithOrgApacheLuceneAnalysisAnalyzer_, defaultAnalyzer)
}

void OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper *self, OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer, id<JavaUtilMap> fieldAnalyzers) {
  OrgApacheLuceneAnalysisDelegatingAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_ReuseStrategy_(self, JreLoadStatic(OrgApacheLuceneAnalysisAnalyzer, PER_FIELD_REUSE_STRATEGY));
  JreStrongAssign(&self->defaultAnalyzer_, defaultAnalyzer);
  JreStrongAssign(&self->fieldAnalyzers_, (fieldAnalyzers != nil) ? fieldAnalyzers : JavaUtilCollections_emptyMap());
}

OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper *new_OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer, id<JavaUtilMap> fieldAnalyzers) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper, initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_, defaultAnalyzer, fieldAnalyzers)
}

OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper *create_OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer, id<JavaUtilMap> fieldAnalyzers) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper, initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_, defaultAnalyzer, fieldAnalyzers)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper)
