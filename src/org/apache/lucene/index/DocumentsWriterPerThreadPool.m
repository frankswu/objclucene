//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "org/apache/lucene/index/DocumentsWriter.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/DocumentsWriterPerThreadPool.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"

@interface OrgApacheLuceneIndexDocumentsWriterPerThreadPool () {
 @public
  id<JavaUtilList> threadStates_;
  id<JavaUtilList> freeList_;
  jboolean aborted_;
}

- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)newThreadState OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThreadPool, threadStates_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThreadPool, freeList_, id<JavaUtilList>)

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *OrgApacheLuceneIndexDocumentsWriterPerThreadPool_newThreadState(OrgApacheLuceneIndexDocumentsWriterPerThreadPool *self);

@interface OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState ()

- (void)reset;

@end

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_reset(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *self);

@implementation OrgApacheLuceneIndexDocumentsWriterPerThreadPool

- (jint)getActiveThreadStateCount {
  @synchronized(self) {
    return [((id<JavaUtilList>) nil_chk(threadStates_)) size];
  }
}

- (void)setAbort {
  @synchronized(self) {
    aborted_ = true;
  }
}

- (void)clearAbort {
  @synchronized(self) {
    aborted_ = false;
    [self notifyAll];
  }
}

- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)newThreadState {
  return OrgApacheLuceneIndexDocumentsWriterPerThreadPool_newThreadState(self);
}

- (OrgApacheLuceneIndexDocumentsWriterPerThread *)resetWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)threadState {
  JreAssert(([((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(threadState)) isHeldByCurrentThread]), (@"org/apache/lucene/index/DocumentsWriterPerThreadPool.java:155 condition failed: assert threadState.isHeldByCurrentThread();"));
  OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt = threadState->dwpt_;
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_reset(threadState);
  return dwpt;
}

- (void)recycleWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)dwpt {
}

- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)getAndLockWithJavaLangThread:(JavaLangThread *)requestingThread
                                                       withOrgApacheLuceneIndexDocumentsWriter:(OrgApacheLuceneIndexDocumentsWriter *)documentsWriter {
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *threadState = nil;
  @synchronized(self) {
    if ([((id<JavaUtilList>) nil_chk(freeList_)) isEmpty]) {
      return OrgApacheLuceneIndexDocumentsWriterPerThreadPool_newThreadState(self);
    }
    else {
      threadState = [freeList_ removeWithInt:[freeList_ size] - 1];
      if (((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(threadState))->dwpt_ == nil) {
        for (jint i = 0; i < [freeList_ size]; i++) {
          OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *ts = [freeList_ getWithInt:i];
          if (((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(ts))->dwpt_ != nil) {
            [freeList_ setWithInt:i withId:threadState];
            threadState = ts;
            break;
          }
        }
      }
    }
  }
  [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(threadState)) lock];
  return threadState;
}

- (void)release__WithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)state {
  [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(state)) unlock];
  @synchronized(self) {
    [((id<JavaUtilList>) nil_chk(freeList_)) addWithId:state];
    [self notifyAll];
  }
}

- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)getThreadStateWithInt:(jint)ord {
  @synchronized(self) {
    return [((id<JavaUtilList>) nil_chk(threadStates_)) getWithInt:ord];
  }
}

- (jint)getMaxThreadStates {
  @synchronized(self) {
    return [((id<JavaUtilList>) nil_chk(threadStates_)) size];
  }
}

- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)minContendedThreadState {
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *minThreadState = nil;
  for (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState * __strong state in nil_chk(threadStates_)) {
    if (minThreadState == nil || [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(state)) getQueueLength] < [minThreadState getQueueLength]) {
      minThreadState = state;
    }
  }
  return minThreadState;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(threadStates_);
  RELEASE_(freeList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getActiveThreadStateCount", NULL, "I", 0x20, NULL, NULL },
    { "setAbort", NULL, "V", 0x20, NULL, NULL },
    { "clearAbort", NULL, "V", 0x20, NULL, NULL },
    { "newThreadState", NULL, "Lorg.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState;", 0x22, NULL, NULL },
    { "resetWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:", "reset", "Lorg.apache.lucene.index.DocumentsWriterPerThread;", 0x0, NULL, NULL },
    { "recycleWithOrgApacheLuceneIndexDocumentsWriterPerThread:", "recycle", "V", 0x0, NULL, NULL },
    { "getAndLockWithJavaLangThread:withOrgApacheLuceneIndexDocumentsWriter:", "getAndLock", "Lorg.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState;", 0x0, NULL, NULL },
    { "release__WithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:", "release", "V", 0x0, NULL, NULL },
    { "getThreadStateWithInt:", "getThreadState", "Lorg.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState;", 0x20, NULL, NULL },
    { "getMaxThreadStates", NULL, "I", 0x20, NULL, NULL },
    { "minContendedThreadState", NULL, "Lorg.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState;", 0x0, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "threadStates_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/index/DocumentsWriterPerThreadPool$ThreadState;>;", .constantValue.asLong = 0 },
    { "freeList_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/index/DocumentsWriterPerThreadPool$ThreadState;>;", .constantValue.asLong = 0 },
    { "aborted_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState;"};
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterPerThreadPool = { 2, "DocumentsWriterPerThreadPool", "org.apache.lucene.index", NULL, 0x10, 12, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneIndexDocumentsWriterPerThreadPool;
}

@end

OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *OrgApacheLuceneIndexDocumentsWriterPerThreadPool_newThreadState(OrgApacheLuceneIndexDocumentsWriterPerThreadPool *self) {
  @synchronized(self) {
    while (self->aborted_) {
      @try {
        [self wait];
      }
      @catch (JavaLangInterruptedException *ie) {
        @throw [new_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie) autorelease];
      }
    }
    OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *threadState = [new_OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_(nil) autorelease];
    [threadState lock];
    [((id<JavaUtilList>) nil_chk(self->threadStates_)) addWithId:threadState];
    return threadState;
  }
}

void OrgApacheLuceneIndexDocumentsWriterPerThreadPool_init(OrgApacheLuceneIndexDocumentsWriterPerThreadPool *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->threadStates_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->freeList_, new_JavaUtilArrayList_init());
}

OrgApacheLuceneIndexDocumentsWriterPerThreadPool *new_OrgApacheLuceneIndexDocumentsWriterPerThreadPool_init() {
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool *self = [OrgApacheLuceneIndexDocumentsWriterPerThreadPool alloc];
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterPerThreadPool)

@implementation OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)dpwt {
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_(self, dpwt);
  return self;
}

- (void)reset {
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_reset(self);
}

- (jboolean)isInitialized {
  JreAssert(([self isHeldByCurrentThread]), (@"org/apache/lucene/index/DocumentsWriterPerThreadPool.java:76 condition failed: assert this.isHeldByCurrentThread();"));
  return dwpt_ != nil;
}

- (jlong)getBytesUsedPerThread {
  JreAssert(([self isHeldByCurrentThread]), (@"org/apache/lucene/index/DocumentsWriterPerThreadPool.java:85 condition failed: assert this.isHeldByCurrentThread();"));
  return bytesUsed_;
}

- (OrgApacheLuceneIndexDocumentsWriterPerThread *)getDocumentsWriterPerThread {
  JreAssert(([self isHeldByCurrentThread]), (@"org/apache/lucene/index/DocumentsWriterPerThreadPool.java:94 condition failed: assert this.isHeldByCurrentThread();"));
  return dwpt_;
}

- (jboolean)isFlushPending {
  return JreLoadVolatileBoolean(&flushPending_);
}

- (void)dealloc {
  RELEASE_(dwpt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexDocumentsWriterPerThread:", "ThreadState", NULL, 0x0, NULL, NULL },
    { "reset", NULL, "V", 0x2, NULL, NULL },
    { "isInitialized", NULL, "Z", 0x0, NULL, NULL },
    { "getBytesUsedPerThread", NULL, "J", 0x1, NULL, NULL },
    { "getDocumentsWriterPerThread", NULL, "Lorg.apache.lucene.index.DocumentsWriterPerThread;", 0x1, NULL, NULL },
    { "isFlushPending", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dwpt_", NULL, 0x0, "Lorg.apache.lucene.index.DocumentsWriterPerThread;", NULL, NULL, .constantValue.asLong = 0 },
    { "flushPending_", NULL, 0x40, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "bytesUsed_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState = { 2, "ThreadState", "org.apache.lucene.index", "DocumentsWriterPerThreadPool", 0x18, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState;
}

@end

void OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *self, OrgApacheLuceneIndexDocumentsWriterPerThread *dpwt) {
  JavaUtilConcurrentLocksReentrantLock_init(self);
  JreAssignVolatileBoolean(&self->flushPending_, false);
  self->bytesUsed_ = 0;
  JreStrongAssign(&self->dwpt_, dpwt);
}

OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *new_OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_(OrgApacheLuceneIndexDocumentsWriterPerThread *dpwt) {
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *self = [OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState alloc];
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_(self, dpwt);
  return self;
}

void OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_reset(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *self) {
  JreAssert(([self isHeldByCurrentThread]), (@"org/apache/lucene/index/DocumentsWriterPerThreadPool.java:69 condition failed: assert this.isHeldByCurrentThread();"));
  JreStrongAssign(&self->dwpt_, nil);
  self->bytesUsed_ = 0;
  JreAssignVolatileBoolean(&self->flushPending_, false);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState)
