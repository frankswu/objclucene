//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/Term.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/CharacterCodingException.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetDecoder.h"
#include "java/nio/charset/CodingErrorAction.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/lukhnos/portmobile/charset/StandardCharsets.h"

__attribute__((unused)) static NSString *OrgApacheLuceneIndexTerm_text(OrgApacheLuceneIndexTerm *self);

@implementation OrgApacheLuceneIndexTerm

- (instancetype)initWithNSString:(NSString *)fld
 withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes {
  OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(self, fld, bytes);
  return self;
}

- (instancetype)initWithNSString:(NSString *)fld
                    withNSString:(NSString *)text {
  OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(self, fld, text);
  return self;
}

- (instancetype)initWithNSString:(NSString *)fld {
  OrgApacheLuceneIndexTerm_initWithNSString_(self, fld);
  return self;
}

- (NSString *)field {
  return field_;
}

- (NSString *)text {
  return OrgApacheLuceneIndexTerm_text(self);
}

+ (NSString *)toStringWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)termText {
  return OrgApacheLuceneIndexTerm_toStringWithOrgApacheLuceneUtilBytesRef_(termText);
}

- (OrgApacheLuceneUtilBytesRef *)bytes {
  return bytes_;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return YES;
  if (obj == nil) return NO;
  if ([self getClass] != [nil_chk(obj) getClass]) return NO;
  OrgApacheLuceneIndexTerm *other = (OrgApacheLuceneIndexTerm *) check_class_cast(obj, [OrgApacheLuceneIndexTerm class]);
  if (field_ == nil) {
    if (other->field_ != nil) return NO;
  }
  else if (![field_ isEqual:other->field_]) return NO;
  if (bytes_ == nil) {
    if (other->bytes_ != nil) return NO;
  }
  else if (![bytes_ isEqual:other->bytes_]) return NO;
  return YES;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + ((field_ == nil) ? 0 : ((jint) [field_ hash]));
  result = prime * result + ((bytes_ == nil) ? 0 : ((jint) [bytes_ hash]));
  return result;
}

- (jint)compareToWithId:(OrgApacheLuceneIndexTerm *)other {
  check_class_cast(other, [OrgApacheLuceneIndexTerm class]);
  if ([((NSString *) nil_chk(field_)) isEqual:((OrgApacheLuceneIndexTerm *) nil_chk(other))->field_]) {
    return [((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes_)) compareToWithId:other->bytes_];
  }
  else {
    return [field_ compareToWithId:other->field_];
  }
}

- (NSString *)description {
  return JreStrcat("$C$", field_, ':', OrgApacheLuceneIndexTerm_text(self));
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(bytes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withOrgApacheLuceneUtilBytesRef:", "Term", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withNSString:", "Term", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "Term", NULL, 0x1, NULL, NULL },
    { "field", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "text", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toStringWithOrgApacheLuceneUtilBytesRef:", "toString", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "bytes", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x11, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x11, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "field_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "bytes_", NULL, 0x0, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTerm = { 2, "Term", "org.apache.lucene.index", NULL, 0x11, 11, methods, 2, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/index/Term;>;" };
  return &_OrgApacheLuceneIndexTerm;
}

@end

void OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexTerm *self, NSString *fld, OrgApacheLuceneUtilBytesRef *bytes) {
  NSObject_init(self);
  JreStrongAssign(&self->field_, fld);
  JreStrongAssign(&self->bytes_, bytes);
}

OrgApacheLuceneIndexTerm *new_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(NSString *fld, OrgApacheLuceneUtilBytesRef *bytes) {
  OrgApacheLuceneIndexTerm *self = [OrgApacheLuceneIndexTerm alloc];
  OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(self, fld, bytes);
  return self;
}

void OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(OrgApacheLuceneIndexTerm *self, NSString *fld, NSString *text) {
  OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(self, fld, [new_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(text) autorelease]);
}

OrgApacheLuceneIndexTerm *new_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(NSString *fld, NSString *text) {
  OrgApacheLuceneIndexTerm *self = [OrgApacheLuceneIndexTerm alloc];
  OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(self, fld, text);
  return self;
}

void OrgApacheLuceneIndexTerm_initWithNSString_(OrgApacheLuceneIndexTerm *self, NSString *fld) {
  OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(self, fld, [new_OrgApacheLuceneUtilBytesRef_init() autorelease]);
}

OrgApacheLuceneIndexTerm *new_OrgApacheLuceneIndexTerm_initWithNSString_(NSString *fld) {
  OrgApacheLuceneIndexTerm *self = [OrgApacheLuceneIndexTerm alloc];
  OrgApacheLuceneIndexTerm_initWithNSString_(self, fld);
  return self;
}

NSString *OrgApacheLuceneIndexTerm_text(OrgApacheLuceneIndexTerm *self) {
  return OrgApacheLuceneIndexTerm_toStringWithOrgApacheLuceneUtilBytesRef_(self->bytes_);
}

NSString *OrgApacheLuceneIndexTerm_toStringWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *termText) {
  OrgApacheLuceneIndexTerm_initialize();
  JavaNioCharsetCharsetDecoder *decoder = [((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharset *) nil_chk(JreLoadStatic(OrgLukhnosPortmobileCharsetStandardCharsets, UTF_8_))) newDecoder])) onMalformedInputWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPORT_)])) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPORT_)];
  @try {
    return [((JavaNioCharBuffer *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk(decoder)) decodeWithJavaNioByteBuffer:JavaNioByteBuffer_wrapWithByteArray_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk(termText))->bytes_, termText->offset_, termText->length_)])) description];
  }
  @catch (JavaNioCharsetCharacterCodingException *e) {
    return [((OrgApacheLuceneUtilBytesRef *) nil_chk(termText)) description];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTerm)
