//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/CompositeReader.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "org/apache/lucene/index/IndexReader.h"

@interface OrgApacheLuceneIndexCompositeReader () {
 @public
  volatile_id readerContext_;
}

@end

@implementation OrgApacheLuceneIndexCompositeReader

- (instancetype)init {
  OrgApacheLuceneIndexCompositeReader_init(self);
  return self;
}

- (NSString *)description {
  JavaLangStringBuilder *buffer = [new_JavaLangStringBuilder_init() autorelease];
  for (IOSClass *clazz = [self getClass]; clazz != nil; clazz = [clazz getSuperclass]) {
    if (![clazz isAnonymousClass]) {
      [buffer appendWithNSString:[clazz getSimpleName]];
      break;
    }
  }
  [buffer appendWithChar:'('];
  id<JavaUtilList> subReaders = [self getSequentialSubReaders];
  JreAssert((subReaders != nil), (@"org/apache/lucene/index/CompositeReader.java:81 condition failed: assert subReaders != null;"));
  if (![((id<JavaUtilList>) nil_chk(subReaders)) isEmpty]) {
    [buffer appendWithId:[subReaders getWithInt:0]];
    for (jint i = 1, c = [subReaders size]; i < c; ++i) {
      [((JavaLangStringBuilder *) nil_chk([buffer appendWithNSString:@" "])) appendWithId:[subReaders getWithInt:i]];
    }
  }
  [buffer appendWithChar:')'];
  return [buffer description];
}

- (id<JavaUtilList>)getSequentialSubReaders {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneIndexCompositeReaderContext *)getContext {
  [self ensureOpen];
  if (JreLoadVolatileId(&readerContext_) == nil) {
    JreAssert(([self getSequentialSubReaders] != nil), (@"org/apache/lucene/index/CompositeReader.java:108 condition failed: assert getSequentialSubReaders() != null;"));
    JreAssignVolatileId(&readerContext_, OrgApacheLuceneIndexCompositeReaderContext_createWithOrgApacheLuceneIndexCompositeReader_(self));
  }
  return JreLoadVolatileId(&readerContext_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CompositeReader", NULL, 0x4, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getSequentialSubReaders", NULL, "Ljava.util.List;", 0x404, NULL, NULL },
    { "getContext", NULL, "Lorg.apache.lucene.index.CompositeReaderContext;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "readerContext_", NULL, 0x42, "Lorg.apache.lucene.index.CompositeReaderContext;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCompositeReader = { 2, "CompositeReader", "org.apache.lucene.index", NULL, 0x401, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexCompositeReader;
}

@end

void OrgApacheLuceneIndexCompositeReader_init(OrgApacheLuceneIndexCompositeReader *self) {
  OrgApacheLuceneIndexIndexReader_init(self);
  JreAssignVolatileId(&self->readerContext_, nil);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCompositeReader)
