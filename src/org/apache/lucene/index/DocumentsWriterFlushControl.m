//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/apache/lucene/index/BufferedUpdatesStream.h"
#include "org/apache/lucene/index/DocumentsWriter.h"
#include "org/apache/lucene/index/DocumentsWriterDeleteQueue.h"
#include "org/apache/lucene/index/DocumentsWriterFlushControl.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/DocumentsWriterPerThreadPool.h"
#include "org/apache/lucene/index/DocumentsWriterStallControl.h"
#include "org/apache/lucene/index/FlushPolicy.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"

@interface OrgApacheLuceneIndexDocumentsWriterFlushControl () {
 @public
  jlong hardMaxBytesPerDWPT_;
  jlong activeBytes_;
  jlong flushBytes_;
  volatile_jint numPending_;
  jint numDocsSinceStalled_;
  jboolean fullFlush_;
  id<JavaUtilQueue> flushQueue_;
  id<JavaUtilQueue> blockedFlushes_;
  JavaUtilIdentityHashMap *flushingWriters_;
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool *perThreadPool_;
  OrgApacheLuceneIndexFlushPolicy *flushPolicy_;
  jboolean closed_;
  __weak OrgApacheLuceneIndexDocumentsWriter *documentsWriter_;
  OrgApacheLuceneIndexLiveIndexWriterConfig *config_;
  OrgApacheLuceneIndexBufferedUpdatesStream *bufferedUpdatesStream_;
  OrgApacheLuceneUtilInfoStream *infoStream_;
  id<JavaUtilList> fullFlushBuffer_;
}

- (jlong)stallLimitBytes;

- (jboolean)assertMemory;

- (void)commitPerThreadBytesWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread;

- (jboolean)updatePeaksWithLong:(jlong)delta;

- (jboolean)assertNumDocsSinceStalledWithBoolean:(jboolean)stalled;

- (jboolean)updateStallState;

- (void)checkoutAndBlockWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread;

- (OrgApacheLuceneIndexDocumentsWriterPerThread *)internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread;

- (id<JavaUtilIterator>)getPerThreadsIteratorWithInt:(jint)upto;

- (jboolean)assertActiveDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)queue;

- (void)pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)flushingQueue;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, flushQueue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, blockedFlushes_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, flushingWriters_, JavaUtilIdentityHashMap *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, perThreadPool_, OrgApacheLuceneIndexDocumentsWriterPerThreadPool *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, flushPolicy_, OrgApacheLuceneIndexFlushPolicy *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, config_, OrgApacheLuceneIndexLiveIndexWriterConfig *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, bufferedUpdatesStream_, OrgApacheLuceneIndexBufferedUpdatesStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, infoStream_, OrgApacheLuceneUtilInfoStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, fullFlushBuffer_, id<JavaUtilList>)

__attribute__((unused)) static jlong OrgApacheLuceneIndexDocumentsWriterFlushControl_stallLimitBytes(OrgApacheLuceneIndexDocumentsWriterFlushControl *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_assertMemory(OrgApacheLuceneIndexDocumentsWriterFlushControl *self);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterFlushControl_commitPerThreadBytesWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_updatePeaksWithLong_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, jlong delta);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_assertNumDocsSinceStalledWithBoolean_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, jboolean stalled);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(OrgApacheLuceneIndexDocumentsWriterFlushControl *self);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterFlushControl_checkoutAndBlockWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterPerThread *OrgApacheLuceneIndexDocumentsWriterFlushControl_internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread);

__attribute__((unused)) static id<JavaUtilIterator> OrgApacheLuceneIndexDocumentsWriterFlushControl_getPerThreadsIteratorWithInt_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, jint upto);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_assertActiveDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *queue);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterFlushControl_pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *flushingQueue);

@interface OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush : NSObject {
 @public
  OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt_;
  jlong bytes_;
}

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)dwpt
                                                            withLong:(jlong)bytes;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush, dwpt_, OrgApacheLuceneIndexDocumentsWriterPerThread *)

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *self, OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt, jlong bytes);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *new_OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt, jlong bytes) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush)

@interface OrgApacheLuceneIndexDocumentsWriterFlushControl_$1 : NSObject < JavaUtilIterator > {
 @public
  OrgApacheLuceneIndexDocumentsWriterFlushControl *this$0_;
  jint i_;
  jint val$upto_;
}

- (jboolean)hasNext;

- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)next;

- (void)remove;

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriterFlushControl:(OrgApacheLuceneIndexDocumentsWriterFlushControl *)outer$
                                                                withInt:(jint)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDocumentsWriterFlushControl_$1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl_$1, this$0_, OrgApacheLuceneIndexDocumentsWriterFlushControl *)

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterFlushControl_$1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(OrgApacheLuceneIndexDocumentsWriterFlushControl_$1 *self, OrgApacheLuceneIndexDocumentsWriterFlushControl *outer$, jint capture$0);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterFlushControl_$1 *new_OrgApacheLuceneIndexDocumentsWriterFlushControl_$1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(OrgApacheLuceneIndexDocumentsWriterFlushControl *outer$, jint capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexDocumentsWriterFlushControl_$1)

@implementation OrgApacheLuceneIndexDocumentsWriterFlushControl

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriter:(OrgApacheLuceneIndexDocumentsWriter *)documentsWriter
              withOrgApacheLuceneIndexLiveIndexWriterConfig:(OrgApacheLuceneIndexLiveIndexWriterConfig *)config
              withOrgApacheLuceneIndexBufferedUpdatesStream:(OrgApacheLuceneIndexBufferedUpdatesStream *)bufferedUpdatesStream {
  OrgApacheLuceneIndexDocumentsWriterFlushControl_initWithOrgApacheLuceneIndexDocumentsWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneIndexBufferedUpdatesStream_(self, documentsWriter, config, bufferedUpdatesStream);
  return self;
}

- (jlong)activeBytes {
  @synchronized(self) {
    return activeBytes_;
  }
}

- (jlong)flushBytes {
  @synchronized(self) {
    return flushBytes_;
  }
}

- (jlong)netBytes {
  @synchronized(self) {
    return flushBytes_ + activeBytes_;
  }
}

- (jlong)stallLimitBytes {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_stallLimitBytes(self);
}

- (jboolean)assertMemory {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_assertMemory(self);
}

- (void)commitPerThreadBytesWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread {
  OrgApacheLuceneIndexDocumentsWriterFlushControl_commitPerThreadBytesWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
}

- (jboolean)updatePeaksWithLong:(jlong)delta {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_updatePeaksWithLong_(self, delta);
}

- (OrgApacheLuceneIndexDocumentsWriterPerThread *)doAfterDocumentWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread
                                                                                                                      withBoolean:(jboolean)isUpdate {
  @synchronized(self) {
    @try {
      OrgApacheLuceneIndexDocumentsWriterFlushControl_commitPerThreadBytesWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
      if (!JreLoadVolatileBoolean(&((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread))->flushPending_)) {
        if (isUpdate) {
          [((OrgApacheLuceneIndexFlushPolicy *) nil_chk(flushPolicy_)) onUpdateWithOrgApacheLuceneIndexDocumentsWriterFlushControl:self withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
        }
        else {
          [((OrgApacheLuceneIndexFlushPolicy *) nil_chk(flushPolicy_)) onInsertWithOrgApacheLuceneIndexDocumentsWriterFlushControl:self withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
        }
        if (!JreLoadVolatileBoolean(&perThread->flushPending_) && perThread->bytesUsed_ > hardMaxBytesPerDWPT_) {
          [self setFlushPendingWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
        }
      }
      OrgApacheLuceneIndexDocumentsWriterPerThread *flushingDWPT;
      if (fullFlush_) {
        if (JreLoadVolatileBoolean(&perThread->flushPending_)) {
          OrgApacheLuceneIndexDocumentsWriterFlushControl_checkoutAndBlockWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
          flushingDWPT = [self nextPendingFlush];
        }
        else {
          flushingDWPT = nil;
        }
      }
      else {
        flushingDWPT = [self tryCheckoutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
      }
      return flushingDWPT;
    }
    @finally {
      jboolean stalled = OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
      JreAssert((OrgApacheLuceneIndexDocumentsWriterFlushControl_assertNumDocsSinceStalledWithBoolean_(self, stalled) && OrgApacheLuceneIndexDocumentsWriterFlushControl_assertMemory(self)), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:206 condition failed: assert assertNumDocsSinceStalled(stalled) && assertMemory();"));
    }
  }
}

- (jboolean)assertNumDocsSinceStalledWithBoolean:(jboolean)stalled {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_assertNumDocsSinceStalledWithBoolean_(self, stalled);
}

- (void)doAfterFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)dwpt {
  @synchronized(self) {
    JreAssert(([((JavaUtilIdentityHashMap *) nil_chk(flushingWriters_)) containsKeyWithId:dwpt]), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:227 condition failed: assert flushingWriters.containsKey(dwpt);"));
    @try {
      JavaLangLong *bytes = [flushingWriters_ removeWithId:dwpt];
      flushBytes_ -= [((JavaLangLong *) nil_chk(bytes)) longLongValue];
      [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) recycleWithOrgApacheLuceneIndexDocumentsWriterPerThread:dwpt];
      JreAssert((OrgApacheLuceneIndexDocumentsWriterFlushControl_assertMemory(self)), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:232 condition failed: assert assertMemory();"));
    }
    @finally {
      @try {
        OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
      }
      @finally {
        [self notifyAll];
      }
    }
  }
}

- (jboolean)updateStallState {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
}

- (void)waitForFlush {
  @synchronized(self) {
    while ([((JavaUtilIdentityHashMap *) nil_chk(flushingWriters_)) size] != 0) {
      @try {
        [self wait];
      }
      @catch (JavaLangInterruptedException *e) {
        @throw [new_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(e) autorelease];
      }
    }
  }
}

- (void)setFlushPendingWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread {
  @synchronized(self) {
    JreAssert((!JreLoadVolatileBoolean(&((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread))->flushPending_)), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:276 condition failed: assert !perThread.flushPending;"));
    if ([((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(perThread->dwpt_)) getNumDocsInRAM] > 0) {
      JreAssignVolatileBoolean(&perThread->flushPending_, YES);
      jlong bytes = perThread->bytesUsed_;
      flushBytes_ += bytes;
      activeBytes_ -= bytes;
      numPending_++;
      JreAssert((OrgApacheLuceneIndexDocumentsWriterFlushControl_assertMemory(self)), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:283 condition failed: assert assertMemory();"));
    }
  }
}

- (void)doOnAbortWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)state {
  @synchronized(self) {
    @try {
      if (JreLoadVolatileBoolean(&((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(state))->flushPending_)) {
        flushBytes_ -= state->bytesUsed_;
      }
      else {
        activeBytes_ -= state->bytesUsed_;
      }
      JreAssert((OrgApacheLuceneIndexDocumentsWriterFlushControl_assertMemory(self)), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:295 condition failed: assert assertMemory();"));
      [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) resetWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:state];
    }
    @finally {
      OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
    }
  }
}

- (OrgApacheLuceneIndexDocumentsWriterPerThread *)tryCheckoutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread {
  @synchronized(self) {
    return JreLoadVolatileBoolean(&((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread))->flushPending_) ? OrgApacheLuceneIndexDocumentsWriterFlushControl_internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread) : nil;
  }
}

- (void)checkoutAndBlockWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread {
  OrgApacheLuceneIndexDocumentsWriterFlushControl_checkoutAndBlockWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
}

- (OrgApacheLuceneIndexDocumentsWriterPerThread *)internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
}

- (NSString *)description {
  return JreStrcat("$J$JC", @"DocumentsWriterFlushControl [activeBytes=", activeBytes_, @", flushBytes=", flushBytes_, ']');
}

- (OrgApacheLuceneIndexDocumentsWriterPerThread *)nextPendingFlush {
  jint numPending;
  jboolean fullFlush;
  @synchronized(self) {
    OrgApacheLuceneIndexDocumentsWriterPerThread *poll;
    if ((poll = [((id<JavaUtilQueue>) nil_chk(flushQueue_)) poll]) != nil) {
      OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
      return poll;
    }
    fullFlush = self->fullFlush_;
    numPending = JreLoadVolatileInt(&self->numPending_);
  }
  if (numPending > 0 && !fullFlush) {
    jint limit = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) getActiveThreadStateCount];
    for (jint i = 0; i < limit && numPending > 0; i++) {
      OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *next = [perThreadPool_ getThreadStateWithInt:i];
      if (JreLoadVolatileBoolean(&((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(next))->flushPending_)) {
        OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt = [self tryCheckoutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:next];
        if (dwpt != nil) {
          return dwpt;
        }
      }
    }
  }
  return nil;
}

- (void)setClosed {
  @synchronized(self) {
    self->closed_ = YES;
  }
}

- (id<JavaUtilIterator>)allActiveThreadStates {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_getPerThreadsIteratorWithInt_(self, [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) getActiveThreadStateCount]);
}

- (id<JavaUtilIterator>)getPerThreadsIteratorWithInt:(jint)upto {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_getPerThreadsIteratorWithInt_(self, upto);
}

- (void)doOnDelete {
  @synchronized(self) {
    [((OrgApacheLuceneIndexFlushPolicy *) nil_chk(flushPolicy_)) onDeleteWithOrgApacheLuceneIndexDocumentsWriterFlushControl:self withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:nil];
  }
}

- (jint)getNumGlobalTermDeletes {
  return [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(JreLoadVolatileId(&((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_))->deleteQueue_))) numGlobalTermDeletes] + [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) numTerms];
}

- (jlong)getDeleteBytesUsed {
  return [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(JreLoadVolatileId(&((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_))->deleteQueue_))) ramBytesUsed] + [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) ramBytesUsed];
}

- (jlong)ramBytesUsed {
  return [self getDeleteBytesUsed] + [self netBytes];
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (jint)numFlushingDWPT {
  @synchronized(self) {
    return [((JavaUtilIdentityHashMap *) nil_chk(flushingWriters_)) size];
  }
}

- (jboolean)getAndResetApplyAllDeletes {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(flushDeletes_)) getAndSetWithBoolean:NO];
}

- (void)setApplyAllDeletes {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(flushDeletes_)) setWithBoolean:YES];
}

- (jint)numActiveDWPT {
  return [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(self->perThreadPool_)) getActiveThreadStateCount];
}

- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)obtainAndLock {
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) getAndLockWithJavaLangThread:JavaLangThread_currentThread() withOrgApacheLuceneIndexDocumentsWriter:documentsWriter_];
  jboolean success = NO;
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread)) isInitialized] && ((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(perThread->dwpt_))->deleteQueue_ != JreLoadVolatileId(&((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_))->deleteQueue_)) {
      [self addFlushableStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
    }
    success = YES;
    return perThread;
  }
  @finally {
    if (!success) {
      [perThreadPool_ release__WithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
    }
  }
}

- (void)markForFullFlush {
  OrgApacheLuceneIndexDocumentsWriterDeleteQueue *flushingQueue;
  @synchronized(self) {
    JreAssert((!fullFlush_), (@"called DWFC#markForFullFlush() while full flush is still running"));
    JreAssert(([((id<JavaUtilList>) nil_chk(fullFlushBuffer_)) isEmpty]), (JreStrcat("$@", @"full flush buffer should be empty: ", fullFlushBuffer_)));
    fullFlush_ = YES;
    flushingQueue = JreLoadVolatileId(&((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_))->deleteQueue_);
    OrgApacheLuceneIndexDocumentsWriterDeleteQueue *newQueue = [new_OrgApacheLuceneIndexDocumentsWriterDeleteQueue_initWithLong_(((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(flushingQueue))->generation_ + 1) autorelease];
    JreVolatileStrongAssign(&documentsWriter_->deleteQueue_, newQueue);
  }
  jint limit = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) getActiveThreadStateCount];
  for (jint i = 0; i < limit; i++) {
    OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *next = [perThreadPool_ getThreadStateWithInt:i];
    [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(next)) lock];
    @try {
      if (![next isInitialized]) {
        continue;
      }
      JreAssert((((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(next->dwpt_))->deleteQueue_ == flushingQueue || next->dwpt_->deleteQueue_ == JreLoadVolatileId(&documentsWriter_->deleteQueue_)), (JreStrcat("$@$@$@$I", @" flushingQueue: ", flushingQueue, @" currentqueue: ", JreLoadVolatileId(&documentsWriter_->deleteQueue_), @" perThread queue: ", next->dwpt_->deleteQueue_, @" numDocsInRam: ", [next->dwpt_ getNumDocsInRAM])));
      if (next->dwpt_->deleteQueue_ != flushingQueue) {
        continue;
      }
      [self addFlushableStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:next];
    }
    @finally {
      [next unlock];
    }
  }
  @synchronized(self) {
    OrgApacheLuceneIndexDocumentsWriterFlushControl_pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, flushingQueue);
    JreAssert(([self assertBlockedFlushesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:JreLoadVolatileId(&documentsWriter_->deleteQueue_)]), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:528 condition failed: assert assertBlockedFlushes(documentsWriter.deleteQueue);"));
    [((id<JavaUtilQueue>) nil_chk(flushQueue_)) addAllWithJavaUtilCollection:fullFlushBuffer_];
    [fullFlushBuffer_ clear];
    OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
  }
  JreAssert((OrgApacheLuceneIndexDocumentsWriterFlushControl_assertActiveDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, JreLoadVolatileId(&documentsWriter_->deleteQueue_))), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:533 condition failed: assert assertActiveDeleteQueue(documentsWriter.deleteQueue);"));
}

- (jboolean)assertActiveDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)queue {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_assertActiveDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, queue);
}

- (void)addFlushableStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread {
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWFC"]) {
    [infoStream_ messageWithNSString:@"DWFC" withNSString:JreStrcat("$@", @"addFlushableState ", ((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread))->dwpt_)];
  }
  OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt = ((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread))->dwpt_;
  JreAssert(([perThread isHeldByCurrentThread]), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:557 condition failed: assert perThread.isHeldByCurrentThread();"));
  JreAssert(([perThread isInitialized]), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:558 condition failed: assert perThread.isInitialized();"));
  JreAssert((fullFlush_), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:559 condition failed: assert fullFlush;"));
  JreAssert((((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(dwpt))->deleteQueue_ != JreLoadVolatileId(&((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_))->deleteQueue_)), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:560 condition failed: assert dwpt.deleteQueue != documentsWriter.deleteQueue;"));
  if ([dwpt getNumDocsInRAM] > 0) {
    @synchronized(self) {
      if (!JreLoadVolatileBoolean(&perThread->flushPending_)) {
        [self setFlushPendingWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
      }
      OrgApacheLuceneIndexDocumentsWriterPerThread *flushingDWPT = OrgApacheLuceneIndexDocumentsWriterFlushControl_internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
      JreAssert((flushingDWPT != nil), (@"DWPT must never be null here since we hold the lock and it holds documents"));
      JreAssert((dwpt == flushingDWPT), (@"flushControl returned different DWPT"));
      [((id<JavaUtilList>) nil_chk(fullFlushBuffer_)) addWithId:flushingDWPT];
    }
  }
  else {
    [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) resetWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
  }
}

- (void)pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)flushingQueue {
  OrgApacheLuceneIndexDocumentsWriterFlushControl_pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, flushingQueue);
}

- (void)finishFullFlush {
  @synchronized(self) {
    JreAssert((fullFlush_), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:595 condition failed: assert fullFlush;"));
    JreAssert(([((id<JavaUtilQueue>) nil_chk(flushQueue_)) isEmpty]), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:596 condition failed: assert flushQueue.isEmpty();"));
    JreAssert(([((JavaUtilIdentityHashMap *) nil_chk(flushingWriters_)) isEmpty]), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:597 condition failed: assert flushingWriters.isEmpty();"));
    @try {
      if (![((id<JavaUtilQueue>) nil_chk(blockedFlushes_)) isEmpty]) {
        JreAssert(([self assertBlockedFlushesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:JreLoadVolatileId(&((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_))->deleteQueue_)]), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:600 condition failed: assert assertBlockedFlushes(documentsWriter.deleteQueue);"));
        OrgApacheLuceneIndexDocumentsWriterFlushControl_pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, JreLoadVolatileId(&documentsWriter_->deleteQueue_));
        JreAssert(([blockedFlushes_ isEmpty]), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:602 condition failed: assert blockedFlushes.isEmpty();"));
      }
    }
    @finally {
      fullFlush_ = NO;
      OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
    }
  }
}

- (jboolean)assertBlockedFlushesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)flushingQueue {
  for (OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush * __strong blockedFlush in nil_chk(blockedFlushes_)) {
    JreAssert((((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *) nil_chk(blockedFlush))->dwpt_))->deleteQueue_ == flushingQueue), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:612 condition failed: assert blockedFlush.dwpt.deleteQueue == flushingQueue;"));
  }
  return YES;
}

- (void)abortFullFlushes {
  @synchronized(self) {
    @try {
      [self abortPendingFlushes];
    }
    @finally {
      fullFlush_ = NO;
    }
  }
}

- (void)abortPendingFlushes {
  @synchronized(self) {
    @try {
      for (OrgApacheLuceneIndexDocumentsWriterPerThread * __strong dwpt in nil_chk(flushQueue_)) {
        @try {
          [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_)) subtractFlushedNumDocsWithInt:[((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(dwpt)) getNumDocsInRAM]];
          [dwpt abort];
        }
        @catch (JavaLangThrowable *ex) {
        }
        @finally {
          [self doAfterFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread:dwpt];
        }
      }
      for (OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush * __strong blockedFlush in nil_chk(blockedFlushes_)) {
        @try {
          [((JavaUtilIdentityHashMap *) nil_chk(flushingWriters_)) putWithId:((OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *) nil_chk(blockedFlush))->dwpt_ withId:JavaLangLong_valueOfWithLong_(blockedFlush->bytes_)];
          [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_)) subtractFlushedNumDocsWithInt:[((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(blockedFlush->dwpt_)) getNumDocsInRAM]];
          [blockedFlush->dwpt_ abort];
        }
        @catch (JavaLangThrowable *ex) {
        }
        @finally {
          [self doAfterFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread:((OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *) nil_chk(blockedFlush))->dwpt_];
        }
      }
    }
    @finally {
      [((id<JavaUtilQueue>) nil_chk(flushQueue_)) clear];
      [((id<JavaUtilQueue>) nil_chk(blockedFlushes_)) clear];
      OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
    }
  }
}

- (jboolean)isFullFlush {
  @synchronized(self) {
    return fullFlush_;
  }
}

- (jint)numQueuedFlushes {
  @synchronized(self) {
    return [((id<JavaUtilQueue>) nil_chk(flushQueue_)) size];
  }
}

- (jint)numBlockedFlushes {
  @synchronized(self) {
    return [((id<JavaUtilQueue>) nil_chk(blockedFlushes_)) size];
  }
}

- (void)waitIfStalled {
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWFC"]) {
    [infoStream_ messageWithNSString:@"DWFC" withNSString:JreStrcat("$I$J$J$Z", @"waitIfStalled: numFlushesPending: ", [((id<JavaUtilQueue>) nil_chk(flushQueue_)) size], @" netBytes: ", [self netBytes], @" flushBytes: ", [self flushBytes], @" fullFlush: ", fullFlush_)];
  }
  [((OrgApacheLuceneIndexDocumentsWriterStallControl *) nil_chk(stallControl_)) waitIfStalled];
}

- (jboolean)anyStalledThreads {
  return [((OrgApacheLuceneIndexDocumentsWriterStallControl *) nil_chk(stallControl_)) anyStalledThreads];
}

- (OrgApacheLuceneUtilInfoStream *)getInfoStream {
  return infoStream_;
}

- (void)dealloc {
  RELEASE_(flushDeletes_);
  RELEASE_(flushQueue_);
  RELEASE_(blockedFlushes_);
  RELEASE_(flushingWriters_);
  RELEASE_(stallControl_);
  RELEASE_(perThreadPool_);
  RELEASE_(flushPolicy_);
  RELEASE_(config_);
  RELEASE_(bufferedUpdatesStream_);
  RELEASE_(infoStream_);
  RELEASE_(fullFlushBuffer_);
  [super dealloc];
}

- (void)__javaClone {
  [super __javaClone];
  [documentsWriter_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexDocumentsWriter:withOrgApacheLuceneIndexLiveIndexWriterConfig:withOrgApacheLuceneIndexBufferedUpdatesStream:", "DocumentsWriterFlushControl", NULL, 0x0, NULL, NULL },
    { "activeBytes", NULL, "J", 0x21, NULL, NULL },
    { "flushBytes", NULL, "J", 0x21, NULL, NULL },
    { "netBytes", NULL, "J", 0x21, NULL, NULL },
    { "stallLimitBytes", NULL, "J", 0x2, NULL, NULL },
    { "assertMemory", NULL, "Z", 0x2, NULL, NULL },
    { "commitPerThreadBytesWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:", "commitPerThreadBytes", "V", 0x2, NULL, NULL },
    { "updatePeaksWithLong:", "updatePeaks", "Z", 0x2, NULL, NULL },
    { "doAfterDocumentWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:withBoolean:", "doAfterDocument", "Lorg.apache.lucene.index.DocumentsWriterPerThread;", 0x20, NULL, NULL },
    { "assertNumDocsSinceStalledWithBoolean:", "assertNumDocsSinceStalled", "Z", 0x2, NULL, NULL },
    { "doAfterFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread:", "doAfterFlush", "V", 0x20, NULL, NULL },
    { "updateStallState", NULL, "Z", 0x2, NULL, NULL },
    { "waitForFlush", NULL, "V", 0x21, NULL, NULL },
    { "setFlushPendingWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:", "setFlushPending", "V", 0x21, NULL, NULL },
    { "doOnAbortWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:", "doOnAbort", "V", 0x20, NULL, NULL },
    { "tryCheckoutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:", "tryCheckoutForFlush", "Lorg.apache.lucene.index.DocumentsWriterPerThread;", 0x20, NULL, NULL },
    { "checkoutAndBlockWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:", "checkoutAndBlock", "V", 0x2, NULL, NULL },
    { "internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:", "internalTryCheckOutForFlush", "Lorg.apache.lucene.index.DocumentsWriterPerThread;", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "nextPendingFlush", NULL, "Lorg.apache.lucene.index.DocumentsWriterPerThread;", 0x0, NULL, NULL },
    { "setClosed", NULL, "V", 0x20, NULL, NULL },
    { "allActiveThreadStates", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "getPerThreadsIteratorWithInt:", "getPerThreadsIterator", "Ljava.util.Iterator;", 0x2, NULL, NULL },
    { "doOnDelete", NULL, "V", 0x20, NULL, NULL },
    { "getNumGlobalTermDeletes", NULL, "I", 0x1, NULL, NULL },
    { "getDeleteBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "getChildResources", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "numFlushingDWPT", NULL, "I", 0x20, NULL, NULL },
    { "getAndResetApplyAllDeletes", NULL, "Z", 0x1, NULL, NULL },
    { "setApplyAllDeletes", NULL, "V", 0x1, NULL, NULL },
    { "numActiveDWPT", NULL, "I", 0x0, NULL, NULL },
    { "obtainAndLock", NULL, "Lorg.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState;", 0x0, NULL, NULL },
    { "markForFullFlush", NULL, "V", 0x0, NULL, NULL },
    { "assertActiveDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:", "assertActiveDeleteQueue", "Z", 0x2, NULL, NULL },
    { "addFlushableStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:", "addFlushableState", "V", 0x0, NULL, NULL },
    { "pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:", "pruneBlockedQueue", "V", 0x2, NULL, NULL },
    { "finishFullFlush", NULL, "V", 0x20, NULL, NULL },
    { "assertBlockedFlushesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:", "assertBlockedFlushes", "Z", 0x0, NULL, NULL },
    { "abortFullFlushes", NULL, "V", 0x20, NULL, NULL },
    { "abortPendingFlushes", NULL, "V", 0x20, NULL, NULL },
    { "isFullFlush", NULL, "Z", 0x20, NULL, NULL },
    { "numQueuedFlushes", NULL, "I", 0x20, NULL, NULL },
    { "numBlockedFlushes", NULL, "I", 0x20, NULL, NULL },
    { "waitIfStalled", NULL, "V", 0x0, NULL, NULL },
    { "anyStalledThreads", NULL, "Z", 0x0, NULL, NULL },
    { "getInfoStream", NULL, "Lorg.apache.lucene.util.InfoStream;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hardMaxBytesPerDWPT_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "activeBytes_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "flushBytes_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "numPending_", NULL, 0x42, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "numDocsSinceStalled_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "flushDeletes_", NULL, 0x10, "Ljava.util.concurrent.atomic.AtomicBoolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "fullFlush_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "flushQueue_", NULL, 0x12, "Ljava.util.Queue;", NULL, "Ljava/util/Queue<Lorg/apache/lucene/index/DocumentsWriterPerThread;>;", .constantValue.asLong = 0 },
    { "blockedFlushes_", NULL, 0x12, "Ljava.util.Queue;", NULL, "Ljava/util/Queue<Lorg/apache/lucene/index/DocumentsWriterFlushControl$BlockedFlush;>;", .constantValue.asLong = 0 },
    { "flushingWriters_", NULL, 0x12, "Ljava.util.IdentityHashMap;", NULL, "Ljava/util/IdentityHashMap<Lorg/apache/lucene/index/DocumentsWriterPerThread;Ljava/lang/Long;>;", .constantValue.asLong = 0 },
    { "maxConfiguredRamBuffer_", NULL, 0x0, "D", NULL, NULL, .constantValue.asLong = 0 },
    { "peakActiveBytes_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "peakFlushBytes_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "peakNetBytes_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "peakDelta_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "flushByRAMWasDisabled_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "stallControl_", NULL, 0x10, "Lorg.apache.lucene.index.DocumentsWriterStallControl;", NULL, NULL, .constantValue.asLong = 0 },
    { "perThreadPool_", NULL, 0x12, "Lorg.apache.lucene.index.DocumentsWriterPerThreadPool;", NULL, NULL, .constantValue.asLong = 0 },
    { "flushPolicy_", NULL, 0x12, "Lorg.apache.lucene.index.FlushPolicy;", NULL, NULL, .constantValue.asLong = 0 },
    { "closed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "documentsWriter_", NULL, 0x12, "Lorg.apache.lucene.index.DocumentsWriter;", NULL, NULL, .constantValue.asLong = 0 },
    { "config_", NULL, 0x12, "Lorg.apache.lucene.index.LiveIndexWriterConfig;", NULL, NULL, .constantValue.asLong = 0 },
    { "bufferedUpdatesStream_", NULL, 0x12, "Lorg.apache.lucene.index.BufferedUpdatesStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "infoStream_", NULL, 0x12, "Lorg.apache.lucene.util.InfoStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "fullFlushBuffer_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/index/DocumentsWriterPerThread;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.index.DocumentsWriterFlushControl$BlockedFlush;"};
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterFlushControl = { 2, "DocumentsWriterFlushControl", "org.apache.lucene.index", NULL, 0x10, 47, methods, 25, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneIndexDocumentsWriterFlushControl;
}

@end

void OrgApacheLuceneIndexDocumentsWriterFlushControl_initWithOrgApacheLuceneIndexDocumentsWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneIndexBufferedUpdatesStream_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriter *documentsWriter, OrgApacheLuceneIndexLiveIndexWriterConfig *config, OrgApacheLuceneIndexBufferedUpdatesStream *bufferedUpdatesStream) {
  NSObject_init(self);
  self->activeBytes_ = 0;
  self->flushBytes_ = 0;
  JreAssignVolatileInt(&self->numPending_, 0);
  self->numDocsSinceStalled_ = 0;
  JreStrongAssignAndConsume(&self->flushDeletes_, new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(NO));
  self->fullFlush_ = NO;
  JreStrongAssignAndConsume(&self->flushQueue_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->blockedFlushes_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->flushingWriters_, new_JavaUtilIdentityHashMap_init());
  self->maxConfiguredRamBuffer_ = 0;
  self->peakActiveBytes_ = 0;
  self->peakFlushBytes_ = 0;
  self->peakNetBytes_ = 0;
  self->peakDelta_ = 0;
  self->closed_ = NO;
  JreStrongAssignAndConsume(&self->fullFlushBuffer_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->infoStream_, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config)) getInfoStream]);
  JreStrongAssignAndConsume(&self->stallControl_, new_OrgApacheLuceneIndexDocumentsWriterStallControl_initWithOrgApacheLuceneIndexLiveIndexWriterConfig_(config));
  JreStrongAssign(&self->perThreadPool_, ((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter))->perThreadPool_);
  JreStrongAssign(&self->flushPolicy_, documentsWriter->flushPolicy_);
  JreStrongAssign(&self->config_, config);
  self->hardMaxBytesPerDWPT_ = [config getRAMPerThreadHardLimitMB] * 1024 * 1024;
  self->documentsWriter_ = documentsWriter;
  JreStrongAssign(&self->bufferedUpdatesStream_, bufferedUpdatesStream);
}

OrgApacheLuceneIndexDocumentsWriterFlushControl *new_OrgApacheLuceneIndexDocumentsWriterFlushControl_initWithOrgApacheLuceneIndexDocumentsWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneIndexBufferedUpdatesStream_(OrgApacheLuceneIndexDocumentsWriter *documentsWriter, OrgApacheLuceneIndexLiveIndexWriterConfig *config, OrgApacheLuceneIndexBufferedUpdatesStream *bufferedUpdatesStream) {
  OrgApacheLuceneIndexDocumentsWriterFlushControl *self = [OrgApacheLuceneIndexDocumentsWriterFlushControl alloc];
  OrgApacheLuceneIndexDocumentsWriterFlushControl_initWithOrgApacheLuceneIndexDocumentsWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneIndexBufferedUpdatesStream_(self, documentsWriter, config, bufferedUpdatesStream);
  return self;
}

jlong OrgApacheLuceneIndexDocumentsWriterFlushControl_stallLimitBytes(OrgApacheLuceneIndexDocumentsWriterFlushControl *self) {
  jdouble maxRamMB = [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) getRAMBufferSizeMB];
  return maxRamMB != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH ? JreFpToLong((2 * (maxRamMB * 1024 * 1024))) : JavaLangLong_MAX_VALUE;
}

jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_assertMemory(OrgApacheLuceneIndexDocumentsWriterFlushControl *self) {
  jdouble maxRamMB = [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) getRAMBufferSizeMB];
  if (maxRamMB != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && self->flushByRAMWasDisabled_ == NO) {
    self->maxConfiguredRamBuffer_ = JavaLangMath_maxWithDouble_withDouble_(maxRamMB, self->maxConfiguredRamBuffer_);
    jlong ram = self->flushBytes_ + self->activeBytes_;
    jlong ramBufferBytes = JreFpToLong((self->maxConfiguredRamBuffer_ * 1024 * 1024));
    jlong expected = (2 * ramBufferBytes) + ((JreLoadVolatileInt(&self->numPending_) + [self numFlushingDWPT] + [self numBlockedFlushes]) * self->peakDelta_) + (self->numDocsSinceStalled_ * self->peakDelta_);
    if (self->peakDelta_ < (JreRShift64(ramBufferBytes, 1))) {
      JreAssert((ram <= expected), (JreStrcat("$J$J$J$J$I$I$I$J$J$D", @"actual mem: ", ram, @" byte, expected mem: ", expected, @" byte, flush mem: ", self->flushBytes_, @", active mem: ", self->activeBytes_, @", pending DWPT: ", JreLoadVolatileInt(&self->numPending_), @", flushing DWPT: ", [self numFlushingDWPT], @", blocked DWPT: ", [self numBlockedFlushes], @", peakDelta mem: ", self->peakDelta_, @" bytes, ramBufferBytes=", ramBufferBytes, @", maxConfiguredRamBuffer=", self->maxConfiguredRamBuffer_)));
    }
  }
  else {
    self->flushByRAMWasDisabled_ = YES;
  }
  return YES;
}

void OrgApacheLuceneIndexDocumentsWriterFlushControl_commitPerThreadBytesWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread) {
  jlong delta = [((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread))->dwpt_)) bytesUsed] - perThread->bytesUsed_;
  perThread->bytesUsed_ += delta;
  if (JreLoadVolatileBoolean(&perThread->flushPending_)) {
    self->flushBytes_ += delta;
  }
  else {
    self->activeBytes_ += delta;
  }
  JreAssert((OrgApacheLuceneIndexDocumentsWriterFlushControl_updatePeaksWithLong_(self, delta)), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:163 condition failed: assert updatePeaks(delta);"));
}

jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_updatePeaksWithLong_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, jlong delta) {
  self->peakActiveBytes_ = JavaLangMath_maxWithLong_withLong_(self->peakActiveBytes_, self->activeBytes_);
  self->peakFlushBytes_ = JavaLangMath_maxWithLong_withLong_(self->peakFlushBytes_, self->flushBytes_);
  self->peakNetBytes_ = JavaLangMath_maxWithLong_withLong_(self->peakNetBytes_, [self netBytes]);
  self->peakDelta_ = JavaLangMath_maxWithLong_withLong_(self->peakDelta_, delta);
  return YES;
}

jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_assertNumDocsSinceStalledWithBoolean_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, jboolean stalled) {
  if (stalled) {
    self->numDocsSinceStalled_++;
  }
  else {
    self->numDocsSinceStalled_ = 0;
  }
  return YES;
}

jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(OrgApacheLuceneIndexDocumentsWriterFlushControl *self) {
  JreAssert((JavaLangThread_holdsLockWithId_(self)), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:244 condition failed: assert Thread.holdsLock(this);"));
  jlong limit = OrgApacheLuceneIndexDocumentsWriterFlushControl_stallLimitBytes(self);
  jboolean stall = (self->activeBytes_ + self->flushBytes_) > limit && self->activeBytes_ < limit && !self->closed_;
  [((OrgApacheLuceneIndexDocumentsWriterStallControl *) nil_chk(self->stallControl_)) updateStalledWithBoolean:stall];
  return stall;
}

void OrgApacheLuceneIndexDocumentsWriterFlushControl_checkoutAndBlockWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread) {
  [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread)) lock];
  @try {
    JreAssert((JreLoadVolatileBoolean(&perThread->flushPending_)), (@"can not block non-pending threadstate"));
    JreAssert((self->fullFlush_), (@"can not block if fullFlush == false"));
    OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt;
    jlong bytes = perThread->bytesUsed_;
    dwpt = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(self->perThreadPool_)) resetWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
    self->numPending_--;
    [((id<JavaUtilQueue>) nil_chk(self->blockedFlushes_)) addWithId:[new_OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(dwpt, bytes) autorelease]];
  }
  @finally {
    [perThread unlock];
  }
}

OrgApacheLuceneIndexDocumentsWriterPerThread *OrgApacheLuceneIndexDocumentsWriterFlushControl_internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread) {
  JreAssert((JavaLangThread_holdsLockWithId_(self)), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:324 condition failed: assert Thread.holdsLock(this);"));
  JreAssert((JreLoadVolatileBoolean(&((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread))->flushPending_)), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:325 condition failed: assert perThread.flushPending;"));
  @try {
    if ([perThread tryLock]) {
      @try {
        if ([perThread isInitialized]) {
          JreAssert(([perThread isHeldByCurrentThread]), (@"org/apache/lucene/index/DocumentsWriterFlushControl.java:331 condition failed: assert perThread.isHeldByCurrentThread();"));
          OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt;
          jlong bytes = perThread->bytesUsed_;
          dwpt = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(self->perThreadPool_)) resetWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
          JreAssert((![((JavaUtilIdentityHashMap *) nil_chk(self->flushingWriters_)) containsKeyWithId:dwpt]), (@"DWPT is already flushing"));
          [self->flushingWriters_ putWithId:dwpt withId:JavaLangLong_valueOfWithLong_(bytes)];
          self->numPending_--;
          return dwpt;
        }
      }
      @finally {
        [perThread unlock];
      }
    }
    return nil;
  }
  @finally {
    OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
  }
}

id<JavaUtilIterator> OrgApacheLuceneIndexDocumentsWriterFlushControl_getPerThreadsIteratorWithInt_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, jint upto) {
  return [new_OrgApacheLuceneIndexDocumentsWriterFlushControl_$1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(self, upto) autorelease];
}

jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_assertActiveDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *queue) {
  jint limit = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(self->perThreadPool_)) getActiveThreadStateCount];
  for (jint i = 0; i < limit; i++) {
    OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *next = [self->perThreadPool_ getThreadStateWithInt:i];
    [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(next)) lock];
    @try {
      JreAssert((![next isInitialized] || ((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(next->dwpt_))->deleteQueue_ == queue), (JreStrcat("$Z$I", @"isInitialized: ", [next isInitialized], @" numDocs: ", ([next isInitialized] ? [((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(next->dwpt_)) getNumDocsInRAM] : 0))));
    }
    @finally {
      [next unlock];
    }
  }
  return YES;
}

void OrgApacheLuceneIndexDocumentsWriterFlushControl_pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *flushingQueue) {
  id<JavaUtilIterator> iterator = [((id<JavaUtilQueue>) nil_chk(self->blockedFlushes_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *blockedFlush = [iterator next];
    if (((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *) nil_chk(blockedFlush))->dwpt_))->deleteQueue_ == flushingQueue) {
      [iterator remove];
      JreAssert((![((JavaUtilIdentityHashMap *) nil_chk(self->flushingWriters_)) containsKeyWithId:blockedFlush->dwpt_]), (@"DWPT is already flushing"));
      [self->flushingWriters_ putWithId:blockedFlush->dwpt_ withId:JavaLangLong_valueOfWithLong_(blockedFlush->bytes_)];
      [((id<JavaUtilQueue>) nil_chk(self->flushQueue_)) addWithId:blockedFlush->dwpt_];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterFlushControl)

@implementation OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)dwpt
                                                            withLong:(jlong)bytes {
  OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(self, dwpt, bytes);
  return self;
}

- (void)dealloc {
  RELEASE_(dwpt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexDocumentsWriterPerThread:withLong:", "BlockedFlush", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dwpt_", NULL, 0x10, "Lorg.apache.lucene.index.DocumentsWriterPerThread;", NULL, NULL, .constantValue.asLong = 0 },
    { "bytes_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush = { 2, "BlockedFlush", "org.apache.lucene.index", "DocumentsWriterFlushControl", 0xa, 1, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush;
}

@end

void OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *self, OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt, jlong bytes) {
  NSObject_init(self);
  JreStrongAssign(&self->dwpt_, dwpt);
  self->bytes_ = bytes;
}

OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *new_OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt, jlong bytes) {
  OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *self = [OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush alloc];
  OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(self, dwpt, bytes);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush)

@implementation OrgApacheLuceneIndexDocumentsWriterFlushControl_$1

- (jboolean)hasNext {
  return i_ < val$upto_;
}

- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)next {
  return [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(this$0_->perThreadPool_)) getThreadStateWithInt:i_++];
}

- (void)remove {
  @throw [new_JavaLangUnsupportedOperationException_initWithNSString_(@"remove() not supported.") autorelease];
}

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriterFlushControl:(OrgApacheLuceneIndexDocumentsWriterFlushControl *)outer$
                                                                withInt:(jint)capture$0 {
  OrgApacheLuceneIndexDocumentsWriterFlushControl_$1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Lorg.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "initWithOrgApacheLuceneIndexDocumentsWriterFlushControl:withInt:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.index.DocumentsWriterFlushControl;", NULL, NULL, .constantValue.asLong = 0 },
    { "i_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "val$upto_", NULL, 0x1012, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheLuceneIndexDocumentsWriterFlushControl", "getPerThreadsIteratorWithInt:" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterFlushControl_$1 = { 2, "", "org.apache.lucene.index", "DocumentsWriterFlushControl", 0x8008, 4, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Iterator<Lorg/apache/lucene/index/DocumentsWriterPerThreadPool$ThreadState;>;" };
  return &_OrgApacheLuceneIndexDocumentsWriterFlushControl_$1;
}

@end

void OrgApacheLuceneIndexDocumentsWriterFlushControl_$1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(OrgApacheLuceneIndexDocumentsWriterFlushControl_$1 *self, OrgApacheLuceneIndexDocumentsWriterFlushControl *outer$, jint capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$upto_ = capture$0;
  NSObject_init(self);
  self->i_ = 0;
}

OrgApacheLuceneIndexDocumentsWriterFlushControl_$1 *new_OrgApacheLuceneIndexDocumentsWriterFlushControl_$1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(OrgApacheLuceneIndexDocumentsWriterFlushControl *outer$, jint capture$0) {
  OrgApacheLuceneIndexDocumentsWriterFlushControl_$1 *self = [OrgApacheLuceneIndexDocumentsWriterFlushControl_$1 alloc];
  OrgApacheLuceneIndexDocumentsWriterFlushControl_$1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterFlushControl_$1)
