//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/LogMergePolicy.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/LogMergePolicy.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/util/InfoStream.h"

@interface OrgApacheLuceneIndexLogMergePolicy ()

- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findForcedMergesSizeLimitWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                                                              withInt:(jint)maxNumSegments
                                                                                                              withInt:(jint)last
                                                                                  withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer;

- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findForcedMergesMaxNumSegmentsWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                                                                   withInt:(jint)maxNumSegments
                                                                                                                   withInt:(jint)last
                                                                                       withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer;

@end

__attribute__((unused)) static OrgApacheLuceneIndexMergePolicy_MergeSpecification *OrgApacheLuceneIndexLogMergePolicy_findForcedMergesSizeLimitWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexLogMergePolicy *self, OrgApacheLuceneIndexSegmentInfos *infos, jint maxNumSegments, jint last, OrgApacheLuceneIndexIndexWriter *writer);

__attribute__((unused)) static OrgApacheLuceneIndexMergePolicy_MergeSpecification *OrgApacheLuceneIndexLogMergePolicy_findForcedMergesMaxNumSegmentsWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexLogMergePolicy *self, OrgApacheLuceneIndexSegmentInfos *infos, jint maxNumSegments, jint last, OrgApacheLuceneIndexIndexWriter *writer);

@interface OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel : NSObject < JavaLangComparable > {
 @public
  OrgApacheLuceneIndexSegmentCommitInfo *info_;
  jfloat level_;
  jint index_;
}

- (instancetype)initWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                                                    withFloat:(jfloat)level
                                                      withInt:(jint)index;

- (jint)compareToWithId:(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *)other;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel, info_, OrgApacheLuceneIndexSegmentCommitInfo *)

__attribute__((unused)) static void OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *self, OrgApacheLuceneIndexSegmentCommitInfo *info, jfloat level, jint index);

__attribute__((unused)) static OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *new_OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(OrgApacheLuceneIndexSegmentCommitInfo *info, jfloat level, jint index) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel)

@implementation OrgApacheLuceneIndexLogMergePolicy

- (instancetype)init {
  OrgApacheLuceneIndexLogMergePolicy_init(self);
  return self;
}

- (jboolean)verboseWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  return writer != nil && [((OrgApacheLuceneUtilInfoStream *) nil_chk(writer->infoStream_)) isEnabledWithNSString:@"LMP"];
}

- (void)messageWithNSString:(NSString *)message
withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
    [((OrgApacheLuceneUtilInfoStream *) nil_chk(((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer))->infoStream_)) messageWithNSString:@"LMP" withNSString:message];
  }
}

- (jint)getMergeFactor {
  return mergeFactor_;
}

- (void)setMergeFactorWithInt:(jint)mergeFactor {
  if (mergeFactor < 2) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"mergeFactor cannot be less than 2") autorelease];
  self->mergeFactor_ = mergeFactor;
}

- (void)setCalibrateSizeByDeletesWithBoolean:(jboolean)calibrateSizeByDeletes {
  self->calibrateSizeByDeletes_ = calibrateSizeByDeletes;
}

- (jboolean)getCalibrateSizeByDeletes {
  return calibrateSizeByDeletes_;
}

- (jlong)sizeDocsWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                       withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  if (calibrateSizeByDeletes_) {
    jint delCount = [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) numDeletedDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info];
    JreAssert((delCount <= [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) maxDoc]), (@"org/apache/lucene/index/LogMergePolicy.java:155 condition failed: assert delCount <= info.info.maxDoc();"));
    return ([info->info_ maxDoc] - (jlong) delCount);
  }
  else {
    return [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) maxDoc];
  }
}

- (jlong)sizeBytesWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                        withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  if (calibrateSizeByDeletes_) {
    return [super sizeWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer];
  }
  return [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info)) sizeInBytes];
}

- (jboolean)isMergedWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                 withInt:(jint)maxNumSegments
                                         withJavaUtilMap:(id<JavaUtilMap>)segmentsToMerge
                     withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  jint numSegments = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) size];
  jint numToMerge = 0;
  OrgApacheLuceneIndexSegmentCommitInfo *mergeInfo = nil;
  jboolean segmentIsOriginal = NO;
  for (jint i = 0; i < numSegments && numToMerge <= maxNumSegments; i++) {
    OrgApacheLuceneIndexSegmentCommitInfo *info = [infos infoWithInt:i];
    JavaLangBoolean *isOriginal = [((id<JavaUtilMap>) nil_chk(segmentsToMerge)) getWithId:info];
    if (isOriginal != nil) {
      segmentIsOriginal = [isOriginal booleanValue];
      numToMerge++;
      mergeInfo = info;
    }
  }
  return numToMerge <= maxNumSegments && (numToMerge != 1 || !segmentIsOriginal || [self isMergedWithOrgApacheLuceneIndexSegmentInfos:infos withOrgApacheLuceneIndexSegmentCommitInfo:mergeInfo withOrgApacheLuceneIndexIndexWriter:writer]);
}

- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findForcedMergesSizeLimitWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                                                              withInt:(jint)maxNumSegments
                                                                                                              withInt:(jint)last
                                                                                  withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  return OrgApacheLuceneIndexLogMergePolicy_findForcedMergesSizeLimitWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(self, infos, maxNumSegments, last, writer);
}

- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findForcedMergesMaxNumSegmentsWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                                                                   withInt:(jint)maxNumSegments
                                                                                                                   withInt:(jint)last
                                                                                       withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  return OrgApacheLuceneIndexLogMergePolicy_findForcedMergesMaxNumSegmentsWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(self, infos, maxNumSegments, last, writer);
}

- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findForcedMergesWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                                                     withInt:(jint)maxNumSegments
                                                                                             withJavaUtilMap:(id<JavaUtilMap>)segmentsToMerge
                                                                         withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  JreAssert((maxNumSegments > 0), (@"org/apache/lucene/index/LogMergePolicy.java:314 condition failed: assert maxNumSegments > 0;"));
  if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
    [self messageWithNSString:JreStrcat("$I$@", @"findForcedMerges: maxNumSegs=", maxNumSegments, @" segsToMerge=", segmentsToMerge) withOrgApacheLuceneIndexIndexWriter:writer];
  }
  if ([self isMergedWithOrgApacheLuceneIndexSegmentInfos:infos withInt:maxNumSegments withJavaUtilMap:segmentsToMerge withOrgApacheLuceneIndexIndexWriter:writer]) {
    if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
      [self messageWithNSString:@"already merged; skip" withOrgApacheLuceneIndexIndexWriter:writer];
    }
    return nil;
  }
  jint last = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) size];
  while (last > 0) {
    OrgApacheLuceneIndexSegmentCommitInfo *info = [infos infoWithInt:--last];
    if ([((id<JavaUtilMap>) nil_chk(segmentsToMerge)) getWithId:info] != nil) {
      last++;
      break;
    }
  }
  if (last == 0) {
    if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
      [self messageWithNSString:@"last == 0; skip" withOrgApacheLuceneIndexIndexWriter:writer];
    }
    return nil;
  }
  if (maxNumSegments == 1 && last == 1 && [self isMergedWithOrgApacheLuceneIndexSegmentInfos:infos withOrgApacheLuceneIndexSegmentCommitInfo:[infos infoWithInt:0] withOrgApacheLuceneIndexIndexWriter:writer]) {
    if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
      [self messageWithNSString:@"already 1 seg; skip" withOrgApacheLuceneIndexIndexWriter:writer];
    }
    return nil;
  }
  jboolean anyTooLarge = NO;
  for (jint i = 0; i < last; i++) {
    OrgApacheLuceneIndexSegmentCommitInfo *info = [infos infoWithInt:i];
    if ([self sizeWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer] > maxMergeSizeForForcedMerge_ || [self sizeDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer] > maxMergeDocs_) {
      anyTooLarge = YES;
      break;
    }
  }
  if (anyTooLarge) {
    return OrgApacheLuceneIndexLogMergePolicy_findForcedMergesSizeLimitWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(self, infos, maxNumSegments, last, writer);
  }
  else {
    return OrgApacheLuceneIndexLogMergePolicy_findForcedMergesMaxNumSegmentsWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(self, infos, maxNumSegments, last, writer);
  }
}

- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findForcedDeletesMergesWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos
                                                                                withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  id<JavaUtilList> segments = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) asList];
  jint numSegments = [((id<JavaUtilList>) nil_chk(segments)) size];
  if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
    [self messageWithNSString:JreStrcat("$I$", @"findForcedDeleteMerges: ", numSegments, @" segments") withOrgApacheLuceneIndexIndexWriter:writer];
  }
  OrgApacheLuceneIndexMergePolicy_MergeSpecification *spec = [new_OrgApacheLuceneIndexMergePolicy_MergeSpecification_init() autorelease];
  jint firstSegmentWithDeletions = -1;
  JreAssert((writer != nil), (@"org/apache/lucene/index/LogMergePolicy.java:389 condition failed: assert writer != null;"));
  for (jint i = 0; i < numSegments; i++) {
    OrgApacheLuceneIndexSegmentCommitInfo *info = [segmentInfos infoWithInt:i];
    jint delCount = [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) numDeletedDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info];
    if (delCount > 0) {
      if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
        [self messageWithNSString:JreStrcat("$$$", @"  segment ", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->name_, @" has deletions") withOrgApacheLuceneIndexIndexWriter:writer];
      }
      if (firstSegmentWithDeletions == -1) firstSegmentWithDeletions = i;
      else if (i - firstSegmentWithDeletions == mergeFactor_) {
        if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
          [self messageWithNSString:JreStrcat("$I$I$", @"  add merge ", firstSegmentWithDeletions, @" to ", (i - 1), @" inclusive") withOrgApacheLuceneIndexIndexWriter:writer];
        }
        [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:[new_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([segments subListWithInt:firstSegmentWithDeletions withInt:i]) autorelease]];
        firstSegmentWithDeletions = i;
      }
    }
    else if (firstSegmentWithDeletions != -1) {
      if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
        [self messageWithNSString:JreStrcat("$I$I$", @"  add merge ", firstSegmentWithDeletions, @" to ", (i - 1), @" inclusive") withOrgApacheLuceneIndexIndexWriter:writer];
      }
      [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:[new_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([segments subListWithInt:firstSegmentWithDeletions withInt:i]) autorelease]];
      firstSegmentWithDeletions = -1;
    }
  }
  if (firstSegmentWithDeletions != -1) {
    if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
      [self messageWithNSString:JreStrcat("$I$I$", @"  add merge ", firstSegmentWithDeletions, @" to ", (numSegments - 1), @" inclusive") withOrgApacheLuceneIndexIndexWriter:writer];
    }
    [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:[new_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([segments subListWithInt:firstSegmentWithDeletions withInt:numSegments]) autorelease]];
  }
  return spec;
}

- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findMergesWithOrgApacheLuceneIndexMergeTriggerEnum:(OrgApacheLuceneIndexMergeTriggerEnum *)mergeTrigger
                                                                      withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                       withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  jint numSegments = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) size];
  if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
    [self messageWithNSString:JreStrcat("$I$", @"findMerges: ", numSegments, @" segments") withOrgApacheLuceneIndexIndexWriter:writer];
  }
  id<JavaUtilList> levels = [new_JavaUtilArrayList_init() autorelease];
  jfloat norm = (jfloat) JavaLangMath_logWithDouble_(mergeFactor_);
  id<JavaUtilCollection> mergingSegments = [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) getMergingSegments];
  for (jint i = 0; i < numSegments; i++) {
    OrgApacheLuceneIndexSegmentCommitInfo *info = [infos infoWithInt:i];
    jlong size = [self sizeWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer];
    if (size < 1) {
      size = 1;
    }
    OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *infoLevel = [new_OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(info, (jfloat) JavaLangMath_logWithDouble_(size) / norm, i) autorelease];
    [levels addWithId:infoLevel];
    if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
      jlong segBytes = [self sizeBytesWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer];
      NSString *extra = [((id<JavaUtilCollection>) nil_chk(mergingSegments)) containsWithId:info] ? @" [merging]" : @"";
      if (size >= maxMergeSize_) {
        JreStrAppend(&extra, "$", @" [skip: too large]");
      }
      [self messageWithNSString:JreStrcat("$$$F$$$", @"seg=", [writer segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info], @" level=", infoLevel->level_, @" size=", NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"%.3f MB", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(segBytes / 1024 / 1024.) } count:1 type:NSObject_class_()]), extra) withOrgApacheLuceneIndexIndexWriter:writer];
    }
  }
  jfloat levelFloor;
  if (minMergeSize_ <= 0) levelFloor = (jfloat) 0.0;
  else levelFloor = (jfloat) (JavaLangMath_logWithDouble_(minMergeSize_) / norm);
  OrgApacheLuceneIndexMergePolicy_MergeSpecification *spec = nil;
  jint numMergeableSegments = [levels size];
  jint start = 0;
  while (start < numMergeableSegments) {
    jfloat maxLevel = ((OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *) nil_chk([levels getWithInt:start]))->level_;
    for (jint i = 1 + start; i < numMergeableSegments; i++) {
      jfloat level = ((OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *) nil_chk([levels getWithInt:i]))->level_;
      if (level > maxLevel) {
        maxLevel = level;
      }
    }
    jfloat levelBottom;
    if (maxLevel <= levelFloor) {
      levelBottom = -1.0f;
    }
    else {
      levelBottom = (jfloat) (maxLevel - OrgApacheLuceneIndexLogMergePolicy_LEVEL_LOG_SPAN);
      if (levelBottom < levelFloor && maxLevel >= levelFloor) {
        levelBottom = levelFloor;
      }
    }
    jint upto = numMergeableSegments - 1;
    while (upto >= start) {
      if (((OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *) nil_chk([levels getWithInt:upto]))->level_ >= levelBottom) {
        break;
      }
      upto--;
    }
    if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
      [self messageWithNSString:JreStrcat("$F$F$I$", @"  level ", levelBottom, @" to ", maxLevel, @": ", (1 + upto - start), @" segments") withOrgApacheLuceneIndexIndexWriter:writer];
    }
    jint end = start + mergeFactor_;
    while (end <= 1 + upto) {
      jboolean anyTooLarge = NO;
      jboolean anyMerging = NO;
      for (jint i = start; i < end; i++) {
        OrgApacheLuceneIndexSegmentCommitInfo *info = ((OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *) nil_chk([levels getWithInt:i]))->info_;
        anyTooLarge |= ([self sizeWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer] >= maxMergeSize_ || [self sizeDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer] >= maxMergeDocs_);
        if ([((id<JavaUtilCollection>) nil_chk(mergingSegments)) containsWithId:info]) {
          anyMerging = YES;
          break;
        }
      }
      if (anyMerging) {
      }
      else if (!anyTooLarge) {
        if (spec == nil) spec = [new_OrgApacheLuceneIndexMergePolicy_MergeSpecification_init() autorelease];
        id<JavaUtilList> mergeInfos = [new_JavaUtilArrayList_init() autorelease];
        for (jint i = start; i < end; i++) {
          [mergeInfos addWithId:((OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *) nil_chk([levels getWithInt:i]))->info_];
          JreAssert(([infos containsWithOrgApacheLuceneIndexSegmentCommitInfo:((OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *) nil_chk([levels getWithInt:i]))->info_]), (@"org/apache/lucene/index/LogMergePolicy.java:570 condition failed: assert infos.contains(levels.get(i).info);"));
        }
        if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
          [self messageWithNSString:JreStrcat("$$$I$I", @"  add merge=", [writer segStringWithJavaLangIterable:mergeInfos], @" start=", start, @" end=", end) withOrgApacheLuceneIndexIndexWriter:writer];
        }
        [((OrgApacheLuceneIndexMergePolicy_MergeSpecification *) nil_chk(spec)) addWithOrgApacheLuceneIndexMergePolicy_OneMerge:[new_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_(mergeInfos) autorelease]];
      }
      else if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
        [self messageWithNSString:JreStrcat("$I$I$", @"    ", start, @" to ", end, @": contains segment over maxMergeSize or maxMergeDocs; skipping") withOrgApacheLuceneIndexIndexWriter:writer];
      }
      start = end;
      end = start + mergeFactor_;
    }
    start = 1 + upto;
  }
  return spec;
}

- (void)setMaxMergeDocsWithInt:(jint)maxMergeDocs {
  self->maxMergeDocs_ = maxMergeDocs;
}

- (jint)getMaxMergeDocs {
  return maxMergeDocs_;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithNSString_(JreStrcat("C$$", '[', [[self getClass] getSimpleName], @": ")) autorelease];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"minMergeSize="])) appendWithLong:minMergeSize_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"mergeFactor="])) appendWithInt:mergeFactor_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxMergeSize="])) appendWithLong:maxMergeSize_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxMergeSizeForForcedMerge="])) appendWithLong:maxMergeSizeForForcedMerge_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"calibrateSizeByDeletes="])) appendWithBoolean:calibrateSizeByDeletes_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxMergeDocs="])) appendWithInt:maxMergeDocs_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxCFSSegmentSizeMB="])) appendWithDouble:[self getMaxCFSSegmentSizeMB]])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"noCFSRatio="])) appendWithDouble:noCFSRatio_];
  [sb appendWithNSString:@"]"];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "LogMergePolicy", NULL, 0x1, NULL, NULL },
    { "verboseWithOrgApacheLuceneIndexIndexWriter:", "verbose", "Z", 0x4, NULL, NULL },
    { "messageWithNSString:withOrgApacheLuceneIndexIndexWriter:", "message", "V", 0x4, NULL, NULL },
    { "getMergeFactor", NULL, "I", 0x1, NULL, NULL },
    { "setMergeFactorWithInt:", "setMergeFactor", "V", 0x1, NULL, NULL },
    { "setCalibrateSizeByDeletesWithBoolean:", "setCalibrateSizeByDeletes", "V", 0x1, NULL, NULL },
    { "getCalibrateSizeByDeletes", NULL, "Z", 0x1, NULL, NULL },
    { "sizeDocsWithOrgApacheLuceneIndexSegmentCommitInfo:withOrgApacheLuceneIndexIndexWriter:", "sizeDocs", "J", 0x4, "Ljava.io.IOException;", NULL },
    { "sizeBytesWithOrgApacheLuceneIndexSegmentCommitInfo:withOrgApacheLuceneIndexIndexWriter:", "sizeBytes", "J", 0x4, "Ljava.io.IOException;", NULL },
    { "isMergedWithOrgApacheLuceneIndexSegmentInfos:withInt:withJavaUtilMap:withOrgApacheLuceneIndexIndexWriter:", "isMerged", "Z", 0x4, "Ljava.io.IOException;", NULL },
    { "findForcedMergesSizeLimitWithOrgApacheLuceneIndexSegmentInfos:withInt:withInt:withOrgApacheLuceneIndexIndexWriter:", "findForcedMergesSizeLimit", "Lorg.apache.lucene.index.MergePolicy$MergeSpecification;", 0x2, "Ljava.io.IOException;", NULL },
    { "findForcedMergesMaxNumSegmentsWithOrgApacheLuceneIndexSegmentInfos:withInt:withInt:withOrgApacheLuceneIndexIndexWriter:", "findForcedMergesMaxNumSegments", "Lorg.apache.lucene.index.MergePolicy$MergeSpecification;", 0x2, "Ljava.io.IOException;", NULL },
    { "findForcedMergesWithOrgApacheLuceneIndexSegmentInfos:withInt:withJavaUtilMap:withOrgApacheLuceneIndexIndexWriter:", "findForcedMerges", "Lorg.apache.lucene.index.MergePolicy$MergeSpecification;", 0x1, "Ljava.io.IOException;", NULL },
    { "findForcedDeletesMergesWithOrgApacheLuceneIndexSegmentInfos:withOrgApacheLuceneIndexIndexWriter:", "findForcedDeletesMerges", "Lorg.apache.lucene.index.MergePolicy$MergeSpecification;", 0x1, "Ljava.io.IOException;", NULL },
    { "findMergesWithOrgApacheLuceneIndexMergeTriggerEnum:withOrgApacheLuceneIndexSegmentInfos:withOrgApacheLuceneIndexIndexWriter:", "findMerges", "Lorg.apache.lucene.index.MergePolicy$MergeSpecification;", 0x1, "Ljava.io.IOException;", NULL },
    { "setMaxMergeDocsWithInt:", "setMaxMergeDocs", "V", 0x1, NULL, NULL },
    { "getMaxMergeDocs", NULL, "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LEVEL_LOG_SPAN", "LEVEL_LOG_SPAN", 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgApacheLuceneIndexLogMergePolicy_LEVEL_LOG_SPAN },
    { "DEFAULT_MERGE_FACTOR", "DEFAULT_MERGE_FACTOR", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexLogMergePolicy_DEFAULT_MERGE_FACTOR },
    { "DEFAULT_MAX_MERGE_DOCS", "DEFAULT_MAX_MERGE_DOCS", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexLogMergePolicy_DEFAULT_MAX_MERGE_DOCS },
    { "DEFAULT_NO_CFS_RATIO", "DEFAULT_NO_CFS_RATIO", 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgApacheLuceneIndexLogMergePolicy_DEFAULT_NO_CFS_RATIO },
    { "mergeFactor_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "minMergeSize_", NULL, 0x4, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "maxMergeSize_", NULL, 0x4, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "maxMergeSizeForForcedMerge_", NULL, 0x4, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "maxMergeDocs_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "calibrateSizeByDeletes_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel;"};
  static const J2ObjcClassInfo _OrgApacheLuceneIndexLogMergePolicy = { 2, "LogMergePolicy", "org.apache.lucene.index", NULL, 0x401, 18, methods, 10, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneIndexLogMergePolicy;
}

@end

void OrgApacheLuceneIndexLogMergePolicy_init(OrgApacheLuceneIndexLogMergePolicy *self) {
  OrgApacheLuceneIndexMergePolicy_initWithDouble_withLong_(self, OrgApacheLuceneIndexLogMergePolicy_DEFAULT_NO_CFS_RATIO, OrgApacheLuceneIndexMergePolicy_DEFAULT_MAX_CFS_SEGMENT_SIZE);
  self->mergeFactor_ = OrgApacheLuceneIndexLogMergePolicy_DEFAULT_MERGE_FACTOR;
  self->maxMergeSizeForForcedMerge_ = JavaLangLong_MAX_VALUE;
  self->maxMergeDocs_ = OrgApacheLuceneIndexLogMergePolicy_DEFAULT_MAX_MERGE_DOCS;
  self->calibrateSizeByDeletes_ = YES;
}

OrgApacheLuceneIndexMergePolicy_MergeSpecification *OrgApacheLuceneIndexLogMergePolicy_findForcedMergesSizeLimitWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexLogMergePolicy *self, OrgApacheLuceneIndexSegmentInfos *infos, jint maxNumSegments, jint last, OrgApacheLuceneIndexIndexWriter *writer) {
  OrgApacheLuceneIndexMergePolicy_MergeSpecification *spec = [new_OrgApacheLuceneIndexMergePolicy_MergeSpecification_init() autorelease];
  id<JavaUtilList> segments = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) asList];
  jint start = last - 1;
  while (start >= 0) {
    OrgApacheLuceneIndexSegmentCommitInfo *info = [infos infoWithInt:start];
    if ([self sizeWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer] > self->maxMergeSizeForForcedMerge_ || [self sizeDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer] > self->maxMergeDocs_) {
      if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
        [self messageWithNSString:JreStrcat("$@$J$IC", @"findForcedMergesSizeLimit: skip segment=", info, @": size is > maxMergeSize (", self->maxMergeSizeForForcedMerge_, @") or sizeDocs is > maxMergeDocs (", self->maxMergeDocs_, ')') withOrgApacheLuceneIndexIndexWriter:writer];
      }
      if (last - start - 1 > 1 || (start != last - 1 && ![self isMergedWithOrgApacheLuceneIndexSegmentInfos:infos withOrgApacheLuceneIndexSegmentCommitInfo:[infos infoWithInt:start + 1] withOrgApacheLuceneIndexIndexWriter:writer])) {
        [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:[new_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([((id<JavaUtilList>) nil_chk(segments)) subListWithInt:start + 1 withInt:last]) autorelease]];
      }
      last = start;
    }
    else if (last - start == self->mergeFactor_) {
      [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:[new_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([((id<JavaUtilList>) nil_chk(segments)) subListWithInt:start withInt:last]) autorelease]];
      last = start;
    }
    --start;
  }
  if (last > 0 && (++start + 1 < last || ![self isMergedWithOrgApacheLuceneIndexSegmentInfos:infos withOrgApacheLuceneIndexSegmentCommitInfo:[infos infoWithInt:start] withOrgApacheLuceneIndexIndexWriter:writer])) {
    [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:[new_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([((id<JavaUtilList>) nil_chk(segments)) subListWithInt:start withInt:last]) autorelease]];
  }
  return [((id<JavaUtilList>) nil_chk(spec->merges_)) size] == 0 ? nil : spec;
}

OrgApacheLuceneIndexMergePolicy_MergeSpecification *OrgApacheLuceneIndexLogMergePolicy_findForcedMergesMaxNumSegmentsWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexLogMergePolicy *self, OrgApacheLuceneIndexSegmentInfos *infos, jint maxNumSegments, jint last, OrgApacheLuceneIndexIndexWriter *writer) {
  OrgApacheLuceneIndexMergePolicy_MergeSpecification *spec = [new_OrgApacheLuceneIndexMergePolicy_MergeSpecification_init() autorelease];
  id<JavaUtilList> segments = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) asList];
  while (last - maxNumSegments + 1 >= self->mergeFactor_) {
    [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:[new_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([((id<JavaUtilList>) nil_chk(segments)) subListWithInt:last - self->mergeFactor_ withInt:last]) autorelease]];
    last -= self->mergeFactor_;
  }
  if (0 == [((id<JavaUtilList>) nil_chk(spec->merges_)) size]) {
    if (maxNumSegments == 1) {
      if (last > 1 || ![self isMergedWithOrgApacheLuceneIndexSegmentInfos:infos withOrgApacheLuceneIndexSegmentCommitInfo:[infos infoWithInt:0] withOrgApacheLuceneIndexIndexWriter:writer]) {
        [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:[new_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([((id<JavaUtilList>) nil_chk(segments)) subListWithInt:0 withInt:last]) autorelease]];
      }
    }
    else if (last > maxNumSegments) {
      jint finalMergeSize = last - maxNumSegments + 1;
      jlong bestSize = 0;
      jint bestStart = 0;
      for (jint i = 0; i < last - finalMergeSize + 1; i++) {
        jlong sumSize = 0;
        for (jint j = 0; j < finalMergeSize; j++) {
          sumSize += [self sizeWithOrgApacheLuceneIndexSegmentCommitInfo:[infos infoWithInt:j + i] withOrgApacheLuceneIndexIndexWriter:writer];
        }
        if (i == 0 || (sumSize < 2 * [self sizeWithOrgApacheLuceneIndexSegmentCommitInfo:[infos infoWithInt:i - 1] withOrgApacheLuceneIndexIndexWriter:writer] && sumSize < bestSize)) {
          bestStart = i;
          bestSize = sumSize;
        }
      }
      [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:[new_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([((id<JavaUtilList>) nil_chk(segments)) subListWithInt:bestStart withInt:bestStart + finalMergeSize]) autorelease]];
    }
  }
  return [spec->merges_ size] == 0 ? nil : spec;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexLogMergePolicy)

@implementation OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel

- (instancetype)initWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                                                    withFloat:(jfloat)level
                                                      withInt:(jint)index {
  OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(self, info, level, index);
  return self;
}

- (jint)compareToWithId:(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *)other {
  check_class_cast(other, [OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel class]);
  return JavaLangFloat_compareWithFloat_withFloat_(((OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *) nil_chk(other))->level_, level_);
}

- (void)dealloc {
  RELEASE_(info_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexSegmentCommitInfo:withFloat:withInt:", "SegmentInfoAndLevel", NULL, 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "info_", NULL, 0x0, "Lorg.apache.lucene.index.SegmentCommitInfo;", NULL, NULL, .constantValue.asLong = 0 },
    { "level_", NULL, 0x0, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "index_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel = { 2, "SegmentInfoAndLevel", "org.apache.lucene.index", "LogMergePolicy", 0xa, 2, methods, 3, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/index/LogMergePolicy$SegmentInfoAndLevel;>;" };
  return &_OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel;
}

@end

void OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *self, OrgApacheLuceneIndexSegmentCommitInfo *info, jfloat level, jint index) {
  NSObject_init(self);
  JreStrongAssign(&self->info_, info);
  self->level_ = level;
  self->index_ = index;
}

OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *new_OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(OrgApacheLuceneIndexSegmentCommitInfo *info, jfloat level, jint index) {
  OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *self = [OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel alloc];
  OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(self, info, level, index);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel)
