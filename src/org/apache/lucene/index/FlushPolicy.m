//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/FlushPolicy.java
//

#include "J2ObjC_source.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/index/DocumentsWriterFlushControl.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/DocumentsWriterPerThreadPool.h"
#include "org/apache/lucene/index/FlushPolicy.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/util/InfoStream.h"

@interface OrgApacheLuceneIndexFlushPolicy ()

- (jboolean)assertMessageWithNSString:(NSString *)s;

@end

__attribute__((unused)) static jboolean OrgApacheLuceneIndexFlushPolicy_assertMessageWithNSString_(OrgApacheLuceneIndexFlushPolicy *self, NSString *s);

@implementation OrgApacheLuceneIndexFlushPolicy

- (void)onDeleteWithOrgApacheLuceneIndexDocumentsWriterFlushControl:(OrgApacheLuceneIndexDocumentsWriterFlushControl *)control
   withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)state {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onUpdateWithOrgApacheLuceneIndexDocumentsWriterFlushControl:(OrgApacheLuceneIndexDocumentsWriterFlushControl *)control
   withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)state {
  [self onInsertWithOrgApacheLuceneIndexDocumentsWriterFlushControl:control withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:state];
  [self onDeleteWithOrgApacheLuceneIndexDocumentsWriterFlushControl:control withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:state];
}

- (void)onInsertWithOrgApacheLuceneIndexDocumentsWriterFlushControl:(OrgApacheLuceneIndexDocumentsWriterFlushControl *)control
   withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)state {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)init__WithOrgApacheLuceneIndexLiveIndexWriterConfig:(OrgApacheLuceneIndexLiveIndexWriterConfig *)indexWriterConfig {
  @synchronized(self) {
    JreStrongAssign(&self->indexWriterConfig_, indexWriterConfig);
    JreStrongAssign(&infoStream_, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(indexWriterConfig)) getInfoStream]);
  }
}

- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)findLargestNonPendingWriterWithOrgApacheLuceneIndexDocumentsWriterFlushControl:(OrgApacheLuceneIndexDocumentsWriterFlushControl *)control
                                                                                withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThreadState {
  JreAssert(([((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThreadState))->dwpt_)) getNumDocsInRAM] > 0), (@"org/apache/lucene/index/FlushPolicy.java:109 condition failed: assert perThreadState.dwpt.getNumDocsInRAM() > 0;"));
  jlong maxRamSoFar = perThreadState->bytesUsed_;
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *maxRamUsingThreadState = perThreadState;
  JreAssert((!JreLoadVolatileBoolean(&perThreadState->flushPending_)), (@"DWPT should have flushed"));
  id<JavaUtilIterator> activePerThreadsIterator = [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(control)) allActiveThreadStates];
  jint count = 0;
  while ([((id<JavaUtilIterator>) nil_chk(activePerThreadsIterator)) hasNext]) {
    OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *next = [activePerThreadsIterator next];
    if (!JreLoadVolatileBoolean(&((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(next))->flushPending_)) {
      jlong nextRam = next->bytesUsed_;
      if (nextRam > 0 && [((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(next->dwpt_)) getNumDocsInRAM] > 0) {
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"FP"]) {
          [((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) messageWithNSString:@"FP" withNSString:JreStrcat("$J$I", @"thread state has ", nextRam, @" bytes; docInRAM=", [((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(next->dwpt_)) getNumDocsInRAM])];
        }
        count++;
        if (nextRam > maxRamSoFar) {
          maxRamSoFar = nextRam;
          maxRamUsingThreadState = next;
        }
      }
    }
  }
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"FP"]) {
    [((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) messageWithNSString:@"FP" withNSString:JreStrcat("I$", count, @" in-use non-flushing threads states")];
  }
  JreAssert((OrgApacheLuceneIndexFlushPolicy_assertMessageWithNSString_(self, @"set largest ram consuming thread pending on lower watermark")), (@"org/apache/lucene/index/FlushPolicy.java:135 condition failed: assert assertMessage(\"set largest ram consuming thread pending on lower watermark\");"));
  return maxRamUsingThreadState;
}

- (jboolean)assertMessageWithNSString:(NSString *)s {
  return OrgApacheLuceneIndexFlushPolicy_assertMessageWithNSString_(self, s);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexFlushPolicy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(indexWriterConfig_);
  RELEASE_(infoStream_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onDeleteWithOrgApacheLuceneIndexDocumentsWriterFlushControl:withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:", "onDelete", "V", 0x401, NULL, NULL },
    { "onUpdateWithOrgApacheLuceneIndexDocumentsWriterFlushControl:withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:", "onUpdate", "V", 0x1, NULL, NULL },
    { "onInsertWithOrgApacheLuceneIndexDocumentsWriterFlushControl:withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:", "onInsert", "V", 0x401, NULL, NULL },
    { "init__WithOrgApacheLuceneIndexLiveIndexWriterConfig:", "init", "V", 0x24, NULL, NULL },
    { "findLargestNonPendingWriterWithOrgApacheLuceneIndexDocumentsWriterFlushControl:withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:", "findLargestNonPendingWriter", "Lorg.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState;", 0x4, NULL, NULL },
    { "assertMessageWithNSString:", "assertMessage", "Z", 0x2, NULL, NULL },
    { "init", "FlushPolicy", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "indexWriterConfig_", NULL, 0x4, "Lorg.apache.lucene.index.LiveIndexWriterConfig;", NULL, NULL, .constantValue.asLong = 0 },
    { "infoStream_", NULL, 0x4, "Lorg.apache.lucene.util.InfoStream;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexFlushPolicy = { 2, "FlushPolicy", "org.apache.lucene.index", NULL, 0x400, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexFlushPolicy;
}

@end

jboolean OrgApacheLuceneIndexFlushPolicy_assertMessageWithNSString_(OrgApacheLuceneIndexFlushPolicy *self, NSString *s) {
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"FP"]) {
    [((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) messageWithNSString:@"FP" withNSString:s];
  }
  return true;
}

void OrgApacheLuceneIndexFlushPolicy_init(OrgApacheLuceneIndexFlushPolicy *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexFlushPolicy)
