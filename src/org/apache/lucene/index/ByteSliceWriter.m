//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/ByteSliceWriter.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/index/ByteSliceWriter.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/ByteBlockPool.h"

@interface OrgApacheLuceneIndexByteSliceWriter () {
 @public
  IOSByteArray *slice_;
  jint upto_;
  OrgApacheLuceneUtilByteBlockPool *pool_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexByteSliceWriter, slice_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexByteSliceWriter, pool_, OrgApacheLuceneUtilByteBlockPool *)

@implementation OrgApacheLuceneIndexByteSliceWriter

- (instancetype)initWithOrgApacheLuceneUtilByteBlockPool:(OrgApacheLuceneUtilByteBlockPool *)pool {
  OrgApacheLuceneIndexByteSliceWriter_initWithOrgApacheLuceneUtilByteBlockPool_(self, pool);
  return self;
}

- (void)init__WithInt:(jint)address {
  JreStrongAssign(&slice_, IOSObjectArray_Get(nil_chk(((OrgApacheLuceneUtilByteBlockPool *) nil_chk(pool_))->buffers_), JreRShift32(address, OrgApacheLuceneUtilByteBlockPool_BYTE_BLOCK_SHIFT)));
  JreAssert((slice_ != nil), (@"org/apache/lucene/index/ByteSliceWriter.java:47 condition failed: assert slice != null;"));
  upto_ = address & OrgApacheLuceneUtilByteBlockPool_BYTE_BLOCK_MASK;
  offset0_ = address;
  JreAssert((upto_ < ((IOSByteArray *) nil_chk(slice_))->size_), (@"org/apache/lucene/index/ByteSliceWriter.java:50 condition failed: assert upto < slice.length;"));
}

- (void)writeByteWithByte:(jbyte)b {
  JreAssert((slice_ != nil), (@"org/apache/lucene/index/ByteSliceWriter.java:56 condition failed: assert slice != null;"));
  if (IOSByteArray_Get(nil_chk(slice_), upto_) != 0) {
    upto_ = [((OrgApacheLuceneUtilByteBlockPool *) nil_chk(pool_)) allocSliceWithByteArray:slice_ withInt:upto_];
    JreStrongAssign(&slice_, pool_->buffer_);
    offset0_ = pool_->byteOffset_;
    JreAssert((slice_ != nil), (@"org/apache/lucene/index/ByteSliceWriter.java:61 condition failed: assert slice != null;"));
  }
  *IOSByteArray_GetRef(nil_chk(slice_), upto_++) = b;
  JreAssert((upto_ != slice_->size_), (@"org/apache/lucene/index/ByteSliceWriter.java:64 condition failed: assert upto != slice.length;"));
}

- (void)writeBytesWithByteArray:(IOSByteArray *)b
                        withInt:(jint)offset
                        withInt:(jint)len {
  jint offsetEnd = offset + len;
  while (offset < offsetEnd) {
    if (IOSByteArray_Get(nil_chk(slice_), upto_) != 0) {
      upto_ = [((OrgApacheLuceneUtilByteBlockPool *) nil_chk(pool_)) allocSliceWithByteArray:slice_ withInt:upto_];
      JreStrongAssign(&slice_, pool_->buffer_);
      offset0_ = pool_->byteOffset_;
    }
    *IOSByteArray_GetRef(nil_chk(slice_), upto_++) = IOSByteArray_Get(nil_chk(b), offset++);
    JreAssert((upto_ != slice_->size_), (@"org/apache/lucene/index/ByteSliceWriter.java:79 condition failed: assert upto != slice.length;"));
  }
}

- (jint)getAddress {
  return upto_ + (offset0_ & OrgApacheLuceneIndexDocumentsWriterPerThread_BYTE_BLOCK_NOT_MASK);
}

- (void)dealloc {
  RELEASE_(slice_);
  RELEASE_(pool_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneUtilByteBlockPool:", "ByteSliceWriter", NULL, 0x1, NULL, NULL },
    { "init__WithInt:", "init", "V", 0x1, NULL, NULL },
    { "writeByteWithByte:", "writeByte", "V", 0x1, NULL, NULL },
    { "writeBytesWithByteArray:withInt:withInt:", "writeBytes", "V", 0x1, NULL, NULL },
    { "getAddress", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "slice_", NULL, 0x2, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "upto_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "pool_", NULL, 0x12, "Lorg.apache.lucene.util.ByteBlockPool;", NULL, NULL, .constantValue.asLong = 0 },
    { "offset0_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexByteSliceWriter = { 2, "ByteSliceWriter", "org.apache.lucene.index", NULL, 0x10, 5, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexByteSliceWriter;
}

@end

void OrgApacheLuceneIndexByteSliceWriter_initWithOrgApacheLuceneUtilByteBlockPool_(OrgApacheLuceneIndexByteSliceWriter *self, OrgApacheLuceneUtilByteBlockPool *pool) {
  OrgApacheLuceneStoreDataOutput_init(self);
  JreStrongAssign(&self->pool_, pool);
}

OrgApacheLuceneIndexByteSliceWriter *new_OrgApacheLuceneIndexByteSliceWriter_initWithOrgApacheLuceneUtilByteBlockPool_(OrgApacheLuceneUtilByteBlockPool *pool) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexByteSliceWriter, initWithOrgApacheLuceneUtilByteBlockPool_, pool)
}

OrgApacheLuceneIndexByteSliceWriter *create_OrgApacheLuceneIndexByteSliceWriter_initWithOrgApacheLuceneUtilByteBlockPool_(OrgApacheLuceneUtilByteBlockPool *pool) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexByteSliceWriter, initWithOrgApacheLuceneUtilByteBlockPool_, pool)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexByteSliceWriter)
