//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/LiveIndexWriterConfig.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Comparable.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/index/ConcurrentMergeScheduler.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/DocumentsWriterPerThreadPool.h"
#include "org/apache/lucene/index/FlushByRamOrCountsPolicy.h"
#include "org/apache/lucene/index/FlushPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/index/TieredMergePolicy.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/util/InfoStream.h"

@interface OrgApacheLuceneIndexLiveIndexWriterConfig () {
 @public
  OrgApacheLuceneAnalysisAnalyzer *analyzer_;
  volatile_jint maxBufferedDocs_;
  volatile_jdouble ramBufferSizeMB_;
  volatile_jint maxBufferedDeleteTerms_;
  volatile_id mergedSegmentWarmer_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexLiveIndexWriterConfig, analyzer_, OrgApacheLuceneAnalysisAnalyzer *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgApacheLuceneIndexLiveIndexWriterConfig, mergedSegmentWarmer_, OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *)

@implementation OrgApacheLuceneIndexLiveIndexWriterConfig

- (instancetype)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  OrgApacheLuceneIndexLiveIndexWriterConfig_initWithOrgApacheLuceneAnalysisAnalyzer_(self, analyzer);
  return self;
}

- (OrgApacheLuceneAnalysisAnalyzer *)getAnalyzer {
  return analyzer_;
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)setMaxBufferedDeleteTermsWithInt:(jint)maxBufferedDeleteTerms {
  if (maxBufferedDeleteTerms != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && maxBufferedDeleteTerms < 1) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"maxBufferedDeleteTerms must at least be 1 when enabled") autorelease];
  }
  JreAssignVolatileInt(&self->maxBufferedDeleteTerms_, maxBufferedDeleteTerms);
  return self;
}

- (jint)getMaxBufferedDeleteTerms {
  return JreLoadVolatileInt(&maxBufferedDeleteTerms_);
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)setRAMBufferSizeMBWithDouble:(jdouble)ramBufferSizeMB {
  @synchronized(self) {
    if (ramBufferSizeMB != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"ramBufferSize should be > 0.0 MB when enabled") autorelease];
    }
    if (ramBufferSizeMB == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && JreLoadVolatileInt(&maxBufferedDocs_) == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"at least one of ramBufferSize and maxBufferedDocs must be enabled") autorelease];
    }
    JreAssignVolatileDouble(&self->ramBufferSizeMB_, ramBufferSizeMB);
    return self;
  }
}

- (jdouble)getRAMBufferSizeMB {
  return JreLoadVolatileDouble(&ramBufferSizeMB_);
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)setMaxBufferedDocsWithInt:(jint)maxBufferedDocs {
  @synchronized(self) {
    if (maxBufferedDocs != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && maxBufferedDocs < 2) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"maxBufferedDocs must at least be 2 when enabled") autorelease];
    }
    if (maxBufferedDocs == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && JreLoadVolatileDouble(&ramBufferSizeMB_) == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"at least one of ramBufferSize and maxBufferedDocs must be enabled") autorelease];
    }
    JreAssignVolatileInt(&self->maxBufferedDocs_, maxBufferedDocs);
    return self;
  }
}

- (jint)getMaxBufferedDocs {
  return JreLoadVolatileInt(&maxBufferedDocs_);
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)setMergePolicyWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy {
  if (mergePolicy == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"mergePolicy must not be null") autorelease];
  }
  JreVolatileStrongAssign(&self->mergePolicy_, mergePolicy);
  return self;
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)setMergedSegmentWarmerWithOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer:(OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *)mergeSegmentWarmer {
  JreVolatileStrongAssign(&self->mergedSegmentWarmer_, mergeSegmentWarmer);
  return self;
}

- (OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *)getMergedSegmentWarmer {
  return JreLoadVolatileId(&mergedSegmentWarmer_);
}

- (OrgApacheLuceneIndexIndexWriterConfig_OpenModeEnum *)getOpenMode {
  return JreLoadVolatileId(&openMode_);
}

- (OrgApacheLuceneIndexIndexDeletionPolicy *)getIndexDeletionPolicy {
  return JreLoadVolatileId(&delPolicy_);
}

- (OrgApacheLuceneIndexIndexCommit *)getIndexCommit {
  return JreLoadVolatileId(&commit_);
}

- (OrgApacheLuceneSearchSimilaritiesSimilarity *)getSimilarity {
  return JreLoadVolatileId(&similarity_);
}

- (OrgApacheLuceneIndexMergeScheduler *)getMergeScheduler {
  return JreLoadVolatileId(&mergeScheduler_);
}

- (jlong)getWriteLockTimeout {
  return JreLoadVolatileLong(&writeLockTimeout_);
}

- (OrgApacheLuceneCodecsCodec *)getCodec {
  return JreLoadVolatileId(&codec_);
}

- (OrgApacheLuceneIndexMergePolicy *)getMergePolicy {
  return JreLoadVolatileId(&mergePolicy_);
}

- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool *)getIndexerThreadPool {
  return JreLoadVolatileId(&indexerThreadPool_);
}

- (jboolean)getReaderPooling {
  return JreLoadVolatileBoolean(&readerPooling_);
}

- (OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain *)getIndexingChain {
  return JreLoadVolatileId(&indexingChain_);
}

- (jint)getRAMPerThreadHardLimitMB {
  return JreLoadVolatileInt(&perThreadHardLimitMB_);
}

- (OrgApacheLuceneIndexFlushPolicy *)getFlushPolicy {
  return JreLoadVolatileId(&flushPolicy_);
}

- (OrgApacheLuceneUtilInfoStream *)getInfoStream {
  return JreLoadVolatileId(&infoStream_);
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)setUseCompoundFileWithBoolean:(jboolean)useCompoundFile {
  JreAssignVolatileBoolean(&self->useCompoundFile_, useCompoundFile);
  return self;
}

- (jboolean)getUseCompoundFile {
  return JreLoadVolatileBoolean(&useCompoundFile_);
}

- (jboolean)getCommitOnClose {
  return commitOnClose_;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"analyzer="])) appendWithNSString:analyzer_ == nil ? @"null" : [[analyzer_ getClass] getName]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"ramBufferSizeMB="])) appendWithDouble:[self getRAMBufferSizeMB]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxBufferedDocs="])) appendWithInt:[self getMaxBufferedDocs]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxBufferedDeleteTerms="])) appendWithInt:[self getMaxBufferedDeleteTerms]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"mergedSegmentWarmer="])) appendWithId:[self getMergedSegmentWarmer]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"delPolicy="])) appendWithNSString:[[((OrgApacheLuceneIndexIndexDeletionPolicy *) nil_chk([self getIndexDeletionPolicy])) getClass] getName]])) appendWithNSString:@"\n"];
  OrgApacheLuceneIndexIndexCommit *commit = [self getIndexCommit];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"commit="])) appendWithId:commit == nil ? @"null" : commit])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"openMode="])) appendWithId:[self getOpenMode]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"similarity="])) appendWithNSString:[[((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk([self getSimilarity])) getClass] getName]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"mergeScheduler="])) appendWithId:[self getMergeScheduler]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"default WRITE_LOCK_TIMEOUT="])) appendWithLong:OrgApacheLuceneIndexIndexWriterConfig_WRITE_LOCK_TIMEOUT])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"writeLockTimeout="])) appendWithLong:[self getWriteLockTimeout]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"codec="])) appendWithId:[self getCodec]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"infoStream="])) appendWithNSString:[[((OrgApacheLuceneUtilInfoStream *) nil_chk([self getInfoStream])) getClass] getName]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"mergePolicy="])) appendWithId:[self getMergePolicy]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"indexerThreadPool="])) appendWithId:[self getIndexerThreadPool]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"readerPooling="])) appendWithBoolean:[self getReaderPooling]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"perThreadHardLimitMB="])) appendWithInt:[self getRAMPerThreadHardLimitMB]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"useCompoundFile="])) appendWithBoolean:[self getUseCompoundFile]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"commitOnClose="])) appendWithBoolean:[self getCommitOnClose]])) appendWithNSString:@"\n"];
  return [sb description];
}

- (void)dealloc {
  RELEASE_(analyzer_);
  JreReleaseVolatile(&mergedSegmentWarmer_);
  JreReleaseVolatile(&delPolicy_);
  JreReleaseVolatile(&commit_);
  JreReleaseVolatile(&openMode_);
  JreReleaseVolatile(&similarity_);
  JreReleaseVolatile(&mergeScheduler_);
  JreReleaseVolatile(&indexingChain_);
  JreReleaseVolatile(&codec_);
  JreReleaseVolatile(&infoStream_);
  JreReleaseVolatile(&mergePolicy_);
  JreReleaseVolatile(&indexerThreadPool_);
  JreReleaseVolatile(&flushPolicy_);
  [super dealloc];
}

- (void)__javaClone {
  [super __javaClone];
  JreRetainVolatile(&mergedSegmentWarmer_);
  JreRetainVolatile(&delPolicy_);
  JreRetainVolatile(&commit_);
  JreRetainVolatile(&openMode_);
  JreRetainVolatile(&similarity_);
  JreRetainVolatile(&mergeScheduler_);
  JreRetainVolatile(&indexingChain_);
  JreRetainVolatile(&codec_);
  JreRetainVolatile(&infoStream_);
  JreRetainVolatile(&mergePolicy_);
  JreRetainVolatile(&indexerThreadPool_);
  JreRetainVolatile(&flushPolicy_);
}

+ (IOSObjectArray *)__annotations_getWriteLockTimeout {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_writeLockTimeout_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneAnalysisAnalyzer:", "LiveIndexWriterConfig", NULL, 0x0, NULL, NULL },
    { "getAnalyzer", NULL, "Lorg.apache.lucene.analysis.Analyzer;", 0x1, NULL, NULL },
    { "setMaxBufferedDeleteTermsWithInt:", "setMaxBufferedDeleteTerms", "Lorg.apache.lucene.index.LiveIndexWriterConfig;", 0x1, NULL, NULL },
    { "getMaxBufferedDeleteTerms", NULL, "I", 0x1, NULL, NULL },
    { "setRAMBufferSizeMBWithDouble:", "setRAMBufferSizeMB", "Lorg.apache.lucene.index.LiveIndexWriterConfig;", 0x21, NULL, NULL },
    { "getRAMBufferSizeMB", NULL, "D", 0x1, NULL, NULL },
    { "setMaxBufferedDocsWithInt:", "setMaxBufferedDocs", "Lorg.apache.lucene.index.LiveIndexWriterConfig;", 0x21, NULL, NULL },
    { "getMaxBufferedDocs", NULL, "I", 0x1, NULL, NULL },
    { "setMergePolicyWithOrgApacheLuceneIndexMergePolicy:", "setMergePolicy", "Lorg.apache.lucene.index.LiveIndexWriterConfig;", 0x1, NULL, NULL },
    { "setMergedSegmentWarmerWithOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer:", "setMergedSegmentWarmer", "Lorg.apache.lucene.index.LiveIndexWriterConfig;", 0x1, NULL, NULL },
    { "getMergedSegmentWarmer", NULL, "Lorg.apache.lucene.index.IndexWriter$IndexReaderWarmer;", 0x1, NULL, NULL },
    { "getOpenMode", NULL, "Lorg.apache.lucene.index.IndexWriterConfig$OpenMode;", 0x1, NULL, NULL },
    { "getIndexDeletionPolicy", NULL, "Lorg.apache.lucene.index.IndexDeletionPolicy;", 0x1, NULL, NULL },
    { "getIndexCommit", NULL, "Lorg.apache.lucene.index.IndexCommit;", 0x1, NULL, NULL },
    { "getSimilarity", NULL, "Lorg.apache.lucene.search.similarities.Similarity;", 0x1, NULL, NULL },
    { "getMergeScheduler", NULL, "Lorg.apache.lucene.index.MergeScheduler;", 0x1, NULL, NULL },
    { "getWriteLockTimeout", NULL, "J", 0x1, NULL, NULL },
    { "getCodec", NULL, "Lorg.apache.lucene.codecs.Codec;", 0x1, NULL, NULL },
    { "getMergePolicy", NULL, "Lorg.apache.lucene.index.MergePolicy;", 0x1, NULL, NULL },
    { "getIndexerThreadPool", NULL, "Lorg.apache.lucene.index.DocumentsWriterPerThreadPool;", 0x0, NULL, NULL },
    { "getReaderPooling", NULL, "Z", 0x1, NULL, NULL },
    { "getIndexingChain", NULL, "Lorg.apache.lucene.index.DocumentsWriterPerThread$IndexingChain;", 0x0, NULL, NULL },
    { "getRAMPerThreadHardLimitMB", NULL, "I", 0x1, NULL, NULL },
    { "getFlushPolicy", NULL, "Lorg.apache.lucene.index.FlushPolicy;", 0x0, NULL, NULL },
    { "getInfoStream", NULL, "Lorg.apache.lucene.util.InfoStream;", 0x1, NULL, NULL },
    { "setUseCompoundFileWithBoolean:", "setUseCompoundFile", "Lorg.apache.lucene.index.LiveIndexWriterConfig;", 0x1, NULL, NULL },
    { "getUseCompoundFile", NULL, "Z", 0x1, NULL, NULL },
    { "getCommitOnClose", NULL, "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "analyzer_", NULL, 0x12, "Lorg.apache.lucene.analysis.Analyzer;", NULL, NULL, .constantValue.asLong = 0 },
    { "maxBufferedDocs_", NULL, 0x42, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "ramBufferSizeMB_", NULL, 0x42, "D", NULL, NULL, .constantValue.asLong = 0 },
    { "maxBufferedDeleteTerms_", NULL, 0x42, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mergedSegmentWarmer_", NULL, 0x42, "Lorg.apache.lucene.index.IndexWriter$IndexReaderWarmer;", NULL, NULL, .constantValue.asLong = 0 },
    { "delPolicy_", NULL, 0x44, "Lorg.apache.lucene.index.IndexDeletionPolicy;", NULL, NULL, .constantValue.asLong = 0 },
    { "commit_", NULL, 0x44, "Lorg.apache.lucene.index.IndexCommit;", NULL, NULL, .constantValue.asLong = 0 },
    { "openMode_", NULL, 0x44, "Lorg.apache.lucene.index.IndexWriterConfig$OpenMode;", NULL, NULL, .constantValue.asLong = 0 },
    { "similarity_", NULL, 0x44, "Lorg.apache.lucene.search.similarities.Similarity;", NULL, NULL, .constantValue.asLong = 0 },
    { "mergeScheduler_", NULL, 0x44, "Lorg.apache.lucene.index.MergeScheduler;", NULL, NULL, .constantValue.asLong = 0 },
    { "writeLockTimeout_", NULL, 0x44, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "indexingChain_", NULL, 0x44, "Lorg.apache.lucene.index.DocumentsWriterPerThread$IndexingChain;", NULL, NULL, .constantValue.asLong = 0 },
    { "codec_", NULL, 0x44, "Lorg.apache.lucene.codecs.Codec;", NULL, NULL, .constantValue.asLong = 0 },
    { "infoStream_", NULL, 0x44, "Lorg.apache.lucene.util.InfoStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "mergePolicy_", NULL, 0x44, "Lorg.apache.lucene.index.MergePolicy;", NULL, NULL, .constantValue.asLong = 0 },
    { "indexerThreadPool_", NULL, 0x44, "Lorg.apache.lucene.index.DocumentsWriterPerThreadPool;", NULL, NULL, .constantValue.asLong = 0 },
    { "readerPooling_", NULL, 0x44, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "flushPolicy_", NULL, 0x44, "Lorg.apache.lucene.index.FlushPolicy;", NULL, NULL, .constantValue.asLong = 0 },
    { "perThreadHardLimitMB_", NULL, 0x44, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "useCompoundFile_", NULL, 0x44, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "commitOnClose_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexLiveIndexWriterConfig = { 2, "LiveIndexWriterConfig", "org.apache.lucene.index", NULL, 0x1, 29, methods, 21, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexLiveIndexWriterConfig;
}

@end

void OrgApacheLuceneIndexLiveIndexWriterConfig_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneIndexLiveIndexWriterConfig *self, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  NSObject_init(self);
  JreAssignVolatileBoolean(&self->useCompoundFile_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_USE_COMPOUND_FILE_SYSTEM);
  self->commitOnClose_ = OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_COMMIT_ON_CLOSE;
  JreStrongAssign(&self->analyzer_, analyzer);
  JreAssignVolatileDouble(&self->ramBufferSizeMB_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_RAM_BUFFER_SIZE_MB);
  JreAssignVolatileInt(&self->maxBufferedDocs_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_MAX_BUFFERED_DOCS);
  JreAssignVolatileInt(&self->maxBufferedDeleteTerms_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_MAX_BUFFERED_DELETE_TERMS);
  JreVolatileStrongAssign(&self->mergedSegmentWarmer_, nil);
  JreVolatileStrongAssignAndConsume(&self->delPolicy_, new_OrgApacheLuceneIndexKeepOnlyLastCommitDeletionPolicy_init());
  JreVolatileStrongAssign(&self->commit_, nil);
  JreAssignVolatileBoolean(&self->useCompoundFile_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_USE_COMPOUND_FILE_SYSTEM);
  JreVolatileStrongAssign(&self->openMode_, JreLoadStatic(OrgApacheLuceneIndexIndexWriterConfig_OpenModeEnum, CREATE_OR_APPEND));
  JreVolatileStrongAssign(&self->similarity_, OrgApacheLuceneSearchIndexSearcher_getDefaultSimilarity());
  JreVolatileStrongAssignAndConsume(&self->mergeScheduler_, new_OrgApacheLuceneIndexConcurrentMergeScheduler_init());
  JreAssignVolatileLong(&self->writeLockTimeout_, OrgApacheLuceneIndexIndexWriterConfig_WRITE_LOCK_TIMEOUT);
  JreVolatileStrongAssign(&self->indexingChain_, JreLoadStatic(OrgApacheLuceneIndexDocumentsWriterPerThread, defaultIndexingChain_));
  JreVolatileStrongAssign(&self->codec_, OrgApacheLuceneCodecsCodec_getDefault());
  if (JreLoadVolatileId(&self->codec_) == nil) {
    @throw [new_JavaLangNullPointerException_init() autorelease];
  }
  JreVolatileStrongAssign(&self->infoStream_, OrgApacheLuceneUtilInfoStream_getDefault());
  JreVolatileStrongAssignAndConsume(&self->mergePolicy_, new_OrgApacheLuceneIndexTieredMergePolicy_init());
  JreVolatileStrongAssignAndConsume(&self->flushPolicy_, new_OrgApacheLuceneIndexFlushByRamOrCountsPolicy_init());
  JreAssignVolatileBoolean(&self->readerPooling_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_READER_POOLING);
  JreVolatileStrongAssignAndConsume(&self->indexerThreadPool_, new_OrgApacheLuceneIndexDocumentsWriterPerThreadPool_init());
  JreAssignVolatileInt(&self->perThreadHardLimitMB_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB);
}

OrgApacheLuceneIndexLiveIndexWriterConfig *new_OrgApacheLuceneIndexLiveIndexWriterConfig_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  OrgApacheLuceneIndexLiveIndexWriterConfig *self = [OrgApacheLuceneIndexLiveIndexWriterConfig alloc];
  OrgApacheLuceneIndexLiveIndexWriterConfig_initWithOrgApacheLuceneAnalysisAnalyzer_(self, analyzer);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexLiveIndexWriterConfig)
