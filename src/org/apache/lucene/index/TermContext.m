//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/TermContext.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"

@interface OrgApacheLuceneIndexTermContext () {
 @public
  IOSObjectArray *states_;
  jint docFreq_;
  jlong totalTermFreq_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermContext, states_, IOSObjectArray *)

@implementation OrgApacheLuceneIndexTermContext

- (instancetype)initWithOrgApacheLuceneIndexIndexReaderContext:(OrgApacheLuceneIndexIndexReaderContext *)context {
  OrgApacheLuceneIndexTermContext_initWithOrgApacheLuceneIndexIndexReaderContext_(self, context);
  return self;
}

- (instancetype)initWithOrgApacheLuceneIndexIndexReaderContext:(OrgApacheLuceneIndexIndexReaderContext *)context
                             withOrgApacheLuceneIndexTermState:(OrgApacheLuceneIndexTermState *)state
                                                       withInt:(jint)ord
                                                       withInt:(jint)docFreq
                                                      withLong:(jlong)totalTermFreq {
  OrgApacheLuceneIndexTermContext_initWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTermState_withInt_withInt_withLong_(self, context, state, ord, docFreq, totalTermFreq);
  return self;
}

+ (OrgApacheLuceneIndexTermContext *)buildWithOrgApacheLuceneIndexIndexReaderContext:(OrgApacheLuceneIndexIndexReaderContext *)context
                                                        withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  return OrgApacheLuceneIndexTermContext_buildWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTerm_(context, term);
}

- (void)clear {
  docFreq_ = 0;
  totalTermFreq_ = 0;
  JavaUtilArrays_fillWithNSObjectArray_withId_(states_, nil);
}

- (void)register__WithOrgApacheLuceneIndexTermState:(OrgApacheLuceneIndexTermState *)state
                                            withInt:(jint)ord
                                            withInt:(jint)docFreq
                                           withLong:(jlong)totalTermFreq {
  [self register__WithOrgApacheLuceneIndexTermState:state withInt:ord];
  [self accumulateStatisticsWithInt:docFreq withLong:totalTermFreq];
}

- (void)register__WithOrgApacheLuceneIndexTermState:(OrgApacheLuceneIndexTermState *)state
                                            withInt:(jint)ord {
  JreAssert((state != nil), (@"state must not be null"));
  JreAssert((ord >= 0 && ord < ((IOSObjectArray *) nil_chk(states_))->size_), (@"org/apache/lucene/index/TermContext.java:131 condition failed: assert ord >= 0 && ord < states.length;"));
  JreAssert((IOSObjectArray_Get(nil_chk(states_), ord) == nil), (JreStrcat("$I$", @"state for ord: ", ord, @" already registered")));
  IOSObjectArray_Set(states_, ord, state);
}

- (void)accumulateStatisticsWithInt:(jint)docFreq
                           withLong:(jlong)totalTermFreq {
  self->docFreq_ += docFreq;
  if (self->totalTermFreq_ >= 0 && totalTermFreq >= 0) self->totalTermFreq_ += totalTermFreq;
  else self->totalTermFreq_ = -1;
}

- (OrgApacheLuceneIndexTermState *)getWithInt:(jint)ord {
  JreAssert((ord >= 0 && ord < ((IOSObjectArray *) nil_chk(states_))->size_), (@"org/apache/lucene/index/TermContext.java:156 condition failed: assert ord >= 0 && ord < states.length;"));
  return IOSObjectArray_Get(nil_chk(states_), ord);
}

- (jint)docFreq {
  return docFreq_;
}

- (jlong)totalTermFreq {
  return totalTermFreq_;
}

- (jboolean)hasOnlyRealTerms {
  {
    IOSObjectArray *a__ = states_;
    OrgApacheLuceneIndexTermState * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneIndexTermState * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneIndexTermState *termState = *b__++;
      if (termState != nil && [termState isRealTerm] == false) {
        return false;
      }
    }
  }
  return true;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [sb appendWithNSString:@"TermContext\n"];
  {
    IOSObjectArray *a__ = states_;
    OrgApacheLuceneIndexTermState * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneIndexTermState * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneIndexTermState *termState = *b__++;
      [sb appendWithNSString:@"  state="];
      [sb appendWithNSString:[((OrgApacheLuceneIndexTermState *) nil_chk(termState)) description]];
      [sb appendWithChar:0x000a];
    }
  }
  return [sb description];
}

- (void)dealloc {
  RELEASE_(topReaderContext_);
  RELEASE_(states_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexIndexReaderContext:", "TermContext", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheLuceneIndexIndexReaderContext:withOrgApacheLuceneIndexTermState:withInt:withInt:withLong:", "TermContext", NULL, 0x1, NULL, NULL },
    { "buildWithOrgApacheLuceneIndexIndexReaderContext:withOrgApacheLuceneIndexTerm:", "build", "Lorg.apache.lucene.index.TermContext;", 0x9, "Ljava.io.IOException;", NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "register__WithOrgApacheLuceneIndexTermState:withInt:withInt:withLong:", "register", "V", 0x1, NULL, NULL },
    { "register__WithOrgApacheLuceneIndexTermState:withInt:", "register", "V", 0x1, NULL, NULL },
    { "accumulateStatisticsWithInt:withLong:", "accumulateStatistics", "V", 0x1, NULL, NULL },
    { "getWithInt:", "get", "Lorg.apache.lucene.index.TermState;", 0x1, NULL, NULL },
    { "docFreq", NULL, "I", 0x1, NULL, NULL },
    { "totalTermFreq", NULL, "J", 0x1, NULL, NULL },
    { "hasOnlyRealTerms", NULL, "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "topReaderContext_", NULL, 0x11, "Lorg.apache.lucene.index.IndexReaderContext;", NULL, NULL, .constantValue.asLong = 0 },
    { "states_", NULL, 0x12, "[Lorg.apache.lucene.index.TermState;", NULL, NULL, .constantValue.asLong = 0 },
    { "docFreq_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "totalTermFreq_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermContext = { 2, "TermContext", "org.apache.lucene.index", NULL, 0x11, 12, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexTermContext;
}

@end

void OrgApacheLuceneIndexTermContext_initWithOrgApacheLuceneIndexIndexReaderContext_(OrgApacheLuceneIndexTermContext *self, OrgApacheLuceneIndexIndexReaderContext *context) {
  NSObject_init(self);
  JreAssert((context != nil && context->isTopLevel_), (@"org/apache/lucene/index/TermContext.java:52 condition failed: assert context != null && context.isTopLevel;"));
  JreStrongAssign(&self->topReaderContext_, context);
  self->docFreq_ = 0;
  self->totalTermFreq_ = 0;
  jint len;
  if ([((OrgApacheLuceneIndexIndexReaderContext *) nil_chk(context)) leaves] == nil) {
    len = 1;
  }
  else {
    len = [((id<JavaUtilList>) nil_chk([context leaves])) size];
  }
  JreStrongAssignAndConsume(&self->states_, [IOSObjectArray newArrayWithLength:len type:OrgApacheLuceneIndexTermState_class_()]);
}

OrgApacheLuceneIndexTermContext *new_OrgApacheLuceneIndexTermContext_initWithOrgApacheLuceneIndexIndexReaderContext_(OrgApacheLuceneIndexIndexReaderContext *context) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermContext, initWithOrgApacheLuceneIndexIndexReaderContext_, context)
}

OrgApacheLuceneIndexTermContext *create_OrgApacheLuceneIndexTermContext_initWithOrgApacheLuceneIndexIndexReaderContext_(OrgApacheLuceneIndexIndexReaderContext *context) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermContext, initWithOrgApacheLuceneIndexIndexReaderContext_, context)
}

void OrgApacheLuceneIndexTermContext_initWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTermState_withInt_withInt_withLong_(OrgApacheLuceneIndexTermContext *self, OrgApacheLuceneIndexIndexReaderContext *context, OrgApacheLuceneIndexTermState *state, jint ord, jint docFreq, jlong totalTermFreq) {
  OrgApacheLuceneIndexTermContext_initWithOrgApacheLuceneIndexIndexReaderContext_(self, context);
  [self register__WithOrgApacheLuceneIndexTermState:state withInt:ord withInt:docFreq withLong:totalTermFreq];
}

OrgApacheLuceneIndexTermContext *new_OrgApacheLuceneIndexTermContext_initWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTermState_withInt_withInt_withLong_(OrgApacheLuceneIndexIndexReaderContext *context, OrgApacheLuceneIndexTermState *state, jint ord, jint docFreq, jlong totalTermFreq) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermContext, initWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTermState_withInt_withInt_withLong_, context, state, ord, docFreq, totalTermFreq)
}

OrgApacheLuceneIndexTermContext *create_OrgApacheLuceneIndexTermContext_initWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTermState_withInt_withInt_withLong_(OrgApacheLuceneIndexIndexReaderContext *context, OrgApacheLuceneIndexTermState *state, jint ord, jint docFreq, jlong totalTermFreq) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermContext, initWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTermState_withInt_withInt_withLong_, context, state, ord, docFreq, totalTermFreq)
}

OrgApacheLuceneIndexTermContext *OrgApacheLuceneIndexTermContext_buildWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexIndexReaderContext *context, OrgApacheLuceneIndexTerm *term) {
  OrgApacheLuceneIndexTermContext_initialize();
  JreAssert((context != nil && context->isTopLevel_), (@"org/apache/lucene/index/TermContext.java:84 condition failed: assert context != null && context.isTopLevel;"));
  NSString *field = [((OrgApacheLuceneIndexTerm *) nil_chk(term)) field];
  OrgApacheLuceneUtilBytesRef *bytes = [term bytes];
  OrgApacheLuceneIndexTermContext *perReaderTermState = create_OrgApacheLuceneIndexTermContext_initWithOrgApacheLuceneIndexIndexReaderContext_(context);
  for (OrgApacheLuceneIndexLeafReaderContext * __strong ctx in nil_chk([((OrgApacheLuceneIndexIndexReaderContext *) nil_chk(context)) leaves])) {
    OrgApacheLuceneIndexTerms *terms = [((OrgApacheLuceneIndexLeafReader *) nil_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(ctx)) reader])) termsWithNSString:field];
    if (terms != nil) {
      OrgApacheLuceneIndexTermsEnum *termsEnum = [terms iterator];
      if ([((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) seekExactWithOrgApacheLuceneUtilBytesRef:bytes]) {
        OrgApacheLuceneIndexTermState *termState = [termsEnum termState];
        [perReaderTermState register__WithOrgApacheLuceneIndexTermState:termState withInt:ctx->ord_ withInt:[termsEnum docFreq] withLong:[termsEnum totalTermFreq]];
      }
    }
  }
  return perReaderTermState;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermContext)
