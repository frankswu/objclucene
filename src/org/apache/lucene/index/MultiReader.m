//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/MultiReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/BaseCompositeReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/MultiReader.h"

@interface OrgApacheLuceneIndexMultiReader () {
 @public
  jboolean closeSubReaders_;
}

@end

@implementation OrgApacheLuceneIndexMultiReader

- (instancetype)initWithOrgApacheLuceneIndexIndexReaderArray:(IOSObjectArray *)subReaders {
  OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_(self, subReaders);
  return self;
}

- (instancetype)initWithOrgApacheLuceneIndexIndexReaderArray:(IOSObjectArray *)subReaders
                                                 withBoolean:(jboolean)closeSubReaders {
  OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_withBoolean_(self, subReaders, closeSubReaders);
  return self;
}

- (void)doClose {
  @synchronized(self) {
    JavaIoIOException *ioe = nil;
    for (OrgApacheLuceneIndexIndexReader * __strong r in nil_chk([self getSequentialSubReaders])) {
      @try {
        if (closeSubReaders_) {
          [((OrgApacheLuceneIndexIndexReader *) nil_chk(r)) close];
        }
        else {
          [((OrgApacheLuceneIndexIndexReader *) nil_chk(r)) decRef];
        }
      }
      @catch (JavaIoIOException *e) {
        if (ioe == nil) ioe = e;
      }
    }
    if (ioe != nil) @throw ioe;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexIndexReaderArray:", "MultiReader", NULL, 0x81, "Ljava.io.IOException;", NULL },
    { "initWithOrgApacheLuceneIndexIndexReaderArray:withBoolean:", "MultiReader", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "doClose", NULL, "V", 0x24, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "closeSubReaders_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Lorg.apache.lucene.index.IndexReader;"};
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiReader = { 2, "MultiReader", "org.apache.lucene.index", NULL, 0x1, 3, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "Lorg/apache/lucene/index/BaseCompositeReader<Lorg/apache/lucene/index/IndexReader;>;" };
  return &_OrgApacheLuceneIndexMultiReader;
}

@end

void OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_(OrgApacheLuceneIndexMultiReader *self, IOSObjectArray *subReaders) {
  OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_withBoolean_(self, subReaders, true);
}

OrgApacheLuceneIndexMultiReader *new_OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_(IOSObjectArray *subReaders) {
  OrgApacheLuceneIndexMultiReader *self = [OrgApacheLuceneIndexMultiReader alloc];
  OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_(self, subReaders);
  return self;
}

void OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_withBoolean_(OrgApacheLuceneIndexMultiReader *self, IOSObjectArray *subReaders, jboolean closeSubReaders) {
  OrgApacheLuceneIndexBaseCompositeReader_initWithOrgApacheLuceneIndexIndexReaderArray_(self, [((IOSObjectArray *) nil_chk(subReaders)) clone]);
  self->closeSubReaders_ = closeSubReaders;
  if (!closeSubReaders) {
    for (jint i = 0; i < subReaders->size_; i++) {
      [((OrgApacheLuceneIndexIndexReader *) nil_chk(IOSObjectArray_Get(subReaders, i))) incRef];
    }
  }
}

OrgApacheLuceneIndexMultiReader *new_OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_withBoolean_(IOSObjectArray *subReaders, jboolean closeSubReaders) {
  OrgApacheLuceneIndexMultiReader *self = [OrgApacheLuceneIndexMultiReader alloc];
  OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_withBoolean_(self, subReaders, closeSubReaders);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiReader)
