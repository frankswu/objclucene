//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/IndexWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Queue.h"
#include "java/util/Set.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/codecs/CompoundFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/document/Field.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/index/AbortingException.h"
#include "org/apache/lucene/index/BufferedUpdatesStream.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/DocValuesFieldUpdates.h"
#include "org/apache/lucene/index/DocValuesType.h"
#include "org/apache/lucene/index/DocValuesUpdate.h"
#include "org/apache/lucene/index/DocumentsWriter.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FlushPolicy.h"
#include "org/apache/lucene/index/FrozenBufferedUpdates.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexFileDeleter.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexNotFoundException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/MergeRateLimiter.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/ReaderUtil.h"
#include "org/apache/lucene/index/ReadersAndUpdates.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentMerger.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/StandardDirectoryReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/FilterDirectory.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/Lock.h"
#include "org/apache/lucene/store/LockObtainFailedException.h"
#include "org/apache/lucene/store/LockValidatingDirectoryWrapper.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "org/apache/lucene/store/RateLimitedIndexOutput.h"
#include "org/apache/lucene/store/SleepingLockWrapper.h"
#include "org/apache/lucene/store/TrackingDirectoryWrapper.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/CloseableThreadLocal.h"
#include "org/apache/lucene/util/Constants.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"
#include "org/apache/lucene/util/Version.h"
#include "org/lukhnos/portmobile/file/NoSuchFileException.h"

@class OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates;

#define OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS -1

@interface OrgApacheLuceneIndexIndexWriter () {
 @public
  OrgApacheLuceneStoreDirectory *directoryOrig_;
  OrgApacheLuceneStoreDirectory *directory_;
  OrgApacheLuceneStoreDirectory *mergeDirectory_;
  OrgApacheLuceneAnalysisAnalyzer *analyzer_;
  JavaUtilConcurrentAtomicAtomicLong *changeCount_;
  volatile_jlong lastCommitChangeCount_;
  id<JavaUtilList> rollbackSegments_;
  id<JavaUtilCollection> filesToCommit_;
  OrgApacheLuceneIndexDocumentsWriter *docWriter_;
  id<JavaUtilQueue> eventQueue_;
  id<JavaUtilMap> segmentsToMerge_;
  jint mergeMaxNumSegments_;
  OrgApacheLuceneStoreLock *writeLock_;
  volatile_jboolean closed_;
  volatile_jboolean closing_;
  JavaUtilHashSet *mergingSegments_;
  OrgApacheLuceneIndexMergeScheduler *mergeScheduler_;
  JavaUtilLinkedList *pendingMerges_;
  id<JavaUtilSet> runningMerges_;
  id<JavaUtilList> mergeExceptions_;
  jlong mergeGen_;
  jboolean stopMerges_;
  jboolean didMessageState_;
  volatile_jboolean poolReaders_;
  OrgApacheLuceneIndexLiveIndexWriterConfig *config_;
  jlong startCommitTime_;
  id commitLock_;
  id fullFlushLock_;
  jboolean keepFullyDeletedSegments_;
}

- (OrgApacheLuceneIndexFieldInfos_FieldNumbers *)getFieldNumberMap;

- (void)messageState;

- (void)shutdown;

- (jboolean)shouldCloseWithBoolean:(jboolean)waitForClose;

- (jboolean)maxNumSegmentsMergesPending;

- (void)maybeMergeWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy
             withOrgApacheLuceneIndexMergeTriggerEnum:(OrgApacheLuceneIndexMergeTriggerEnum *)trigger
                                              withInt:(jint)maxNumSegments;

- (jboolean)updatePendingMergesWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy
                          withOrgApacheLuceneIndexMergeTriggerEnum:(OrgApacheLuceneIndexMergeTriggerEnum *)trigger
                                                           withInt:(jint)maxNumSegments;

- (void)rollbackInternal;

- (void)abortMerges;

- (void)resetMergeExceptions;

- (void)noDupDirsWithOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)dirs;

- (id<JavaUtilList>)acquireWriteLocksWithOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)dirs;

- (OrgApacheLuceneIndexSegmentCommitInfo *)copySegmentAsIsWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                                                                                       withNSString:(NSString *)segName
                                                                  withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context OBJC_METHOD_FAMILY_NONE;

- (void)prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy;

- (void)commitInternalWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy;

- (void)finishCommit;

- (jboolean)doFlushWithBoolean:(jboolean)applyAllDeletes;

- (void)ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge;

- (void)skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray:(IOSObjectArray *)updatesIters
                                                                          withInt:(jint)deletedDoc;

- (void)maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                           withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState
                                                                      withInt:(jint)docUpto
                  withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates:(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *)holder
                                                            withNSStringArray:(IOSObjectArray *)mergingFields
                           withOrgApacheLuceneIndexDocValuesFieldUpdatesArray:(IOSObjectArray *)dvFieldUpdates
                  withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray:(IOSObjectArray *)updatesIters
                                                                      withInt:(jint)curDoc;

- (OrgApacheLuceneIndexReadersAndUpdates *)commitMergedDeletesAndUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                                                                  withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState;

- (jboolean)commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                 withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState;

- (void)handleMergeExceptionWithJavaLangThrowable:(JavaLangThrowable *)t
     withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge;

- (void)_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge;

+ (void)setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                             withNSString:(NSString *)source
                                          withJavaUtilMap:(id<JavaUtilMap>)details;

- (void)closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                                          withBoolean:(jboolean)suppressExceptions;

- (jint)mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                            withOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy;

- (void)doWait;

- (jboolean)filesExistWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)toSync;

- (void)startCommitWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)toSync;

- (void)testPointWithNSString:(NSString *)message;

- (void)deletePendingFiles;

- (jboolean)processEventsWithBoolean:(jboolean)triggerMerge
                         withBoolean:(jboolean)forcePurge;

- (jboolean)processEventsWithJavaUtilQueue:(id<JavaUtilQueue>)queue
                               withBoolean:(jboolean)triggerMerge
                               withBoolean:(jboolean)forcePurge;

- (void)reserveDocsWithLong:(jlong)addedNumDocs;

- (void)testReserveDocsWithLong:(jlong)addedNumDocs;

- (void)tooManyDocsWithLong:(jlong)addedNumDocs;

- (OrgApacheLuceneStoreDirectory *)addMergeRateLimitersWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)inArg;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, directoryOrig_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, directory_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, mergeDirectory_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, analyzer_, OrgApacheLuceneAnalysisAnalyzer *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, changeCount_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, rollbackSegments_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, filesToCommit_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, docWriter_, OrgApacheLuceneIndexDocumentsWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, eventQueue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, segmentsToMerge_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, writeLock_, OrgApacheLuceneStoreLock *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, mergingSegments_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, mergeScheduler_, OrgApacheLuceneIndexMergeScheduler *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, pendingMerges_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, runningMerges_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, mergeExceptions_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, config_, OrgApacheLuceneIndexLiveIndexWriterConfig *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, commitLock_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, fullFlushLock_, id)

static jint OrgApacheLuceneIndexIndexWriter_actualMaxDocs_ = 2147483519;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneIndexIndexWriter, actualMaxDocs_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgApacheLuceneIndexIndexWriter, actualMaxDocs_, jint)
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneIndexIndexWriter, UNBOUNDED_MAX_MERGE_SEGMENTS, jint)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean failIfClosing);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_ensureOpen(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static OrgApacheLuceneIndexFieldInfos_FieldNumbers *OrgApacheLuceneIndexIndexWriter_getFieldNumberMap(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_messageState(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_shutdown(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_shouldCloseWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean waitForClose);

__attribute__((unused)) static NSString *OrgApacheLuceneIndexIndexWriter_newSegmentName(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_maxNumSegmentsMergesPending(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_maybeMerge(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy, OrgApacheLuceneIndexMergeTriggerEnum *trigger, jint maxNumSegments);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy, OrgApacheLuceneIndexMergeTriggerEnum *trigger, jint maxNumSegments);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_rollbackInternal(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_abortMerges(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_resetMergeExceptions(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_noDupDirsWithOrgApacheLuceneStoreDirectoryArray_(OrgApacheLuceneIndexIndexWriter *self, IOSObjectArray *dirs);

__attribute__((unused)) static id<JavaUtilList> OrgApacheLuceneIndexIndexWriter_acquireWriteLocksWithOrgApacheLuceneStoreDirectoryArray_(OrgApacheLuceneIndexIndexWriter *self, IOSObjectArray *dirs);

__attribute__((unused)) static OrgApacheLuceneIndexSegmentCommitInfo *OrgApacheLuceneIndexIndexWriter_copySegmentAsIsWithOrgApacheLuceneIndexSegmentCommitInfo_withNSString_withOrgApacheLuceneStoreIOContext_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentCommitInfo *info, NSString *segName, OrgApacheLuceneStoreIOContext *context);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_commitInternalWithOrgApacheLuceneIndexMergePolicy_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_finishCommit(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean triggerMerge, jboolean applyAllDeletes);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_doFlushWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean applyAllDeletes);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_maybeApplyDeletesWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean applyAllDeletes);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_applyAllDeletesAndUpdates(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(OrgApacheLuceneIndexIndexWriter *self, IOSObjectArray *updatesIters, jint deletedDoc);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withInt_withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_withNSStringArray_withOrgApacheLuceneIndexDocValuesFieldUpdatesArray_withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState, jint docUpto, OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *holder, IOSObjectArray *mergingFields, IOSObjectArray *dvFieldUpdates, IOSObjectArray *updatesIters, jint curDoc);

__attribute__((unused)) static OrgApacheLuceneIndexReadersAndUpdates *OrgApacheLuceneIndexIndexWriter_commitMergedDeletesAndUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithJavaLangThrowable_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, JavaLangThrowable *t, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter__mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(OrgApacheLuceneIndexSegmentInfo *info, NSString *source, id<JavaUtilMap> details);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, jboolean suppressExceptions);

__attribute__((unused)) static jint OrgApacheLuceneIndexIndexWriter_mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergePolicy_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergePolicy *mergePolicy);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_doWait(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_filesExistWithOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfos *toSync);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_startCommitWithOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfos *toSync);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(OrgApacheLuceneIndexIndexWriter *self, NSString *message);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_createCompoundFileWithOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreTrackingDirectoryWrapper_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneStoreIOContext_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneUtilInfoStream *infoStream, OrgApacheLuceneStoreTrackingDirectoryWrapper *directory, OrgApacheLuceneIndexSegmentInfo *info, OrgApacheLuceneStoreIOContext *context);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(OrgApacheLuceneIndexIndexWriter *self, id<JavaUtilCollection> files);

__attribute__((unused)) static jint OrgApacheLuceneIndexIndexWriter_purgeWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean forced);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean triggerMerge, jboolean forcePurge);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_processEventsWithJavaUtilQueue_withBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, id<JavaUtilQueue> queue, jboolean triggerMerge, jboolean forcePurge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_reserveDocsWithLong_(OrgApacheLuceneIndexIndexWriter *self, jlong addedNumDocs);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_testReserveDocsWithLong_(OrgApacheLuceneIndexIndexWriter *self, jlong addedNumDocs);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_tooManyDocsWithLong_(OrgApacheLuceneIndexIndexWriter *self, jlong addedNumDocs);

__attribute__((unused)) static OrgApacheLuceneStoreDirectory *OrgApacheLuceneIndexIndexWriter_addMergeRateLimitersWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneStoreDirectory *inArg);

@interface OrgApacheLuceneIndexIndexWriter_ReaderPool () {
 @public
  OrgApacheLuceneIndexIndexWriter *this$0_;
  id<JavaUtilMap> readerMap_;
}

- (jboolean)noDups;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter_ReaderPool, this$0_, OrgApacheLuceneIndexIndexWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter_ReaderPool, readerMap_, id<JavaUtilMap>)

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_ReaderPool_noDups(OrgApacheLuceneIndexIndexWriter_ReaderPool *self);

@interface OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates : NSObject {
 @public
  OrgApacheLuceneIndexReadersAndUpdates *mergedDeletesAndUpdates_;
  OrgApacheLuceneIndexMergePolicy_DocMap *docMap_;
  jboolean initializedWritableLiveDocs_;
}

- (instancetype)init;

- (void)init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool:(OrgApacheLuceneIndexIndexWriter_ReaderPool *)readerPool
                withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                          withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState
                                                 withBoolean:(jboolean)initWritableLiveDocs OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates, mergedDeletesAndUpdates_, OrgApacheLuceneIndexReadersAndUpdates *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates, docMap_, OrgApacheLuceneIndexMergePolicy_DocMap *)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *self);

__attribute__((unused)) static OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *new_OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool_withOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withBoolean_(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *self, OrgApacheLuceneIndexIndexWriter_ReaderPool *readerPool, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState, jboolean initWritableLiveDocs);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates)

@interface OrgApacheLuceneIndexIndexWriter_Event : NSObject

@end

@interface OrgApacheLuceneIndexIndexWriter_$1 : OrgApacheLuceneStoreFilterDirectory {
 @public
  OrgApacheLuceneIndexIndexWriter *this$0_;
}

- (OrgApacheLuceneStoreIndexOutput *)createOutputWithNSString:(NSString *)name
                            withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context;

- (instancetype)initWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)outer$
                      withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexIndexWriter_$1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter_$1, this$0_, OrgApacheLuceneIndexIndexWriter *)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_$1_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter_$1 *self, OrgApacheLuceneIndexIndexWriter *outer$, OrgApacheLuceneStoreDirectory *arg$0);

__attribute__((unused)) static OrgApacheLuceneIndexIndexWriter_$1 *new_OrgApacheLuceneIndexIndexWriter_$1_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter *outer$, OrgApacheLuceneStoreDirectory *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexIndexWriter_$1)

NSString *OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME_ = @"write.lock";
NSString *OrgApacheLuceneIndexIndexWriter_SOURCE_ = @"source";
NSString *OrgApacheLuceneIndexIndexWriter_SOURCE_MERGE_ = @"merge";
NSString *OrgApacheLuceneIndexIndexWriter_SOURCE_FLUSH_ = @"flush";
NSString *OrgApacheLuceneIndexIndexWriter_SOURCE_ADDINDEXES_READERS_ = @"addIndexes(CodecReader...)";

@implementation OrgApacheLuceneIndexIndexWriter

+ (void)setMaxDocsWithInt:(jint)maxDocs {
  OrgApacheLuceneIndexIndexWriter_setMaxDocsWithInt_(maxDocs);
}

+ (jint)getActualMaxDocs {
  return OrgApacheLuceneIndexIndexWriter_getActualMaxDocs();
}

- (OrgApacheLuceneIndexDirectoryReader *)getReader {
  return [self getReaderWithBoolean:YES];
}

- (OrgApacheLuceneIndexDirectoryReader *)getReaderWithBoolean:(jboolean)applyAllDeletes {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  jlong tStart = JavaLangSystem_currentTimeMillis();
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
    [infoStream_ messageWithNSString:@"IW" withNSString:@"flush at getReader"];
  }
  JreAssignVolatileBoolean(&poolReaders_, YES);
  OrgApacheLuceneIndexDirectoryReader *r = nil;
  [self doBeforeFlush];
  jboolean anyChanges = NO;
  jboolean success2 = NO;
  @try {
    jboolean success = NO;
    @synchronized(fullFlushLock_) {
      @try {
        anyChanges = [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) flushAllThreads];
        if (!anyChanges) {
          [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(flushCount_)) incrementAndGet];
        }
        @synchronized(self) {
          anyChanges |= OrgApacheLuceneIndexIndexWriter_maybeApplyDeletesWithBoolean_(self, applyAllDeletes);
          r = OrgApacheLuceneIndexStandardDirectoryReader_openWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withBoolean_(self, segmentInfos_, applyAllDeletes);
          if ([infoStream_ isEnabledWithNSString:@"IW"]) {
            [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$J$@", @"return reader version=", [((OrgApacheLuceneIndexDirectoryReader *) nil_chk(r)) getVersion], @" reader=", r)];
          }
        }
        success = YES;
      }
      @finally {
        [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) finishFullFlushWithOrgApacheLuceneIndexIndexWriter:self withBoolean:success];
        if (success) {
          OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, NO, YES);
          [self doAfterFlush];
        }
        else {
          if ([infoStream_ isEnabledWithNSString:@"IW"]) {
            [infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception during NRT reader"];
          }
        }
      }
    }
    if (anyChanges) {
      OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy], JreLoadStatic(OrgApacheLuceneIndexMergeTriggerEnum, FULL_FLUSH), OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS);
    }
    if ([infoStream_ isEnabledWithNSString:@"IW"]) {
      [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$J$", @"getReader took ", (JavaLangSystem_currentTimeMillis() - tStart), @" msec")];
    }
    success2 = YES;
  }
  @catch (OrgApacheLuceneIndexAbortingException *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"getReader"];
    return nil;
  }
  @catch (JavaLangOutOfMemoryError *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"getReader"];
    return nil;
  }
  @catch (JavaLangThrowable *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"getReader"];
    return nil;
  }
  @finally {
    if (!success2) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ r } count:1 type:JavaIoCloseable_class_()]);
    }
  }
  return r;
}

- (jlong)ramBytesUsed {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) ramBytesUsed];
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (jint)numDeletedDocsWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, NO);
  jint delCount = [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info)) getDelCount];
  OrgApacheLuceneIndexReadersAndUpdates *rld = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(readerPool_)) getWithOrgApacheLuceneIndexSegmentCommitInfo:info withBoolean:NO];
  if (rld != nil) {
    delCount += [rld getPendingDeleteCount];
  }
  return delCount;
}

- (void)ensureOpenWithBoolean:(jboolean)failIfClosing {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, failIfClosing);
}

- (void)ensureOpen {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)d
            withOrgApacheLuceneIndexIndexWriterConfig:(OrgApacheLuceneIndexIndexWriterConfig *)conf {
  OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(self, d, conf);
  return self;
}

+ (OrgApacheLuceneIndexFieldInfos *)readFieldInfosWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)si {
  return OrgApacheLuceneIndexIndexWriter_readFieldInfosWithOrgApacheLuceneIndexSegmentCommitInfo_(si);
}

- (OrgApacheLuceneIndexFieldInfos_FieldNumbers *)getFieldNumberMap {
  return OrgApacheLuceneIndexIndexWriter_getFieldNumberMap(self);
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)getConfig {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, NO);
  return config_;
}

- (void)messageState {
  OrgApacheLuceneIndexIndexWriter_messageState(self);
}

- (void)shutdown {
  OrgApacheLuceneIndexIndexWriter_shutdown(self);
}

- (void)close {
  if ([((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getCommitOnClose]) {
    OrgApacheLuceneIndexIndexWriter_shutdown(self);
  }
  else {
    [self rollback];
  }
}

- (jboolean)shouldCloseWithBoolean:(jboolean)waitForClose {
  return OrgApacheLuceneIndexIndexWriter_shouldCloseWithBoolean_(self, waitForClose);
}

- (OrgApacheLuceneStoreDirectory *)getDirectory {
  return directoryOrig_;
}

- (OrgApacheLuceneAnalysisAnalyzer *)getAnalyzer {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return analyzer_;
}

- (jint)maxDoc {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getNumDocs] + [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) totalMaxDoc];
  }
}

- (jint)numDocs {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    jint count = [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getNumDocs];
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(segmentInfos_)) {
      count += [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) maxDoc] - [self numDeletedDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info];
    }
    return count;
  }
}

- (jboolean)hasDeletions {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    if ([((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) any]) {
      return YES;
    }
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) anyDeletions]) {
      return YES;
    }
    if ([((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(readerPool_)) anyPendingDeletes]) {
      return YES;
    }
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(segmentInfos_)) {
      if ([((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info)) hasDeletions]) {
        return YES;
      }
    }
    return NO;
  }
}

- (void)addDocumentWithJavaLangIterable:(id<JavaLangIterable>)doc {
  [self updateDocumentWithOrgApacheLuceneIndexTerm:nil withJavaLangIterable:doc];
}

- (void)addDocumentsWithJavaLangIterable:(id<JavaLangIterable>)docs {
  [self updateDocumentsWithOrgApacheLuceneIndexTerm:nil withJavaLangIterable:docs];
}

- (void)updateDocumentsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm
                               withJavaLangIterable:(id<JavaLangIterable>)docs {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  @try {
    jboolean success = NO;
    @try {
      if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) updateDocumentsWithJavaLangIterable:docs withOrgApacheLuceneAnalysisAnalyzer:analyzer_ withOrgApacheLuceneIndexTerm:delTerm]) {
        OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, YES, NO);
      }
      success = YES;
    }
    @finally {
      if (!success) {
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
          [infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception updating document"];
        }
      }
    }
  }
  @catch (OrgApacheLuceneIndexAbortingException *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"updateDocuments"];
  }
  @catch (JavaLangOutOfMemoryError *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"updateDocuments"];
  }
  @catch (JavaLangThrowable *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"updateDocuments"];
  }
}

- (jboolean)tryDeleteDocumentWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)readerIn
                                                         withInt:(jint)docID {
  @synchronized(self) {
    OrgApacheLuceneIndexLeafReader *reader;
    if ([readerIn isKindOfClass:[OrgApacheLuceneIndexLeafReader class]]) {
      reader = (OrgApacheLuceneIndexLeafReader *) check_class_cast(readerIn, [OrgApacheLuceneIndexLeafReader class]);
    }
    else {
      id<JavaUtilList> leaves = [((OrgApacheLuceneIndexIndexReader *) nil_chk(readerIn)) leaves];
      jint subIndex = OrgApacheLuceneIndexReaderUtil_subIndexWithInt_withJavaUtilList_(docID, leaves);
      reader = [((OrgApacheLuceneIndexLeafReaderContext *) nil_chk([((id<JavaUtilList>) nil_chk(leaves)) getWithInt:subIndex])) reader];
      docID -= ((OrgApacheLuceneIndexLeafReaderContext *) nil_chk([leaves getWithInt:subIndex]))->docBase_;
      JreAssert((docID >= 0), (@"org/apache/lucene/index/IndexWriter.java:1357 condition failed: assert docID >= 0;"));
      JreAssert((docID < [((OrgApacheLuceneIndexLeafReader *) nil_chk(reader)) maxDoc]), (@"org/apache/lucene/index/IndexWriter.java:1358 condition failed: assert docID < reader.maxDoc();"));
    }
    if (!([reader isKindOfClass:[OrgApacheLuceneIndexSegmentReader class]])) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"the reader must be a SegmentReader or composite reader containing only SegmentReaders") autorelease];
    }
    OrgApacheLuceneIndexSegmentCommitInfo *info = [((OrgApacheLuceneIndexSegmentReader *) nil_chk(((OrgApacheLuceneIndexSegmentReader *) check_class_cast(reader, [OrgApacheLuceneIndexSegmentReader class])))) getSegmentInfo];
    if ([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) indexOfWithOrgApacheLuceneIndexSegmentCommitInfo:info] != -1) {
      OrgApacheLuceneIndexReadersAndUpdates *rld = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(readerPool_)) getWithOrgApacheLuceneIndexSegmentCommitInfo:info withBoolean:NO];
      if (rld != nil) {
        @synchronized(bufferedUpdatesStream_) {
          [rld initWritableLiveDocs];
          if ([rld delete__WithInt:docID]) {
            jint fullDelCount = [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(rld->info_)) getDelCount] + [rld getPendingDeleteCount];
            if (fullDelCount == [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(rld->info_->info_)) maxDoc]) {
              if (![((JavaUtilHashSet *) nil_chk(mergingSegments_)) containsWithId:rld->info_]) {
                [segmentInfos_ removeWithOrgApacheLuceneIndexSegmentCommitInfo:rld->info_];
                [readerPool_ dropWithOrgApacheLuceneIndexSegmentCommitInfo:rld->info_];
                [self checkpoint];
              }
            }
            [self changed];
          }
          return YES;
        }
      }
      else {
      }
    }
    else {
    }
    return NO;
  }
}

- (void)deleteDocumentsWithOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) deleteTermsWithOrgApacheLuceneIndexTermArray:terms]) {
      OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, YES, NO);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"deleteDocuments(Term..)"];
  }
}

- (void)deleteDocumentsWithOrgApacheLuceneSearchQueryArray:(IOSObjectArray *)queries {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  {
    IOSObjectArray *a__ = queries;
    OrgApacheLuceneSearchQuery * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneSearchQuery * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneSearchQuery *query = *b__++;
      if ([((OrgApacheLuceneSearchQuery *) nil_chk(query)) getClass] == OrgApacheLuceneSearchMatchAllDocsQuery_class_()) {
        [self deleteAll];
        return;
      }
    }
  }
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) deleteQueriesWithOrgApacheLuceneSearchQueryArray:queries]) {
      OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, YES, NO);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"deleteDocuments(Query..)"];
  }
}

- (void)updateDocumentWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                              withJavaLangIterable:(id<JavaLangIterable>)doc {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  @try {
    jboolean success = NO;
    @try {
      if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) updateDocumentWithJavaLangIterable:doc withOrgApacheLuceneAnalysisAnalyzer:analyzer_ withOrgApacheLuceneIndexTerm:term]) {
        OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, YES, NO);
      }
      success = YES;
    }
    @finally {
      if (!success) {
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
          [infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception updating document"];
        }
      }
    }
  }
  @catch (OrgApacheLuceneIndexAbortingException *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"updateDocument"];
  }
  @catch (JavaLangOutOfMemoryError *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"updateDocument"];
  }
  @catch (JavaLangThrowable *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"updateDocument"];
  }
}

- (void)updateNumericDocValueWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                             withNSString:(NSString *)field
                                                 withLong:(jlong)value {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  if (![((OrgApacheLuceneIndexFieldInfos_FieldNumbers *) nil_chk(globalFieldNumberMap_)) containsWithNSString:field withOrgApacheLuceneIndexDocValuesTypeEnum:JreLoadStatic(OrgApacheLuceneIndexDocValuesTypeEnum, NUMERIC)]) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"can only update existing numeric-docvalues fields!") autorelease];
  }
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) updateDocValuesWithOrgApacheLuceneIndexDocValuesUpdateArray:[IOSObjectArray arrayWithObjects:(id[]){ [new_OrgApacheLuceneIndexDocValuesUpdate_NumericDocValuesUpdate_initWithOrgApacheLuceneIndexTerm_withNSString_withJavaLangLong_(term, field, JavaLangLong_valueOfWithLong_(value)) autorelease] } count:1 type:OrgApacheLuceneIndexDocValuesUpdate_class_()]]) {
      OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, YES, NO);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"updateNumericDocValue"];
  }
}

- (void)updateBinaryDocValueWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                            withNSString:(NSString *)field
                         withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)value {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  if (value == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"cannot update a field to a null value: ", field)) autorelease];
  }
  if (![((OrgApacheLuceneIndexFieldInfos_FieldNumbers *) nil_chk(globalFieldNumberMap_)) containsWithNSString:field withOrgApacheLuceneIndexDocValuesTypeEnum:JreLoadStatic(OrgApacheLuceneIndexDocValuesTypeEnum, BINARY)]) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"can only update existing binary-docvalues fields!") autorelease];
  }
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) updateDocValuesWithOrgApacheLuceneIndexDocValuesUpdateArray:[IOSObjectArray arrayWithObjects:(id[]){ [new_OrgApacheLuceneIndexDocValuesUpdate_BinaryDocValuesUpdate_initWithOrgApacheLuceneIndexTerm_withNSString_withOrgApacheLuceneUtilBytesRef_(term, field, value) autorelease] } count:1 type:OrgApacheLuceneIndexDocValuesUpdate_class_()]]) {
      OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, YES, NO);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"updateBinaryDocValue"];
  }
}

- (void)updateDocValuesWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
              withOrgApacheLuceneDocumentFieldArray:(IOSObjectArray *)updates {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  IOSObjectArray *dvUpdates = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(updates))->size_ type:OrgApacheLuceneIndexDocValuesUpdate_class_()];
  for (jint i = 0; i < updates->size_; i++) {
    OrgApacheLuceneDocumentField *f = IOSObjectArray_Get(updates, i);
    OrgApacheLuceneIndexDocValuesTypeEnum *dvType = [((OrgApacheLuceneDocumentFieldType *) nil_chk([((OrgApacheLuceneDocumentField *) nil_chk(f)) fieldType])) docValuesType];
    if (dvType == nil) {
      @throw [new_JavaLangNullPointerException_initWithNSString_(JreStrcat("$$$", @"DocValuesType cannot be null (field: \"", [f name], @"\")")) autorelease];
    }
    if (dvType == JreLoadStatic(OrgApacheLuceneIndexDocValuesTypeEnum, NONE)) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"can only update NUMERIC or BINARY fields! field=", [f name])) autorelease];
    }
    if (![((OrgApacheLuceneIndexFieldInfos_FieldNumbers *) nil_chk(globalFieldNumberMap_)) containsWithNSString:[f name] withOrgApacheLuceneIndexDocValuesTypeEnum:dvType]) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$@", @"can only update existing docvalues fields! field=", [f name], @", type=", dvType)) autorelease];
    }
    switch ([dvType ordinal]) {
      case OrgApacheLuceneIndexDocValuesType_NUMERIC:
      IOSObjectArray_SetAndConsume(dvUpdates, i, new_OrgApacheLuceneIndexDocValuesUpdate_NumericDocValuesUpdate_initWithOrgApacheLuceneIndexTerm_withNSString_withJavaLangLong_(term, [f name], (JavaLangLong *) check_class_cast([f numericValue], [JavaLangLong class])));
      break;
      case OrgApacheLuceneIndexDocValuesType_BINARY:
      IOSObjectArray_SetAndConsume(dvUpdates, i, new_OrgApacheLuceneIndexDocValuesUpdate_BinaryDocValuesUpdate_initWithOrgApacheLuceneIndexTerm_withNSString_withOrgApacheLuceneUtilBytesRef_(term, [f name], [f binaryValue]));
      break;
      default:
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$@", @"can only update NUMERIC or BINARY fields: field=", [f name], @", type=", dvType)) autorelease];
    }
  }
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) updateDocValuesWithOrgApacheLuceneIndexDocValuesUpdateArray:dvUpdates]) {
      OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, YES, NO);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"updateDocValues"];
  }
}

- (jint)getSegmentCount {
  @synchronized(self) {
    return [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) size];
  }
}

- (jint)getNumBufferedDocuments {
  @synchronized(self) {
    return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getNumDocs];
  }
}

- (id<JavaUtilCollection>)getIndexFileNames {
  @synchronized(self) {
    return [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) filesWithBoolean:YES];
  }
}

- (jint)maxDocWithInt:(jint)i {
  @synchronized(self) {
    if (i >= 0 && i < [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) size]) {
      return [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk([segmentInfos_ infoWithInt:i]))->info_)) maxDoc];
    }
    else {
      return -1;
    }
  }
}

- (jint)getFlushCount {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(flushCount_)) get];
}

- (jint)getFlushDeletesCount {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(flushDeletesCount_)) get];
}

- (NSString *)newSegmentName {
  return OrgApacheLuceneIndexIndexWriter_newSegmentName(self);
}

- (void)forceMergeWithInt:(jint)maxNumSegments {
  [self forceMergeWithInt:maxNumSegments withBoolean:YES];
}

- (void)forceMergeWithInt:(jint)maxNumSegments
              withBoolean:(jboolean)doWait {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  if (maxNumSegments < 1) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"maxNumSegments must be >= 1; got ", maxNumSegments)) autorelease];
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
    [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"forceMerge: index now ", [self segString])];
    [infoStream_ messageWithNSString:@"IW" withNSString:@"now flush at forceMerge"];
  }
  OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, YES, YES);
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_resetMergeExceptions(self);
    [((id<JavaUtilMap>) nil_chk(segmentsToMerge_)) clear];
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(segmentInfos_)) {
      [segmentsToMerge_ putWithId:info withId:JreLoadStatic(JavaLangBoolean, TRUE__)];
    }
    mergeMaxNumSegments_ = maxNumSegments;
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(pendingMerges_)) {
      ((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ = maxNumSegments;
      [segmentsToMerge_ putWithId:merge->info_ withId:JreLoadStatic(JavaLangBoolean, TRUE__)];
    }
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(runningMerges_)) {
      ((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ = maxNumSegments;
      [segmentsToMerge_ putWithId:merge->info_ withId:JreLoadStatic(JavaLangBoolean, TRUE__)];
    }
  }
  OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy], JreLoadStatic(OrgApacheLuceneIndexMergeTriggerEnum, EXPLICIT), maxNumSegments);
  if (doWait) {
    @synchronized(self) {
      while (YES) {
        if (JreLoadVolatileId(&tragedy_) != nil) {
          @throw [new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot complete forceMerge", JreLoadVolatileId(&tragedy_)) autorelease];
        }
        if ([((id<JavaUtilList>) nil_chk(mergeExceptions_)) size] > 0) {
          jint size = [mergeExceptions_ size];
          for (jint i = 0; i < size; i++) {
            OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [mergeExceptions_ getWithInt:i];
            if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ != -1) {
              @throw [new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"background merge hit exception: ", [merge segString]), [merge getException]) autorelease];
            }
          }
        }
        if (OrgApacheLuceneIndexIndexWriter_maxNumSegmentsMergesPending(self)) OrgApacheLuceneIndexIndexWriter_doWait(self);
        else break;
      }
    }
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  }
}

- (jboolean)maxNumSegmentsMergesPending {
  return OrgApacheLuceneIndexIndexWriter_maxNumSegmentsMergesPending(self);
}

- (void)forceMergeDeletesWithBoolean:(jboolean)doWait {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, YES, YES);
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
    [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"forceMergeDeletes: index now ", [self segString])];
  }
  OrgApacheLuceneIndexMergePolicy *mergePolicy = [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy];
  OrgApacheLuceneIndexMergePolicy_MergeSpecification *spec;
  jboolean newMergesFound = NO;
  @synchronized(self) {
    spec = [((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy)) findForcedDeletesMergesWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withOrgApacheLuceneIndexIndexWriter:self];
    newMergesFound = (spec != nil);
    if (newMergesFound) {
      jint numMerges = [((id<JavaUtilList>) nil_chk(((OrgApacheLuceneIndexMergePolicy_MergeSpecification *) nil_chk(spec))->merges_)) size];
      for (jint i = 0; i < numMerges; i++) OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, [spec->merges_ getWithInt:i]);
    }
  }
  [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(mergeScheduler_)) mergeWithOrgApacheLuceneIndexIndexWriter:self withOrgApacheLuceneIndexMergeTriggerEnum:JreLoadStatic(OrgApacheLuceneIndexMergeTriggerEnum, EXPLICIT) withBoolean:newMergesFound];
  if (spec != nil && doWait) {
    jint numMerges = [((id<JavaUtilList>) nil_chk(spec->merges_)) size];
    @synchronized(self) {
      jboolean running = YES;
      while (running) {
        if (JreLoadVolatileId(&tragedy_) != nil) {
          @throw [new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot complete forceMergeDeletes", JreLoadVolatileId(&tragedy_)) autorelease];
        }
        running = NO;
        for (jint i = 0; i < numMerges; i++) {
          OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [spec->merges_ getWithInt:i];
          if ([((JavaUtilLinkedList *) nil_chk(pendingMerges_)) containsWithId:merge] || [((id<JavaUtilSet>) nil_chk(runningMerges_)) containsWithId:merge]) {
            running = YES;
          }
          JavaLangThrowable *t = [((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) getException];
          if (t != nil) {
            @throw [new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"background merge hit exception: ", [merge segString]), t) autorelease];
          }
        }
        if (running) OrgApacheLuceneIndexIndexWriter_doWait(self);
      }
    }
  }
}

- (void)forceMergeDeletes {
  [self forceMergeDeletesWithBoolean:YES];
}

- (void)maybeMerge {
  OrgApacheLuceneIndexIndexWriter_maybeMerge(self);
}

- (void)maybeMergeWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy
             withOrgApacheLuceneIndexMergeTriggerEnum:(OrgApacheLuceneIndexMergeTriggerEnum *)trigger
                                              withInt:(jint)maxNumSegments {
  OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(self, mergePolicy, trigger, maxNumSegments);
}

- (jboolean)updatePendingMergesWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy
                          withOrgApacheLuceneIndexMergeTriggerEnum:(OrgApacheLuceneIndexMergeTriggerEnum *)trigger
                                                           withInt:(jint)maxNumSegments {
  return OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(self, mergePolicy, trigger, maxNumSegments);
}

- (id<JavaUtilCollection>)getMergingSegments {
  @synchronized(self) {
    return mergingSegments_;
  }
}

- (OrgApacheLuceneIndexMergePolicy_OneMerge *)getNextMerge {
  @synchronized(self) {
    if ([((JavaUtilLinkedList *) nil_chk(pendingMerges_)) size] == 0) {
      return nil;
    }
    else {
      OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [pendingMerges_ removeFirst];
      [((id<JavaUtilSet>) nil_chk(runningMerges_)) addWithId:merge];
      return merge;
    }
  }
}

- (jboolean)hasPendingMerges {
  @synchronized(self) {
    return [((JavaUtilLinkedList *) nil_chk(pendingMerges_)) size] != 0;
  }
}

- (void)rollback {
  @synchronized(commitLock_) {
    if (OrgApacheLuceneIndexIndexWriter_shouldCloseWithBoolean_(self, YES)) {
      OrgApacheLuceneIndexIndexWriter_rollbackInternal(self);
    }
  }
}

- (void)rollbackInternal {
  OrgApacheLuceneIndexIndexWriter_rollbackInternal(self);
}

- (void)deleteAll {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  jboolean success = NO;
  @try {
    @synchronized(fullFlushLock_) {
      jlong abortedDocCount = [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) lockAndAbortAllWithOrgApacheLuceneIndexIndexWriter:self];
      [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(pendingNumDocs_)) addAndGetWithLong:-abortedDocCount];
      OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, NO, YES);
      @synchronized(self) {
        @try {
          OrgApacheLuceneIndexIndexWriter_abortMerges(self);
          stopMerges_ = NO;
          [pendingNumDocs_ addAndGetWithLong:-[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) totalMaxDoc]];
          [segmentInfos_ clear];
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withBoolean:NO];
          [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(readerPool_)) dropAllWithBoolean:NO];
          [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(changeCount_)) incrementAndGet];
          [segmentInfos_ changed];
          [((OrgApacheLuceneIndexFieldInfos_FieldNumbers *) nil_chk(globalFieldNumberMap_)) clear];
          success = YES;
        }
        @finally {
          [docWriter_ unlockAllAfterAbortAllWithOrgApacheLuceneIndexIndexWriter:self];
          if (!success) {
            if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
              [infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception during deleteAll"];
            }
          }
        }
      }
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"deleteAll"];
  }
}

- (void)abortMerges {
  OrgApacheLuceneIndexIndexWriter_abortMerges(self);
}

- (void)waitForMerges {
  [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(mergeScheduler_)) mergeWithOrgApacheLuceneIndexIndexWriter:self withOrgApacheLuceneIndexMergeTriggerEnum:JreLoadStatic(OrgApacheLuceneIndexMergeTriggerEnum, CLOSING) withBoolean:NO];
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, NO);
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
      [infoStream_ messageWithNSString:@"IW" withNSString:@"waitForMerges"];
    }
    while ([((JavaUtilLinkedList *) nil_chk(pendingMerges_)) size] > 0 || [((id<JavaUtilSet>) nil_chk(runningMerges_)) size] > 0) {
      OrgApacheLuceneIndexIndexWriter_doWait(self);
    }
    JreAssert((0 == [((JavaUtilHashSet *) nil_chk(mergingSegments_)) size]), (@"org/apache/lucene/index/IndexWriter.java:2301 condition failed: assert 0 == mergingSegments.size();"));
    if ([infoStream_ isEnabledWithNSString:@"IW"]) {
      [infoStream_ messageWithNSString:@"IW" withNSString:@"waitForMerges done"];
    }
  }
}

- (void)checkpoint {
  @synchronized(self) {
    [self changed];
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withBoolean:NO];
  }
}

- (void)checkpointNoSIS {
  @synchronized(self) {
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(changeCount_)) incrementAndGet];
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withBoolean:NO];
  }
}

- (void)changed {
  @synchronized(self) {
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(changeCount_)) incrementAndGet];
    [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) changed];
  }
}

- (void)publishFrozenUpdatesWithOrgApacheLuceneIndexFrozenBufferedUpdates:(OrgApacheLuceneIndexFrozenBufferedUpdates *)packet {
  @synchronized(self) {
    JreAssert((packet != nil && [packet any]), (@"org/apache/lucene/index/IndexWriter.java:2335 condition failed: assert packet != null && packet.any();"));
    @synchronized(bufferedUpdatesStream_) {
      [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) pushWithOrgApacheLuceneIndexFrozenBufferedUpdates:packet];
    }
  }
}

- (void)publishFlushedSegmentWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)newSegment
                         withOrgApacheLuceneIndexFrozenBufferedUpdates:(OrgApacheLuceneIndexFrozenBufferedUpdates *)packet
                         withOrgApacheLuceneIndexFrozenBufferedUpdates:(OrgApacheLuceneIndexFrozenBufferedUpdates *)globalPacket {
  @try {
    @synchronized(self) {
      OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, NO);
      @synchronized(bufferedUpdatesStream_) {
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
          [infoStream_ messageWithNSString:@"IW" withNSString:@"publishFlushedSegment"];
        }
        if (globalPacket != nil && [globalPacket any]) {
          [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) pushWithOrgApacheLuceneIndexFrozenBufferedUpdates:globalPacket];
        }
        jlong nextGen;
        if (packet != nil && [packet any]) {
          nextGen = [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) pushWithOrgApacheLuceneIndexFrozenBufferedUpdates:packet];
        }
        else {
          nextGen = [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) getNextGen];
        }
        if ([infoStream_ isEnabledWithNSString:@"IW"]) {
          [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$J$$", @"publish sets newSegment delGen=", nextGen, @" seg=", [self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:newSegment])];
        }
        [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(newSegment)) setBufferedDeletesGenWithLong:nextGen];
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) addWithOrgApacheLuceneIndexSegmentCommitInfo:newSegment];
        [self checkpoint];
      }
    }
  }
  @finally {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(flushCount_)) incrementAndGet];
    [self doAfterFlush];
  }
}

- (void)resetMergeExceptions {
  OrgApacheLuceneIndexIndexWriter_resetMergeExceptions(self);
}

- (void)noDupDirsWithOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)dirs {
  OrgApacheLuceneIndexIndexWriter_noDupDirsWithOrgApacheLuceneStoreDirectoryArray_(self, dirs);
}

- (id<JavaUtilList>)acquireWriteLocksWithOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)dirs {
  return OrgApacheLuceneIndexIndexWriter_acquireWriteLocksWithOrgApacheLuceneStoreDirectoryArray_(self, dirs);
}

- (void)addIndexesWithOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)dirs {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  OrgApacheLuceneIndexIndexWriter_noDupDirsWithOrgApacheLuceneStoreDirectoryArray_(self, dirs);
  id<JavaUtilList> locks = OrgApacheLuceneIndexIndexWriter_acquireWriteLocksWithOrgApacheLuceneStoreDirectoryArray_(self, dirs);
  jboolean successTop = NO;
  @try {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
      [infoStream_ messageWithNSString:@"IW" withNSString:@"flush at addIndexes(Directory...)"];
    }
    OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, NO, YES);
    id<JavaUtilList> infos = [new_JavaUtilArrayList_init() autorelease];
    jlong totalMaxDoc = 0;
    id<JavaUtilList> commits = [new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(dirs))->size_) autorelease];
    {
      IOSObjectArray *a__ = dirs;
      OrgApacheLuceneStoreDirectory * const *b__ = a__->buffer_;
      OrgApacheLuceneStoreDirectory * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneStoreDirectory *dir = *b__++;
        if ([infoStream_ isEnabledWithNSString:@"IW"]) {
          [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$@", @"addIndexes: process directory ", dir)];
        }
        OrgApacheLuceneIndexSegmentInfos *sis = OrgApacheLuceneIndexSegmentInfos_readLatestCommitWithOrgApacheLuceneStoreDirectory_(dir);
        totalMaxDoc += [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(sis)) totalMaxDoc];
        [commits addWithId:sis];
      }
    }
    OrgApacheLuceneIndexIndexWriter_testReserveDocsWithLong_(self, totalMaxDoc);
    jboolean success = NO;
    @try {
      for (OrgApacheLuceneIndexSegmentInfos * __strong sis in commits) {
        for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(sis)) {
          JreAssert((![infos containsWithId:info]), (JreStrcat("$@$$", @"dup info dir=", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->dir_, @" name=", info->info_->name_)));
          NSString *newSegName = OrgApacheLuceneIndexIndexWriter_newSegmentName(self);
          if ([infoStream_ isEnabledWithNSString:@"IW"]) {
            [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$$$@", @"addIndexes: process segment origName=", info->info_->name_, @" newName=", newSegName, @" info=", info)];
          }
          OrgApacheLuceneStoreIOContext *context = [new_OrgApacheLuceneStoreIOContext_initWithOrgApacheLuceneStoreFlushInfo_([new_OrgApacheLuceneStoreFlushInfo_initWithInt_withLong_([info->info_ maxDoc], [info sizeInBytes]) autorelease]) autorelease];
          OrgApacheLuceneIndexFieldInfos *fis = OrgApacheLuceneIndexIndexWriter_readFieldInfosWithOrgApacheLuceneIndexSegmentCommitInfo_(info);
          for (OrgApacheLuceneIndexFieldInfo * __strong fi in nil_chk(fis)) {
            [((OrgApacheLuceneIndexFieldInfos_FieldNumbers *) nil_chk(globalFieldNumberMap_)) addOrGetWithNSString:((OrgApacheLuceneIndexFieldInfo *) nil_chk(fi))->name_ withInt:fi->number_ withOrgApacheLuceneIndexDocValuesTypeEnum:[fi getDocValuesType]];
          }
          [infos addWithId:OrgApacheLuceneIndexIndexWriter_copySegmentAsIsWithOrgApacheLuceneIndexSegmentCommitInfo_withNSString_withOrgApacheLuceneStoreIOContext_(self, info, newSegName, context)];
        }
      }
      success = YES;
    }
    @finally {
      if (!success) {
        for (OrgApacheLuceneIndexSegmentCommitInfo * __strong sipc in infos) {
          OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(sipc)) files]);
        }
      }
    }
    @synchronized(self) {
      success = NO;
      @try {
        OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
        OrgApacheLuceneIndexIndexWriter_reserveDocsWithLong_(self, totalMaxDoc);
        success = YES;
      }
      @finally {
        if (!success) {
          for (OrgApacheLuceneIndexSegmentCommitInfo * __strong sipc in infos) {
            OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(sipc)) files]);
          }
        }
      }
      [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) addAllWithJavaLangIterable:infos];
      [self checkpoint];
    }
    successTop = YES;
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"addIndexes(Directory...)"];
  }
  @finally {
    if (successTop) {
      OrgApacheLuceneUtilIOUtils_closeWithJavaLangIterable_(locks);
    }
    else {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaLangIterable_(locks);
    }
  }
  OrgApacheLuceneIndexIndexWriter_maybeMerge(self);
}

- (void)addIndexesWithOrgApacheLuceneIndexCodecReaderArray:(IOSObjectArray *)readers {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  jlong numDocs = 0;
  @try {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
      [infoStream_ messageWithNSString:@"IW" withNSString:@"flush at addIndexes(CodecReader...)"];
    }
    OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, NO, YES);
    NSString *mergedName = OrgApacheLuceneIndexIndexWriter_newSegmentName(self);
    {
      IOSObjectArray *a__ = readers;
      OrgApacheLuceneIndexCodecReader * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneIndexCodecReader * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexCodecReader *leaf = *b__++;
        numDocs += [((OrgApacheLuceneIndexCodecReader *) nil_chk(leaf)) numDocs];
      }
    }
    OrgApacheLuceneIndexIndexWriter_testReserveDocsWithLong_(self, numDocs);
    OrgApacheLuceneStoreIOContext *context = [new_OrgApacheLuceneStoreIOContext_initWithOrgApacheLuceneStoreMergeInfo_([new_OrgApacheLuceneStoreMergeInfo_initWithInt_withLong_withBoolean_withInt_((jint) numDocs, -1, NO, -1) autorelease]) autorelease];
    OrgApacheLuceneStoreTrackingDirectoryWrapper *trackingDir = [new_OrgApacheLuceneStoreTrackingDirectoryWrapper_initWithOrgApacheLuceneStoreDirectory_(directory_) autorelease];
    OrgApacheLuceneIndexSegmentInfo *info = [new_OrgApacheLuceneIndexSegmentInfo_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneUtilVersion_withNSString_withInt_withBoolean_withOrgApacheLuceneCodecsCodec_withJavaUtilMap_withByteArray_withJavaUtilMap_(directoryOrig_, JreLoadStatic(OrgApacheLuceneUtilVersion, LATEST_), mergedName, -1, NO, codec_, JavaUtilCollections_emptyMap(), OrgApacheLuceneUtilStringHelper_randomId(), [new_JavaUtilHashMap_init() autorelease]) autorelease];
    OrgApacheLuceneIndexSegmentMerger *merger = [new_OrgApacheLuceneIndexSegmentMerger_initWithJavaUtilList_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexFieldInfos_FieldNumbers_withOrgApacheLuceneStoreIOContext_(JavaUtilArrays_asListWithNSObjectArray_(readers), info, infoStream_, trackingDir, globalFieldNumberMap_, context) autorelease];
    [((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(rateLimiters_)) setWithId:[new_OrgApacheLuceneIndexMergeRateLimiter_initWithOrgApacheLuceneIndexMergePolicy_OneMerge_(nil) autorelease]];
    if (![merger shouldMerge]) {
      return;
    }
    jboolean success = NO;
    @try {
      [merger merge];
      success = YES;
    }
    @finally {
      if (!success) {
        @synchronized(self) {
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) refreshWithNSString:info->name_];
        }
      }
    }
    OrgApacheLuceneIndexSegmentCommitInfo *infoPerCommit = [new_OrgApacheLuceneIndexSegmentCommitInfo_initWithOrgApacheLuceneIndexSegmentInfo_withInt_withLong_withLong_withLong_(info, 0, -1LL, -1LL, -1LL) autorelease];
    [info setFilesWithJavaUtilCollection:[new_JavaUtilHashSet_initWithJavaUtilCollection_([trackingDir getCreatedFiles]) autorelease]];
    [((id<JavaUtilSet>) nil_chk([trackingDir getCreatedFiles])) clear];
    OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_(info, OrgApacheLuceneIndexIndexWriter_SOURCE_ADDINDEXES_READERS_);
    OrgApacheLuceneIndexMergePolicy *mergePolicy = [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy];
    jboolean useCompoundFile;
    @synchronized(self) {
      if (stopMerges_) {
        OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [infoPerCommit files]);
        return;
      }
      OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
      useCompoundFile = [((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy)) useCompoundFileWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withOrgApacheLuceneIndexSegmentCommitInfo:infoPerCommit withOrgApacheLuceneIndexIndexWriter:self];
    }
    if (useCompoundFile) {
      id<JavaUtilCollection> filesToDelete = [infoPerCommit files];
      OrgApacheLuceneStoreTrackingDirectoryWrapper *trackingCFSDir = [new_OrgApacheLuceneStoreTrackingDirectoryWrapper_initWithOrgApacheLuceneStoreDirectory_(mergeDirectory_) autorelease];
      @try {
        OrgApacheLuceneIndexIndexWriter_createCompoundFileWithOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreTrackingDirectoryWrapper_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneStoreIOContext_(self, infoStream_, trackingCFSDir, info, context);
      }
      @finally {
        OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, filesToDelete);
      }
      [info setUseCompoundFileWithBoolean:YES];
    }
    success = NO;
    @try {
      [((OrgApacheLuceneCodecsSegmentInfoFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk(codec_)) segmentInfoFormat])) writeWithOrgApacheLuceneStoreDirectory:trackingDir withOrgApacheLuceneIndexSegmentInfo:info withOrgApacheLuceneStoreIOContext:context];
      success = YES;
    }
    @finally {
      if (!success) {
        @synchronized(self) {
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) refreshWithNSString:info->name_];
        }
      }
    }
    [info addFilesWithJavaUtilCollection:[trackingDir getCreatedFiles]];
    @synchronized(self) {
      if (stopMerges_) {
        OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [infoPerCommit files]);
        return;
      }
      OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
      OrgApacheLuceneIndexIndexWriter_reserveDocsWithLong_(self, numDocs);
      [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) addWithOrgApacheLuceneIndexSegmentCommitInfo:infoPerCommit];
      [self checkpoint];
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"addIndexes(CodecReader...)"];
  }
  OrgApacheLuceneIndexIndexWriter_maybeMerge(self);
}

- (OrgApacheLuceneIndexSegmentCommitInfo *)copySegmentAsIsWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                                                                                       withNSString:(NSString *)segName
                                                                  withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context {
  return OrgApacheLuceneIndexIndexWriter_copySegmentAsIsWithOrgApacheLuceneIndexSegmentCommitInfo_withNSString_withOrgApacheLuceneStoreIOContext_(self, info, segName, context);
}

- (void)doAfterFlush {
}

- (void)doBeforeFlush {
}

- (void)prepareCommit {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  OrgApacheLuceneIndexIndexWriter_prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy]);
}

- (void)prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy {
  OrgApacheLuceneIndexIndexWriter_prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy_(self, mergePolicy);
}

- (void)setCommitDataWithJavaUtilMap:(id<JavaUtilMap>)commitUserData {
  @synchronized(self) {
    [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) setUserDataWithJavaUtilMap:[new_JavaUtilHashMap_initWithJavaUtilMap_(commitUserData) autorelease]];
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(changeCount_)) incrementAndGet];
  }
}

- (id<JavaUtilMap>)getCommitData {
  @synchronized(self) {
    return [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) getUserData];
  }
}

- (void)commit {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  OrgApacheLuceneIndexIndexWriter_commitInternalWithOrgApacheLuceneIndexMergePolicy_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy]);
}

- (jboolean)hasUncommittedChanges {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(changeCount_)) get] != JreLoadVolatileLong(&lastCommitChangeCount_) || [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) anyChanges] || [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) any];
}

- (void)commitInternalWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy {
  OrgApacheLuceneIndexIndexWriter_commitInternalWithOrgApacheLuceneIndexMergePolicy_(self, mergePolicy);
}

- (void)finishCommit {
  OrgApacheLuceneIndexIndexWriter_finishCommit(self);
}

- (jboolean)holdsFullFlushLock {
  return JavaLangThread_holdsLockWithId_(fullFlushLock_);
}

- (void)flushWithBoolean:(jboolean)triggerMerge
             withBoolean:(jboolean)applyAllDeletes {
  OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, triggerMerge, applyAllDeletes);
}

- (jboolean)doFlushWithBoolean:(jboolean)applyAllDeletes {
  return OrgApacheLuceneIndexIndexWriter_doFlushWithBoolean_(self, applyAllDeletes);
}

- (jboolean)maybeApplyDeletesWithBoolean:(jboolean)applyAllDeletes {
  return OrgApacheLuceneIndexIndexWriter_maybeApplyDeletesWithBoolean_(self, applyAllDeletes);
}

- (jboolean)applyAllDeletesAndUpdates {
  return OrgApacheLuceneIndexIndexWriter_applyAllDeletesAndUpdates(self);
}

- (OrgApacheLuceneIndexDocumentsWriter *)getDocsWriter {
  return docWriter_;
}

- (jint)numRamDocs {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getNumDocs];
  }
}

- (void)ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter_ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

- (void)skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray:(IOSObjectArray *)updatesIters
                                                                          withInt:(jint)deletedDoc {
  OrgApacheLuceneIndexIndexWriter_skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, updatesIters, deletedDoc);
}

- (void)maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                           withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState
                                                                      withInt:(jint)docUpto
                  withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates:(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *)holder
                                                            withNSStringArray:(IOSObjectArray *)mergingFields
                           withOrgApacheLuceneIndexDocValuesFieldUpdatesArray:(IOSObjectArray *)dvFieldUpdates
                  withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray:(IOSObjectArray *)updatesIters
                                                                      withInt:(jint)curDoc {
  OrgApacheLuceneIndexIndexWriter_maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withInt_withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_withNSStringArray_withOrgApacheLuceneIndexDocValuesFieldUpdatesArray_withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, merge, mergeState, docUpto, holder, mergingFields, dvFieldUpdates, updatesIters, curDoc);
}

- (OrgApacheLuceneIndexReadersAndUpdates *)commitMergedDeletesAndUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                                                                  withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState {
  return OrgApacheLuceneIndexIndexWriter_commitMergedDeletesAndUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(self, merge, mergeState);
}

- (jboolean)commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                 withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState {
  return OrgApacheLuceneIndexIndexWriter_commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(self, merge, mergeState);
}

- (void)handleMergeExceptionWithJavaLangThrowable:(JavaLangThrowable *)t
     withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithJavaLangThrowable_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, t, merge);
}

- (void)mergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  jboolean success = NO;
  [((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(rateLimiters_)) setWithId:((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->rateLimiter_];
  jlong t0 = JavaLangSystem_currentTimeMillis();
  OrgApacheLuceneIndexMergePolicy *mergePolicy = [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy];
  @try {
    @try {
      @try {
        OrgApacheLuceneIndexIndexWriter_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
          [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$$", @"now merge\n  merge=", [self segStringWithJavaLangIterable:merge->segments_], @"\n  index=", [self segString])];
        }
        OrgApacheLuceneIndexIndexWriter_mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergePolicy_(self, merge, mergePolicy);
        [self mergeSuccessWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
        success = YES;
      }
      @catch (JavaLangThrowable *t) {
        OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithJavaLangThrowable_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, t, merge);
      }
    }
    @finally {
      @synchronized(self) {
        OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
        if (success == NO) {
          if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
            [infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception during merge"];
          }
          if (merge->info_ != nil && ![((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) containsWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_]) {
            [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) refreshWithNSString:((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_->info_))->name_];
          }
        }
        else if ([((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(merge->rateLimiter_)) getAbort] == NO && (merge->maxNumSegments_ != -1 || (!JreLoadVolatileBoolean(&closed_) && !JreLoadVolatileBoolean(&closing_)))) {
          OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(self, mergePolicy, JreLoadStatic(OrgApacheLuceneIndexMergeTriggerEnum, MERGE_FINISHED), merge->maxNumSegments_);
        }
      }
    }
  }
  @catch (JavaLangThrowable *t) {
    [self tragicEventWithJavaLangThrowable:t withNSString:@"merge"];
  }
  if (merge->info_ != nil && [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(merge->rateLimiter_)) getAbort] == NO) {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
      [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$J$I$", @"merge time ", (JavaLangSystem_currentTimeMillis() - t0), @" msec for ", [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_->info_)) maxDoc], @" docs")];
    }
  }
}

- (void)mergeSuccessWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
}

- (jboolean)registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  return OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

- (void)mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

- (void)_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter__mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

+ (void)setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                             withNSString:(NSString *)source {
  OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_(info, source);
}

+ (void)setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                             withNSString:(NSString *)source
                                          withJavaUtilMap:(id<JavaUtilMap>)details {
  OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(info, source, details);
}

- (void)mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

- (void)closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                                          withBoolean:(jboolean)suppressExceptions {
  OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(self, merge, suppressExceptions);
}

- (jint)mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                            withOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy {
  return OrgApacheLuceneIndexIndexWriter_mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergePolicy_(self, merge, mergePolicy);
}

- (void)addMergeExceptionWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  @synchronized(self) {
    JreAssert(([((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) getException] != nil), (@"org/apache/lucene/index/IndexWriter.java:4264 condition failed: assert merge.getException() != null;"));
    if (![((id<JavaUtilList>) nil_chk(mergeExceptions_)) containsWithId:merge] && mergeGen_ == merge->mergeGen_) {
      [mergeExceptions_ addWithId:merge];
    }
  }
}

- (jint)getBufferedDeleteTermsSize {
  return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getBufferedDeleteTermsSize];
}

- (jint)getNumBufferedDeleteTerms {
  return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getNumBufferedDeleteTerms];
}

- (OrgApacheLuceneIndexSegmentCommitInfo *)newestSegment {
  @synchronized(self) {
    return [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) size] > 0 ? [segmentInfos_ infoWithInt:[segmentInfos_ size] - 1] : nil;
  }
}

- (NSString *)segString {
  @synchronized(self) {
    return [self segStringWithJavaLangIterable:segmentInfos_];
  }
}

- (NSString *)segStringWithJavaLangIterable:(id<JavaLangIterable>)infos {
  @synchronized(self) {
    JavaLangStringBuilder *buffer = [new_JavaLangStringBuilder_init() autorelease];
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(infos)) {
      if ([buffer length] > 0) {
        [buffer appendWithChar:' '];
      }
      [buffer appendWithNSString:[self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info]];
    }
    return [buffer description];
  }
}

- (NSString *)segStringWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info {
  @synchronized(self) {
    return [info toStringWithInt:[self numDeletedDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info] - [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info)) getDelCount]];
  }
}

- (void)doWait {
  OrgApacheLuceneIndexIndexWriter_doWait(self);
}

- (void)setKeepFullyDeletedSegmentsWithBoolean:(jboolean)v {
  keepFullyDeletedSegments_ = v;
}

- (jboolean)getKeepFullyDeletedSegments {
  return keepFullyDeletedSegments_;
}

- (jboolean)filesExistWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)toSync {
  return OrgApacheLuceneIndexIndexWriter_filesExistWithOrgApacheLuceneIndexSegmentInfos_(self, toSync);
}

- (OrgApacheLuceneIndexSegmentInfos *)toLiveInfosWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)sis {
  @synchronized(self) {
    OrgApacheLuceneIndexSegmentInfos *newSIS = [new_OrgApacheLuceneIndexSegmentInfos_init() autorelease];
    id<JavaUtilMap> liveSIS = [new_JavaUtilHashMap_init() autorelease];
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(segmentInfos_)) {
      [liveSIS putWithId:info withId:info];
    }
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(sis)) {
      OrgApacheLuceneIndexSegmentCommitInfo *liveInfo = [liveSIS getWithId:info];
      if (liveInfo != nil) {
        info = liveInfo;
      }
      [newSIS addWithOrgApacheLuceneIndexSegmentCommitInfo:info];
    }
    return newSIS;
  }
}

- (void)startCommitWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)toSync {
  OrgApacheLuceneIndexIndexWriter_startCommitWithOrgApacheLuceneIndexSegmentInfos_(self, toSync);
}

+ (jboolean)isLockedWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexIndexWriter_isLockedWithOrgApacheLuceneStoreDirectory_(directory);
}

- (void)tragicEventWithJavaLangThrowable:(JavaLangThrowable *)tragedy
                            withNSString:(NSString *)location {
  if ([tragedy isKindOfClass:[OrgApacheLuceneIndexAbortingException class]]) {
    tragedy = [((JavaLangThrowable *) nil_chk(tragedy)) getCause];
  }
  JreAssert(([tragedy isKindOfClass:[OrgApacheLuceneIndexMergePolicy_MergeAbortedException class]] == NO), (@"org/apache/lucene/index/IndexWriter.java:4550 condition failed: assert tragedy instanceof MergePolicy.MergeAbortedException == false;"));
  JreAssert((JavaLangThread_holdsLockWithId_(self) == NO), (@"org/apache/lucene/index/IndexWriter.java:4553 condition failed: assert Thread.holdsLock(this) == false;"));
  JreAssert((tragedy != nil), (@"org/apache/lucene/index/IndexWriter.java:4556 condition failed: assert tragedy != null;"));
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
    [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$$", @"hit tragic ", [[((JavaLangThrowable *) nil_chk(tragedy)) getClass] getSimpleName], @" inside ", location)];
  }
  @synchronized(self) {
    if (JreLoadVolatileId(&self->tragedy_) != nil) {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(tragedy);
    }
    JreVolatileStrongAssign(&self->tragedy_, tragedy);
  }
  if (OrgApacheLuceneIndexIndexWriter_shouldCloseWithBoolean_(self, NO)) {
    OrgApacheLuceneIndexIndexWriter_rollbackInternal(self);
  }
  OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(tragedy);
}

- (JavaLangThrowable *)getTragicException {
  return JreLoadVolatileId(&tragedy_);
}

- (jboolean)isOpen {
  return JreLoadVolatileBoolean(&closing_) == NO && JreLoadVolatileBoolean(&closed_) == NO;
}

- (void)testPointWithNSString:(NSString *)message {
  OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, message);
}

- (jboolean)nrtIsCurrentWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    jboolean isCurrent = ((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos))->version__ == ((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_))->version__ && ![((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) anyChanges] && ![((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) any];
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
      if (isCurrent == NO) {
        [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$Z$Z$Z", @"nrtIsCurrent: infoVersion matches: ", (infos->version__ == segmentInfos_->version__), @"; DW changes: ", [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) anyChanges], @"; BD changes: ", [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) any])];
      }
    }
    return isCurrent;
  }
}

- (jboolean)isClosed {
  @synchronized(self) {
    return JreLoadVolatileBoolean(&closed_);
  }
}

- (void)deleteUnusedFiles {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, NO);
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) deletePendingFiles];
    [deleter_ revisitPolicy];
  }
}

- (void)deletePendingFiles {
  @synchronized(self) {
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) deletePendingFiles];
  }
}

- (void)createCompoundFileWithOrgApacheLuceneUtilInfoStream:(OrgApacheLuceneUtilInfoStream *)infoStream
           withOrgApacheLuceneStoreTrackingDirectoryWrapper:(OrgApacheLuceneStoreTrackingDirectoryWrapper *)directory
                        withOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                          withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context {
  OrgApacheLuceneIndexIndexWriter_createCompoundFileWithOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreTrackingDirectoryWrapper_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneStoreIOContext_(self, infoStream, directory, info, context);
}

- (void)deleteNewFilesWithJavaUtilCollection:(id<JavaUtilCollection>)files {
  OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, files);
}

- (void)flushFailedWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info {
  @synchronized(self) {
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) refreshWithNSString:((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->name_];
  }
}

- (jint)purgeWithBoolean:(jboolean)forced {
  return OrgApacheLuceneIndexIndexWriter_purgeWithBoolean_(self, forced);
}

- (void)applyDeletesAndPurgeWithBoolean:(jboolean)forcePurge {
  @try {
    OrgApacheLuceneIndexIndexWriter_purgeWithBoolean_(self, forcePurge);
  }
  @finally {
    if (OrgApacheLuceneIndexIndexWriter_applyAllDeletesAndUpdates(self)) {
      OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy], JreLoadStatic(OrgApacheLuceneIndexMergeTriggerEnum, SEGMENT_FLUSH), OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS);
    }
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(flushCount_)) incrementAndGet];
  }
}

- (void)doAfterSegmentFlushedWithBoolean:(jboolean)triggerMerge
                             withBoolean:(jboolean)forcePurge {
  @try {
    OrgApacheLuceneIndexIndexWriter_purgeWithBoolean_(self, forcePurge);
  }
  @finally {
    if (triggerMerge) {
      OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy], JreLoadStatic(OrgApacheLuceneIndexMergeTriggerEnum, SEGMENT_FLUSH), OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS);
    }
  }
}

- (void)incRefDeleterWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) incRefWithOrgApacheLuceneIndexSegmentInfos:segmentInfos withBoolean:NO];
  }
}

- (void)decRefDeleterWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) decRefWithOrgApacheLuceneIndexSegmentInfos:segmentInfos];
  }
}

- (jboolean)processEventsWithBoolean:(jboolean)triggerMerge
                         withBoolean:(jboolean)forcePurge {
  return OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, triggerMerge, forcePurge);
}

- (jboolean)processEventsWithJavaUtilQueue:(id<JavaUtilQueue>)queue
                               withBoolean:(jboolean)triggerMerge
                               withBoolean:(jboolean)forcePurge {
  return OrgApacheLuceneIndexIndexWriter_processEventsWithJavaUtilQueue_withBoolean_withBoolean_(self, queue, triggerMerge, forcePurge);
}

+ (jboolean)slowFileExistsWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
                                               withNSString:(NSString *)fileName {
  return OrgApacheLuceneIndexIndexWriter_slowFileExistsWithOrgApacheLuceneStoreDirectory_withNSString_(dir, fileName);
}

- (void)reserveDocsWithLong:(jlong)addedNumDocs {
  OrgApacheLuceneIndexIndexWriter_reserveDocsWithLong_(self, addedNumDocs);
}

- (void)testReserveDocsWithLong:(jlong)addedNumDocs {
  OrgApacheLuceneIndexIndexWriter_testReserveDocsWithLong_(self, addedNumDocs);
}

- (void)tooManyDocsWithLong:(jlong)addedNumDocs {
  OrgApacheLuceneIndexIndexWriter_tooManyDocsWithLong_(self, addedNumDocs);
}

- (OrgApacheLuceneStoreDirectory *)addMergeRateLimitersWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)inArg {
  return OrgApacheLuceneIndexIndexWriter_addMergeRateLimitersWithOrgApacheLuceneStoreDirectory_(self, inArg);
}

- (void)dealloc {
  JreReleaseVolatile(&tragedy_);
  RELEASE_(directoryOrig_);
  RELEASE_(directory_);
  RELEASE_(mergeDirectory_);
  RELEASE_(analyzer_);
  RELEASE_(changeCount_);
  RELEASE_(rollbackSegments_);
  JreReleaseVolatile(&pendingCommit_);
  RELEASE_(filesToCommit_);
  RELEASE_(segmentInfos_);
  RELEASE_(globalFieldNumberMap_);
  RELEASE_(docWriter_);
  RELEASE_(eventQueue_);
  RELEASE_(deleter_);
  RELEASE_(segmentsToMerge_);
  RELEASE_(writeLock_);
  RELEASE_(mergingSegments_);
  RELEASE_(mergeScheduler_);
  RELEASE_(pendingMerges_);
  RELEASE_(runningMerges_);
  RELEASE_(mergeExceptions_);
  RELEASE_(flushCount_);
  RELEASE_(flushDeletesCount_);
  RELEASE_(readerPool_);
  RELEASE_(bufferedUpdatesStream_);
  RELEASE_(config_);
  RELEASE_(pendingNumDocs_);
  RELEASE_(rateLimiters_);
  RELEASE_(codec_);
  RELEASE_(infoStream_);
  RELEASE_(commitLock_);
  RELEASE_(fullFlushLock_);
  [super dealloc];
}

- (void)__javaClone {
  [super __javaClone];
  JreRetainVolatile(&tragedy_);
  JreRetainVolatile(&pendingCommit_);
}

+ (IOSObjectArray *)__annotations_isLockedWithOrgApacheLuceneStoreDirectory_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setMaxDocsWithInt:", "setMaxDocs", "V", 0x8, NULL, NULL },
    { "getActualMaxDocs", NULL, "I", 0x8, NULL, NULL },
    { "getReader", NULL, "Lorg.apache.lucene.index.DirectoryReader;", 0x0, "Ljava.io.IOException;", NULL },
    { "getReaderWithBoolean:", "getReader", "Lorg.apache.lucene.index.DirectoryReader;", 0x0, "Ljava.io.IOException;", NULL },
    { "ramBytesUsed", NULL, "J", 0x11, NULL, NULL },
    { "getChildResources", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "numDeletedDocsWithOrgApacheLuceneIndexSegmentCommitInfo:", "numDeletedDocs", "I", 0x1, NULL, NULL },
    { "ensureOpenWithBoolean:", "ensureOpen", "V", 0x14, "Lorg.apache.lucene.store.AlreadyClosedException;", NULL },
    { "ensureOpen", NULL, "V", 0x14, "Lorg.apache.lucene.store.AlreadyClosedException;", NULL },
    { "initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexWriterConfig:", "IndexWriter", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "readFieldInfosWithOrgApacheLuceneIndexSegmentCommitInfo:", "readFieldInfos", "Lorg.apache.lucene.index.FieldInfos;", 0x8, "Ljava.io.IOException;", NULL },
    { "getFieldNumberMap", NULL, "Lorg.apache.lucene.index.FieldInfos$FieldNumbers;", 0x2, "Ljava.io.IOException;", NULL },
    { "getConfig", NULL, "Lorg.apache.lucene.index.LiveIndexWriterConfig;", 0x1, NULL, NULL },
    { "messageState", NULL, "V", 0x2, NULL, NULL },
    { "shutdown", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "shouldCloseWithBoolean:", "shouldClose", "Z", 0x22, NULL, NULL },
    { "getDirectory", NULL, "Lorg.apache.lucene.store.Directory;", 0x1, NULL, NULL },
    { "getAnalyzer", NULL, "Lorg.apache.lucene.analysis.Analyzer;", 0x1, NULL, NULL },
    { "maxDoc", NULL, "I", 0x21, NULL, NULL },
    { "numDocs", NULL, "I", 0x21, NULL, NULL },
    { "hasDeletions", NULL, "Z", 0x21, NULL, NULL },
    { "addDocumentWithJavaLangIterable:", "addDocument", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "addDocumentsWithJavaLangIterable:", "addDocuments", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "updateDocumentsWithOrgApacheLuceneIndexTerm:withJavaLangIterable:", "updateDocuments", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "tryDeleteDocumentWithOrgApacheLuceneIndexIndexReader:withInt:", "tryDeleteDocument", "Z", 0x21, "Ljava.io.IOException;", NULL },
    { "deleteDocumentsWithOrgApacheLuceneIndexTermArray:", "deleteDocuments", "V", 0x81, "Ljava.io.IOException;", NULL },
    { "deleteDocumentsWithOrgApacheLuceneSearchQueryArray:", "deleteDocuments", "V", 0x81, "Ljava.io.IOException;", NULL },
    { "updateDocumentWithOrgApacheLuceneIndexTerm:withJavaLangIterable:", "updateDocument", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "updateNumericDocValueWithOrgApacheLuceneIndexTerm:withNSString:withLong:", "updateNumericDocValue", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "updateBinaryDocValueWithOrgApacheLuceneIndexTerm:withNSString:withOrgApacheLuceneUtilBytesRef:", "updateBinaryDocValue", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "updateDocValuesWithOrgApacheLuceneIndexTerm:withOrgApacheLuceneDocumentFieldArray:", "updateDocValues", "V", 0x81, "Ljava.io.IOException;", NULL },
    { "getSegmentCount", NULL, "I", 0x30, NULL, NULL },
    { "getNumBufferedDocuments", NULL, "I", 0x30, NULL, NULL },
    { "getIndexFileNames", NULL, "Ljava.util.Collection;", 0x30, "Ljava.io.IOException;", NULL },
    { "maxDocWithInt:", "maxDoc", "I", 0x30, NULL, NULL },
    { "getFlushCount", NULL, "I", 0x10, NULL, NULL },
    { "getFlushDeletesCount", NULL, "I", 0x10, NULL, NULL },
    { "newSegmentName", NULL, "Ljava.lang.String;", 0x10, NULL, NULL },
    { "forceMergeWithInt:", "forceMerge", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "forceMergeWithInt:withBoolean:", "forceMerge", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "maxNumSegmentsMergesPending", NULL, "Z", 0x22, NULL, NULL },
    { "forceMergeDeletesWithBoolean:", "forceMergeDeletes", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "forceMergeDeletes", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "maybeMerge", NULL, "V", 0x11, "Ljava.io.IOException;", NULL },
    { "maybeMergeWithOrgApacheLuceneIndexMergePolicy:withOrgApacheLuceneIndexMergeTriggerEnum:withInt:", "maybeMerge", "V", 0x12, "Ljava.io.IOException;", NULL },
    { "updatePendingMergesWithOrgApacheLuceneIndexMergePolicy:withOrgApacheLuceneIndexMergeTriggerEnum:withInt:", "updatePendingMerges", "Z", 0x22, "Ljava.io.IOException;", NULL },
    { "getMergingSegments", NULL, "Ljava.util.Collection;", 0x21, NULL, NULL },
    { "getNextMerge", NULL, "Lorg.apache.lucene.index.MergePolicy$OneMerge;", 0x21, NULL, NULL },
    { "hasPendingMerges", NULL, "Z", 0x21, NULL, NULL },
    { "rollback", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "rollbackInternal", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "deleteAll", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "abortMerges", NULL, "V", 0x22, NULL, NULL },
    { "waitForMerges", NULL, "V", 0x0, "Ljava.io.IOException;", NULL },
    { "checkpoint", NULL, "V", 0x20, "Ljava.io.IOException;", NULL },
    { "checkpointNoSIS", NULL, "V", 0x20, "Ljava.io.IOException;", NULL },
    { "changed", NULL, "V", 0x20, NULL, NULL },
    { "publishFrozenUpdatesWithOrgApacheLuceneIndexFrozenBufferedUpdates:", "publishFrozenUpdates", "V", 0x20, NULL, NULL },
    { "publishFlushedSegmentWithOrgApacheLuceneIndexSegmentCommitInfo:withOrgApacheLuceneIndexFrozenBufferedUpdates:withOrgApacheLuceneIndexFrozenBufferedUpdates:", "publishFlushedSegment", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "resetMergeExceptions", NULL, "V", 0x22, NULL, NULL },
    { "noDupDirsWithOrgApacheLuceneStoreDirectoryArray:", "noDupDirs", "V", 0x82, NULL, NULL },
    { "acquireWriteLocksWithOrgApacheLuceneStoreDirectoryArray:", "acquireWriteLocks", "Ljava.util.List;", 0x82, "Ljava.io.IOException;", NULL },
    { "addIndexesWithOrgApacheLuceneStoreDirectoryArray:", "addIndexes", "V", 0x81, "Ljava.io.IOException;", NULL },
    { "addIndexesWithOrgApacheLuceneIndexCodecReaderArray:", "addIndexes", "V", 0x81, "Ljava.io.IOException;", NULL },
    { "copySegmentAsIsWithOrgApacheLuceneIndexSegmentCommitInfo:withNSString:withOrgApacheLuceneStoreIOContext:", "copySegmentAsIs", "Lorg.apache.lucene.index.SegmentCommitInfo;", 0x2, "Ljava.io.IOException;", NULL },
    { "doAfterFlush", NULL, "V", 0x4, "Ljava.io.IOException;", NULL },
    { "doBeforeFlush", NULL, "V", 0x4, "Ljava.io.IOException;", NULL },
    { "prepareCommit", NULL, "V", 0x11, "Ljava.io.IOException;", NULL },
    { "prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy:", "prepareCommitInternal", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "setCommitDataWithJavaUtilMap:", "setCommitData", "V", 0x31, NULL, NULL },
    { "getCommitData", NULL, "Ljava.util.Map;", 0x31, NULL, NULL },
    { "commit", NULL, "V", 0x11, "Ljava.io.IOException;", NULL },
    { "hasUncommittedChanges", NULL, "Z", 0x11, NULL, NULL },
    { "commitInternalWithOrgApacheLuceneIndexMergePolicy:", "commitInternal", "V", 0x12, "Ljava.io.IOException;", NULL },
    { "finishCommit", NULL, "V", 0x12, "Ljava.io.IOException;", NULL },
    { "holdsFullFlushLock", NULL, "Z", 0x0, NULL, NULL },
    { "flushWithBoolean:withBoolean:", "flush", "V", 0x14, "Ljava.io.IOException;", NULL },
    { "doFlushWithBoolean:", "doFlush", "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "maybeApplyDeletesWithBoolean:", "maybeApplyDeletes", "Z", 0x30, "Ljava.io.IOException;", NULL },
    { "applyAllDeletesAndUpdates", NULL, "Z", 0x30, "Ljava.io.IOException;", NULL },
    { "getDocsWriter", NULL, "Lorg.apache.lucene.index.DocumentsWriter;", 0x0, NULL, NULL },
    { "numRamDocs", NULL, "I", 0x31, NULL, NULL },
    { "ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:", "ensureValidMerge", "V", 0x22, NULL, NULL },
    { "skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray:withInt:", "skipDeletedDoc", "V", 0x2, NULL, NULL },
    { "maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge:withOrgApacheLuceneIndexMergeState:withInt:withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates:withNSStringArray:withOrgApacheLuceneIndexDocValuesFieldUpdatesArray:withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray:withInt:", "maybeApplyMergedDVUpdates", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "commitMergedDeletesAndUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge:withOrgApacheLuceneIndexMergeState:", "commitMergedDeletesAndUpdates", "Lorg.apache.lucene.index.ReadersAndUpdates;", 0x22, "Ljava.io.IOException;", NULL },
    { "commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:withOrgApacheLuceneIndexMergeState:", "commitMerge", "Z", 0x22, "Ljava.io.IOException;", NULL },
    { "handleMergeExceptionWithJavaLangThrowable:withOrgApacheLuceneIndexMergePolicy_OneMerge:", "handleMergeException", "V", 0x12, "Ljava.io.IOException;", NULL },
    { "mergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:", "merge", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "mergeSuccessWithOrgApacheLuceneIndexMergePolicy_OneMerge:", "mergeSuccess", "V", 0x0, NULL, NULL },
    { "registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:", "registerMerge", "Z", 0x30, "Ljava.io.IOException;", NULL },
    { "mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:", "mergeInit", "V", 0x30, "Ljava.io.IOException;", NULL },
    { "_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:", "_mergeInit", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:withNSString:", "setDiagnostics", "V", 0x8, NULL, NULL },
    { "setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:withNSString:withJavaUtilMap:", "setDiagnostics", "V", 0xa, NULL, NULL },
    { "mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge:", "mergeFinish", "V", 0x30, NULL, NULL },
    { "closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge:withBoolean:", "closeMergeReaders", "V", 0x32, "Ljava.io.IOException;", NULL },
    { "mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge:withOrgApacheLuceneIndexMergePolicy:", "mergeMiddle", "I", 0x2, "Ljava.io.IOException;", NULL },
    { "addMergeExceptionWithOrgApacheLuceneIndexMergePolicy_OneMerge:", "addMergeException", "V", 0x20, NULL, NULL },
    { "getBufferedDeleteTermsSize", NULL, "I", 0x10, NULL, NULL },
    { "getNumBufferedDeleteTerms", NULL, "I", 0x10, NULL, NULL },
    { "newestSegment", NULL, "Lorg.apache.lucene.index.SegmentCommitInfo;", 0x20, NULL, NULL },
    { "segString", NULL, "Ljava.lang.String;", 0x20, NULL, NULL },
    { "segStringWithJavaLangIterable:", "segString", "Ljava.lang.String;", 0x20, NULL, NULL },
    { "segStringWithOrgApacheLuceneIndexSegmentCommitInfo:", "segString", "Ljava.lang.String;", 0x20, NULL, NULL },
    { "doWait", NULL, "V", 0x22, NULL, NULL },
    { "setKeepFullyDeletedSegmentsWithBoolean:", "setKeepFullyDeletedSegments", "V", 0x0, NULL, NULL },
    { "getKeepFullyDeletedSegments", NULL, "Z", 0x0, NULL, NULL },
    { "filesExistWithOrgApacheLuceneIndexSegmentInfos:", "filesExist", "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "toLiveInfosWithOrgApacheLuceneIndexSegmentInfos:", "toLiveInfos", "Lorg.apache.lucene.index.SegmentInfos;", 0x20, NULL, NULL },
    { "startCommitWithOrgApacheLuceneIndexSegmentInfos:", "startCommit", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "isLockedWithOrgApacheLuceneStoreDirectory:", "isLocked", "Z", 0x9, "Ljava.io.IOException;", NULL },
    { "tragicEventWithJavaLangThrowable:withNSString:", "tragicEvent", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "getTragicException", NULL, "Ljava.lang.Throwable;", 0x1, NULL, NULL },
    { "isOpen", NULL, "Z", 0x1, NULL, NULL },
    { "testPointWithNSString:", "testPoint", "V", 0x12, NULL, NULL },
    { "nrtIsCurrentWithOrgApacheLuceneIndexSegmentInfos:", "nrtIsCurrent", "Z", 0x20, NULL, NULL },
    { "isClosed", NULL, "Z", 0x20, NULL, NULL },
    { "deleteUnusedFiles", NULL, "V", 0x21, "Ljava.io.IOException;", NULL },
    { "deletePendingFiles", NULL, "V", 0x22, "Ljava.io.IOException;", NULL },
    { "createCompoundFileWithOrgApacheLuceneUtilInfoStream:withOrgApacheLuceneStoreTrackingDirectoryWrapper:withOrgApacheLuceneIndexSegmentInfo:withOrgApacheLuceneStoreIOContext:", "createCompoundFile", "V", 0x10, "Ljava.io.IOException;", NULL },
    { "deleteNewFilesWithJavaUtilCollection:", "deleteNewFiles", "V", 0x30, "Ljava.io.IOException;", NULL },
    { "flushFailedWithOrgApacheLuceneIndexSegmentInfo:", "flushFailed", "V", 0x30, "Ljava.io.IOException;", NULL },
    { "purgeWithBoolean:", "purge", "I", 0x10, "Ljava.io.IOException;", NULL },
    { "applyDeletesAndPurgeWithBoolean:", "applyDeletesAndPurge", "V", 0x10, "Ljava.io.IOException;", NULL },
    { "doAfterSegmentFlushedWithBoolean:withBoolean:", "doAfterSegmentFlushed", "V", 0x10, "Ljava.io.IOException;", NULL },
    { "incRefDeleterWithOrgApacheLuceneIndexSegmentInfos:", "incRefDeleter", "V", 0x20, "Ljava.io.IOException;", NULL },
    { "decRefDeleterWithOrgApacheLuceneIndexSegmentInfos:", "decRefDeleter", "V", 0x20, "Ljava.io.IOException;", NULL },
    { "processEventsWithBoolean:withBoolean:", "processEvents", "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "processEventsWithJavaUtilQueue:withBoolean:withBoolean:", "processEvents", "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "slowFileExistsWithOrgApacheLuceneStoreDirectory:withNSString:", "slowFileExists", "Z", 0x8, "Ljava.io.IOException;", NULL },
    { "reserveDocsWithLong:", "reserveDocs", "V", 0x2, NULL, NULL },
    { "testReserveDocsWithLong:", "testReserveDocs", "V", 0x2, NULL, NULL },
    { "tooManyDocsWithLong:", "tooManyDocs", "V", 0x2, NULL, NULL },
    { "addMergeRateLimitersWithOrgApacheLuceneStoreDirectory:", "addMergeRateLimiters", "Lorg.apache.lucene.store.Directory;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_DOCS", "MAX_DOCS", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexIndexWriter_MAX_DOCS },
    { "MAX_POSITION", "MAX_POSITION", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexIndexWriter_MAX_POSITION },
    { "actualMaxDocs_", NULL, 0xa, "I", &OrgApacheLuceneIndexIndexWriter_actualMaxDocs_, NULL, .constantValue.asLong = 0 },
    { "enableTestPoints_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "UNBOUNDED_MAX_MERGE_SEGMENTS", "UNBOUNDED_MAX_MERGE_SEGMENTS", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS },
    { "WRITE_LOCK_NAME_", NULL, 0x19, "Ljava.lang.String;", &OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME_, NULL, .constantValue.asLong = 0 },
    { "SOURCE_", NULL, 0x19, "Ljava.lang.String;", &OrgApacheLuceneIndexIndexWriter_SOURCE_, NULL, .constantValue.asLong = 0 },
    { "SOURCE_MERGE_", NULL, 0x19, "Ljava.lang.String;", &OrgApacheLuceneIndexIndexWriter_SOURCE_MERGE_, NULL, .constantValue.asLong = 0 },
    { "SOURCE_FLUSH_", NULL, 0x19, "Ljava.lang.String;", &OrgApacheLuceneIndexIndexWriter_SOURCE_FLUSH_, NULL, .constantValue.asLong = 0 },
    { "SOURCE_ADDINDEXES_READERS_", NULL, 0x19, "Ljava.lang.String;", &OrgApacheLuceneIndexIndexWriter_SOURCE_ADDINDEXES_READERS_, NULL, .constantValue.asLong = 0 },
    { "MAX_TERM_LENGTH", "MAX_TERM_LENGTH", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexIndexWriter_MAX_TERM_LENGTH },
    { "tragedy_", NULL, 0x40, "Ljava.lang.Throwable;", NULL, NULL, .constantValue.asLong = 0 },
    { "directoryOrig_", NULL, 0x12, "Lorg.apache.lucene.store.Directory;", NULL, NULL, .constantValue.asLong = 0 },
    { "directory_", NULL, 0x12, "Lorg.apache.lucene.store.Directory;", NULL, NULL, .constantValue.asLong = 0 },
    { "mergeDirectory_", NULL, 0x12, "Lorg.apache.lucene.store.Directory;", NULL, NULL, .constantValue.asLong = 0 },
    { "analyzer_", NULL, 0x12, "Lorg.apache.lucene.analysis.Analyzer;", NULL, NULL, .constantValue.asLong = 0 },
    { "changeCount_", NULL, 0x12, "Ljava.util.concurrent.atomic.AtomicLong;", NULL, NULL, .constantValue.asLong = 0 },
    { "lastCommitChangeCount_", NULL, 0x42, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "rollbackSegments_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/index/SegmentCommitInfo;>;", .constantValue.asLong = 0 },
    { "pendingCommit_", NULL, 0x40, "Lorg.apache.lucene.index.SegmentInfos;", NULL, NULL, .constantValue.asLong = 0 },
    { "pendingCommitChangeCount_", NULL, 0x40, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "filesToCommit_", NULL, 0x2, "Ljava.util.Collection;", NULL, "Ljava/util/Collection<Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "segmentInfos_", NULL, 0x10, "Lorg.apache.lucene.index.SegmentInfos;", NULL, NULL, .constantValue.asLong = 0 },
    { "globalFieldNumberMap_", NULL, 0x10, "Lorg.apache.lucene.index.FieldInfos$FieldNumbers;", NULL, NULL, .constantValue.asLong = 0 },
    { "docWriter_", NULL, 0x12, "Lorg.apache.lucene.index.DocumentsWriter;", NULL, NULL, .constantValue.asLong = 0 },
    { "eventQueue_", NULL, 0x12, "Ljava.util.Queue;", NULL, "Ljava/util/Queue<Lorg/apache/lucene/index/IndexWriter$Event;>;", .constantValue.asLong = 0 },
    { "deleter_", NULL, 0x10, "Lorg.apache.lucene.index.IndexFileDeleter;", NULL, NULL, .constantValue.asLong = 0 },
    { "segmentsToMerge_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/lang/Boolean;>;", .constantValue.asLong = 0 },
    { "mergeMaxNumSegments_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "writeLock_", NULL, 0x2, "Lorg.apache.lucene.store.Lock;", NULL, NULL, .constantValue.asLong = 0 },
    { "closed_", NULL, 0x42, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "closing_", NULL, 0x42, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mergingSegments_", NULL, 0x2, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lorg/apache/lucene/index/SegmentCommitInfo;>;", .constantValue.asLong = 0 },
    { "mergeScheduler_", NULL, 0x12, "Lorg.apache.lucene.index.MergeScheduler;", NULL, NULL, .constantValue.asLong = 0 },
    { "pendingMerges_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/apache/lucene/index/MergePolicy$OneMerge;>;", .constantValue.asLong = 0 },
    { "runningMerges_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Lorg/apache/lucene/index/MergePolicy$OneMerge;>;", .constantValue.asLong = 0 },
    { "mergeExceptions_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/index/MergePolicy$OneMerge;>;", .constantValue.asLong = 0 },
    { "mergeGen_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "stopMerges_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "didMessageState_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "flushCount_", NULL, 0x10, "Ljava.util.concurrent.atomic.AtomicInteger;", NULL, NULL, .constantValue.asLong = 0 },
    { "flushDeletesCount_", NULL, 0x10, "Ljava.util.concurrent.atomic.AtomicInteger;", NULL, NULL, .constantValue.asLong = 0 },
    { "readerPool_", NULL, 0x10, "Lorg.apache.lucene.index.IndexWriter$ReaderPool;", NULL, NULL, .constantValue.asLong = 0 },
    { "bufferedUpdatesStream_", NULL, 0x10, "Lorg.apache.lucene.index.BufferedUpdatesStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "poolReaders_", NULL, 0x42, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "config_", NULL, 0x12, "Lorg.apache.lucene.index.LiveIndexWriterConfig;", NULL, NULL, .constantValue.asLong = 0 },
    { "startCommitTime_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "pendingNumDocs_", NULL, 0x10, "Ljava.util.concurrent.atomic.AtomicLong;", NULL, NULL, .constantValue.asLong = 0 },
    { "rateLimiters_", NULL, 0x10, "Lorg.apache.lucene.util.CloseableThreadLocal;", NULL, "Lorg/apache/lucene/util/CloseableThreadLocal<Lorg/apache/lucene/index/MergeRateLimiter;>;", .constantValue.asLong = 0 },
    { "codec_", NULL, 0x10, "Lorg.apache.lucene.codecs.Codec;", NULL, NULL, .constantValue.asLong = 0 },
    { "infoStream_", NULL, 0x10, "Lorg.apache.lucene.util.InfoStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "commitLock_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "fullFlushLock_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "keepFullyDeletedSegments_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.index.IndexWriter$ReaderPool;", "Lorg.apache.lucene.index.IndexWriter$MergedDeletesAndUpdates;", "Lorg.apache.lucene.index.IndexWriter$IndexReaderWarmer;", "Lorg.apache.lucene.index.IndexWriter$Event;"};
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter = { 2, "IndexWriter", "org.apache.lucene.index", NULL, 0x1, 136, methods, 54, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneIndexIndexWriter;
}

@end

void OrgApacheLuceneIndexIndexWriter_setMaxDocsWithInt_(jint maxDocs) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  if (maxDocs > OrgApacheLuceneIndexIndexWriter_MAX_DOCS) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"maxDocs must be <= IndexWriter.MAX_DOCS=", OrgApacheLuceneIndexIndexWriter_MAX_DOCS, @"; got: ", maxDocs)) autorelease];
  }
  OrgApacheLuceneIndexIndexWriter_actualMaxDocs_ = maxDocs;
}

jint OrgApacheLuceneIndexIndexWriter_getActualMaxDocs() {
  OrgApacheLuceneIndexIndexWriter_initialize();
  return OrgApacheLuceneIndexIndexWriter_actualMaxDocs_;
}

void OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean failIfClosing) {
  if (JreLoadVolatileBoolean(&self->closed_) || (failIfClosing && JreLoadVolatileBoolean(&self->closing_))) {
    @throw [new_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_withJavaLangThrowable_(@"this IndexWriter is closed", JreLoadVolatileId(&self->tragedy_)) autorelease];
  }
}

void OrgApacheLuceneIndexIndexWriter_ensureOpen(OrgApacheLuceneIndexIndexWriter *self) {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, YES);
}

void OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneIndexIndexWriterConfig *conf) {
  NSObject_init(self);
  self->enableTestPoints_ = NO;
  JreStrongAssignAndConsume(&self->changeCount_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->segmentsToMerge_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->mergingSegments_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->pendingMerges_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->runningMerges_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->mergeExceptions_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->flushCount_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->flushDeletesCount_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->readerPool_, new_OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(self));
  JreStrongAssignAndConsume(&self->pendingNumDocs_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->rateLimiters_, new_OrgApacheLuceneUtilCloseableThreadLocal_init());
  JreStrongAssignAndConsume(&self->commitLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->fullFlushLock_, new_NSObject_init());
  [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(conf)) setIndexWriterWithOrgApacheLuceneIndexIndexWriter:self];
  JreStrongAssign(&self->config_, conf);
  JreStrongAssign(&self->infoStream_, [self->config_ getInfoStream]);
  jlong timeout = [self->config_ getWriteLockTimeout];
  OrgApacheLuceneStoreDirectory *lockDir;
  if (timeout == 0) {
    lockDir = d;
  }
  else {
    lockDir = [new_OrgApacheLuceneStoreSleepingLockWrapper_initWithOrgApacheLuceneStoreDirectory_withLong_(d, timeout) autorelease];
  }
  JreStrongAssign(&self->writeLock_, [((OrgApacheLuceneStoreDirectory *) nil_chk(lockDir)) obtainLockWithNSString:OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME_]);
  jboolean success = NO;
  @try {
    JreStrongAssign(&self->directoryOrig_, d);
    JreStrongAssignAndConsume(&self->directory_, new_OrgApacheLuceneStoreLockValidatingDirectoryWrapper_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreLock_(d, self->writeLock_));
    JreStrongAssign(&self->mergeDirectory_, OrgApacheLuceneIndexIndexWriter_addMergeRateLimitersWithOrgApacheLuceneStoreDirectory_(self, self->directory_));
    JreStrongAssign(&self->analyzer_, [self->config_ getAnalyzer]);
    JreStrongAssign(&self->mergeScheduler_, [self->config_ getMergeScheduler]);
    [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(self->mergeScheduler_)) setInfoStreamWithOrgApacheLuceneUtilInfoStream:self->infoStream_];
    JreStrongAssign(&self->codec_, [self->config_ getCodec]);
    JreStrongAssignAndConsume(&self->bufferedUpdatesStream_, new_OrgApacheLuceneIndexBufferedUpdatesStream_initWithOrgApacheLuceneUtilInfoStream_(self->infoStream_));
    JreAssignVolatileBoolean(&self->poolReaders_, [self->config_ getReaderPooling]);
    OrgApacheLuceneIndexIndexWriterConfig_OpenModeEnum *mode = [self->config_ getOpenMode];
    jboolean create;
    if (mode == JreLoadStatic(OrgApacheLuceneIndexIndexWriterConfig_OpenModeEnum, CREATE)) {
      create = YES;
    }
    else if (mode == JreLoadStatic(OrgApacheLuceneIndexIndexWriterConfig_OpenModeEnum, APPEND)) {
      create = NO;
    }
    else {
      create = !OrgApacheLuceneIndexDirectoryReader_indexExistsWithOrgApacheLuceneStoreDirectory_(self->directory_);
    }
    jboolean initialIndexExists = YES;
    IOSObjectArray *files = [self->directory_ listAll];
    OrgApacheLuceneIndexIndexCommit *commit = [self->config_ getIndexCommit];
    OrgApacheLuceneIndexStandardDirectoryReader *reader;
    if (commit == nil) {
      reader = nil;
    }
    else {
      reader = [commit getReader];
    }
    if (create) {
      if ([self->config_ getIndexCommit] != nil) {
        if (mode == JreLoadStatic(OrgApacheLuceneIndexIndexWriterConfig_OpenModeEnum, CREATE)) {
          @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot use IndexWriterConfig.setIndexCommit() with OpenMode.CREATE") autorelease];
        }
        else {
          @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot use IndexWriterConfig.setIndexCommit() when index has no commit") autorelease];
        }
      }
      OrgApacheLuceneIndexSegmentInfos *sis = nil;
      @try {
        sis = OrgApacheLuceneIndexSegmentInfos_readLatestCommitWithOrgApacheLuceneStoreDirectory_(self->directory_);
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(sis)) clear];
      }
      @catch (JavaIoIOException *e) {
        initialIndexExists = NO;
        sis = [new_OrgApacheLuceneIndexSegmentInfos_init() autorelease];
      }
      JreStrongAssign(&self->segmentInfos_, sis);
      JreStrongAssign(&self->rollbackSegments_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) createBackupSegmentInfos]);
      [self changed];
    }
    else if (reader != nil) {
      if ([reader directory] != [((OrgApacheLuceneIndexIndexCommit *) nil_chk(commit)) getDirectory]) {
        @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"IndexCommit's reader must have the same directory as the IndexCommit") autorelease];
      }
      if ([reader directory] != self->directoryOrig_) {
        @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"IndexCommit's reader must have the same directory passed to IndexWriter") autorelease];
      }
      if ([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(reader->segmentInfos_)) getLastGeneration] == 0) {
        @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"index must already have an initial commit to open from reader") autorelease];
      }
      JreStrongAssign(&self->segmentInfos_, [reader->segmentInfos_ clone]);
      OrgApacheLuceneIndexSegmentInfos *lastCommit;
      @try {
        lastCommit = OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(self->directoryOrig_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) getSegmentsFileName]);
      }
      @catch (JavaIoIOException *ioe) {
        @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"the provided reader is stale: its prior commit file \"", [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) getSegmentsFileName], @"\" is missing from index")) autorelease];
      }
      if (reader->writer_ != nil) {
        JreAssert((JreLoadVolatileBoolean(&reader->writer_->closed_)), (@"org/apache/lucene/index/IndexWriter.java:885 condition failed: assert reader.writer.closed;"));
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) updateGenerationVersionAndCounterWithOrgApacheLuceneIndexSegmentInfos:reader->writer_->segmentInfos_];
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(lastCommit)) updateGenerationVersionAndCounterWithOrgApacheLuceneIndexSegmentInfos:reader->writer_->segmentInfos_];
      }
      JreStrongAssign(&self->rollbackSegments_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(lastCommit)) createBackupSegmentInfos]);
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$@", @"init from reader ", reader)];
        OrgApacheLuceneIndexIndexWriter_messageState(self);
      }
    }
    else {
      NSString *lastSegmentsFile = OrgApacheLuceneIndexSegmentInfos_getLastCommitSegmentsFileNameWithNSStringArray_(files);
      if (lastSegmentsFile == nil) {
        @throw [new_OrgApacheLuceneIndexIndexNotFoundException_initWithNSString_(JreStrcat("$@$$", @"no segments* file found in ", self->directory_, @": files: ", JavaUtilArrays_toStringWithNSObjectArray_(files))) autorelease];
      }
      JreStrongAssign(&self->segmentInfos_, OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(self->directoryOrig_, lastSegmentsFile));
      if (commit != nil) {
        if ([commit getDirectory] != self->directoryOrig_) {
          @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$@", @"IndexCommit's directory doesn't match my directory, expected=", self->directoryOrig_, @", got=", [commit getDirectory])) autorelease];
        }
        OrgApacheLuceneIndexSegmentInfos *oldInfos = OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(self->directoryOrig_, [commit getSegmentsFileName]);
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) replaceWithOrgApacheLuceneIndexSegmentInfos:oldInfos];
        [self changed];
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
          [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$C", @"init: loaded commit \"", [commit getSegmentsFileName], '"')];
        }
      }
      JreStrongAssign(&self->rollbackSegments_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) createBackupSegmentInfos]);
    }
    [self->pendingNumDocs_ setWithLong:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) totalMaxDoc]];
    JreStrongAssign(&self->globalFieldNumberMap_, OrgApacheLuceneIndexIndexWriter_getFieldNumberMap(self));
    [((OrgApacheLuceneIndexFlushPolicy *) nil_chk([self->config_ getFlushPolicy])) init__WithOrgApacheLuceneIndexLiveIndexWriterConfig:self->config_];
    JreStrongAssignAndConsume(&self->docWriter_, new_OrgApacheLuceneIndexDocumentsWriter_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_(self, self->config_, self->directoryOrig_, self->directory_));
    JreStrongAssign(&self->eventQueue_, [self->docWriter_ eventQueue]);
    @synchronized(self) {
      JreStrongAssignAndConsume(&self->deleter_, new_OrgApacheLuceneIndexIndexFileDeleter_initWithNSStringArray_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexIndexWriter_withBoolean_withBoolean_(files, self->directoryOrig_, self->directory_, [self->config_ getIndexDeletionPolicy], self->segmentInfos_, self->infoStream_, self, initialIndexExists, reader != nil));
      JreAssert((create || OrgApacheLuceneIndexIndexWriter_filesExistWithOrgApacheLuceneIndexSegmentInfos_(self, self->segmentInfos_)), (@"org/apache/lucene/index/IndexWriter.java:954 condition failed: assert create || filesExist(segmentInfos);"));
    }
    if (self->deleter_->startingCommitDeleted_) {
      [self changed];
    }
    if (reader != nil) {
      id<JavaUtilList> leaves = [reader leaves];
      JreAssert(([self->segmentInfos_ size] == [((id<JavaUtilList>) nil_chk(leaves)) size]), (@"org/apache/lucene/index/IndexWriter.java:970 condition failed: assert segmentInfos.size() == leaves.size();"));
      for (jint i = 0; i < [leaves size]; i++) {
        OrgApacheLuceneIndexLeafReaderContext *leaf = [leaves getWithInt:i];
        OrgApacheLuceneIndexSegmentReader *segReader = (OrgApacheLuceneIndexSegmentReader *) check_class_cast([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(leaf)) reader], [OrgApacheLuceneIndexSegmentReader class]);
        OrgApacheLuceneIndexSegmentReader *newReader = [new_OrgApacheLuceneIndexSegmentReader_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexSegmentReader_withOrgApacheLuceneUtilBits_withInt_([self->segmentInfos_ infoWithInt:i], segReader, [((OrgApacheLuceneIndexSegmentReader *) nil_chk(segReader)) getLiveDocs], [segReader numDocs]) autorelease];
        [((id<JavaUtilMap>) nil_chk(self->readerPool_->readerMap_)) putWithId:[newReader getSegmentInfo] withId:[new_OrgApacheLuceneIndexReadersAndUpdates_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentReader_(self, newReader) autorelease]];
      }
      [self->segmentInfos_ changed];
      [self changed];
    }
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$Z", @"init: create=", create)];
      OrgApacheLuceneIndexIndexWriter_messageState(self);
    }
    success = YES;
  }
  @finally {
    if (!success) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"init: hit exception on init; releasing write lock"];
      }
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->writeLock_ } count:1 type:JavaIoCloseable_class_()]);
      JreStrongAssign(&self->writeLock_, nil);
    }
  }
}

OrgApacheLuceneIndexIndexWriter *new_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneIndexIndexWriterConfig *conf) {
  OrgApacheLuceneIndexIndexWriter *self = [OrgApacheLuceneIndexIndexWriter alloc];
  OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(self, d, conf);
  return self;
}

OrgApacheLuceneIndexFieldInfos *OrgApacheLuceneIndexIndexWriter_readFieldInfosWithOrgApacheLuceneIndexSegmentCommitInfo_(OrgApacheLuceneIndexSegmentCommitInfo *si) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  OrgApacheLuceneCodecsCodec *codec = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(si))->info_)) getCodec];
  OrgApacheLuceneCodecsFieldInfosFormat *reader = [((OrgApacheLuceneCodecsCodec *) nil_chk(codec)) fieldInfosFormat];
  if ([si hasFieldUpdates]) {
    NSString *segmentSuffix = JavaLangLong_toStringWithLong_withInt_([si getFieldInfosGen], JavaLangCharacter_MAX_RADIX);
    return [((OrgApacheLuceneCodecsFieldInfosFormat *) nil_chk(reader)) readWithOrgApacheLuceneStoreDirectory:si->info_->dir_ withOrgApacheLuceneIndexSegmentInfo:si->info_ withNSString:segmentSuffix withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, READONCE_)];
  }
  else if ([si->info_ getUseCompoundFile]) {
    {
      JavaLangThrowable *__mainException = nil;
      OrgApacheLuceneStoreDirectory *cfs = [((OrgApacheLuceneCodecsCompoundFormat *) nil_chk([codec compoundFormat])) getCompoundReaderWithOrgApacheLuceneStoreDirectory:si->info_->dir_ withOrgApacheLuceneIndexSegmentInfo:si->info_ withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, DEFAULT_)];
      @try {
        return [((OrgApacheLuceneCodecsFieldInfosFormat *) nil_chk(reader)) readWithOrgApacheLuceneStoreDirectory:cfs withOrgApacheLuceneIndexSegmentInfo:si->info_ withNSString:@"" withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, READONCE_)];
      }
      @finally {
        @try {
          [cfs close];
        }
        @catch (JavaLangThrowable *e) {
          if (__mainException) {
            [__mainException addSuppressedWithJavaLangThrowable:e];
          } else {
            __mainException = e;
          }
        }
        if (__mainException) {
          @throw __mainException;
        }
      }
    }
  }
  else {
    return [((OrgApacheLuceneCodecsFieldInfosFormat *) nil_chk(reader)) readWithOrgApacheLuceneStoreDirectory:si->info_->dir_ withOrgApacheLuceneIndexSegmentInfo:si->info_ withNSString:@"" withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, READONCE_)];
  }
}

OrgApacheLuceneIndexFieldInfos_FieldNumbers *OrgApacheLuceneIndexIndexWriter_getFieldNumberMap(OrgApacheLuceneIndexIndexWriter *self) {
  OrgApacheLuceneIndexFieldInfos_FieldNumbers *map = [new_OrgApacheLuceneIndexFieldInfos_FieldNumbers_init() autorelease];
  for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(self->segmentInfos_)) {
    OrgApacheLuceneIndexFieldInfos *fis = OrgApacheLuceneIndexIndexWriter_readFieldInfosWithOrgApacheLuceneIndexSegmentCommitInfo_(info);
    for (OrgApacheLuceneIndexFieldInfo * __strong fi in nil_chk(fis)) {
      [map addOrGetWithNSString:((OrgApacheLuceneIndexFieldInfo *) nil_chk(fi))->name_ withInt:fi->number_ withOrgApacheLuceneIndexDocValuesTypeEnum:[fi getDocValuesType]];
    }
  }
  return map;
}

void OrgApacheLuceneIndexIndexWriter_messageState(OrgApacheLuceneIndexIndexWriter *self) {
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"] && self->didMessageState_ == NO) {
    self->didMessageState_ = YES;
    [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$@$$$$C$", @"\ndir=", self->directoryOrig_, @"\nindex=", [self segString], @"\nversion=", [((OrgApacheLuceneUtilVersion *) nil_chk(JreLoadStatic(OrgApacheLuceneUtilVersion, LATEST_))) description], 0x000a, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) description])];
  }
}

void OrgApacheLuceneIndexIndexWriter_shutdown(OrgApacheLuceneIndexIndexWriter *self) {
  if (JreLoadVolatileId(&self->pendingCommit_) != nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"cannot close: prepareCommit was already called with no corresponding call to commit") autorelease];
  }
  if (OrgApacheLuceneIndexIndexWriter_shouldCloseWithBoolean_(self, YES)) {
    jboolean success = NO;
    @try {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"now flush at close"];
      }
      OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, YES, YES);
      [self waitForMerges];
      OrgApacheLuceneIndexIndexWriter_commitInternalWithOrgApacheLuceneIndexMergePolicy_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) getMergePolicy]);
      OrgApacheLuceneIndexIndexWriter_rollbackInternal(self);
      success = YES;
    }
    @finally {
      if (success == NO) {
        @try {
          OrgApacheLuceneIndexIndexWriter_rollbackInternal(self);
        }
        @catch (JavaLangThrowable *t) {
        }
      }
    }
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_shouldCloseWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean waitForClose) {
  @synchronized(self) {
    while (YES) {
      if (JreLoadVolatileBoolean(&self->closed_) == NO) {
        if (JreLoadVolatileBoolean(&self->closing_) == NO) {
          JreAssignVolatileBoolean(&self->closing_, YES);
          return YES;
        }
        else if (waitForClose == NO) {
          return NO;
        }
        else {
          OrgApacheLuceneIndexIndexWriter_doWait(self);
        }
      }
      else {
        return NO;
      }
    }
  }
}

NSString *OrgApacheLuceneIndexIndexWriter_newSegmentName(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self->segmentInfos_) {
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->changeCount_)) incrementAndGet];
    [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) changed];
    return JreStrcat("C$", '_', JavaLangInteger_toStringWithInt_withInt_(self->segmentInfos_->counter_++, JavaLangCharacter_MAX_RADIX));
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_maxNumSegmentsMergesPending(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(self->pendingMerges_)) {
      if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ != -1) return YES;
    }
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(self->runningMerges_)) {
      if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ != -1) return YES;
    }
    return NO;
  }
}

void OrgApacheLuceneIndexIndexWriter_maybeMerge(OrgApacheLuceneIndexIndexWriter *self) {
  OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) getMergePolicy], JreLoadStatic(OrgApacheLuceneIndexMergeTriggerEnum, EXPLICIT), OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS);
}

void OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy, OrgApacheLuceneIndexMergeTriggerEnum *trigger, jint maxNumSegments) {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, NO);
  jboolean newMergesFound = OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(self, mergePolicy, trigger, maxNumSegments);
  [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(self->mergeScheduler_)) mergeWithOrgApacheLuceneIndexIndexWriter:self withOrgApacheLuceneIndexMergeTriggerEnum:trigger withBoolean:newMergesFound];
}

jboolean OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy, OrgApacheLuceneIndexMergeTriggerEnum *trigger, jint maxNumSegments) {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_messageState(self);
    JreAssert((maxNumSegments == -1 || maxNumSegments > 0), (@"org/apache/lucene/index/IndexWriter.java:1939 condition failed: assert maxNumSegments == -1 || maxNumSegments > 0;"));
    JreAssert((trigger != nil), (@"org/apache/lucene/index/IndexWriter.java:1940 condition failed: assert trigger != null;"));
    if (self->stopMerges_) {
      return NO;
    }
    if (JreLoadVolatileId(&self->tragedy_) != nil) {
      return NO;
    }
    jboolean newMergesFound = NO;
    OrgApacheLuceneIndexMergePolicy_MergeSpecification *spec;
    if (maxNumSegments != OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS) {
      JreAssert((trigger == JreLoadStatic(OrgApacheLuceneIndexMergeTriggerEnum, EXPLICIT) || trigger == JreLoadStatic(OrgApacheLuceneIndexMergeTriggerEnum, MERGE_FINISHED)), (JreStrcat("$$", @"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: ", [((OrgApacheLuceneIndexMergeTriggerEnum *) nil_chk(trigger)) name])));
      spec = [((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy)) findForcedMergesWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_ withInt:maxNumSegments withJavaUtilMap:JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(self->segmentsToMerge_) withOrgApacheLuceneIndexIndexWriter:self];
      newMergesFound = (spec != nil);
      if (newMergesFound) {
        jint numMerges = [((id<JavaUtilList>) nil_chk(((OrgApacheLuceneIndexMergePolicy_MergeSpecification *) nil_chk(spec))->merges_)) size];
        for (jint i = 0; i < numMerges; i++) {
          OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [spec->merges_ getWithInt:i];
          ((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ = maxNumSegments;
        }
      }
    }
    else {
      spec = [((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy)) findMergesWithOrgApacheLuceneIndexMergeTriggerEnum:trigger withOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_ withOrgApacheLuceneIndexIndexWriter:self];
    }
    newMergesFound = (spec != nil);
    if (newMergesFound) {
      jint numMerges = [((id<JavaUtilList>) nil_chk(((OrgApacheLuceneIndexMergePolicy_MergeSpecification *) nil_chk(spec))->merges_)) size];
      for (jint i = 0; i < numMerges; i++) {
        OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, [spec->merges_ getWithInt:i]);
      }
    }
    return newMergesFound;
  }
}

void OrgApacheLuceneIndexIndexWriter_rollbackInternal(OrgApacheLuceneIndexIndexWriter *self) {
  jboolean success = NO;
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
    [self->infoStream_ messageWithNSString:@"IW" withNSString:@"rollback"];
  }
  @try {
    OrgApacheLuceneIndexIndexWriter_abortMerges(self);
    [((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(self->rateLimiters_)) close];
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:@"rollback: done finish merges"];
    }
    [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(self->mergeScheduler_)) close];
    [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(self->bufferedUpdatesStream_)) clear];
    [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) close];
    [self->docWriter_ abortWithOrgApacheLuceneIndexIndexWriter:self];
    @synchronized(self) {
      if (JreLoadVolatileId(&self->pendingCommit_) != nil) {
        [((OrgApacheLuceneIndexSegmentInfos *) JreLoadVolatileId(&self->pendingCommit_)) rollbackCommitWithOrgApacheLuceneStoreDirectory:self->directory_];
        @try {
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWithOrgApacheLuceneIndexSegmentInfos:JreLoadVolatileId(&self->pendingCommit_)];
        }
        @finally {
          JreVolatileStrongAssign(&self->pendingCommit_, nil);
          [self notifyAll];
        }
      }
      [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropAllWithBoolean:NO];
      [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) rollbackSegmentInfosWithJavaUtilList:self->rollbackSegments_];
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"rollback: infos=", [self segStringWithJavaLangIterable:self->segmentInfos_])];
      }
      OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"rollback before checkpoint");
      if (JreLoadVolatileId(&self->tragedy_) == nil) {
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_ withBoolean:NO];
        [self->deleter_ refresh];
        [self->deleter_ close];
      }
      JreAssignVolatileLong(&self->lastCommitChangeCount_, [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->changeCount_)) get]);
      JreAssignVolatileBoolean(&self->closed_, YES);
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->writeLock_ } count:1 type:JavaIoCloseable_class_()]);
      JreStrongAssign(&self->writeLock_, nil);
    }
    success = YES;
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"rollbackInternal"];
  }
  @finally {
    if (success == NO) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->mergeScheduler_ } count:1 type:JavaIoCloseable_class_()]);
    }
    @synchronized(self) {
      if (success == NO) {
        if (JreLoadVolatileId(&self->pendingCommit_) != nil) {
          @try {
            [((OrgApacheLuceneIndexSegmentInfos *) JreLoadVolatileId(&self->pendingCommit_)) rollbackCommitWithOrgApacheLuceneStoreDirectory:self->directory_];
            [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWithOrgApacheLuceneIndexSegmentInfos:JreLoadVolatileId(&self->pendingCommit_)];
          }
          @catch (JavaLangThrowable *t) {
          }
          JreVolatileStrongAssign(&self->pendingCommit_, nil);
        }
        OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->readerPool_, self->deleter_, self->writeLock_ } count:3 type:JavaIoCloseable_class_()]);
        JreStrongAssign(&self->writeLock_, nil);
      }
      JreAssignVolatileBoolean(&self->closed_, YES);
      JreAssignVolatileBoolean(&self->closing_, NO);
      [self notifyAll];
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_abortMerges(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    self->stopMerges_ = YES;
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(self->pendingMerges_)) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"now abort pending merge ", [self segStringWithJavaLangIterable:((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_])];
      }
      [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->rateLimiter_)) setAbort];
      OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
    }
    [self->pendingMerges_ clear];
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(self->runningMerges_)) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"now abort running merge ", [self segStringWithJavaLangIterable:((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_])];
      }
      [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->rateLimiter_)) setAbort];
    }
    while ([self->runningMerges_ size] != 0) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$I$", @"now wait for ", [self->runningMerges_ size], @" running merge/s to abort")];
      }
      OrgApacheLuceneIndexIndexWriter_doWait(self);
    }
    [self notifyAll];
    JreAssert((0 == [((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) size]), (@"org/apache/lucene/index/IndexWriter.java:2270 condition failed: assert 0 == mergingSegments.size();"));
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:@"all running merges have aborted"];
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_resetMergeExceptions(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    JreStrongAssignAndConsume(&self->mergeExceptions_, new_JavaUtilArrayList_init());
    self->mergeGen_++;
  }
}

void OrgApacheLuceneIndexIndexWriter_noDupDirsWithOrgApacheLuceneStoreDirectoryArray_(OrgApacheLuceneIndexIndexWriter *self, IOSObjectArray *dirs) {
  JavaUtilHashSet *dups = [new_JavaUtilHashSet_init() autorelease];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(dirs))->size_; i++) {
    if ([dups containsWithId:IOSObjectArray_Get(dirs, i)]) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Directory ", IOSObjectArray_Get(dirs, i), @" appears more than once")) autorelease];
    if (IOSObjectArray_Get(dirs, i) == self->directoryOrig_) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot add directory to itself") autorelease];
    [dups addWithId:IOSObjectArray_Get(dirs, i)];
  }
}

id<JavaUtilList> OrgApacheLuceneIndexIndexWriter_acquireWriteLocksWithOrgApacheLuceneStoreDirectoryArray_(OrgApacheLuceneIndexIndexWriter *self, IOSObjectArray *dirs) {
  id<JavaUtilList> locks = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(dirs))->size_; i++) {
    jboolean success = NO;
    @try {
      OrgApacheLuceneStoreLock *lock = [((OrgApacheLuceneStoreDirectory *) nil_chk(IOSObjectArray_Get(dirs, i))) obtainLockWithNSString:OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME_];
      [locks addWithId:lock];
      success = YES;
    }
    @finally {
      if (success == NO) {
        OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaLangIterable_(locks);
      }
    }
  }
  return locks;
}

OrgApacheLuceneIndexSegmentCommitInfo *OrgApacheLuceneIndexIndexWriter_copySegmentAsIsWithOrgApacheLuceneIndexSegmentCommitInfo_withNSString_withOrgApacheLuceneStoreIOContext_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentCommitInfo *info, NSString *segName, OrgApacheLuceneStoreIOContext *context) {
  OrgApacheLuceneIndexSegmentInfo *newInfo = [new_OrgApacheLuceneIndexSegmentInfo_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneUtilVersion_withNSString_withInt_withBoolean_withOrgApacheLuceneCodecsCodec_withJavaUtilMap_withByteArray_withJavaUtilMap_(self->directoryOrig_, [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) getVersion], segName, [info->info_ maxDoc], [info->info_ getUseCompoundFile], [info->info_ getCodec], [info->info_ getDiagnostics], [info->info_ getId], [info->info_ getAttributes]) autorelease];
  OrgApacheLuceneIndexSegmentCommitInfo *newInfoPerCommit = [new_OrgApacheLuceneIndexSegmentCommitInfo_initWithOrgApacheLuceneIndexSegmentInfo_withInt_withLong_withLong_withLong_(newInfo, [info getDelCount], [info getDelGen], [info getFieldInfosGen], [info getDocValuesGen]) autorelease];
  [newInfo setFilesWithJavaUtilCollection:[info files]];
  jboolean success = NO;
  id<JavaUtilSet> copiedFiles = [new_JavaUtilHashSet_init() autorelease];
  @try {
    for (NSString * __strong file in nil_chk([info files])) {
      NSString *newFileName = [newInfo namedForThisSegmentWithNSString:file];
      JreAssert((!OrgApacheLuceneIndexIndexWriter_slowFileExistsWithOrgApacheLuceneStoreDirectory_withNSString_(self->directory_, newFileName)), (JreStrcat("$$$@", @"file \"", newFileName, @"\" already exists; newInfo.files=", [newInfo files])));
      [((OrgApacheLuceneStoreDirectory *) nil_chk(self->directory_)) copyFromWithOrgApacheLuceneStoreDirectory:info->info_->dir_ withNSString:file withNSString:newFileName withOrgApacheLuceneStoreIOContext:context];
      [copiedFiles addWithId:newFileName];
    }
    success = YES;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, copiedFiles);
    }
  }
  JreAssert(([copiedFiles isEqual:[newInfoPerCommit files]]), (@"org/apache/lucene/index/IndexWriter.java:2743 condition failed: assert copiedFiles.equals(newInfoPerCommit.files());"));
  return newInfoPerCommit;
}

void OrgApacheLuceneIndexIndexWriter_prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy) {
  self->startCommitTime_ = JavaLangSystem_nanoTime();
  @synchronized(self->commitLock_) {
    OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, NO);
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:@"prepareCommit: flush"];
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"  index before flush ", [self segString])];
    }
    if (JreLoadVolatileId(&self->tragedy_) != nil) {
      @throw [new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot commit", JreLoadVolatileId(&self->tragedy_)) autorelease];
    }
    if (JreLoadVolatileId(&self->pendingCommit_) != nil) {
      @throw [new_JavaLangIllegalStateException_initWithNSString_(@"prepareCommit was already called with no corresponding call to commit") autorelease];
    }
    [self doBeforeFlush];
    OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"startDoFlush");
    OrgApacheLuceneIndexSegmentInfos *toCommit = nil;
    jboolean anySegmentsFlushed = NO;
    @try {
      @synchronized(self->fullFlushLock_) {
        jboolean flushSuccess = NO;
        jboolean success = NO;
        @try {
          anySegmentsFlushed = [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) flushAllThreads];
          if (!anySegmentsFlushed) {
            [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->flushCount_)) incrementAndGet];
          }
          OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, NO, YES);
          flushSuccess = YES;
          @synchronized(self) {
            OrgApacheLuceneIndexIndexWriter_maybeApplyDeletesWithBoolean_(self, YES);
            [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) commitWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_];
            if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->changeCount_)) get] != JreLoadVolatileLong(&self->lastCommitChangeCount_)) {
              [self->changeCount_ incrementAndGet];
              [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) changed];
            }
            toCommit = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) clone];
            JreAssignVolatileLong(&self->pendingCommitChangeCount_, [self->changeCount_ get]);
            JreStrongAssign(&self->filesToCommit_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(toCommit)) filesWithBoolean:NO]);
            [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) incRefWithJavaUtilCollection:self->filesToCommit_];
          }
          success = YES;
        }
        @finally {
          if (!success) {
            if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
              [self->infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception during prepareCommit"];
            }
          }
          [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) finishFullFlushWithOrgApacheLuceneIndexIndexWriter:self withBoolean:flushSuccess];
          [self doAfterFlush];
        }
      }
    }
    @catch (OrgApacheLuceneIndexAbortingException *tragedy) {
      [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"prepareCommit"];
    }
    @catch (JavaLangOutOfMemoryError *tragedy) {
      [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"prepareCommit"];
    }
    @catch (JavaLangThrowable *tragedy) {
      [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"prepareCommit"];
    }
    jboolean success = NO;
    @try {
      if (anySegmentsFlushed) {
        OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(self, mergePolicy, JreLoadStatic(OrgApacheLuceneIndexMergeTriggerEnum, FULL_FLUSH), OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS);
      }
      OrgApacheLuceneIndexIndexWriter_startCommitWithOrgApacheLuceneIndexSegmentInfos_(self, toCommit);
      success = YES;
    }
    @finally {
      if (!success) {
        @synchronized(self) {
          if (self->filesToCommit_ != nil) {
            [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWhileHandlingExceptionWithJavaUtilCollection:self->filesToCommit_];
            JreStrongAssign(&self->filesToCommit_, nil);
          }
        }
      }
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_commitInternalWithOrgApacheLuceneIndexMergePolicy_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy) {
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
    [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commit: start"];
  }
  @synchronized(self->commitLock_) {
    OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, NO);
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commit: enter lock"];
    }
    if (JreLoadVolatileId(&self->pendingCommit_) == nil) {
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commit: now prepare"];
      }
      OrgApacheLuceneIndexIndexWriter_prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy_(self, mergePolicy);
    }
    else {
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commit: already prepared"];
      }
    }
    OrgApacheLuceneIndexIndexWriter_finishCommit(self);
  }
}

void OrgApacheLuceneIndexIndexWriter_finishCommit(OrgApacheLuceneIndexIndexWriter *self) {
  jboolean commitCompleted = NO;
  jboolean finished = NO;
  NSString *committedSegmentsFileName = nil;
  @try {
    @synchronized(self) {
      OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, NO);
      if (JreLoadVolatileId(&self->tragedy_) != nil) {
        @throw [new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot complete commit", JreLoadVolatileId(&self->tragedy_)) autorelease];
      }
      if (JreLoadVolatileId(&self->pendingCommit_) != nil) {
        @try {
          if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commit: pendingCommit != null"];
          }
          committedSegmentsFileName = [((OrgApacheLuceneIndexSegmentInfos *) JreLoadVolatileId(&self->pendingCommit_)) finishCommitWithOrgApacheLuceneStoreDirectory:self->directory_];
          commitCompleted = YES;
          if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$C", @"commit: done writing segments file \"", committedSegmentsFileName, '"')];
          }
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:JreLoadVolatileId(&self->pendingCommit_) withBoolean:YES];
          [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) updateGenerationWithOrgApacheLuceneIndexSegmentInfos:JreLoadVolatileId(&self->pendingCommit_)];
          JreAssignVolatileLong(&self->lastCommitChangeCount_, JreLoadVolatileLong(&self->pendingCommitChangeCount_));
          JreStrongAssign(&self->rollbackSegments_, [((OrgApacheLuceneIndexSegmentInfos *) JreLoadVolatileId(&self->pendingCommit_)) createBackupSegmentInfos]);
          finished = YES;
        }
        @finally {
          [self notifyAll];
          @try {
            if (finished) {
              [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWithJavaUtilCollection:self->filesToCommit_];
            }
            else if (commitCompleted == NO) {
              [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWhileHandlingExceptionWithJavaUtilCollection:self->filesToCommit_];
            }
          }
          @finally {
            JreVolatileStrongAssign(&self->pendingCommit_, nil);
            JreStrongAssign(&self->filesToCommit_, nil);
          }
        }
      }
      else {
        JreAssert((self->filesToCommit_ == nil), (@"org/apache/lucene/index/IndexWriter.java:3045 condition failed: assert filesToCommit == null;"));
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
          [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commit: pendingCommit == null; skip"];
        }
      }
    }
  }
  @catch (JavaLangThrowable *t) {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"hit exception during finishCommit: ", [((JavaLangThrowable *) nil_chk(t)) getMessage])];
    }
    if (commitCompleted) {
      [self tragicEventWithJavaLangThrowable:t withNSString:@"finishCommit"];
    }
    else {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(t);
    }
  }
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
    [self->infoStream_ messageWithNSString:@"IW" withNSString:NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"commit: took %.1f msec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_((JavaLangSystem_nanoTime() - self->startCommitTime_) / 1000000.0) } count:1 type:NSObject_class_()])];
    [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commit: done"];
  }
}

void OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean triggerMerge, jboolean applyAllDeletes) {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, NO);
  if (OrgApacheLuceneIndexIndexWriter_doFlushWithBoolean_(self, applyAllDeletes) && triggerMerge) {
    OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTriggerEnum_withInt_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) getMergePolicy], JreLoadStatic(OrgApacheLuceneIndexMergeTriggerEnum, FULL_FLUSH), OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS);
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_doFlushWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean applyAllDeletes) {
  if (JreLoadVolatileId(&self->tragedy_) != nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot flush", JreLoadVolatileId(&self->tragedy_)) autorelease];
  }
  [self doBeforeFlush];
  OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"startDoFlush");
  jboolean success = NO;
  @try {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$Z", @"  start flush: applyAllDeletes=", applyAllDeletes)];
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"  index before flush ", [self segString])];
    }
    jboolean anyChanges = NO;
    @synchronized(self->fullFlushLock_) {
      jboolean flushSuccess = NO;
      @try {
        anyChanges = [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) flushAllThreads];
        if (!anyChanges) {
          [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->flushCount_)) incrementAndGet];
        }
        flushSuccess = YES;
      }
      @finally {
        [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) finishFullFlushWithOrgApacheLuceneIndexIndexWriter:self withBoolean:flushSuccess];
        OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, NO, YES);
      }
    }
    @synchronized(self) {
      anyChanges |= OrgApacheLuceneIndexIndexWriter_maybeApplyDeletesWithBoolean_(self, applyAllDeletes);
      [self doAfterFlush];
      success = YES;
      return anyChanges;
    }
  }
  @catch (OrgApacheLuceneIndexAbortingException *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"doFlush"];
    return NO;
  }
  @catch (JavaLangOutOfMemoryError *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"doFlush"];
    return NO;
  }
  @catch (JavaLangThrowable *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"doFlush"];
    return NO;
  }
  @finally {
    if (!success) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception during flush"];
      }
    }
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_maybeApplyDeletesWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean applyAllDeletes) {
  @synchronized(self) {
    if (applyAllDeletes) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"apply all deletes during flush"];
      }
      return OrgApacheLuceneIndexIndexWriter_applyAllDeletesAndUpdates(self);
    }
    else if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$I$J", @"don't apply deletes now delTermCount=", [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(self->bufferedUpdatesStream_)) numTerms], @" bytesUsed=", [self->bufferedUpdatesStream_ ramBytesUsed])];
    }
    return NO;
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_applyAllDeletesAndUpdates(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->flushDeletesCount_)) incrementAndGet];
    OrgApacheLuceneIndexBufferedUpdatesStream_ApplyDeletesResult *result;
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$I", @"now apply all deletes for all segments maxDoc=", ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) getNumDocs] + [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) totalMaxDoc]))];
    }
    result = [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(self->bufferedUpdatesStream_)) applyDeletesAndUpdatesWithOrgApacheLuceneIndexIndexWriter_ReaderPool:self->readerPool_ withJavaUtilList:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) asList]];
    if (((OrgApacheLuceneIndexBufferedUpdatesStream_ApplyDeletesResult *) nil_chk(result))->anyDeletes_) {
      [self checkpoint];
    }
    if (!self->keepFullyDeletedSegments_ && result->allDeleted_ != nil) {
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"drop 100% deleted segments: ", [self segStringWithJavaLangIterable:result->allDeleted_])];
      }
      for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in result->allDeleted_) {
        if (![((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) containsWithId:info]) {
          [self->segmentInfos_ removeWithOrgApacheLuceneIndexSegmentCommitInfo:info];
          [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->pendingNumDocs_)) addAndGetWithLong:-[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) maxDoc]];
          [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropWithOrgApacheLuceneIndexSegmentCommitInfo:info];
        }
      }
      [self checkpoint];
    }
    [self->bufferedUpdatesStream_ pruneWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_];
    return result->anyDeletes_;
  }
}

void OrgApacheLuceneIndexIndexWriter_ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  @synchronized(self) {
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_)) {
      if (![((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) containsWithOrgApacheLuceneIndexSegmentCommitInfo:info]) {
        @throw [new_OrgApacheLuceneIndexMergePolicy_MergeException_initWithNSString_withOrgApacheLuceneStoreDirectory_(JreStrcat("$$$$", @"MergePolicy selected a segment (", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->name_, @") that is not in the current index ", [self segString]), self->directoryOrig_) autorelease];
      }
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(OrgApacheLuceneIndexIndexWriter *self, IOSObjectArray *updatesIters, jint deletedDoc) {
  {
    IOSObjectArray *a__ = updatesIters;
    OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator *iter = *b__++;
      if ([((OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator *) nil_chk(iter)) doc] == deletedDoc) {
        [iter nextDoc];
      }
      JreAssert(([iter doc] > deletedDoc), (JreStrcat("$I$I", @"updateDoc=", [iter doc], @" deletedDoc=", deletedDoc)));
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withInt_withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_withNSStringArray_withOrgApacheLuceneIndexDocValuesFieldUpdatesArray_withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState, jint docUpto, OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *holder, IOSObjectArray *mergingFields, IOSObjectArray *dvFieldUpdates, IOSObjectArray *updatesIters, jint curDoc) {
  jint newDoc = -1;
  for (jint idx = 0; idx < ((IOSObjectArray *) nil_chk(mergingFields))->size_; idx++) {
    OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator *updatesIter = IOSObjectArray_Get(nil_chk(updatesIters), idx);
    if ([((OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator *) nil_chk(updatesIter)) doc] == curDoc) {
      if (((OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *) nil_chk(holder))->mergedDeletesAndUpdates_ == nil) {
        OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool_withOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withBoolean_(holder, self->readerPool_, merge, mergeState, NO);
      }
      if (newDoc == -1) {
        newDoc = [((OrgApacheLuceneIndexMergePolicy_DocMap *) nil_chk(holder->docMap_)) mapWithInt:docUpto];
      }
      OrgApacheLuceneIndexDocValuesFieldUpdates *dvUpdates = IOSObjectArray_Get(nil_chk(dvFieldUpdates), idx);
      [((OrgApacheLuceneIndexDocValuesFieldUpdates *) nil_chk(dvUpdates)) addWithInt:newDoc withId:[updatesIter value]];
      [updatesIter nextDoc];
    }
    else {
      JreAssert(([updatesIter doc] > curDoc), (JreStrcat("$$$I$I", @"field=", IOSObjectArray_Get(mergingFields, idx), @" updateDoc=", [updatesIter doc], @" curDoc=", curDoc)));
    }
  }
}

OrgApacheLuceneIndexReadersAndUpdates *OrgApacheLuceneIndexIndexWriter_commitMergedDeletesAndUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState) {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"startCommitMergeDeletes");
    id<JavaUtilList> sourceSegments = ((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_;
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"commitMergeDeletes ", [self segStringWithJavaLangIterable:merge->segments_])];
    }
    jint docUpto = 0;
    jlong minGen = JavaLangLong_MAX_VALUE;
    OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *holder = [new_OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init() autorelease];
    OrgApacheLuceneIndexDocValuesFieldUpdates_Container *mergedDVUpdates = [new_OrgApacheLuceneIndexDocValuesFieldUpdates_Container_init() autorelease];
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(sourceSegments)) size]; i++) {
      OrgApacheLuceneIndexSegmentCommitInfo *info = [sourceSegments getWithInt:i];
      minGen = JavaLangMath_minWithLong_withLong_([((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info)) getBufferedDeletesGen], minGen);
      jint maxDoc = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info->info_)) maxDoc];
      id<OrgApacheLuceneUtilBits> prevLiveDocs = [((OrgApacheLuceneIndexSegmentReader *) nil_chk([((id<JavaUtilList>) nil_chk(merge->readers_)) getWithInt:i])) getLiveDocs];
      OrgApacheLuceneIndexReadersAndUpdates *rld = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) getWithOrgApacheLuceneIndexSegmentCommitInfo:info withBoolean:NO];
      JreAssert((rld != nil), (JreStrcat("$$", @"seg=", info->info_->name_)));
      id<OrgApacheLuceneUtilBits> currentLiveDocs = [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) getLiveDocs];
      id<JavaUtilMap> mergingFieldUpdates = [rld getMergingFieldUpdates];
      IOSObjectArray *mergingFields;
      IOSObjectArray *dvFieldUpdates;
      IOSObjectArray *updatesIters;
      if ([((id<JavaUtilMap>) nil_chk(mergingFieldUpdates)) isEmpty]) {
        mergingFields = nil;
        updatesIters = nil;
        dvFieldUpdates = nil;
      }
      else {
        mergingFields = [IOSObjectArray arrayWithLength:[mergingFieldUpdates size] type:NSString_class_()];
        dvFieldUpdates = [IOSObjectArray arrayWithLength:[mergingFieldUpdates size] type:OrgApacheLuceneIndexDocValuesFieldUpdates_class_()];
        updatesIters = [IOSObjectArray arrayWithLength:[mergingFieldUpdates size] type:OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator_class_()];
        jint idx = 0;
        for (id<JavaUtilMap_Entry> __strong e in nil_chk([mergingFieldUpdates entrySet])) {
          NSString *field = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
          OrgApacheLuceneIndexDocValuesFieldUpdates *updates = [e getValue];
          IOSObjectArray_Set(mergingFields, idx, field);
          IOSObjectArray_Set(dvFieldUpdates, idx, [mergedDVUpdates getUpdatesWithNSString:field withOrgApacheLuceneIndexDocValuesTypeEnum:((OrgApacheLuceneIndexDocValuesFieldUpdates *) nil_chk(updates))->type_]);
          if (IOSObjectArray_Get(dvFieldUpdates, idx) == nil) {
            IOSObjectArray_Set(dvFieldUpdates, idx, [mergedDVUpdates newUpdatesWithNSString:field withOrgApacheLuceneIndexDocValuesTypeEnum:updates->type_ withInt:[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexMergeState *) nil_chk(mergeState))->segmentInfo_)) maxDoc]]);
          }
          IOSObjectArray_Set(updatesIters, idx, [updates iterator]);
          [((OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator *) nil_chk(IOSObjectArray_Get(updatesIters, idx))) nextDoc];
          ++idx;
        }
      }
      if (prevLiveDocs != nil) {
        JreAssert((currentLiveDocs != nil), (@"org/apache/lucene/index/IndexWriter.java:3340 condition failed: assert currentLiveDocs != null;"));
        JreAssert(([prevLiveDocs length] == maxDoc), (@"org/apache/lucene/index/IndexWriter.java:3341 condition failed: assert prevLiveDocs.length() == maxDoc;"));
        JreAssert(([((id<OrgApacheLuceneUtilBits>) nil_chk(currentLiveDocs)) length] == maxDoc), (@"org/apache/lucene/index/IndexWriter.java:3342 condition failed: assert currentLiveDocs.length() == maxDoc;"));
        if (currentLiveDocs != prevLiveDocs) {
          for (jint j = 0; j < maxDoc; j++) {
            if (![prevLiveDocs getWithInt:j]) {
              JreAssert((![currentLiveDocs getWithInt:j]), (@"org/apache/lucene/index/IndexWriter.java:3362 condition failed: assert !currentLiveDocs.get(j);"));
            }
            else {
              if (![currentLiveDocs getWithInt:j]) {
                if (holder->mergedDeletesAndUpdates_ == nil || !holder->initializedWritableLiveDocs_) {
                  OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool_withOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withBoolean_(holder, self->readerPool_, merge, mergeState, YES);
                }
                [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(holder->mergedDeletesAndUpdates_)) delete__WithInt:[((OrgApacheLuceneIndexMergePolicy_DocMap *) nil_chk(holder->docMap_)) mapWithInt:docUpto]];
                if (mergingFields != nil) {
                  OrgApacheLuceneIndexIndexWriter_skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, updatesIters, j);
                }
              }
              else if (mergingFields != nil) {
                OrgApacheLuceneIndexIndexWriter_maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withInt_withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_withNSStringArray_withOrgApacheLuceneIndexDocValuesFieldUpdatesArray_withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, merge, mergeState, docUpto, holder, mergingFields, dvFieldUpdates, updatesIters, j);
              }
              docUpto++;
            }
          }
        }
        else if (mergingFields != nil) {
          for (jint j = 0; j < maxDoc; j++) {
            if ([prevLiveDocs getWithInt:j]) {
              OrgApacheLuceneIndexIndexWriter_maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withInt_withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_withNSStringArray_withOrgApacheLuceneIndexDocValuesFieldUpdatesArray_withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, merge, mergeState, docUpto, holder, mergingFields, dvFieldUpdates, updatesIters, j);
              docUpto++;
            }
            else {
              OrgApacheLuceneIndexIndexWriter_skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, updatesIters, j);
            }
          }
        }
        else {
          docUpto += [info->info_ maxDoc] - [info getDelCount] - [rld getPendingDeleteCount];
        }
      }
      else if (currentLiveDocs != nil) {
        JreAssert(([currentLiveDocs length] == maxDoc), (@"org/apache/lucene/index/IndexWriter.java:3395 condition failed: assert currentLiveDocs.length() == maxDoc;"));
        for (jint j = 0; j < maxDoc; j++) {
          if (![currentLiveDocs getWithInt:j]) {
            if (holder->mergedDeletesAndUpdates_ == nil || !holder->initializedWritableLiveDocs_) {
              OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool_withOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withBoolean_(holder, self->readerPool_, merge, mergeState, YES);
            }
            [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(holder->mergedDeletesAndUpdates_)) delete__WithInt:[((OrgApacheLuceneIndexMergePolicy_DocMap *) nil_chk(holder->docMap_)) mapWithInt:docUpto]];
            if (mergingFields != nil) {
              OrgApacheLuceneIndexIndexWriter_skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, updatesIters, j);
            }
          }
          else if (mergingFields != nil) {
            OrgApacheLuceneIndexIndexWriter_maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withInt_withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_withNSStringArray_withOrgApacheLuceneIndexDocValuesFieldUpdatesArray_withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, merge, mergeState, docUpto, holder, mergingFields, dvFieldUpdates, updatesIters, j);
          }
          docUpto++;
        }
      }
      else if (mergingFields != nil) {
        for (jint j = 0; j < maxDoc; j++) {
          OrgApacheLuceneIndexIndexWriter_maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withInt_withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_withNSStringArray_withOrgApacheLuceneIndexDocValuesFieldUpdatesArray_withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, merge, mergeState, docUpto, holder, mergingFields, dvFieldUpdates, updatesIters, j);
          docUpto++;
        }
      }
      else {
        docUpto += [info->info_ maxDoc];
      }
    }
    JreAssert((docUpto == [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_)) maxDoc]), (@"org/apache/lucene/index/IndexWriter.java:3425 condition failed: assert docUpto == merge.info.info.maxDoc();"));
    if ([mergedDVUpdates any]) {
      jboolean success = NO;
      @try {
        [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(holder->mergedDeletesAndUpdates_)) writeFieldUpdatesWithOrgApacheLuceneStoreDirectory:self->directory_ withOrgApacheLuceneIndexDocValuesFieldUpdates_Container:mergedDVUpdates];
        success = YES;
      }
      @finally {
        if (!success) {
          [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(holder->mergedDeletesAndUpdates_)) dropChanges];
          [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_];
        }
      }
    }
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      if (holder->mergedDeletesAndUpdates_ == nil) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"no new deletes or field updates since merge started"];
      }
      else {
        NSString *msg = JreStrcat("I$", [holder->mergedDeletesAndUpdates_ getPendingDeleteCount], @" new deletes");
        if ([mergedDVUpdates any]) {
          JreStrAppend(&msg, "$I$", @" and ", [mergedDVUpdates size], @" new field updates");
        }
        JreStrAppend(&msg, "$", @" since merge started");
        [self->infoStream_ messageWithNSString:@"IW" withNSString:msg];
      }
    }
    [merge->info_ setBufferedDeletesGenWithLong:minGen];
    return holder->mergedDeletesAndUpdates_;
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState) {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"startCommitMerge");
    if (JreLoadVolatileId(&self->tragedy_) != nil) {
      @throw [new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot complete merge", JreLoadVolatileId(&self->tragedy_)) autorelease];
    }
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$$", @"commitMerge: ", [self segStringWithJavaLangIterable:((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_], @" index=", [self segString])];
    }
    JreAssert((((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->registerDone_), (@"org/apache/lucene/index/IndexWriter.java:3477 condition failed: assert merge.registerDone;"));
    if ([((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(merge->rateLimiter_)) getAbort]) {
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commitMerge: skip: it was aborted"];
      }
      [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_];
      OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_)) files]);
      return NO;
    }
    OrgApacheLuceneIndexReadersAndUpdates *mergedUpdates = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_)) maxDoc] == 0 ? nil : OrgApacheLuceneIndexIndexWriter_commitMergedDeletesAndUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(self, merge, mergeState);
    JreAssert((![((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) containsWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_]), (@"org/apache/lucene/index/IndexWriter.java:3513 condition failed: assert !segmentInfos.contains(merge.info);"));
    jboolean allDeleted = [((id<JavaUtilList>) nil_chk(merge->segments_)) size] == 0 || [merge->info_->info_ maxDoc] == 0 || (mergedUpdates != nil && [mergedUpdates getPendingDeleteCount] == [merge->info_->info_ maxDoc]);
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      if (allDeleted) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$@$$", @"merged segment ", merge->info_, @" is 100% deleted", (self->keepFullyDeletedSegments_ ? @"" : @"; skipping insert"))];
      }
    }
    jboolean dropSegment = allDeleted && !self->keepFullyDeletedSegments_;
    JreAssert(([merge->segments_ size] > 0 || dropSegment), (@"org/apache/lucene/index/IndexWriter.java:3530 condition failed: assert merge.segments.size() > 0 || dropSegment;"));
    JreAssert(([merge->info_->info_ maxDoc] != 0 || self->keepFullyDeletedSegments_ || dropSegment), (@"org/apache/lucene/index/IndexWriter.java:3532 condition failed: assert merge.info.info.maxDoc() != 0 || keepFullyDeletedSegments || dropSegment;"));
    if (mergedUpdates != nil) {
      jboolean success = NO;
      @try {
        if (dropSegment) {
          [mergedUpdates dropChanges];
        }
        [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) release__WithOrgApacheLuceneIndexReadersAndUpdates:mergedUpdates withBoolean:NO];
        success = YES;
      }
      @finally {
        if (!success) {
          [mergedUpdates dropChanges];
          [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_];
        }
      }
    }
    [self->segmentInfos_ applyMergeChangesWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge withBoolean:dropSegment];
    jint delDocCount = merge->totalMaxDoc_ - [merge->info_->info_ maxDoc];
    JreAssert((delDocCount >= 0), (@"org/apache/lucene/index/IndexWriter.java:3562 condition failed: assert delDocCount >= 0;"));
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->pendingNumDocs_)) addAndGetWithLong:-delDocCount];
    if (dropSegment) {
      JreAssert((![self->segmentInfos_ containsWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_]), (@"org/apache/lucene/index/IndexWriter.java:3566 condition failed: assert !segmentInfos.contains(merge.info);"));
      [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_];
      OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [merge->info_ files]);
    }
    jboolean success = NO;
    @try {
      OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(self, merge, NO);
      success = YES;
    }
    @finally {
      if (success) {
        [self checkpoint];
      }
      else {
        @try {
          [self checkpoint];
        }
        @catch (JavaLangThrowable *t) {
        }
      }
    }
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) deletePendingFiles];
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"after commitMerge: ", [self segString])];
    }
    if (merge->maxNumSegments_ != -1 && !dropSegment) {
      if (![((id<JavaUtilMap>) nil_chk(self->segmentsToMerge_)) containsKeyWithId:merge->info_]) {
        [self->segmentsToMerge_ putWithId:merge->info_ withId:JreLoadStatic(JavaLangBoolean, FALSE__)];
      }
    }
    return YES;
  }
}

void OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithJavaLangThrowable_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, JavaLangThrowable *t, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
    [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$@", @"handleMergeException: merge=", [self segStringWithJavaLangIterable:((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_], @" exc=", t)];
  }
  [((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) setExceptionWithJavaLangThrowable:t];
  [self addMergeExceptionWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
  if ([t isKindOfClass:[OrgApacheLuceneIndexMergePolicy_MergeAbortedException class]]) {
    if (merge->isExternal_) {
      @throw (OrgApacheLuceneIndexMergePolicy_MergeAbortedException *) check_class_cast(t, [OrgApacheLuceneIndexMergePolicy_MergeAbortedException class]);
    }
  }
  else {
    OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(t);
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  @synchronized(self) {
    if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->registerDone_) {
      return YES;
    }
    JreAssert(([((id<JavaUtilList>) nil_chk(merge->segments_)) size] > 0), (@"org/apache/lucene/index/IndexWriter.java:3718 condition failed: assert merge.segments.size() > 0;"));
    if (self->stopMerges_) {
      [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(merge->rateLimiter_)) setAbort];
      @throw [new_OrgApacheLuceneIndexMergePolicy_MergeAbortedException_initWithNSString_(JreStrcat("$$", @"merge is aborted: ", [self segStringWithJavaLangIterable:merge->segments_])) autorelease];
    }
    jboolean isExternal = NO;
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in merge->segments_) {
      if ([((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) containsWithId:info]) {
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
          [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$$$", @"reject merge ", [self segStringWithJavaLangIterable:merge->segments_], @": segment ", [self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info], @" is already marked for merge")];
        }
        return NO;
      }
      if (![((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) containsWithOrgApacheLuceneIndexSegmentCommitInfo:info]) {
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
          [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$$$", @"reject merge ", [self segStringWithJavaLangIterable:merge->segments_], @": segment ", [self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info], @" does not exist in live infos")];
        }
        return NO;
      }
      if (((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->dir_ != self->directoryOrig_) {
        isExternal = YES;
      }
      if ([((id<JavaUtilMap>) nil_chk(self->segmentsToMerge_)) containsKeyWithId:info]) {
        merge->maxNumSegments_ = self->mergeMaxNumSegments_;
      }
    }
    OrgApacheLuceneIndexIndexWriter_ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
    [((JavaUtilLinkedList *) nil_chk(self->pendingMerges_)) addWithId:merge];
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$I$", @"add merge to pendingMerges: ", [self segStringWithJavaLangIterable:merge->segments_], @" [total ", [self->pendingMerges_ size], @" pending]")];
    }
    merge->mergeGen_ = self->mergeGen_;
    merge->isExternal_ = isExternal;
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      JavaLangStringBuilder *builder = [new_JavaLangStringBuilder_initWithNSString_(@"registerMerge merging= [") autorelease];
      for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(self->mergingSegments_)) {
        [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->name_])) appendWithNSString:@", "];
      }
      [builder appendWithNSString:@"]"];
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:[builder description]];
      }
    }
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in merge->segments_) {
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"registerMerge info=", [self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info])];
      }
      [((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) addWithId:info];
    }
    JreAssert((JreLoadVolatileLong(&merge->estimatedMergeBytes_) == 0), (@"org/apache/lucene/index/IndexWriter.java:3781 condition failed: assert merge.estimatedMergeBytes == 0;"));
    JreAssert((JreLoadVolatileLong(&merge->totalMergeBytes_) == 0), (@"org/apache/lucene/index/IndexWriter.java:3782 condition failed: assert merge.totalMergeBytes == 0;"));
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in merge->segments_) {
      if ([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) maxDoc] > 0) {
        jint delCount = [self numDeletedDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info];
        JreAssert((delCount <= [info->info_ maxDoc]), (@"org/apache/lucene/index/IndexWriter.java:3786 condition failed: assert delCount <= info.info.maxDoc();"));
        jdouble delRatio = ((jdouble) delCount) / [info->info_ maxDoc];
        JrePlusAssignVolatileLongD(&merge->estimatedMergeBytes_, [info sizeInBytes] * (1.0 - delRatio));
        JrePlusAssignVolatileLongJ(&merge->totalMergeBytes_, [info sizeInBytes]);
      }
    }
    merge->registerDone_ = YES;
    return YES;
  }
}

void OrgApacheLuceneIndexIndexWriter_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  @synchronized(self) {
    jboolean success = NO;
    @try {
      OrgApacheLuceneIndexIndexWriter__mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
      success = YES;
    }
    @finally {
      if (!success) {
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
          [self->infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception in mergeInit"];
        }
        OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
      }
    }
  }
}

void OrgApacheLuceneIndexIndexWriter__mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"startMergeInit");
    JreAssert((((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->registerDone_), (@"org/apache/lucene/index/IndexWriter.java:3820 condition failed: assert merge.registerDone;"));
    JreAssert((merge->maxNumSegments_ == -1 || merge->maxNumSegments_ > 0), (@"org/apache/lucene/index/IndexWriter.java:3821 condition failed: assert merge.maxNumSegments == -1 || merge.maxNumSegments > 0;"));
    if (JreLoadVolatileId(&self->tragedy_) != nil) {
      @throw [new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot merge", JreLoadVolatileId(&self->tragedy_)) autorelease];
    }
    if (merge->info_ != nil) {
      return;
    }
    if ([((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(merge->rateLimiter_)) getAbort]) {
      return;
    }
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$I$", @"now apply deletes for ", [((id<JavaUtilList>) nil_chk(merge->segments_)) size], @" merging segments")];
    }
    OrgApacheLuceneIndexBufferedUpdatesStream_ApplyDeletesResult *result = [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(self->bufferedUpdatesStream_)) applyDeletesAndUpdatesWithOrgApacheLuceneIndexIndexWriter_ReaderPool:self->readerPool_ withJavaUtilList:merge->segments_];
    if (((OrgApacheLuceneIndexBufferedUpdatesStream_ApplyDeletesResult *) nil_chk(result))->anyDeletes_) {
      [self checkpoint];
    }
    if (!self->keepFullyDeletedSegments_ && result->allDeleted_ != nil) {
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$@", @"drop 100% deleted segments: ", result->allDeleted_)];
      }
      for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in result->allDeleted_) {
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) removeWithOrgApacheLuceneIndexSegmentCommitInfo:info];
        [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->pendingNumDocs_)) addAndGetWithLong:-[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) maxDoc]];
        if ([((id<JavaUtilList>) nil_chk(merge->segments_)) containsWithId:info]) {
          [((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) removeWithId:info];
          [merge->segments_ removeWithId:info];
        }
        [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropWithOrgApacheLuceneIndexSegmentCommitInfo:info];
      }
      [self checkpoint];
    }
    NSString *mergeSegmentName = OrgApacheLuceneIndexIndexWriter_newSegmentName(self);
    OrgApacheLuceneIndexSegmentInfo *si = [new_OrgApacheLuceneIndexSegmentInfo_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneUtilVersion_withNSString_withInt_withBoolean_withOrgApacheLuceneCodecsCodec_withJavaUtilMap_withByteArray_withJavaUtilMap_(self->directoryOrig_, JreLoadStatic(OrgApacheLuceneUtilVersion, LATEST_), mergeSegmentName, -1, NO, self->codec_, JavaUtilCollections_emptyMap(), OrgApacheLuceneUtilStringHelper_randomId(), [new_JavaUtilHashMap_init() autorelease]) autorelease];
    id<JavaUtilMap> details = [new_JavaUtilHashMap_init() autorelease];
    [details putWithId:@"mergeMaxNumSegments" withId:JreStrcat("I", merge->maxNumSegments_)];
    [details putWithId:@"mergeFactor" withId:JavaLangInteger_toStringWithInt_([((id<JavaUtilList>) nil_chk(merge->segments_)) size])];
    OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(si, OrgApacheLuceneIndexIndexWriter_SOURCE_MERGE_, details);
    [merge setMergeInfoWithOrgApacheLuceneIndexSegmentCommitInfo:[new_OrgApacheLuceneIndexSegmentCommitInfo_initWithOrgApacheLuceneIndexSegmentInfo_withInt_withLong_withLong_withLong_(si, 0, -1LL, -1LL, -1LL) autorelease]];
    [self->bufferedUpdatesStream_ pruneWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_];
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$C$", @"merge seg=", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_))->name_, ' ', [self segStringWithJavaLangIterable:merge->segments_])];
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_(OrgApacheLuceneIndexSegmentInfo *info, NSString *source) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(info, source, nil);
}

void OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(OrgApacheLuceneIndexSegmentInfo *info, NSString *source, id<JavaUtilMap> details) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  id<JavaUtilMap> diagnostics = [new_JavaUtilHashMap_init() autorelease];
  [diagnostics putWithId:@"source" withId:source];
  [diagnostics putWithId:@"lucene.version" withId:[((OrgApacheLuceneUtilVersion *) nil_chk(JreLoadStatic(OrgApacheLuceneUtilVersion, LATEST_))) description]];
  [diagnostics putWithId:@"os" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, OS_NAME_)];
  [diagnostics putWithId:@"os.arch" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, OS_ARCH_)];
  [diagnostics putWithId:@"os.version" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, OS_VERSION_)];
  [diagnostics putWithId:@"java.version" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, JAVA_VERSION_)];
  [diagnostics putWithId:@"java.vendor" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, JAVA_VENDOR_)];
  [diagnostics putWithId:@"java.runtime.version" withId:JavaLangSystem_getPropertyWithNSString_withNSString_(@"java.runtime.version", @"undefined")];
  [diagnostics putWithId:@"java.vm.version" withId:JavaLangSystem_getPropertyWithNSString_withNSString_(@"java.vm.version", @"undefined")];
  [diagnostics putWithId:@"timestamp" withId:JavaLangLong_toStringWithLong_([((JavaUtilDate *) [new_JavaUtilDate_init() autorelease]) getTime])];
  if (details != nil) {
    [diagnostics putAllWithJavaUtilMap:details];
  }
  [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) setDiagnosticsWithJavaUtilMap:diagnostics];
}

void OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  @synchronized(self) {
    [self notifyAll];
    if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->registerDone_) {
      id<JavaUtilList> sourceSegments = merge->segments_;
      for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(sourceSegments)) {
        [((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) removeWithId:info];
      }
      merge->registerDone_ = NO;
    }
    [((id<JavaUtilSet>) nil_chk(self->runningMerges_)) removeWithId:merge];
  }
}

void OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, jboolean suppressExceptions) {
  @synchronized(self) {
    jint numSegments = [((id<JavaUtilList>) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->readers_)) size];
    JavaLangThrowable *th = nil;
    jboolean drop = !suppressExceptions;
    for (jint i = 0; i < numSegments; i++) {
      OrgApacheLuceneIndexSegmentReader *sr = [merge->readers_ getWithInt:i];
      if (sr != nil) {
        @try {
          OrgApacheLuceneIndexReadersAndUpdates *rld = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) getWithOrgApacheLuceneIndexSegmentCommitInfo:[sr getSegmentInfo] withBoolean:NO];
          JreAssert((rld != nil), (@"org/apache/lucene/index/IndexWriter.java:3946 condition failed: assert rld != null;"));
          if (drop) {
            [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) dropChanges];
          }
          else {
            [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) dropMergingUpdates];
          }
          [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) release__WithOrgApacheLuceneIndexSegmentReader:sr];
          [self->readerPool_ release__WithOrgApacheLuceneIndexReadersAndUpdates:rld];
          if (drop) {
            [self->readerPool_ dropWithOrgApacheLuceneIndexSegmentCommitInfo:rld->info_];
          }
        }
        @catch (JavaLangThrowable *t) {
          if (th == nil) {
            th = t;
          }
        }
        [merge->readers_ setWithInt:i withId:nil];
      }
    }
    @try {
      [merge mergeFinished];
    }
    @catch (JavaLangThrowable *t) {
      if (th == nil) {
        th = t;
      }
    }
    if (!suppressExceptions) {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(th);
    }
  }
}

jint OrgApacheLuceneIndexIndexWriter_mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergePolicy_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergePolicy *mergePolicy) {
  [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->rateLimiter_)) checkAbort];
  id<JavaUtilList> sourceSegments = merge->segments_;
  OrgApacheLuceneStoreIOContext *context = [new_OrgApacheLuceneStoreIOContext_initWithOrgApacheLuceneStoreMergeInfo_([merge getStoreMergeInfo]) autorelease];
  OrgApacheLuceneStoreTrackingDirectoryWrapper *dirWrapper = [new_OrgApacheLuceneStoreTrackingDirectoryWrapper_initWithOrgApacheLuceneStoreDirectory_(self->mergeDirectory_) autorelease];
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
    [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"merging ", [self segStringWithJavaLangIterable:merge->segments_])];
  }
  JreStrongAssignAndConsume(&merge->readers_, new_JavaUtilArrayList_init());
  jboolean success = NO;
  @try {
    jint segUpto = 0;
    while (segUpto < [((id<JavaUtilList>) nil_chk(sourceSegments)) size]) {
      OrgApacheLuceneIndexSegmentCommitInfo *info = [sourceSegments getWithInt:segUpto];
      OrgApacheLuceneIndexReadersAndUpdates *rld = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) getWithOrgApacheLuceneIndexSegmentCommitInfo:info withBoolean:YES];
      OrgApacheLuceneIndexSegmentReader *reader;
      id<OrgApacheLuceneUtilBits> liveDocs;
      jint delCount;
      @synchronized(self) {
        reader = [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) getReaderForMergeWithOrgApacheLuceneStoreIOContext:context];
        liveDocs = [rld getReadOnlyLiveDocs];
        delCount = [rld getPendingDeleteCount] + [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info)) getDelCount];
        JreAssert((reader != nil), (@"org/apache/lucene/index/IndexWriter.java:4024 condition failed: assert reader != null;"));
        JreAssert(([rld verifyDocCounts]), (@"org/apache/lucene/index/IndexWriter.java:4025 condition failed: assert rld.verifyDocCounts();"));
        if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
          if ([rld getPendingDeleteCount] != 0) {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$I$I", @"seg=", [self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info], @" delCount=", [info getDelCount], @" pendingDelCount=", [rld getPendingDeleteCount])];
          }
          else if ([info getDelCount] != 0) {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$I", @"seg=", [self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info], @" delCount=", [info getDelCount])];
          }
          else {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$", @"seg=", [self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info], @" no deletes")];
          }
        }
      }
      if ([((OrgApacheLuceneIndexSegmentReader *) nil_chk(reader)) numDeletedDocs] != delCount) {
        JreAssert((delCount > [reader numDeletedDocs]), (@"org/apache/lucene/index/IndexWriter.java:4044 condition failed: assert delCount > reader.numDeletedDocs();"));
        OrgApacheLuceneIndexSegmentReader *newReader;
        @synchronized(self) {
          newReader = [new_OrgApacheLuceneIndexSegmentReader_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexSegmentReader_withOrgApacheLuceneUtilBits_withInt_(info, reader, liveDocs, [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info->info_)) maxDoc] - delCount) autorelease];
        }
        jboolean released = NO;
        @try {
          [rld release__WithOrgApacheLuceneIndexSegmentReader:reader];
          released = YES;
        }
        @finally {
          if (!released) {
            [newReader decRef];
          }
        }
        reader = newReader;
      }
      [merge->readers_ addWithId:reader];
      JreAssert((delCount <= [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info->info_)) maxDoc]), (JreStrcat("$I$I$I$I", @"delCount=", delCount, @" info.maxDoc=", [info->info_ maxDoc], @" rld.pendingDeleteCount=", [rld getPendingDeleteCount], @" info.getDelCount()=", [info getDelCount])));
      segUpto++;
    }
    OrgApacheLuceneIndexSegmentMerger *merger = [new_OrgApacheLuceneIndexSegmentMerger_initWithJavaUtilList_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexFieldInfos_FieldNumbers_withOrgApacheLuceneStoreIOContext_([merge getMergeReaders], ((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_, self->infoStream_, dirWrapper, self->globalFieldNumberMap_, context) autorelease];
    [merge->rateLimiter_ checkAbort];
    JreAssignVolatileLong(&merge->mergeStartNS_, JavaLangSystem_nanoTime());
    jboolean success3 = NO;
    @try {
      if ([merger shouldMerge]) {
        [merger merge];
      }
      success3 = YES;
    }
    @finally {
      if (!success3) {
        @synchronized(self) {
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) refreshWithNSString:((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_->info_))->name_];
        }
      }
    }
    OrgApacheLuceneIndexMergeState *mergeState = merger->mergeState_;
    JreAssert((((OrgApacheLuceneIndexMergeState *) nil_chk(mergeState))->segmentInfo_ == merge->info_->info_), (@"org/apache/lucene/index/IndexWriter.java:4100 condition failed: assert mergeState.segmentInfo == merge.info.info;"));
    [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_->info_)) setFilesWithJavaUtilCollection:[new_JavaUtilHashSet_initWithJavaUtilCollection_([dirWrapper getCreatedFiles]) autorelease]];
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      if ([merger shouldMerge]) {
        jlong t1 = JavaLangSystem_nanoTime();
        jdouble sec = (t1 - JreLoadVolatileLong(&merge->mergeStartNS_)) / 1000000000.;
        jdouble segmentMB = ([merge->info_ sizeInBytes] / 1024. / 1024.);
        jdouble stoppedSec = [merge->rateLimiter_ getTotalStoppedNS] / 1000000000.;
        jdouble throttleSec = [merge->rateLimiter_ getTotalPausedNS] / 1000000000.;
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$@$I$$$$$$$$$$$$", @"merge codec=", self->codec_, @" maxDoc=", [merge->info_->info_ maxDoc], @"; merged segment has ", ([((OrgApacheLuceneIndexFieldInfos *) nil_chk(mergeState->mergeFieldInfos_)) hasVectors] ? @"vectors" : @"no vectors"), @"; ", ([mergeState->mergeFieldInfos_ hasNorms] ? @"norms" : @"no norms"), @"; ", ([mergeState->mergeFieldInfos_ hasDocValues] ? @"docValues" : @"no docValues"), @"; ", ([mergeState->mergeFieldInfos_ hasProx] ? @"prox" : @"no prox"), @"; ", ([mergeState->mergeFieldInfos_ hasProx] ? @"freqs" : @"no freqs"), @"; ", NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"%.1f sec (%.1f sec stopped, %.1f sec paused) to merge segment [%.2f MB, %.2f MB/sec]", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(sec), JavaLangDouble_valueOfWithDouble_(stoppedSec), JavaLangDouble_valueOfWithDouble_(throttleSec), JavaLangDouble_valueOfWithDouble_(segmentMB), JavaLangDouble_valueOfWithDouble_(segmentMB / sec) } count:5 type:NSObject_class_()]))];
      }
      else {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"skip merging fully deleted segments"];
      }
    }
    if ([merger shouldMerge] == NO) {
      JreAssert(([merge->info_->info_ maxDoc] == 0), (@"org/apache/lucene/index/IndexWriter.java:4130 condition failed: assert merge.info.info.maxDoc() == 0;"));
      OrgApacheLuceneIndexIndexWriter_commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(self, merge, mergeState);
      return 0;
    }
    JreAssert(([merge->info_->info_ maxDoc] > 0), (@"org/apache/lucene/index/IndexWriter.java:4135 condition failed: assert merge.info.info.maxDoc() > 0;"));
    jboolean useCompoundFile;
    @synchronized(self) {
      useCompoundFile = [((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy)) useCompoundFileWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_ withOrgApacheLuceneIndexSegmentCommitInfo:merge->info_ withOrgApacheLuceneIndexIndexWriter:self];
    }
    if (useCompoundFile) {
      success = NO;
      id<JavaUtilCollection> filesToRemove = [merge->info_ files];
      OrgApacheLuceneStoreTrackingDirectoryWrapper *trackingCFSDir = [new_OrgApacheLuceneStoreTrackingDirectoryWrapper_initWithOrgApacheLuceneStoreDirectory_(self->mergeDirectory_) autorelease];
      @try {
        OrgApacheLuceneIndexIndexWriter_createCompoundFileWithOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreTrackingDirectoryWrapper_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneStoreIOContext_(self, self->infoStream_, trackingCFSDir, merge->info_->info_, context);
        success = YES;
      }
      @catch (JavaLangThrowable *t) {
        @synchronized(self) {
          if ([merge->rateLimiter_ getAbort]) {
            if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
              [self->infoStream_ messageWithNSString:@"IW" withNSString:@"hit merge abort exception creating compound file during merge"];
            }
            return 0;
          }
          else {
            OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithJavaLangThrowable_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, t, merge);
          }
        }
      }
      @finally {
        if (success == NO) {
          if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception creating compound file during merge"];
          }
          OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [merge->info_ files]);
        }
      }
      success = NO;
      @synchronized(self) {
        OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, filesToRemove);
        if ([merge->rateLimiter_ getAbort]) {
          if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:@"abort merge after building CFS"];
          }
          OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [merge->info_ files]);
          return 0;
        }
      }
      [merge->info_->info_ setUseCompoundFileWithBoolean:YES];
    }
    else {
      success = NO;
    }
    jboolean success2 = NO;
    @try {
      [((OrgApacheLuceneCodecsSegmentInfoFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk(self->codec_)) segmentInfoFormat])) writeWithOrgApacheLuceneStoreDirectory:self->directory_ withOrgApacheLuceneIndexSegmentInfo:merge->info_->info_ withOrgApacheLuceneStoreIOContext:context];
      success2 = YES;
    }
    @finally {
      if (!success2) {
        OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [merge->info_ files]);
      }
    }
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"merged segment size=%.3f MB vs estimate=%.3f MB", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([merge->info_ sizeInBytes] / 1024. / 1024.), JavaLangDouble_valueOfWithDouble_(JreLoadVolatileLong(&merge->estimatedMergeBytes_) / 1024 / 1024.) } count:2 type:NSObject_class_()])];
    }
    OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *mergedSegmentWarmer = [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) getMergedSegmentWarmer];
    if (JreLoadVolatileBoolean(&self->poolReaders_) && mergedSegmentWarmer != nil) {
      OrgApacheLuceneIndexReadersAndUpdates *rld = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) getWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_ withBoolean:YES];
      OrgApacheLuceneIndexSegmentReader *sr = [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) getReaderWithOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, READ_)];
      @try {
        [mergedSegmentWarmer warmWithOrgApacheLuceneIndexLeafReader:sr];
      }
      @finally {
        @synchronized(self) {
          [rld release__WithOrgApacheLuceneIndexSegmentReader:sr];
          [self->readerPool_ release__WithOrgApacheLuceneIndexReadersAndUpdates:rld];
        }
      }
    }
    if (!OrgApacheLuceneIndexIndexWriter_commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(self, merge, mergeState)) {
      return 0;
    }
    success = YES;
  }
  @finally {
    if (success == NO) {
      OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(self, merge, YES);
    }
  }
  return [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_)) maxDoc];
}

void OrgApacheLuceneIndexIndexWriter_doWait(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    @try {
      [self waitWithLong:1000];
    }
    @catch (JavaLangInterruptedException *ie) {
      @throw [new_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie) autorelease];
    }
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_filesExistWithOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfos *toSync) {
  id<JavaUtilCollection> files = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(toSync)) filesWithBoolean:NO];
  for (NSString * __strong fileName in nil_chk(files)) {
    JreAssert((OrgApacheLuceneIndexIndexWriter_slowFileExistsWithOrgApacheLuceneStoreDirectory_withNSString_(self->directory_, fileName)), (JreStrcat("$$$$", @"file ", fileName, @" does not exist; files=", JavaUtilArrays_toStringWithNSObjectArray_([((OrgApacheLuceneStoreDirectory *) nil_chk(self->directory_)) listAll]))));
    JreAssert(([((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) existsWithNSString:fileName]), (JreStrcat("$$", @"IndexFileDeleter doesn't know about file ", fileName)));
  }
  return YES;
}

void OrgApacheLuceneIndexIndexWriter_startCommitWithOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfos *toSync) {
  OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"startStartCommit");
  JreAssert((JreLoadVolatileId(&self->pendingCommit_) == nil), (@"org/apache/lucene/index/IndexWriter.java:4385 condition failed: assert pendingCommit == null;"));
  if (JreLoadVolatileId(&self->tragedy_) != nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot commit", JreLoadVolatileId(&self->tragedy_)) autorelease];
  }
  @try {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:@"startCommit(): start"];
    }
    @synchronized(self) {
      if (JreLoadVolatileLong(&self->lastCommitChangeCount_) > [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->changeCount_)) get]) {
        @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$J$@", @"lastCommitChangeCount=", JreLoadVolatileLong(&self->lastCommitChangeCount_), @",changeCount=", self->changeCount_)) autorelease];
      }
      if (JreLoadVolatileLong(&self->pendingCommitChangeCount_) == JreLoadVolatileLong(&self->lastCommitChangeCount_)) {
        if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
          [self->infoStream_ messageWithNSString:@"IW" withNSString:@"  skip startCommit(): no changes pending"];
        }
        @try {
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWithJavaUtilCollection:self->filesToCommit_];
        }
        @finally {
          JreStrongAssign(&self->filesToCommit_, nil);
        }
        return;
      }
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$@", @"startCommit index=", [self segStringWithJavaLangIterable:[self toLiveInfosWithOrgApacheLuceneIndexSegmentInfos:toSync]], @" changeCount=", self->changeCount_)];
      }
      JreAssert((OrgApacheLuceneIndexIndexWriter_filesExistWithOrgApacheLuceneIndexSegmentInfos_(self, toSync)), (@"org/apache/lucene/index/IndexWriter.java:4419 condition failed: assert filesExist(toSync);"));
    }
    OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"midStartCommit");
    jboolean pendingCommitSet = NO;
    @try {
      OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"midStartCommit2");
      @synchronized(self) {
        JreAssert((JreLoadVolatileId(&self->pendingCommit_) == nil), (@"org/apache/lucene/index/IndexWriter.java:4432 condition failed: assert pendingCommit == null;"));
        JreAssert(([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) getGeneration] == [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(toSync)) getGeneration]), (@"org/apache/lucene/index/IndexWriter.java:4434 condition failed: assert segmentInfos.getGeneration() == toSync.getGeneration();"));
        [toSync prepareCommitWithOrgApacheLuceneStoreDirectory:self->directory_];
        if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
          [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$C", @"startCommit: wrote pending segments file \"", OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_PENDING_SEGMENTS_, @"", [toSync getGeneration]), '"')];
        }
        pendingCommitSet = YES;
        JreVolatileStrongAssign(&self->pendingCommit_, toSync);
      }
      jboolean success = NO;
      id<JavaUtilCollection> filesToSync;
      @try {
        filesToSync = [toSync filesWithBoolean:NO];
        [((OrgApacheLuceneStoreDirectory *) nil_chk(self->directory_)) syncWithJavaUtilCollection:filesToSync];
        success = YES;
      }
      @finally {
        if (!success) {
          pendingCommitSet = NO;
          JreVolatileStrongAssign(&self->pendingCommit_, nil);
          [toSync rollbackCommitWithOrgApacheLuceneStoreDirectory:self->directory_];
        }
      }
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$@", @"done all syncs: ", filesToSync)];
      }
      OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"midStartCommitSuccess");
    }
    @finally {
      @synchronized(self) {
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) updateGenerationWithOrgApacheLuceneIndexSegmentInfos:toSync];
        if (!pendingCommitSet) {
          if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception committing segments file"];
          }
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWhileHandlingExceptionWithJavaUtilCollection:self->filesToCommit_];
          JreStrongAssign(&self->filesToCommit_, nil);
        }
      }
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"startCommit"];
  }
  OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"finishStartCommit");
}

jboolean OrgApacheLuceneIndexIndexWriter_isLockedWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  @try {
    [((OrgApacheLuceneStoreLock *) nil_chk([((OrgApacheLuceneStoreDirectory *) nil_chk(directory)) obtainLockWithNSString:OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME_])) close];
    return NO;
  }
  @catch (OrgApacheLuceneStoreLockObtainFailedException *failed) {
    return YES;
  }
}

void OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(OrgApacheLuceneIndexIndexWriter *self, NSString *message) {
  if (self->enableTestPoints_) {
    JreAssert(([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"TP"]), (@"org/apache/lucene/index/IndexWriter.java:4605 condition failed: assert infoStream.isEnabled(\"TP\");"));
    [self->infoStream_ messageWithNSString:@"TP" withNSString:message];
  }
}

void OrgApacheLuceneIndexIndexWriter_createCompoundFileWithOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreTrackingDirectoryWrapper_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneStoreIOContext_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneUtilInfoStream *infoStream, OrgApacheLuceneStoreTrackingDirectoryWrapper *directory, OrgApacheLuceneIndexSegmentInfo *info, OrgApacheLuceneStoreIOContext *context) {
  if (![((id<JavaUtilSet>) nil_chk([((OrgApacheLuceneStoreTrackingDirectoryWrapper *) nil_chk(directory)) getCreatedFiles])) isEmpty]) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"pass a clean trackingdir for CFS creation") autorelease];
  }
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream)) isEnabledWithNSString:@"IW"]) {
    [infoStream messageWithNSString:@"IW" withNSString:@"create compound file"];
  }
  jboolean success = NO;
  @try {
    [((OrgApacheLuceneCodecsCompoundFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) getCodec])) compoundFormat])) writeWithOrgApacheLuceneStoreDirectory:directory withOrgApacheLuceneIndexSegmentInfo:info withOrgApacheLuceneStoreIOContext:context];
    success = YES;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [directory getCreatedFiles]);
    }
  }
  [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) setFilesWithJavaUtilCollection:[new_JavaUtilHashSet_initWithJavaUtilCollection_([directory getCreatedFiles]) autorelease]];
}

void OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(OrgApacheLuceneIndexIndexWriter *self, id<JavaUtilCollection> files) {
  @synchronized(self) {
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) deleteNewFilesWithJavaUtilCollection:files];
  }
}

jint OrgApacheLuceneIndexIndexWriter_purgeWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean forced) {
  return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) purgeBufferWithOrgApacheLuceneIndexIndexWriter:self withBoolean:forced];
}

jboolean OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean triggerMerge, jboolean forcePurge) {
  return OrgApacheLuceneIndexIndexWriter_processEventsWithJavaUtilQueue_withBoolean_withBoolean_(self, self->eventQueue_, triggerMerge, forcePurge);
}

jboolean OrgApacheLuceneIndexIndexWriter_processEventsWithJavaUtilQueue_withBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, id<JavaUtilQueue> queue, jboolean triggerMerge, jboolean forcePurge) {
  jboolean processed = NO;
  if (JreLoadVolatileId(&self->tragedy_) == nil) {
    id<OrgApacheLuceneIndexIndexWriter_Event> event;
    while ((event = [((id<JavaUtilQueue>) nil_chk(queue)) poll]) != nil) {
      processed = YES;
      [((id<OrgApacheLuceneIndexIndexWriter_Event>) nil_chk(event)) processWithOrgApacheLuceneIndexIndexWriter:self withBoolean:triggerMerge withBoolean:forcePurge];
    }
  }
  return processed;
}

jboolean OrgApacheLuceneIndexIndexWriter_slowFileExistsWithOrgApacheLuceneStoreDirectory_withNSString_(OrgApacheLuceneStoreDirectory *dir, NSString *fileName) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  @try {
    [((OrgApacheLuceneStoreIndexInput *) nil_chk([((OrgApacheLuceneStoreDirectory *) nil_chk(dir)) openInputWithNSString:fileName withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, DEFAULT_)])) close];
    return YES;
  }
  @catch (OrgLukhnosPortmobileFileNoSuchFileException *e) {
    return NO;
  }
  @catch (JavaIoFileNotFoundException *e) {
    return NO;
  }
  @catch (JavaIoIOException *e) {
    return NO;
  }
}

void OrgApacheLuceneIndexIndexWriter_reserveDocsWithLong_(OrgApacheLuceneIndexIndexWriter *self, jlong addedNumDocs) {
  JreAssert((addedNumDocs >= 0), (@"org/apache/lucene/index/IndexWriter.java:4804 condition failed: assert addedNumDocs >= 0;"));
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->pendingNumDocs_)) addAndGetWithLong:addedNumDocs] > OrgApacheLuceneIndexIndexWriter_actualMaxDocs_) {
    [self->pendingNumDocs_ addAndGetWithLong:-addedNumDocs];
    OrgApacheLuceneIndexIndexWriter_tooManyDocsWithLong_(self, addedNumDocs);
  }
}

void OrgApacheLuceneIndexIndexWriter_testReserveDocsWithLong_(OrgApacheLuceneIndexIndexWriter *self, jlong addedNumDocs) {
  JreAssert((addedNumDocs >= 0), (@"org/apache/lucene/index/IndexWriter.java:4816 condition failed: assert addedNumDocs >= 0;"));
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->pendingNumDocs_)) get] + addedNumDocs > OrgApacheLuceneIndexIndexWriter_actualMaxDocs_) {
    OrgApacheLuceneIndexIndexWriter_tooManyDocsWithLong_(self, addedNumDocs);
  }
}

void OrgApacheLuceneIndexIndexWriter_tooManyDocsWithLong_(OrgApacheLuceneIndexIndexWriter *self, jlong addedNumDocs) {
  JreAssert((addedNumDocs >= 0), (@"org/apache/lucene/index/IndexWriter.java:4823 condition failed: assert addedNumDocs >= 0;"));
  @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$J$JC", @"number of documents in the index cannot exceed ", OrgApacheLuceneIndexIndexWriter_actualMaxDocs_, @" (current document count is ", [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->pendingNumDocs_)) get], @"; added numDocs is ", addedNumDocs, ')')) autorelease];
}

OrgApacheLuceneStoreDirectory *OrgApacheLuceneIndexIndexWriter_addMergeRateLimitersWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneStoreDirectory *inArg) {
  return [new_OrgApacheLuceneIndexIndexWriter_$1_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(self, inArg) autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter)

@implementation OrgApacheLuceneIndexIndexWriter_ReaderPool

- (jboolean)infoIsLiveWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info {
  @synchronized(self) {
    jint idx = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(this$0_->segmentInfos_)) indexOfWithOrgApacheLuceneIndexSegmentCommitInfo:info];
    JreAssert((idx != -1), (JreStrcat("$@$", @"info=", info, @" isn't live")));
    JreAssert(([this$0_->segmentInfos_ infoWithInt:idx] == info), (JreStrcat("$@$", @"info=", info, @" doesn't match live info in segmentInfos")));
    return YES;
  }
}

- (void)dropWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info {
  @synchronized(self) {
    OrgApacheLuceneIndexReadersAndUpdates *rld = [((id<JavaUtilMap>) nil_chk(readerMap_)) getWithId:info];
    if (rld != nil) {
      JreAssert((info == rld->info_), (@"org/apache/lucene/index/IndexWriter.java:505 condition failed: assert info == rld.info;"));
      [readerMap_ removeWithId:info];
      [rld dropReaders];
    }
  }
}

- (jboolean)anyPendingDeletes {
  @synchronized(self) {
    for (OrgApacheLuceneIndexReadersAndUpdates * __strong rld in nil_chk([((id<JavaUtilMap>) nil_chk(readerMap_)) values])) {
      if ([((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) getPendingDeleteCount] != 0) {
        return YES;
      }
    }
    return NO;
  }
}

- (void)release__WithOrgApacheLuceneIndexReadersAndUpdates:(OrgApacheLuceneIndexReadersAndUpdates *)rld {
  @synchronized(self) {
    [self release__WithOrgApacheLuceneIndexReadersAndUpdates:rld withBoolean:YES];
  }
}

- (void)release__WithOrgApacheLuceneIndexReadersAndUpdates:(OrgApacheLuceneIndexReadersAndUpdates *)rld
                                               withBoolean:(jboolean)assertInfoLive {
  @synchronized(self) {
    [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) decRef];
    JreAssert(([rld refCount] >= 1), (@"org/apache/lucene/index/IndexWriter.java:532 condition failed: assert rld.refCount() >= 1;"));
    if (!JreLoadVolatileBoolean(&this$0_->poolReaders_) && [rld refCount] == 1) {
      if ([rld writeLiveDocsWithOrgApacheLuceneStoreDirectory:this$0_->directory_]) {
        JreAssert((assertInfoLive == NO || [self infoIsLiveWithOrgApacheLuceneIndexSegmentCommitInfo:rld->info_]), (@"org/apache/lucene/index/IndexWriter.java:540 condition failed: assert assertInfoLive == false || infoIsLive(rld.info);"));
        [this$0_ checkpointNoSIS];
      }
      [rld dropReaders];
      [((id<JavaUtilMap>) nil_chk(readerMap_)) removeWithId:rld->info_];
    }
  }
}

- (void)close {
  [self dropAllWithBoolean:NO];
}

- (void)dropAllWithBoolean:(jboolean)doSave {
  @synchronized(self) {
    JavaLangThrowable *priorE = nil;
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(readerMap_)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgApacheLuceneIndexReadersAndUpdates *rld = [((id<JavaUtilMap_Entry>) nil_chk([it next])) getValue];
      @try {
        if (doSave && [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) writeLiveDocsWithOrgApacheLuceneStoreDirectory:this$0_->directory_]) {
          JreAssert(([self infoIsLiveWithOrgApacheLuceneIndexSegmentCommitInfo:rld->info_]), (@"org/apache/lucene/index/IndexWriter.java:574 condition failed: assert infoIsLive(rld.info);"));
          [this$0_ checkpointNoSIS];
        }
      }
      @catch (JavaLangThrowable *t) {
        if (doSave) {
          OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(t);
        }
        else if (priorE == nil) {
          priorE = t;
        }
      }
      [it remove];
      @try {
        [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) dropReaders];
      }
      @catch (JavaLangThrowable *t) {
        if (doSave) {
          OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(t);
        }
        else if (priorE == nil) {
          priorE = t;
        }
      }
    }
    JreAssert(([readerMap_ size] == 0), (@"org/apache/lucene/index/IndexWriter.java:612 condition failed: assert readerMap.size() == 0;"));
    OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(priorE);
  }
}

- (void)commitWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos {
  @synchronized(self) {
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(infos)) {
      OrgApacheLuceneIndexReadersAndUpdates *rld = [((id<JavaUtilMap>) nil_chk(readerMap_)) getWithId:info];
      if (rld != nil) {
        JreAssert((rld->info_ == info), (@"org/apache/lucene/index/IndexWriter.java:626 condition failed: assert rld.info == info;"));
        if ([rld writeLiveDocsWithOrgApacheLuceneStoreDirectory:this$0_->directory_]) {
          JreAssert(([self infoIsLiveWithOrgApacheLuceneIndexSegmentCommitInfo:info]), (@"org/apache/lucene/index/IndexWriter.java:629 condition failed: assert infoIsLive(info);"));
          [this$0_ checkpointNoSIS];
        }
      }
    }
  }
}

- (OrgApacheLuceneIndexReadersAndUpdates *)getWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                                                                            withBoolean:(jboolean)create {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(this$0_, NO);
    JreAssert((((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->dir_ == this$0_->directoryOrig_), (JreStrcat("$@$@", @"info.dir=", info->info_->dir_, @" vs ", this$0_->directoryOrig_)));
    OrgApacheLuceneIndexReadersAndUpdates *rld = [((id<JavaUtilMap>) nil_chk(readerMap_)) getWithId:info];
    if (rld == nil) {
      if (!create) {
        return nil;
      }
      rld = [new_OrgApacheLuceneIndexReadersAndUpdates_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentCommitInfo_(this$0_, info) autorelease];
      [readerMap_ putWithId:info withId:rld];
    }
    else {
      JreAssert((rld->info_ == info), (JreStrcat("$@$@$Z$Z", @"rld.info=", rld->info_, @" info=", info, @" isLive?=", [self infoIsLiveWithOrgApacheLuceneIndexSegmentCommitInfo:rld->info_], @" vs ", [self infoIsLiveWithOrgApacheLuceneIndexSegmentCommitInfo:info])));
    }
    if (create) {
      [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) incRef];
    }
    JreAssert((OrgApacheLuceneIndexIndexWriter_ReaderPool_noDups(self)), (@"org/apache/lucene/index/IndexWriter.java:673 condition failed: assert noDups();"));
    return rld;
  }
}

- (jboolean)noDups {
  return OrgApacheLuceneIndexIndexWriter_ReaderPool_noDups(self);
}

- (instancetype)initWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)outer$ {
  OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(readerMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "infoIsLiveWithOrgApacheLuceneIndexSegmentCommitInfo:", "infoIsLive", "Z", 0x21, NULL, NULL },
    { "dropWithOrgApacheLuceneIndexSegmentCommitInfo:", "drop", "V", 0x21, "Ljava.io.IOException;", NULL },
    { "anyPendingDeletes", NULL, "Z", 0x21, NULL, NULL },
    { "release__WithOrgApacheLuceneIndexReadersAndUpdates:", "release", "V", 0x21, "Ljava.io.IOException;", NULL },
    { "release__WithOrgApacheLuceneIndexReadersAndUpdates:withBoolean:", "release", "V", 0x21, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "dropAllWithBoolean:", "dropAll", "V", 0x20, "Ljava.io.IOException;", NULL },
    { "commitWithOrgApacheLuceneIndexSegmentInfos:", "commit", "V", 0x21, "Ljava.io.IOException;", NULL },
    { "getWithOrgApacheLuceneIndexSegmentCommitInfo:withBoolean:", "get", "Lorg.apache.lucene.index.ReadersAndUpdates;", 0x21, NULL, NULL },
    { "noDups", NULL, "Z", 0x2, NULL, NULL },
    { "initWithOrgApacheLuceneIndexIndexWriter:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.index.IndexWriter;", NULL, NULL, .constantValue.asLong = 0 },
    { "readerMap_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/ReadersAndUpdates;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter_ReaderPool = { 2, "ReaderPool", "org.apache.lucene.index", "IndexWriter", 0x0, 11, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexIndexWriter_ReaderPool;
}

@end

jboolean OrgApacheLuceneIndexIndexWriter_ReaderPool_noDups(OrgApacheLuceneIndexIndexWriter_ReaderPool *self) {
  id<JavaUtilSet> seen = [new_JavaUtilHashSet_init() autorelease];
  for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk([((id<JavaUtilMap>) nil_chk(self->readerMap_)) keySet])) {
    JreAssert((![seen containsWithId:((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->name_]), (@"org/apache/lucene/index/IndexWriter.java:683 condition failed: assert !seen.contains(info.info.name);"));
    [seen addWithId:info->info_->name_];
  }
  return YES;
}

void OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexIndexWriter_ReaderPool *self, OrgApacheLuceneIndexIndexWriter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->readerMap_, new_JavaUtilHashMap_init());
}

OrgApacheLuceneIndexIndexWriter_ReaderPool *new_OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexIndexWriter *outer$) {
  OrgApacheLuceneIndexIndexWriter_ReaderPool *self = [OrgApacheLuceneIndexIndexWriter_ReaderPool alloc];
  OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter_ReaderPool)

@implementation OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates

- (instancetype)init {
  OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init(self);
  return self;
}

- (void)init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool:(OrgApacheLuceneIndexIndexWriter_ReaderPool *)readerPool
                withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                          withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState
                                                 withBoolean:(jboolean)initWritableLiveDocs {
  OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool_withOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withBoolean_(self, readerPool, merge, mergeState, initWritableLiveDocs);
}

- (void)dealloc {
  RELEASE_(mergedDeletesAndUpdates_);
  RELEASE_(docMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MergedDeletesAndUpdates", NULL, 0x0, NULL, NULL },
    { "init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool:withOrgApacheLuceneIndexMergePolicy_OneMerge:withOrgApacheLuceneIndexMergeState:withBoolean:", "init", "V", 0x10, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mergedDeletesAndUpdates_", NULL, 0x0, "Lorg.apache.lucene.index.ReadersAndUpdates;", NULL, NULL, .constantValue.asLong = 0 },
    { "docMap_", NULL, 0x0, "Lorg.apache.lucene.index.MergePolicy$DocMap;", NULL, NULL, .constantValue.asLong = 0 },
    { "initializedWritableLiveDocs_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates = { 2, "MergedDeletesAndUpdates", "org.apache.lucene.index", "IndexWriter", 0xa, 2, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates;
}

@end

void OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mergedDeletesAndUpdates_, nil);
  JreStrongAssign(&self->docMap_, nil);
  self->initializedWritableLiveDocs_ = NO;
}

OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *new_OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init() {
  OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *self = [OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates alloc];
  OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init(self);
  return self;
}

void OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool_withOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withBoolean_(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *self, OrgApacheLuceneIndexIndexWriter_ReaderPool *readerPool, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState, jboolean initWritableLiveDocs) {
  if (self->mergedDeletesAndUpdates_ == nil) {
    JreStrongAssign(&self->mergedDeletesAndUpdates_, [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(readerPool)) getWithOrgApacheLuceneIndexSegmentCommitInfo:((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->info_ withBoolean:YES]);
    JreStrongAssign(&self->docMap_, [merge getDocMapWithOrgApacheLuceneIndexMergeState:mergeState]);
    JreAssert(([((OrgApacheLuceneIndexMergePolicy_DocMap *) nil_chk(self->docMap_)) isConsistentWithInt:[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_)) maxDoc]]), (@"org/apache/lucene/index/IndexWriter.java:3238 condition failed: assert docMap.isConsistent(merge.info.info.maxDoc());"));
  }
  if (initWritableLiveDocs && !self->initializedWritableLiveDocs_) {
    [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(self->mergedDeletesAndUpdates_)) initWritableLiveDocs];
    self->initializedWritableLiveDocs_ = YES;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates)

@implementation OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer

- (instancetype)init {
  OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer_init(self);
  return self;
}

- (void)warmWithOrgApacheLuceneIndexLeafReader:(OrgApacheLuceneIndexLeafReader *)reader {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "IndexReaderWarmer", NULL, 0x4, NULL, NULL },
    { "warmWithOrgApacheLuceneIndexLeafReader:", "warm", "V", 0x401, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer = { 2, "IndexReaderWarmer", "org.apache.lucene.index", "IndexWriter", 0x409, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer;
}

@end

void OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer_init(OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer)

@implementation OrgApacheLuceneIndexIndexWriter_Event

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgApacheLuceneIndexIndexWriter:withBoolean:withBoolean:", "process", "V", 0x401, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter_Event = { 2, "Event", "org.apache.lucene.index", "IndexWriter", 0x608, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexIndexWriter_Event;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter_Event)

@implementation OrgApacheLuceneIndexIndexWriter_$1

- (OrgApacheLuceneStoreIndexOutput *)createOutputWithNSString:(NSString *)name
                            withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context {
  [self ensureOpen];
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(this$0_, NO);
  JreAssert((((OrgApacheLuceneStoreIOContext *) nil_chk(context))->context_ == JreLoadStatic(OrgApacheLuceneStoreIOContext_ContextEnum, MERGE)), (JreStrcat("$@", @"got context=", context->context_)));
  OrgApacheLuceneIndexMergeRateLimiter *rateLimiter = [((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(this$0_->rateLimiters_)) get];
  JreAssert((rateLimiter != nil), (@"org/apache/lucene/index/IndexWriter.java:4844 condition failed: assert rateLimiter != null;"));
  return [new_OrgApacheLuceneStoreRateLimitedIndexOutput_initWithOrgApacheLuceneStoreRateLimiter_withOrgApacheLuceneStoreIndexOutput_(rateLimiter, [((OrgApacheLuceneStoreDirectory *) nil_chk(in_)) createOutputWithNSString:name withOrgApacheLuceneStoreIOContext:context]) autorelease];
}

- (instancetype)initWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)outer$
                      withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)arg$0 {
  OrgApacheLuceneIndexIndexWriter_$1_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(self, outer$, arg$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createOutputWithNSString:withOrgApacheLuceneStoreIOContext:", "createOutput", "Lorg.apache.lucene.store.IndexOutput;", 0x1, "Ljava.io.IOException;", NULL },
    { "initWithOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneStoreDirectory:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.index.IndexWriter;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheLuceneIndexIndexWriter", "addMergeRateLimitersWithOrgApacheLuceneStoreDirectory:" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter_$1 = { 2, "", "org.apache.lucene.index", "IndexWriter", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgApacheLuceneIndexIndexWriter_$1;
}

@end

void OrgApacheLuceneIndexIndexWriter_$1_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter_$1 *self, OrgApacheLuceneIndexIndexWriter *outer$, OrgApacheLuceneStoreDirectory *arg$0) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneStoreFilterDirectory_initWithOrgApacheLuceneStoreDirectory_(self, arg$0);
}

OrgApacheLuceneIndexIndexWriter_$1 *new_OrgApacheLuceneIndexIndexWriter_$1_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter *outer$, OrgApacheLuceneStoreDirectory *arg$0) {
  OrgApacheLuceneIndexIndexWriter_$1 *self = [OrgApacheLuceneIndexIndexWriter_$1 alloc];
  OrgApacheLuceneIndexIndexWriter_$1_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(self, outer$, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter_$1)
