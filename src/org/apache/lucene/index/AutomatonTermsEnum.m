//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/AutomatonTermsEnum.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/apache/lucene/index/AutomatonTermsEnum.h"
#include "org/apache/lucene/index/FilteredTermsEnum.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/util/automaton/Transition.h"

@interface OrgApacheLuceneIndexAutomatonTermsEnum () {
 @public
  OrgApacheLuceneUtilAutomatonByteRunAutomaton *runAutomaton_;
  OrgApacheLuceneUtilBytesRef *commonSuffixRef_;
  jboolean finite_;
  OrgApacheLuceneUtilAutomatonAutomaton *automaton_;
  IOSLongArray *visited_;
  jlong curGen_;
  OrgApacheLuceneUtilBytesRefBuilder *seekBytesRef_;
  jboolean linear_;
  OrgApacheLuceneUtilBytesRef *linearUpperBound_;
  OrgApacheLuceneUtilAutomatonTransition *transition_;
  OrgApacheLuceneUtilIntsRefBuilder *savedStates_;
}

- (void)setLinearWithInt:(jint)position;

- (jboolean)nextString;

- (jboolean)nextStringWithInt:(jint)state
                      withInt:(jint)position;

- (jint)backtrackWithInt:(jint)position;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, runAutomaton_, OrgApacheLuceneUtilAutomatonByteRunAutomaton *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, commonSuffixRef_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, automaton_, OrgApacheLuceneUtilAutomatonAutomaton *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, visited_, IOSLongArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, seekBytesRef_, OrgApacheLuceneUtilBytesRefBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, linearUpperBound_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, transition_, OrgApacheLuceneUtilAutomatonTransition *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, savedStates_, OrgApacheLuceneUtilIntsRefBuilder *)

__attribute__((unused)) static void OrgApacheLuceneIndexAutomatonTermsEnum_setLinearWithInt_(OrgApacheLuceneIndexAutomatonTermsEnum *self, jint position);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexAutomatonTermsEnum_nextString(OrgApacheLuceneIndexAutomatonTermsEnum *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexAutomatonTermsEnum_nextStringWithInt_withInt_(OrgApacheLuceneIndexAutomatonTermsEnum *self, jint state, jint position);

__attribute__((unused)) static jint OrgApacheLuceneIndexAutomatonTermsEnum_backtrackWithInt_(OrgApacheLuceneIndexAutomatonTermsEnum *self, jint position);

@implementation OrgApacheLuceneIndexAutomatonTermsEnum

- (instancetype)initWithOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)tenum
    withOrgApacheLuceneUtilAutomatonCompiledAutomaton:(OrgApacheLuceneUtilAutomatonCompiledAutomaton *)compiled {
  OrgApacheLuceneIndexAutomatonTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(self, tenum, compiled);
  return self;
}

- (OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatusEnum *)acceptWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  if (commonSuffixRef_ == nil || OrgApacheLuceneUtilStringHelper_endsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(term, commonSuffixRef_)) {
    if ([((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(runAutomaton_)) runWithByteArray:((OrgApacheLuceneUtilBytesRef *) nil_chk(term))->bytes_ withInt:term->offset_ withInt:term->length_]) return linear_ ? JreLoadStatic(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatusEnum, YES) : JreLoadStatic(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatusEnum, YES_AND_SEEK);
    else return (linear_ && [term compareToWithId:linearUpperBound_] < 0) ? JreLoadStatic(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatusEnum, NO) : JreLoadStatic(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatusEnum, NO_AND_SEEK);
  }
  else {
    return (linear_ && [((OrgApacheLuceneUtilBytesRef *) nil_chk(term)) compareToWithId:linearUpperBound_] < 0) ? JreLoadStatic(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatusEnum, NO) : JreLoadStatic(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatusEnum, NO_AND_SEEK);
  }
}

- (OrgApacheLuceneUtilBytesRef *)nextSeekTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  if (term == nil) {
    JreAssert(([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(seekBytesRef_)) length] == 0), (@"org/apache/lucene/index/AutomatonTermsEnum.java:111 condition failed: assert seekBytesRef.length() == 0;"));
    if ([runAutomaton_ isAcceptWithInt:[((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(runAutomaton_)) getInitialState]]) {
      return [seekBytesRef_ get];
    }
  }
  else {
    [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(seekBytesRef_)) copyBytesWithOrgApacheLuceneUtilBytesRef:term];
  }
  if (OrgApacheLuceneIndexAutomatonTermsEnum_nextString(self)) {
    return [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(seekBytesRef_)) get];
  }
  else {
    return nil;
  }
}

- (void)setLinearWithInt:(jint)position {
  OrgApacheLuceneIndexAutomatonTermsEnum_setLinearWithInt_(self, position);
}

- (jboolean)nextString {
  return OrgApacheLuceneIndexAutomatonTermsEnum_nextString(self);
}

- (jboolean)nextStringWithInt:(jint)state
                      withInt:(jint)position {
  return OrgApacheLuceneIndexAutomatonTermsEnum_nextStringWithInt_withInt_(self, state, position);
}

- (jint)backtrackWithInt:(jint)position {
  return OrgApacheLuceneIndexAutomatonTermsEnum_backtrackWithInt_(self, position);
}

- (void)dealloc {
  RELEASE_(runAutomaton_);
  RELEASE_(commonSuffixRef_);
  RELEASE_(automaton_);
  RELEASE_(visited_);
  RELEASE_(seekBytesRef_);
  RELEASE_(linearUpperBound_);
  RELEASE_(transition_);
  RELEASE_(savedStates_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexTermsEnum:withOrgApacheLuceneUtilAutomatonCompiledAutomaton:", "AutomatonTermsEnum", NULL, 0x1, NULL, NULL },
    { "acceptWithOrgApacheLuceneUtilBytesRef:", "accept", "Lorg.apache.lucene.index.FilteredTermsEnum$AcceptStatus;", 0x4, NULL, NULL },
    { "nextSeekTermWithOrgApacheLuceneUtilBytesRef:", "nextSeekTerm", "Lorg.apache.lucene.util.BytesRef;", 0x4, "Ljava.io.IOException;", NULL },
    { "setLinearWithInt:", "setLinear", "V", 0x2, NULL, NULL },
    { "nextString", NULL, "Z", 0x2, NULL, NULL },
    { "nextStringWithInt:withInt:", "nextString", "Z", 0x2, NULL, NULL },
    { "backtrackWithInt:", "backtrack", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "runAutomaton_", NULL, 0x12, "Lorg.apache.lucene.util.automaton.ByteRunAutomaton;", NULL, NULL, .constantValue.asLong = 0 },
    { "commonSuffixRef_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "finite_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "automaton_", NULL, 0x12, "Lorg.apache.lucene.util.automaton.Automaton;", NULL, NULL, .constantValue.asLong = 0 },
    { "visited_", NULL, 0x12, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "curGen_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "seekBytesRef_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRefBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "linear_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "linearUpperBound_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "transition_", NULL, 0x2, "Lorg.apache.lucene.util.automaton.Transition;", NULL, NULL, .constantValue.asLong = 0 },
    { "savedStates_", NULL, 0x12, "Lorg.apache.lucene.util.IntsRefBuilder;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexAutomatonTermsEnum = { 2, "AutomatonTermsEnum", "org.apache.lucene.index", NULL, 0x1, 7, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexAutomatonTermsEnum;
}

@end

void OrgApacheLuceneIndexAutomatonTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(OrgApacheLuceneIndexAutomatonTermsEnum *self, OrgApacheLuceneIndexTermsEnum *tenum, OrgApacheLuceneUtilAutomatonCompiledAutomaton *compiled) {
  OrgApacheLuceneIndexFilteredTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_(self, tenum);
  JreStrongAssignAndConsume(&self->seekBytesRef_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  self->linear_ = NO;
  JreStrongAssignAndConsume(&self->linearUpperBound_, new_OrgApacheLuceneUtilBytesRef_initWithInt_(10));
  JreStrongAssignAndConsume(&self->transition_, new_OrgApacheLuceneUtilAutomatonTransition_init());
  JreStrongAssignAndConsume(&self->savedStates_, new_OrgApacheLuceneUtilIntsRefBuilder_init());
  self->finite_ = [((JavaLangBoolean *) nil_chk(((OrgApacheLuceneUtilAutomatonCompiledAutomaton *) nil_chk(compiled))->finite_)) booleanValue];
  JreStrongAssign(&self->runAutomaton_, compiled->runAutomaton_);
  JreAssert((self->runAutomaton_ != nil), (@"org/apache/lucene/index/AutomatonTermsEnum.java:81 condition failed: assert this.runAutomaton != null;"));
  JreStrongAssign(&self->commonSuffixRef_, compiled->commonSuffixRef_);
  JreStrongAssign(&self->automaton_, compiled->automaton_);
  JreStrongAssignAndConsume(&self->visited_, [IOSLongArray newArrayWithLength:[((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(self->runAutomaton_)) getSize]]);
}

OrgApacheLuceneIndexAutomatonTermsEnum *new_OrgApacheLuceneIndexAutomatonTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(OrgApacheLuceneIndexTermsEnum *tenum, OrgApacheLuceneUtilAutomatonCompiledAutomaton *compiled) {
  OrgApacheLuceneIndexAutomatonTermsEnum *self = [OrgApacheLuceneIndexAutomatonTermsEnum alloc];
  OrgApacheLuceneIndexAutomatonTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(self, tenum, compiled);
  return self;
}

void OrgApacheLuceneIndexAutomatonTermsEnum_setLinearWithInt_(OrgApacheLuceneIndexAutomatonTermsEnum *self, jint position) {
  JreAssert((self->linear_ == NO), (@"org/apache/lucene/index/AutomatonTermsEnum.java:136 condition failed: assert linear == false;"));
  jint state = [((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(self->runAutomaton_)) getInitialState];
  JreAssert((state == 0), (@"org/apache/lucene/index/AutomatonTermsEnum.java:139 condition failed: assert state == 0;"));
  jint maxInterval = (jint) 0xff;
  for (jint i = 0; i < position; i++) {
    state = [self->runAutomaton_ stepWithInt:state withInt:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->seekBytesRef_)) byteAtWithInt:i] & (jint) 0xff];
    JreAssert((state >= 0), (JreStrcat("$I", @"state=", state)));
  }
  jint numTransitions = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(self->automaton_)) getNumTransitionsWithInt:state];
  [self->automaton_ initTransitionWithInt:state withOrgApacheLuceneUtilAutomatonTransition:self->transition_];
  for (jint i = 0; i < numTransitions; i++) {
    [self->automaton_ getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:self->transition_];
    if (((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->transition_))->min_ <= ([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->seekBytesRef_)) byteAtWithInt:position] & (jint) 0xff) && ([self->seekBytesRef_ byteAtWithInt:position] & (jint) 0xff) <= self->transition_->max_) {
      maxInterval = self->transition_->max_;
      break;
    }
  }
  if (maxInterval != (jint) 0xff) maxInterval++;
  jint length = position + 1;
  if (((IOSByteArray *) nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(self->linearUpperBound_))->bytes_))->size_ < length) JreStrongAssignAndConsume(&self->linearUpperBound_->bytes_, [IOSByteArray newArrayWithLength:length]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->seekBytesRef_)) bytes], 0, self->linearUpperBound_->bytes_, 0, position);
  *IOSByteArray_GetRef(self->linearUpperBound_->bytes_, position) = (jbyte) maxInterval;
  self->linearUpperBound_->length_ = length;
  self->linear_ = YES;
}

jboolean OrgApacheLuceneIndexAutomatonTermsEnum_nextString(OrgApacheLuceneIndexAutomatonTermsEnum *self) {
  jint state;
  jint pos = 0;
  [((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(self->savedStates_)) growWithInt:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->seekBytesRef_)) length] + 1];
  [self->savedStates_ setIntAtWithInt:0 withInt:[((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(self->runAutomaton_)) getInitialState]];
  while (YES) {
    self->curGen_++;
    self->linear_ = NO;
    for (state = [self->savedStates_ intAtWithInt:pos]; pos < [self->seekBytesRef_ length]; pos++) {
      *IOSLongArray_GetRef(nil_chk(self->visited_), state) = self->curGen_;
      jint nextState = [self->runAutomaton_ stepWithInt:state withInt:[self->seekBytesRef_ byteAtWithInt:pos] & (jint) 0xff];
      if (nextState == -1) break;
      [self->savedStates_ setIntAtWithInt:pos + 1 withInt:nextState];
      if (!self->finite_ && !self->linear_ && IOSLongArray_Get(self->visited_, nextState) == self->curGen_) {
        OrgApacheLuceneIndexAutomatonTermsEnum_setLinearWithInt_(self, pos);
      }
      state = nextState;
    }
    if (OrgApacheLuceneIndexAutomatonTermsEnum_nextStringWithInt_withInt_(self, state, pos)) {
      return YES;
    }
    else {
      if ((pos = OrgApacheLuceneIndexAutomatonTermsEnum_backtrackWithInt_(self, pos)) < 0) return NO;
      jint newState = [self->runAutomaton_ stepWithInt:[self->savedStates_ intAtWithInt:pos] withInt:[self->seekBytesRef_ byteAtWithInt:pos] & (jint) 0xff];
      if (newState >= 0 && [self->runAutomaton_ isAcceptWithInt:newState]) return YES;
      if (!self->finite_) pos = 0;
    }
  }
}

jboolean OrgApacheLuceneIndexAutomatonTermsEnum_nextStringWithInt_withInt_(OrgApacheLuceneIndexAutomatonTermsEnum *self, jint state, jint position) {
  jint c = 0;
  if (position < [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->seekBytesRef_)) length]) {
    c = [self->seekBytesRef_ byteAtWithInt:position] & (jint) 0xff;
    if (c++ == (jint) 0xff) return NO;
  }
  [self->seekBytesRef_ setLengthWithInt:position];
  *IOSLongArray_GetRef(nil_chk(self->visited_), state) = self->curGen_;
  jint numTransitions = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(self->automaton_)) getNumTransitionsWithInt:state];
  [self->automaton_ initTransitionWithInt:state withOrgApacheLuceneUtilAutomatonTransition:self->transition_];
  for (jint i = 0; i < numTransitions; i++) {
    [self->automaton_ getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:self->transition_];
    if (((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->transition_))->max_ >= c) {
      jint nextChar = JavaLangMath_maxWithInt_withInt_(c, self->transition_->min_);
      [self->seekBytesRef_ growWithInt:[self->seekBytesRef_ length] + 1];
      [self->seekBytesRef_ appendWithByte:(jbyte) nextChar];
      state = self->transition_->dest_;
      while (IOSLongArray_Get(self->visited_, state) != self->curGen_ && ![((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(self->runAutomaton_)) isAcceptWithInt:state]) {
        *IOSLongArray_GetRef(self->visited_, state) = self->curGen_;
        [self->automaton_ initTransitionWithInt:state withOrgApacheLuceneUtilAutomatonTransition:self->transition_];
        [self->automaton_ getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:self->transition_];
        state = self->transition_->dest_;
        [self->seekBytesRef_ growWithInt:[self->seekBytesRef_ length] + 1];
        [self->seekBytesRef_ appendWithByte:(jbyte) self->transition_->min_];
        if (!self->finite_ && !self->linear_ && IOSLongArray_Get(self->visited_, state) == self->curGen_) {
          OrgApacheLuceneIndexAutomatonTermsEnum_setLinearWithInt_(self, [self->seekBytesRef_ length] - 1);
        }
      }
      return YES;
    }
  }
  return NO;
}

jint OrgApacheLuceneIndexAutomatonTermsEnum_backtrackWithInt_(OrgApacheLuceneIndexAutomatonTermsEnum *self, jint position) {
  while (position-- > 0) {
    jint nextChar = [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->seekBytesRef_)) byteAtWithInt:position] & (jint) 0xff;
    if (nextChar++ != (jint) 0xff) {
      [self->seekBytesRef_ setByteAtWithInt:position withByte:(jbyte) nextChar];
      [self->seekBytesRef_ setLengthWithInt:position + 1];
      return position;
    }
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexAutomatonTermsEnum)
