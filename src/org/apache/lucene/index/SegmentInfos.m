//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/SegmentInfos.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexFormatTooOldException.h"
#include "org/apache/lucene/index/IndexNotFoundException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/Version.h"

@interface OrgApacheLuceneIndexSegmentInfos () {
 @public
  jlong generation_;
  jlong lastGeneration_;
  id<JavaUtilList> segments_;
  /*!
   @brief Id for this commit; only written starting with Lucene 5.0
   */
  IOSByteArray *id__;
  /*!
   @brief Which Lucene version wrote this commit, or null if this commit is pre-5.3.
   */
  OrgApacheLuceneUtilVersion *luceneVersion_;
  /*!
   @brief Version of the oldest segment in the index, or null if there are no segments.
   */
  OrgApacheLuceneUtilVersion *minSegmentLuceneVersion_;
}

/*!
 @brief return generation of the next pending_segments_N that will be written
 */
- (jlong)getNextPendingGeneration;

+ (OrgApacheLuceneCodecsCodec *)readCodecWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)input
                                                               withBoolean:(jboolean)unsupportedAllowed;

- (void)writeWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory;

/*!
 @brief Prints the given message to the infoStream.
 Note, this method does not
 check for null infoStream. It assumes this check has been performed by the
 caller, which is recommended to avoid the (usually) expensive message
 creation.
 */
+ (void)messageWithNSString:(NSString *)message;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentInfos, segments_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentInfos, id__, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentInfos, luceneVersion_, OrgApacheLuceneUtilVersion *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexSegmentInfos, minSegmentLuceneVersion_, OrgApacheLuceneUtilVersion *)

/*!
 @brief If non-null, information about loading segments_N files
 will be printed here.
 @@see #setInfoStream.
 */
inline JavaIoPrintStream *OrgApacheLuceneIndexSegmentInfos_get_infoStream();
inline JavaIoPrintStream *OrgApacheLuceneIndexSegmentInfos_set_infoStream(JavaIoPrintStream *value);
static JavaIoPrintStream *OrgApacheLuceneIndexSegmentInfos_infoStream;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheLuceneIndexSegmentInfos, infoStream, JavaIoPrintStream *)

inline id<JavaUtilList> OrgApacheLuceneIndexSegmentInfos_get_unsupportedCodecs();
static id<JavaUtilList> OrgApacheLuceneIndexSegmentInfos_unsupportedCodecs;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneIndexSegmentInfos, unsupportedCodecs, id<JavaUtilList>)

__attribute__((unused)) static jlong OrgApacheLuceneIndexSegmentInfos_getNextPendingGeneration(OrgApacheLuceneIndexSegmentInfos *self);

__attribute__((unused)) static OrgApacheLuceneCodecsCodec *OrgApacheLuceneIndexSegmentInfos_readCodecWithOrgApacheLuceneStoreDataInput_withBoolean_(OrgApacheLuceneStoreDataInput *input, jboolean unsupportedAllowed);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfos_writeWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *directory);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(NSString *message);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfos_rollbackCommitWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *dir);

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfos_prepareCommitWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *dir);

__attribute__((unused)) static NSString *OrgApacheLuceneIndexSegmentInfos_finishCommitWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *dir);

@interface OrgApacheLuceneIndexSegmentInfos_$1 : OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile

- (OrgApacheLuceneIndexSegmentInfos *)doBodyWithNSString:(NSString *)segmentFileName;

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexSegmentInfos_$1)

__attribute__((unused)) static void OrgApacheLuceneIndexSegmentInfos_$1_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos_$1 *self, OrgApacheLuceneStoreDirectory *arg$0);

__attribute__((unused)) static OrgApacheLuceneIndexSegmentInfos_$1 *new_OrgApacheLuceneIndexSegmentInfos_$1_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *arg$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexSegmentInfos_$1 *create_OrgApacheLuceneIndexSegmentInfos_$1_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *arg$0);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexSegmentInfos_$1)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexSegmentInfos)

@implementation OrgApacheLuceneIndexSegmentInfos

+ (jint)VERSION_40 {
  return OrgApacheLuceneIndexSegmentInfos_VERSION_40;
}

+ (jint)VERSION_46 {
  return OrgApacheLuceneIndexSegmentInfos_VERSION_46;
}

+ (jint)VERSION_48 {
  return OrgApacheLuceneIndexSegmentInfos_VERSION_48;
}

+ (jint)VERSION_49 {
  return OrgApacheLuceneIndexSegmentInfos_VERSION_49;
}

+ (jint)VERSION_50 {
  return OrgApacheLuceneIndexSegmentInfos_VERSION_50;
}

+ (jint)VERSION_51 {
  return OrgApacheLuceneIndexSegmentInfos_VERSION_51;
}

+ (jint)VERSION_53 {
  return OrgApacheLuceneIndexSegmentInfos_VERSION_53;
}

+ (jint)VERSION_CURRENT {
  return OrgApacheLuceneIndexSegmentInfos_VERSION_CURRENT;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexSegmentInfos_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneIndexSegmentCommitInfo *)infoWithInt:(jint)i {
  return [((id<JavaUtilList>) nil_chk(segments_)) getWithInt:i];
}

+ (jlong)getLastCommitGenerationWithNSStringArray:(IOSObjectArray *)files {
  return OrgApacheLuceneIndexSegmentInfos_getLastCommitGenerationWithNSStringArray_(files);
}

+ (jlong)getLastCommitGenerationWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexSegmentInfos_getLastCommitGenerationWithOrgApacheLuceneStoreDirectory_(directory);
}

+ (NSString *)getLastCommitSegmentsFileNameWithNSStringArray:(IOSObjectArray *)files {
  return OrgApacheLuceneIndexSegmentInfos_getLastCommitSegmentsFileNameWithNSStringArray_(files);
}

+ (NSString *)getLastCommitSegmentsFileNameWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexSegmentInfos_getLastCommitSegmentsFileNameWithOrgApacheLuceneStoreDirectory_(directory);
}

- (NSString *)getSegmentsFileName {
  return OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_SEGMENTS, @"", lastGeneration_);
}

+ (jlong)generationFromSegmentsFileNameWithNSString:(NSString *)fileName {
  return OrgApacheLuceneIndexSegmentInfos_generationFromSegmentsFileNameWithNSString_(fileName);
}

- (jlong)getNextPendingGeneration {
  return OrgApacheLuceneIndexSegmentInfos_getNextPendingGeneration(self);
}

- (IOSByteArray *)getId {
  return id__ == nil ? nil : [id__ clone];
}

+ (OrgApacheLuceneIndexSegmentInfos *)readCommitWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                                                                     withNSString:(NSString *)segmentFileName {
  return OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(directory, segmentFileName);
}

+ (OrgApacheLuceneCodecsCodec *)readCodecWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)input
                                                               withBoolean:(jboolean)unsupportedAllowed {
  return OrgApacheLuceneIndexSegmentInfos_readCodecWithOrgApacheLuceneStoreDataInput_withBoolean_(input, unsupportedAllowed);
}

+ (OrgApacheLuceneIndexSegmentInfos *)readLatestCommitWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexSegmentInfos_readLatestCommitWithOrgApacheLuceneStoreDirectory_(directory);
}

- (void)writeWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  OrgApacheLuceneIndexSegmentInfos_writeWithOrgApacheLuceneStoreDirectory_(self, directory);
}

- (OrgApacheLuceneIndexSegmentInfos *)clone {
  @try {
    OrgApacheLuceneIndexSegmentInfos *sis = (OrgApacheLuceneIndexSegmentInfos *) cast_chk([super clone], [OrgApacheLuceneIndexSegmentInfos class]);
    JreStrongAssignAndConsume(&((OrgApacheLuceneIndexSegmentInfos *) nil_chk(sis))->segments_, new_JavaUtilArrayList_initWithInt_([self size]));
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in self) {
      JreAssert(([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) getCodec] != nil), (@"org/apache/lucene/index/SegmentInfos.java:608 condition failed: assert info.info.getCodec() != null;"));
      [sis addWithOrgApacheLuceneIndexSegmentCommitInfo:[info clone]];
    }
    JreStrongAssignAndConsume(&sis->userData_, new_JavaUtilHashMap_initWithJavaUtilMap_(userData_));
    return sis;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(@"should not happen", e);
  }
}

- (jlong)getVersion {
  return version__;
}

- (jlong)getGeneration {
  return generation_;
}

- (jlong)getLastGeneration {
  return lastGeneration_;
}

+ (void)setInfoStreamWithJavaIoPrintStream:(JavaIoPrintStream *)infoStream {
  OrgApacheLuceneIndexSegmentInfos_setInfoStreamWithJavaIoPrintStream_(infoStream);
}

+ (JavaIoPrintStream *)getInfoStream {
  return OrgApacheLuceneIndexSegmentInfos_getInfoStream();
}

+ (void)messageWithNSString:(NSString *)message {
  OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(message);
}

- (void)updateGenerationWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)other {
  lastGeneration_ = ((OrgApacheLuceneIndexSegmentInfos *) nil_chk(other))->lastGeneration_;
  generation_ = other->generation_;
}

- (void)updateGenerationVersionAndCounterWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)other {
  [self updateGenerationWithOrgApacheLuceneIndexSegmentInfos:other];
  self->version__ = ((OrgApacheLuceneIndexSegmentInfos *) nil_chk(other))->version__;
  self->counter_ = other->counter_;
}

- (void)setNextWriteGenerationWithLong:(jlong)generation {
  JreAssert((generation >= self->generation_), (@"org/apache/lucene/index/SegmentInfos.java:775 condition failed: assert generation >= this.generation;"));
  self->generation_ = generation;
}

- (void)rollbackCommitWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  OrgApacheLuceneIndexSegmentInfos_rollbackCommitWithOrgApacheLuceneStoreDirectory_(self, dir);
}

- (void)prepareCommitWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  OrgApacheLuceneIndexSegmentInfos_prepareCommitWithOrgApacheLuceneStoreDirectory_(self, dir);
}

- (id<JavaUtilCollection>)filesWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
                                                     withBoolean:(jboolean)includeSegmentsFile {
  return [self filesWithBoolean:includeSegmentsFile];
}

- (id<JavaUtilCollection>)filesWithBoolean:(jboolean)includeSegmentsFile {
  JavaUtilHashSet *files = create_JavaUtilHashSet_init();
  if (includeSegmentsFile) {
    NSString *segmentFileName = [self getSegmentsFileName];
    if (segmentFileName != nil) {
      [files addWithId:segmentFileName];
    }
  }
  jint size = [self size];
  for (jint i = 0; i < size; i++) {
    OrgApacheLuceneIndexSegmentCommitInfo *info = [self infoWithInt:i];
    [files addAllWithJavaUtilCollection:[((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info)) files]];
  }
  return files;
}

- (NSString *)finishCommitWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  return OrgApacheLuceneIndexSegmentInfos_finishCommitWithOrgApacheLuceneStoreDirectory_(self, dir);
}

- (void)commitWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  OrgApacheLuceneIndexSegmentInfos_prepareCommitWithOrgApacheLuceneStoreDirectory_(self, dir);
  OrgApacheLuceneIndexSegmentInfos_finishCommitWithOrgApacheLuceneStoreDirectory_(self, dir);
}

- (NSString *)toStringWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  return [self description];
}

- (NSString *)description {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([buffer appendWithNSString:[self getSegmentsFileName]])) appendWithNSString:@": "];
  jint count = [self size];
  for (jint i = 0; i < count; i++) {
    if (i > 0) {
      [buffer appendWithChar:' '];
    }
    OrgApacheLuceneIndexSegmentCommitInfo *info = [self infoWithInt:i];
    [buffer appendWithNSString:[((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info)) toStringWithInt:0]];
  }
  return [buffer description];
}

- (id<JavaUtilMap>)getUserData {
  return userData_;
}

- (void)setUserDataWithJavaUtilMap:(id<JavaUtilMap>)data {
  if (data == nil) {
    JreStrongAssign(&userData_, JavaUtilCollections_emptyMap());
  }
  else {
    JreStrongAssign(&userData_, data);
  }
  [self changed];
}

- (void)replaceWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)other {
  [self rollbackSegmentInfosWithJavaUtilList:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(other)) asList]];
  lastGeneration_ = other->lastGeneration_;
}

- (jint)totalMaxDoc {
  jlong count = 0;
  for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in self) {
    count += [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) maxDoc];
  }
  JreAssert((count <= OrgApacheLuceneIndexIndexWriter_getActualMaxDocs()), (@"org/apache/lucene/index/SegmentInfos.java:937 condition failed: assert count <= IndexWriter.getActualMaxDocs();"));
  return (jint) count;
}

- (void)changed {
  version__++;
}

- (void)applyMergeChangesWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                                          withBoolean:(jboolean)dropSegment {
  id<JavaUtilSet> mergedAway = create_JavaUtilHashSet_initWithJavaUtilCollection_(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_);
  jboolean inserted = false;
  jint newSegIdx = 0;
  for (jint segIdx = 0, cnt = [((id<JavaUtilList>) nil_chk(segments_)) size]; segIdx < cnt; segIdx++) {
    JreAssert((segIdx >= newSegIdx), (@"org/apache/lucene/index/SegmentInfos.java:953 condition failed: assert segIdx >= newSegIdx;"));
    OrgApacheLuceneIndexSegmentCommitInfo *info = [((id<JavaUtilList>) nil_chk(segments_)) getWithInt:segIdx];
    if ([mergedAway containsWithId:info]) {
      if (!inserted && !dropSegment) {
        [((id<JavaUtilList>) nil_chk(segments_)) setWithInt:segIdx withId:merge->info_];
        inserted = true;
        newSegIdx++;
      }
    }
    else {
      [((id<JavaUtilList>) nil_chk(segments_)) setWithInt:newSegIdx withId:info];
      newSegIdx++;
    }
  }
  [((id<JavaUtilList>) nil_chk([((id<JavaUtilList>) nil_chk(segments_)) subListWithInt:newSegIdx withInt:[segments_ size]])) clear];
  if (!inserted && !dropSegment) {
    [((id<JavaUtilList>) nil_chk(segments_)) addWithInt:0 withId:merge->info_];
  }
}

- (id<JavaUtilList>)createBackupSegmentInfos {
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_([self size]);
  for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in self) {
    JreAssert(([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) getCodec] != nil), (@"org/apache/lucene/index/SegmentInfos.java:983 condition failed: assert info.info.getCodec() != null;"));
    [list addWithId:[info clone]];
  }
  return list;
}

- (void)rollbackSegmentInfosWithJavaUtilList:(id<JavaUtilList>)infos {
  [self clear];
  [self addAllWithJavaLangIterable:infos];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilList>) nil_chk([self asList])) iterator];
}

- (id<JavaUtilList>)asList {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(segments_);
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(segments_)) size];
}

- (void)addWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)si {
  [((id<JavaUtilList>) nil_chk(segments_)) addWithId:si];
}

- (void)addAllWithJavaLangIterable:(id<JavaLangIterable>)sis {
  for (OrgApacheLuceneIndexSegmentCommitInfo * __strong si in nil_chk(sis)) {
    [self addWithOrgApacheLuceneIndexSegmentCommitInfo:si];
  }
}

- (void)clear {
  [((id<JavaUtilList>) nil_chk(segments_)) clear];
}

- (void)removeWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)si {
  [((id<JavaUtilList>) nil_chk(segments_)) removeWithId:si];
}

- (void)removeWithInt:(jint)index {
  [((id<JavaUtilList>) nil_chk(segments_)) removeWithInt:index];
}

- (jboolean)containsWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)si {
  return [((id<JavaUtilList>) nil_chk(segments_)) containsWithId:si];
}

- (jint)indexOfWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)si {
  return [((id<JavaUtilList>) nil_chk(segments_)) indexOfWithId:si];
}

- (OrgApacheLuceneUtilVersion *)getCommitLuceneVersion {
  return luceneVersion_;
}

- (OrgApacheLuceneUtilVersion *)getMinSegmentLuceneVersion {
  return minSegmentLuceneVersion_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (IOSObjectArray *)__annotations_filesWithOrgApacheLuceneStoreDirectory_withBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_toStringWithOrgApacheLuceneStoreDirectory_ {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

- (void)dealloc {
  RELEASE_(userData_);
  RELEASE_(segments_);
  RELEASE_(id__);
  RELEASE_(luceneVersion_);
  RELEASE_(minSegmentLuceneVersion_);
  [super dealloc];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexSegmentInfos class]) {
    JreStrongAssign(&OrgApacheLuceneIndexSegmentInfos_infoStream, nil);
    JreStrongAssign(&OrgApacheLuceneIndexSegmentInfos_unsupportedCodecs, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"Lucene3x" } count:1 type:NSString_class_()]));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexSegmentInfos)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SegmentInfos", NULL, 0x1, NULL, NULL },
    { "infoWithInt:", "info", "Lorg.apache.lucene.index.SegmentCommitInfo;", 0x1, NULL, NULL },
    { "getLastCommitGenerationWithNSStringArray:", "getLastCommitGeneration", "J", 0x9, NULL, NULL },
    { "getLastCommitGenerationWithOrgApacheLuceneStoreDirectory:", "getLastCommitGeneration", "J", 0x9, "Ljava.io.IOException;", NULL },
    { "getLastCommitSegmentsFileNameWithNSStringArray:", "getLastCommitSegmentsFileName", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getLastCommitSegmentsFileNameWithOrgApacheLuceneStoreDirectory:", "getLastCommitSegmentsFileName", "Ljava.lang.String;", 0x9, "Ljava.io.IOException;", NULL },
    { "getSegmentsFileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "generationFromSegmentsFileNameWithNSString:", "generationFromSegmentsFileName", "J", 0x9, NULL, NULL },
    { "getNextPendingGeneration", NULL, "J", 0x2, NULL, NULL },
    { "getId", NULL, "[B", 0x1, NULL, NULL },
    { "readCommitWithOrgApacheLuceneStoreDirectory:withNSString:", "readCommit", "Lorg.apache.lucene.index.SegmentInfos;", 0x19, "Ljava.io.IOException;", NULL },
    { "readCodecWithOrgApacheLuceneStoreDataInput:withBoolean:", "readCodec", "Lorg.apache.lucene.codecs.Codec;", 0xa, "Ljava.io.IOException;", NULL },
    { "readLatestCommitWithOrgApacheLuceneStoreDirectory:", "readLatestCommit", "Lorg.apache.lucene.index.SegmentInfos;", 0x19, "Ljava.io.IOException;", NULL },
    { "writeWithOrgApacheLuceneStoreDirectory:", "write", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "clone", NULL, "Lorg.apache.lucene.index.SegmentInfos;", 0x1, NULL, NULL },
    { "getVersion", NULL, "J", 0x1, NULL, NULL },
    { "getGeneration", NULL, "J", 0x1, NULL, NULL },
    { "getLastGeneration", NULL, "J", 0x1, NULL, NULL },
    { "setInfoStreamWithJavaIoPrintStream:", "setInfoStream", "V", 0x9, NULL, NULL },
    { "getInfoStream", NULL, "Ljava.io.PrintStream;", 0x9, NULL, NULL },
    { "messageWithNSString:", "message", "V", 0xa, NULL, NULL },
    { "updateGenerationWithOrgApacheLuceneIndexSegmentInfos:", "updateGeneration", "V", 0x0, NULL, NULL },
    { "updateGenerationVersionAndCounterWithOrgApacheLuceneIndexSegmentInfos:", "updateGenerationVersionAndCounter", "V", 0x0, NULL, NULL },
    { "setNextWriteGenerationWithLong:", "setNextWriteGeneration", "V", 0x0, NULL, NULL },
    { "rollbackCommitWithOrgApacheLuceneStoreDirectory:", "rollbackCommit", "V", 0x10, NULL, NULL },
    { "prepareCommitWithOrgApacheLuceneStoreDirectory:", "prepareCommit", "V", 0x10, "Ljava.io.IOException;", NULL },
    { "filesWithOrgApacheLuceneStoreDirectory:withBoolean:", "files", "Ljava.util.Collection;", 0x11, "Ljava.io.IOException;", "(Lorg/apache/lucene/store/Directory;Z)Ljava/util/Collection<Ljava/lang/String;>;" },
    { "filesWithBoolean:", "files", "Ljava.util.Collection;", 0x1, "Ljava.io.IOException;", "(Z)Ljava/util/Collection<Ljava/lang/String;>;" },
    { "finishCommitWithOrgApacheLuceneStoreDirectory:", "finishCommit", "Ljava.lang.String;", 0x10, "Ljava.io.IOException;", NULL },
    { "commitWithOrgApacheLuceneStoreDirectory:", "commit", "V", 0x10, "Ljava.io.IOException;", NULL },
    { "toStringWithOrgApacheLuceneStoreDirectory:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getUserData", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" },
    { "setUserDataWithJavaUtilMap:", "setUserData", "V", 0x0, NULL, "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V" },
    { "replaceWithOrgApacheLuceneIndexSegmentInfos:", "replace", "V", 0x0, NULL, NULL },
    { "totalMaxDoc", NULL, "I", 0x1, NULL, NULL },
    { "changed", NULL, "V", 0x1, NULL, NULL },
    { "applyMergeChangesWithOrgApacheLuceneIndexMergePolicy_OneMerge:withBoolean:", "applyMergeChanges", "V", 0x0, NULL, NULL },
    { "createBackupSegmentInfos", NULL, "Ljava.util.List;", 0x0, NULL, "()Ljava/util/List<Lorg/apache/lucene/index/SegmentCommitInfo;>;" },
    { "rollbackSegmentInfosWithJavaUtilList:", "rollbackSegmentInfos", "V", 0x0, NULL, "(Ljava/util/List<Lorg/apache/lucene/index/SegmentCommitInfo;>;)V" },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, "()Ljava/util/Iterator<Lorg/apache/lucene/index/SegmentCommitInfo;>;" },
    { "asList", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lorg/apache/lucene/index/SegmentCommitInfo;>;" },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "addWithOrgApacheLuceneIndexSegmentCommitInfo:", "add", "V", 0x1, NULL, NULL },
    { "addAllWithJavaLangIterable:", "addAll", "V", 0x1, NULL, "(Ljava/lang/Iterable<Lorg/apache/lucene/index/SegmentCommitInfo;>;)V" },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "removeWithOrgApacheLuceneIndexSegmentCommitInfo:", "remove", "V", 0x1, NULL, NULL },
    { "removeWithInt:", "remove", "V", 0x0, NULL, NULL },
    { "containsWithOrgApacheLuceneIndexSegmentCommitInfo:", "contains", "Z", 0x0, NULL, NULL },
    { "indexOfWithOrgApacheLuceneIndexSegmentCommitInfo:", "indexOf", "I", 0x0, NULL, NULL },
    { "getCommitLuceneVersion", NULL, "Lorg.apache.lucene.util.Version;", 0x1, NULL, NULL },
    { "getMinSegmentLuceneVersion", NULL, "Lorg.apache.lucene.util.Version;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "VERSION_40", "VERSION_40", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_VERSION_40 },
    { "VERSION_46", "VERSION_46", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_VERSION_46 },
    { "VERSION_48", "VERSION_48", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_VERSION_48 },
    { "VERSION_49", "VERSION_49", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_VERSION_49 },
    { "VERSION_50", "VERSION_50", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_VERSION_50 },
    { "VERSION_51", "VERSION_51", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_VERSION_51 },
    { "VERSION_53", "VERSION_53", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_VERSION_53 },
    { "VERSION_CURRENT", "VERSION_CURRENT", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexSegmentInfos_VERSION_CURRENT },
    { "counter_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "version__", "version", 0x1, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "generation_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "lastGeneration_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "userData_", NULL, 0x1, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "segments_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/index/SegmentCommitInfo;>;", .constantValue.asLong = 0 },
    { "infoStream", "infoStream", 0xa, "Ljava.io.PrintStream;", &OrgApacheLuceneIndexSegmentInfos_infoStream, NULL, .constantValue.asLong = 0 },
    { "id__", "id", 0x2, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "luceneVersion_", NULL, 0x2, "Lorg.apache.lucene.util.Version;", NULL, NULL, .constantValue.asLong = 0 },
    { "minSegmentLuceneVersion_", NULL, 0x2, "Lorg.apache.lucene.util.Version;", NULL, NULL, .constantValue.asLong = 0 },
    { "unsupportedCodecs", "unsupportedCodecs", 0x1a, "Ljava.util.List;", &OrgApacheLuceneIndexSegmentInfos_unsupportedCodecs, "Ljava/util/List<Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "pendingCommit_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.index.SegmentInfos$FindSegmentsFile;"};
  static const J2ObjcClassInfo _OrgApacheLuceneIndexSegmentInfos = { 2, "SegmentInfos", "org.apache.lucene.index", NULL, 0x11, 52, methods, 20, fields, 0, NULL, 1, inner_classes, NULL, "Ljava/lang/Object;Ljava/lang/Cloneable;Ljava/lang/Iterable<Lorg/apache/lucene/index/SegmentCommitInfo;>;" };
  return &_OrgApacheLuceneIndexSegmentInfos;
}

@end

void OrgApacheLuceneIndexSegmentInfos_init(OrgApacheLuceneIndexSegmentInfos *self) {
  NSObject_init(self);
  JreStrongAssign(&self->userData_, JavaUtilCollections_emptyMap());
  JreStrongAssignAndConsume(&self->segments_, new_JavaUtilArrayList_init());
}

OrgApacheLuceneIndexSegmentInfos *new_OrgApacheLuceneIndexSegmentInfos_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexSegmentInfos, init)
}

OrgApacheLuceneIndexSegmentInfos *create_OrgApacheLuceneIndexSegmentInfos_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexSegmentInfos, init)
}

jlong OrgApacheLuceneIndexSegmentInfos_getLastCommitGenerationWithNSStringArray_(IOSObjectArray *files) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  jlong max = -1;
  {
    IOSObjectArray *a__ = files;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *file = *b__++;
      if ([((NSString *) nil_chk(file)) hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS] && ![file isEqual:OrgApacheLuceneIndexIndexFileNames_OLD_SEGMENTS_GEN]) {
        jlong gen = OrgApacheLuceneIndexSegmentInfos_generationFromSegmentsFileNameWithNSString_(file);
        if (gen > max) {
          max = gen;
        }
      }
    }
  }
  return max;
}

jlong OrgApacheLuceneIndexSegmentInfos_getLastCommitGenerationWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  return OrgApacheLuceneIndexSegmentInfos_getLastCommitGenerationWithNSStringArray_([((OrgApacheLuceneStoreDirectory *) nil_chk(directory)) listAll]);
}

NSString *OrgApacheLuceneIndexSegmentInfos_getLastCommitSegmentsFileNameWithNSStringArray_(IOSObjectArray *files) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  return OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_SEGMENTS, @"", OrgApacheLuceneIndexSegmentInfos_getLastCommitGenerationWithNSStringArray_(files));
}

NSString *OrgApacheLuceneIndexSegmentInfos_getLastCommitSegmentsFileNameWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  return OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_SEGMENTS, @"", OrgApacheLuceneIndexSegmentInfos_getLastCommitGenerationWithOrgApacheLuceneStoreDirectory_(directory));
}

jlong OrgApacheLuceneIndexSegmentInfos_generationFromSegmentsFileNameWithNSString_(NSString *fileName) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  if ([((NSString *) nil_chk(fileName)) isEqual:OrgApacheLuceneIndexIndexFileNames_SEGMENTS]) {
    return 0;
  }
  else if ([fileName hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS]) {
    return JavaLangLong_parseLongWithNSString_withInt_([fileName substring:1 + ((jint) [((NSString *) nil_chk(OrgApacheLuceneIndexIndexFileNames_SEGMENTS)) length])], JavaLangCharacter_MAX_RADIX);
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"fileName \"", fileName, @"\" is not a segments file"));
  }
}

jlong OrgApacheLuceneIndexSegmentInfos_getNextPendingGeneration(OrgApacheLuceneIndexSegmentInfos *self) {
  if (self->generation_ == -1) {
    return 1;
  }
  else {
    return self->generation_ + 1;
  }
}

OrgApacheLuceneIndexSegmentInfos *OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(OrgApacheLuceneStoreDirectory *directory, NSString *segmentFileName) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  jlong generation = OrgApacheLuceneIndexSegmentInfos_generationFromSegmentsFileNameWithNSString_(segmentFileName);
  {
    OrgApacheLuceneStoreChecksumIndexInput *input = [((OrgApacheLuceneStoreDirectory *) nil_chk(directory)) openChecksumInputWithNSString:segmentFileName withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, READ)];
    NSException *__primaryException1 = nil;
    @try {
      jint magic = [((OrgApacheLuceneStoreChecksumIndexInput *) nil_chk(input)) readInt];
      if (magic != OrgApacheLuceneCodecsCodecUtil_CODEC_MAGIC) {
        @throw create_OrgApacheLuceneIndexIndexFormatTooOldException_initWithOrgApacheLuceneStoreDataInput_withInt_withInt_withInt_(input, magic, OrgApacheLuceneCodecsCodecUtil_CODEC_MAGIC, OrgApacheLuceneCodecsCodecUtil_CODEC_MAGIC);
      }
      jint format = OrgApacheLuceneCodecsCodecUtil_checkHeaderNoMagicWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(input, @"segments", OrgApacheLuceneIndexSegmentInfos_VERSION_40, OrgApacheLuceneIndexSegmentInfos_VERSION_CURRENT);
      IOSByteArray *id_ = nil;
      if (format >= OrgApacheLuceneIndexSegmentInfos_VERSION_50) {
        id_ = [IOSByteArray arrayWithLength:OrgApacheLuceneUtilStringHelper_ID_LENGTH];
        [input readBytesWithByteArray:id_ withInt:0 withInt:id_->size_];
        OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderSuffixWithOrgApacheLuceneStoreDataInput_withNSString_(input, JavaLangLong_toStringWithLong_withInt_(generation, JavaLangCharacter_MAX_RADIX));
      }
      OrgApacheLuceneIndexSegmentInfos *infos = create_OrgApacheLuceneIndexSegmentInfos_init();
      JreStrongAssign(&infos->id__, id_);
      infos->generation_ = generation;
      infos->lastGeneration_ = generation;
      if (format >= OrgApacheLuceneIndexSegmentInfos_VERSION_53) {
        JreStrongAssign(&infos->luceneVersion_, OrgApacheLuceneUtilVersion_fromBitsWithInt_withInt_withInt_([input readVInt], [input readVInt], [input readVInt]));
      }
      else {
      }
      infos->version__ = [input readLong];
      infos->counter_ = [input readInt];
      jint numSegments = [input readInt];
      if (numSegments < 0) {
        @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I", @"invalid segment count: ", numSegments), input);
      }
      if (format >= OrgApacheLuceneIndexSegmentInfos_VERSION_53) {
        if (numSegments > 0) {
          JreStrongAssign(&infos->minSegmentLuceneVersion_, OrgApacheLuceneUtilVersion_fromBitsWithInt_withInt_withInt_([input readVInt], [input readVInt], [input readVInt]));
          if ([((OrgApacheLuceneUtilVersion *) nil_chk(infos->minSegmentLuceneVersion_)) onOrAfterWithOrgApacheLuceneUtilVersion:JreLoadStatic(OrgApacheLuceneUtilVersion, LUCENE_4_0_0_ALPHA)] == false) {
            @throw create_OrgApacheLuceneIndexIndexFormatTooOldException_initWithOrgApacheLuceneStoreDataInput_withNSString_(input, JreStrcat("$@C", @"this index contains a too-old segment (version: ", infos->minSegmentLuceneVersion_, ')'));
          }
        }
        else {
        }
      }
      else {
      }
      jlong totalDocs = 0;
      for (jint seg = 0; seg < numSegments; seg++) {
        NSString *segName = [input readString];
        IOSByteArray *segmentID;
        if (format >= OrgApacheLuceneIndexSegmentInfos_VERSION_50) {
          jbyte hasID = [input readByte];
          if (hasID == 1) {
            segmentID = [IOSByteArray arrayWithLength:OrgApacheLuceneUtilStringHelper_ID_LENGTH];
            [input readBytesWithByteArray:segmentID withInt:0 withInt:segmentID->size_];
          }
          else if (hasID == 0) {
            segmentID = nil;
          }
          else {
            @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$B", @"invalid hasID byte, got: ", hasID), input);
          }
        }
        else {
          segmentID = nil;
        }
        OrgApacheLuceneCodecsCodec *codec = OrgApacheLuceneIndexSegmentInfos_readCodecWithOrgApacheLuceneStoreDataInput_withBoolean_(input, format < OrgApacheLuceneIndexSegmentInfos_VERSION_53);
        OrgApacheLuceneIndexSegmentInfo *info = [((OrgApacheLuceneCodecsSegmentInfoFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk(codec)) segmentInfoFormat])) readWithOrgApacheLuceneStoreDirectory:directory withNSString:segName withByteArray:segmentID withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, READ)];
        [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) setCodecWithOrgApacheLuceneCodecsCodec:codec];
        totalDocs += [info maxDoc];
        jlong delGen = [input readLong];
        jint delCount = [input readInt];
        if (delCount < 0 || delCount > [info maxDoc]) {
          @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I$I", @"invalid deletion count: ", delCount, @" vs maxDoc=", [info maxDoc]), input);
        }
        jlong fieldInfosGen = -1;
        if (format >= OrgApacheLuceneIndexSegmentInfos_VERSION_46) {
          fieldInfosGen = [input readLong];
        }
        jlong dvGen = -1;
        if (format >= OrgApacheLuceneIndexSegmentInfos_VERSION_49) {
          dvGen = [input readLong];
        }
        else {
          dvGen = fieldInfosGen;
        }
        OrgApacheLuceneIndexSegmentCommitInfo *siPerCommit = create_OrgApacheLuceneIndexSegmentCommitInfo_initWithOrgApacheLuceneIndexSegmentInfo_withInt_withLong_withLong_withLong_(info, delCount, delGen, fieldInfosGen, dvGen);
        if (format >= OrgApacheLuceneIndexSegmentInfos_VERSION_46) {
          if (format < OrgApacheLuceneIndexSegmentInfos_VERSION_49) {
            jint numGensUpdatesFiles = [input readInt];
            id<JavaUtilMap> genUpdatesFiles;
            if (numGensUpdatesFiles == 0) {
              genUpdatesFiles = JavaUtilCollections_emptyMap();
            }
            else {
              genUpdatesFiles = create_JavaUtilHashMap_initWithInt_(numGensUpdatesFiles);
              for (jint i = 0; i < numGensUpdatesFiles; i++) {
                [genUpdatesFiles putWithId:JavaLangLong_valueOfWithLong_([input readLong]) withId:[input readStringSet]];
              }
            }
            [siPerCommit setGenUpdatesFilesWithJavaUtilMap:genUpdatesFiles];
          }
          else {
            if (format >= OrgApacheLuceneIndexSegmentInfos_VERSION_51) {
              [siPerCommit setFieldInfosFilesWithJavaUtilSet:[input readSetOfStrings]];
            }
            else {
              [siPerCommit setFieldInfosFilesWithJavaUtilSet:JavaUtilCollections_unmodifiableSetWithJavaUtilSet_([input readStringSet])];
            }
            id<JavaUtilMap> dvUpdateFiles;
            jint numDVFields = [input readInt];
            if (numDVFields == 0) {
              dvUpdateFiles = JavaUtilCollections_emptyMap();
            }
            else {
              id<JavaUtilMap> map = create_JavaUtilHashMap_initWithInt_(numDVFields);
              for (jint i = 0; i < numDVFields; i++) {
                if (format >= OrgApacheLuceneIndexSegmentInfos_VERSION_51) {
                  [map putWithId:JavaLangInteger_valueOfWithInt_([input readInt]) withId:[input readSetOfStrings]];
                }
                else {
                  [map putWithId:JavaLangInteger_valueOfWithInt_([input readInt]) withId:JavaUtilCollections_unmodifiableSetWithJavaUtilSet_([input readStringSet])];
                }
              }
              dvUpdateFiles = JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(map);
            }
            [siPerCommit setDocValuesUpdatesFilesWithJavaUtilMap:dvUpdateFiles];
          }
        }
        [infos addWithOrgApacheLuceneIndexSegmentCommitInfo:siPerCommit];
        OrgApacheLuceneUtilVersion *segmentVersion = [info getVersion];
        if (format < OrgApacheLuceneIndexSegmentInfos_VERSION_53) {
          if (infos->minSegmentLuceneVersion_ == nil || [((OrgApacheLuceneUtilVersion *) nil_chk(segmentVersion)) onOrAfterWithOrgApacheLuceneUtilVersion:infos->minSegmentLuceneVersion_] == false) {
            JreStrongAssign(&infos->minSegmentLuceneVersion_, segmentVersion);
          }
        }
        else if ([((OrgApacheLuceneUtilVersion *) nil_chk(segmentVersion)) onOrAfterWithOrgApacheLuceneUtilVersion:infos->minSegmentLuceneVersion_] == false) {
          @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$@$@$@", @"segments file recorded minSegmentLuceneVersion=", infos->minSegmentLuceneVersion_, @" but segment=", info, @" has older version=", segmentVersion), input);
        }
      }
      if (format >= OrgApacheLuceneIndexSegmentInfos_VERSION_51) {
        JreStrongAssign(&infos->userData_, [input readMapOfStrings]);
      }
      else {
        JreStrongAssign(&infos->userData_, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_([input readStringStringMap]));
      }
      if (format >= OrgApacheLuceneIndexSegmentInfos_VERSION_48) {
        OrgApacheLuceneCodecsCodecUtil_checkFooterWithOrgApacheLuceneStoreChecksumIndexInput_(input);
      }
      else {
        jlong checksumNow = [input getChecksum];
        jlong checksumThen = [input readLong];
        if (checksumNow != checksumThen) {
          @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$$$$", @"checksum failed (hardware problem?) : expected=", JavaLangLong_toHexStringWithLong_(checksumThen), @" actual=", JavaLangLong_toHexStringWithLong_(checksumNow)), input);
        }
        OrgApacheLuceneCodecsCodecUtil_checkEOFWithOrgApacheLuceneStoreIndexInput_(input);
      }
      if (totalDocs > OrgApacheLuceneIndexIndexWriter_getActualMaxDocs()) {
        @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I$J", @"Too many documents: an index cannot exceed ", OrgApacheLuceneIndexIndexWriter_getActualMaxDocs(), @" but readers have total maxDoc=", totalDocs), input);
      }
      return infos;
    }
    @catch (NSException *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (input != nil) {
        if (__primaryException1 != nil) {
          @try {
            [input close];
          } @catch (NSException *e) {
            [__primaryException1 addSuppressedWithNSException:e];
          }
        } else {
          [input close];
        }
      }
    }
  }
}

OrgApacheLuceneCodecsCodec *OrgApacheLuceneIndexSegmentInfos_readCodecWithOrgApacheLuceneStoreDataInput_withBoolean_(OrgApacheLuceneStoreDataInput *input, jboolean unsupportedAllowed) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  NSString *name = [((OrgApacheLuceneStoreDataInput *) nil_chk(input)) readString];
  @try {
    return OrgApacheLuceneCodecsCodec_forNameWithNSString_(name);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    if ([((id<JavaUtilList>) nil_chk(OrgApacheLuceneIndexSegmentInfos_unsupportedCodecs)) containsWithId:name]) {
      JreAssert((unsupportedAllowed), (@"org/apache/lucene/index/SegmentInfos.java:474 condition failed: assert unsupportedAllowed;"));
      JavaIoIOException *newExc = create_OrgApacheLuceneIndexIndexFormatTooOldException_initWithOrgApacheLuceneStoreDataInput_withNSString_(input, JreStrcat("$$$", @"Codec '", name, @"' is too old"));
      [newExc initCauseWithNSException:e];
      @throw newExc;
    }
    if ([((NSString *) nil_chk(name)) hasPrefix:@"Lucene"]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_withNSException_(JreStrcat("$$$", @"Could not load codec '", name, @"'.  Did you forget to add lucene-backward-codecs.jar?"), e);
    }
    @throw e;
  }
}

OrgApacheLuceneIndexSegmentInfos *OrgApacheLuceneIndexSegmentInfos_readLatestCommitWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  return [create_OrgApacheLuceneIndexSegmentInfos_$1_initWithOrgApacheLuceneStoreDirectory_(directory) run];
}

void OrgApacheLuceneIndexSegmentInfos_writeWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *directory) {
  jlong nextGeneration = OrgApacheLuceneIndexSegmentInfos_getNextPendingGeneration(self);
  NSString *segmentFileName = OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_PENDING_SEGMENTS, @"", nextGeneration);
  self->generation_ = nextGeneration;
  OrgApacheLuceneStoreIndexOutput *segnOutput = nil;
  jboolean success = false;
  @try {
    segnOutput = [((OrgApacheLuceneStoreDirectory *) nil_chk(directory)) createOutputWithNSString:segmentFileName withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, DEFAULT)];
    OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(segnOutput, @"segments", OrgApacheLuceneIndexSegmentInfos_VERSION_CURRENT, OrgApacheLuceneUtilStringHelper_randomId(), JavaLangLong_toStringWithLong_withInt_(nextGeneration, JavaLangCharacter_MAX_RADIX));
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(segnOutput)) writeVIntWithInt:((OrgApacheLuceneUtilVersion *) nil_chk(JreLoadStatic(OrgApacheLuceneUtilVersion, LATEST)))->major_];
    [segnOutput writeVIntWithInt:JreLoadStatic(OrgApacheLuceneUtilVersion, LATEST)->minor_];
    [segnOutput writeVIntWithInt:JreLoadStatic(OrgApacheLuceneUtilVersion, LATEST)->bugfix_];
    [segnOutput writeLongWithLong:self->version__];
    [segnOutput writeIntWithInt:self->counter_];
    [segnOutput writeIntWithInt:[self size]];
    if ([self size] > 0) {
      OrgApacheLuceneUtilVersion *minSegmentVersion = nil;
      for (OrgApacheLuceneIndexSegmentCommitInfo * __strong siPerCommit in self) {
        OrgApacheLuceneUtilVersion *segmentVersion = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(siPerCommit))->info_)) getVersion];
        if (minSegmentVersion == nil || [((OrgApacheLuceneUtilVersion *) nil_chk(segmentVersion)) onOrAfterWithOrgApacheLuceneUtilVersion:minSegmentVersion] == false) {
          minSegmentVersion = segmentVersion;
        }
      }
      [segnOutput writeVIntWithInt:((OrgApacheLuceneUtilVersion *) nil_chk(minSegmentVersion))->major_];
      [segnOutput writeVIntWithInt:minSegmentVersion->minor_];
      [segnOutput writeVIntWithInt:minSegmentVersion->bugfix_];
    }
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong siPerCommit in self) {
      OrgApacheLuceneIndexSegmentInfo *si = ((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(siPerCommit))->info_;
      [segnOutput writeStringWithNSString:((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si))->name_];
      IOSByteArray *segmentID = [si getId];
      if (segmentID == nil) {
        [segnOutput writeByteWithByte:(jbyte) 0];
      }
      else {
        if (segmentID->size_ != OrgApacheLuceneUtilStringHelper_ID_LENGTH) {
          @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$$", @"cannot write segment: invalid id segment=", si->name_, @"id=", OrgApacheLuceneUtilStringHelper_idToStringWithByteArray_(segmentID)));
        }
        [segnOutput writeByteWithByte:(jbyte) 1];
        [segnOutput writeBytesWithByteArray:segmentID withInt:segmentID->size_];
      }
      [segnOutput writeStringWithNSString:[((OrgApacheLuceneCodecsCodec *) nil_chk([si getCodec])) getName]];
      [segnOutput writeLongWithLong:[siPerCommit getDelGen]];
      jint delCount = [siPerCommit getDelCount];
      if (delCount < 0 || delCount > [si maxDoc]) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$I$I", @"cannot write segment: invalid maxDoc segment=", si->name_, @" maxDoc=", [si maxDoc], @" delCount=", delCount));
      }
      [segnOutput writeIntWithInt:delCount];
      [segnOutput writeLongWithLong:[siPerCommit getFieldInfosGen]];
      [segnOutput writeLongWithLong:[siPerCommit getDocValuesGen]];
      [segnOutput writeSetOfStringsWithJavaUtilSet:[siPerCommit getFieldInfosFiles]];
      id<JavaUtilMap> dvUpdatesFiles = [siPerCommit getDocValuesUpdatesFiles];
      [segnOutput writeIntWithInt:[((id<JavaUtilMap>) nil_chk(dvUpdatesFiles)) size]];
      for (id<JavaUtilMap_Entry> __strong e in nil_chk([dvUpdatesFiles entrySet])) {
        [segnOutput writeIntWithInt:[((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey])) intValue]];
        [segnOutput writeSetOfStringsWithJavaUtilSet:[e getValue]];
      }
    }
    [segnOutput writeMapOfStringsWithJavaUtilMap:self->userData_];
    OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(segnOutput);
    [segnOutput close];
    [directory syncWithJavaUtilCollection:JavaUtilCollections_singletonWithId_(segmentFileName)];
    success = true;
  }
  @finally {
    if (success) {
      self->pendingCommit_ = true;
    }
    else {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ segnOutput } count:1 type:JavaIoCloseable_class_()]);
      OrgApacheLuceneUtilIOUtils_deleteFilesIgnoringExceptionsWithOrgApacheLuceneStoreDirectory_withNSStringArray_(directory, [IOSObjectArray arrayWithObjects:(id[]){ segmentFileName } count:1 type:NSString_class_()]);
    }
  }
}

void OrgApacheLuceneIndexSegmentInfos_setInfoStreamWithJavaIoPrintStream_(JavaIoPrintStream *infoStream) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  JreStrongAssign(&OrgApacheLuceneIndexSegmentInfos_infoStream, infoStream);
}

JavaIoPrintStream *OrgApacheLuceneIndexSegmentInfos_getInfoStream() {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  return OrgApacheLuceneIndexSegmentInfos_infoStream;
}

void OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(NSString *message) {
  OrgApacheLuceneIndexSegmentInfos_initialize();
  [((JavaIoPrintStream *) nil_chk(OrgApacheLuceneIndexSegmentInfos_infoStream)) printlnWithNSString:JreStrcat("$$$$", @"SIS [", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], @"]: ", message)];
}

void OrgApacheLuceneIndexSegmentInfos_rollbackCommitWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *dir) {
  if (self->pendingCommit_) {
    self->pendingCommit_ = false;
    NSString *pending = OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_PENDING_SEGMENTS, @"", self->generation_);
    OrgApacheLuceneUtilIOUtils_deleteFilesIgnoringExceptionsWithOrgApacheLuceneStoreDirectory_withNSStringArray_(dir, [IOSObjectArray arrayWithObjects:(id[]){ pending } count:1 type:NSString_class_()]);
  }
}

void OrgApacheLuceneIndexSegmentInfos_prepareCommitWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *dir) {
  if (self->pendingCommit_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"prepareCommit was already called");
  }
  OrgApacheLuceneIndexSegmentInfos_writeWithOrgApacheLuceneStoreDirectory_(self, dir);
}

NSString *OrgApacheLuceneIndexSegmentInfos_finishCommitWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos *self, OrgApacheLuceneStoreDirectory *dir) {
  if (self->pendingCommit_ == false) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"prepareCommit was not called");
  }
  jboolean success = false;
  NSString *dest;
  @try {
    NSString *src = OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_PENDING_SEGMENTS, @"", self->generation_);
    dest = OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_SEGMENTS, @"", self->generation_);
    [((OrgApacheLuceneStoreDirectory *) nil_chk(dir)) renameFileWithNSString:src withNSString:dest];
    success = true;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneIndexSegmentInfos_rollbackCommitWithOrgApacheLuceneStoreDirectory_(self, dir);
    }
  }
  self->pendingCommit_ = false;
  self->lastGeneration_ = self->generation_;
  return dest;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexSegmentInfos)

@implementation OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile_initWithOrgApacheLuceneStoreDirectory_(self, directory);
  return self;
}

- (id)run {
  return [self runWithOrgApacheLuceneIndexIndexCommit:nil];
}

- (id)runWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  if (commit != nil) {
    if (directory_ != [commit getDirectory]) @throw create_JavaIoIOException_initWithNSString_(@"the specified commit does not match the specified Directory");
    return [self doBodyWithNSString:[commit getSegmentsFileName]];
  }
  jlong lastGen = -1;
  jlong gen = -1;
  JavaIoIOException *exc = nil;
  for (; ; ) {
    lastGen = gen;
    IOSObjectArray *files = [((OrgApacheLuceneStoreDirectory *) nil_chk(directory_)) listAll];
    IOSObjectArray *files2 = [directory_ listAll];
    JavaUtilArrays_sortWithNSObjectArray_(files);
    JavaUtilArrays_sortWithNSObjectArray_(files2);
    if (!JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(files, files2)) {
      continue;
    }
    gen = OrgApacheLuceneIndexSegmentInfos_getLastCommitGenerationWithNSStringArray_(files);
    if (JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, infoStream) != nil) {
      OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(JreStrcat("$J", @"directory listing gen=", gen));
    }
    if (gen == -1) {
      @throw create_OrgApacheLuceneIndexIndexNotFoundException_initWithNSString_(JreStrcat("$@$$", @"no segments* file found in ", directory_, @": files: ", JavaUtilArrays_toStringWithNSObjectArray_(files)));
    }
    else if (gen > lastGen) {
      NSString *segmentFileName = OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_SEGMENTS, @"", gen);
      @try {
        id t = [self doBodyWithNSString:segmentFileName];
        if (JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, infoStream) != nil) {
          OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(JreStrcat("$$", @"success on ", segmentFileName));
        }
        return t;
      }
      @catch (JavaIoIOException *err) {
        if (exc == nil) {
          exc = err;
        }
        if (JreLoadStatic(OrgApacheLuceneIndexSegmentInfos, infoStream) != nil) {
          OrgApacheLuceneIndexSegmentInfos_messageWithNSString_(JreStrcat("$$$@$J", @"primary Exception on '", segmentFileName, @"': ", err, @"'; will retry: gen = ", gen));
        }
      }
    }
    else {
      @throw exc;
    }
  }
}

- (id)doBodyWithNSString:(NSString *)segmentFileName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(directory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneStoreDirectory:", "FindSegmentsFile", NULL, 0x1, NULL, NULL },
    { "run", NULL, "TT;", 0x1, "Ljava.io.IOException;", "()TT;" },
    { "runWithOrgApacheLuceneIndexIndexCommit:", "run", "TT;", 0x1, "Ljava.io.IOException;", "(Lorg/apache/lucene/index/IndexCommit;)TT;" },
    { "doBodyWithNSString:", "doBody", "TT;", 0x404, "Ljava.io.IOException;", "(Ljava/lang/String;)TT;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "directory_", NULL, 0x10, "Lorg.apache.lucene.store.Directory;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile = { 2, "FindSegmentsFile", "org.apache.lucene.index", "SegmentInfos", 0x409, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile;
}

@end

void OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile *self, OrgApacheLuceneStoreDirectory *directory) {
  NSObject_init(self);
  JreStrongAssign(&self->directory_, directory);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile)

@implementation OrgApacheLuceneIndexSegmentInfos_$1

- (OrgApacheLuceneIndexSegmentInfos *)doBodyWithNSString:(NSString *)segmentFileName {
  return OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(directory_, segmentFileName);
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)arg$0 {
  OrgApacheLuceneIndexSegmentInfos_$1_initWithOrgApacheLuceneStoreDirectory_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "doBodyWithNSString:", "doBody", "Lorg.apache.lucene.index.SegmentInfos;", 0x4, "Ljava.io.IOException;", "(Ljava/lang/String;)Lorg/apache/lucene/index/SegmentInfos;" },
    { "initWithOrgApacheLuceneStoreDirectory:", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lorg.apache.lucene.index.SegmentInfos;"};
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheLuceneIndexSegmentInfos", "readLatestCommitWithOrgApacheLuceneStoreDirectory:" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexSegmentInfos_$1 = { 2, "", "org.apache.lucene.index", "SegmentInfos", 0x8008, 2, methods, 0, NULL, 1, superclass_type_args, 0, NULL, &enclosing_method, "Lorg/apache/lucene/index/SegmentInfos$FindSegmentsFile<Lorg/apache/lucene/index/SegmentInfos;>;" };
  return &_OrgApacheLuceneIndexSegmentInfos_$1;
}

@end

void OrgApacheLuceneIndexSegmentInfos_$1_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexSegmentInfos_$1 *self, OrgApacheLuceneStoreDirectory *arg$0) {
  OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile_initWithOrgApacheLuceneStoreDirectory_(self, arg$0);
}

OrgApacheLuceneIndexSegmentInfos_$1 *new_OrgApacheLuceneIndexSegmentInfos_$1_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *arg$0) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexSegmentInfos_$1, initWithOrgApacheLuceneStoreDirectory_, arg$0)
}

OrgApacheLuceneIndexSegmentInfos_$1 *create_OrgApacheLuceneIndexSegmentInfos_$1_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *arg$0) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexSegmentInfos_$1, initWithOrgApacheLuceneStoreDirectory_, arg$0)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexSegmentInfos_$1)
