//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Runtime.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/index/ConcurrentMergeScheduler.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/MergeRateLimiter.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/CollectionUtil.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"

#define OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_MERGE_MB_PER_SEC 5.0
#define OrgApacheLuceneIndexConcurrentMergeScheduler_MAX_MERGE_MB_PER_SEC 10240.0
#define OrgApacheLuceneIndexConcurrentMergeScheduler_START_MB_PER_SEC 20.0
#define OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_BIG_MERGE_MB 50.0

@interface OrgApacheLuceneIndexConcurrentMergeScheduler () {
 @public
  jint maxThreadCount_;
  jint maxMergeCount_;
  jboolean doAutoIOThrottle_;
  jdouble forceMergeMBPerSec_;
  jboolean suppressExceptions_;
}

- (void)initDynamicDefaultsWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer OBJC_METHOD_FAMILY_NONE;

+ (NSString *)rateToStringWithDouble:(jdouble)mbPerSec;

- (jboolean)isBacklogWithLong:(jlong)now
withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge;

- (void)updateIOThrottleWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)newMerge;

+ (jdouble)nsToSecWithLong:(jlong)ns;

+ (jdouble)bytesToMBWithLong:(jlong)bytes;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneIndexConcurrentMergeScheduler, MIN_MERGE_MB_PER_SEC, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneIndexConcurrentMergeScheduler, MAX_MERGE_MB_PER_SEC, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneIndexConcurrentMergeScheduler, START_MB_PER_SEC, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneIndexConcurrentMergeScheduler, MIN_BIG_MERGE_MB, jdouble)

__attribute__((unused)) static void OrgApacheLuceneIndexConcurrentMergeScheduler_initDynamicDefaultsWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexConcurrentMergeScheduler *self, OrgApacheLuceneIndexIndexWriter *writer);

__attribute__((unused)) static NSString *OrgApacheLuceneIndexConcurrentMergeScheduler_rateToStringWithDouble_(jdouble mbPerSec);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexConcurrentMergeScheduler_isBacklogWithLong_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler *self, jlong now, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexConcurrentMergeScheduler_updateIOThrottleWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler *self, OrgApacheLuceneIndexMergePolicy_OneMerge *newMerge);

__attribute__((unused)) static jdouble OrgApacheLuceneIndexConcurrentMergeScheduler_nsToSecWithLong_(jlong ns);

__attribute__((unused)) static jdouble OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(jlong bytes);

@interface OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread () {
 @public
  OrgApacheLuceneIndexConcurrentMergeScheduler *this$0_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread, this$0_, OrgApacheLuceneIndexConcurrentMergeScheduler *)

NSString *OrgApacheLuceneIndexConcurrentMergeScheduler_DEFAULT_CPU_CORE_COUNT_PROPERTY_ = @"lucene.cms.override_core_count";
NSString *OrgApacheLuceneIndexConcurrentMergeScheduler_DEFAULT_SPINS_PROPERTY_ = @"lucene.cms.override_spins";

@implementation OrgApacheLuceneIndexConcurrentMergeScheduler

- (instancetype)init {
  OrgApacheLuceneIndexConcurrentMergeScheduler_init(self);
  return self;
}

- (void)setMaxMergesAndThreadsWithInt:(jint)maxMergeCount
                              withInt:(jint)maxThreadCount {
  @synchronized(self) {
    if (maxMergeCount == OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS && maxThreadCount == OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS) {
      self->maxMergeCount_ = OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS;
      self->maxThreadCount_ = OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS;
    }
    else if (maxMergeCount == OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"both maxMergeCount and maxThreadCount must be AUTO_DETECT_MERGES_AND_THREADS") autorelease];
    }
    else if (maxThreadCount == OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"both maxMergeCount and maxThreadCount must be AUTO_DETECT_MERGES_AND_THREADS") autorelease];
    }
    else {
      if (maxThreadCount < 1) {
        @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"maxThreadCount should be at least 1") autorelease];
      }
      if (maxMergeCount < 1) {
        @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"maxMergeCount should be at least 1") autorelease];
      }
      if (maxThreadCount > maxMergeCount) {
        @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"maxThreadCount should be <= maxMergeCount (= ", maxMergeCount, ')')) autorelease];
      }
      self->maxThreadCount_ = maxThreadCount;
      self->maxMergeCount_ = maxMergeCount;
    }
  }
}

- (void)setDefaultMaxMergesAndThreadsWithBoolean:(jboolean)spins {
  @synchronized(self) {
    if (spins) {
      maxThreadCount_ = 1;
      maxMergeCount_ = 6;
    }
    else {
      jint coreCount = [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) availableProcessors];
      @try {
        NSString *value = JavaLangSystem_getPropertyWithNSString_(OrgApacheLuceneIndexConcurrentMergeScheduler_DEFAULT_CPU_CORE_COUNT_PROPERTY_);
        if (value != nil) {
          coreCount = JavaLangInteger_parseIntWithNSString_(value);
        }
      }
      @catch (JavaLangThrowable *ignored) {
      }
      maxThreadCount_ = JavaLangMath_maxWithInt_withInt_(1, JavaLangMath_minWithInt_withInt_(4, coreCount / 2));
      maxMergeCount_ = maxThreadCount_ + 5;
    }
  }
}

- (void)setForceMergeMBPerSecWithDouble:(jdouble)v {
  @synchronized(self) {
    forceMergeMBPerSec_ = v;
    [self updateMergeThreads];
  }
}

- (jdouble)getForceMergeMBPerSec {
  @synchronized(self) {
    return forceMergeMBPerSec_;
  }
}

- (void)enableAutoIOThrottle {
  @synchronized(self) {
    doAutoIOThrottle_ = YES;
    targetMBPerSec_ = OrgApacheLuceneIndexConcurrentMergeScheduler_START_MB_PER_SEC;
    [self updateMergeThreads];
  }
}

- (void)disableAutoIOThrottle {
  @synchronized(self) {
    doAutoIOThrottle_ = NO;
    [self updateMergeThreads];
  }
}

- (jboolean)getAutoIOThrottle {
  @synchronized(self) {
    return doAutoIOThrottle_;
  }
}

- (jdouble)getIORateLimitMBPerSec {
  @synchronized(self) {
    if (doAutoIOThrottle_) {
      return targetMBPerSec_;
    }
    else {
      return JavaLangDouble_POSITIVE_INFINITY;
    }
  }
}

- (jint)getMaxThreadCount {
  @synchronized(self) {
    return maxThreadCount_;
  }
}

- (jint)getMaxMergeCount {
  @synchronized(self) {
    return maxMergeCount_;
  }
}

- (void)removeMergeThread {
  @synchronized(self) {
    JavaLangThread *currentThread = JavaLangThread_currentThread();
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(mergeThreads_)) size]; i++) {
      if ([mergeThreads_ getWithInt:i] == currentThread) {
        [mergeThreads_ removeWithInt:i];
        return;
      }
    }
    JreAssert((NO), (JreStrcat("$@$", @"merge thread ", currentThread, @" was not found")));
  }
}

- (void)updateMergeThreads {
  @synchronized(self) {
    id<JavaUtilList> activeMerges = [new_JavaUtilArrayList_init() autorelease];
    jint threadIdx = 0;
    while (threadIdx < [((id<JavaUtilList>) nil_chk(mergeThreads_)) size]) {
      OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *mergeThread = [mergeThreads_ getWithInt:threadIdx];
      if (![((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mergeThread)) isAlive]) {
        [mergeThreads_ removeWithInt:threadIdx];
        continue;
      }
      [activeMerges addWithId:mergeThread];
      threadIdx++;
    }
    OrgApacheLuceneUtilCollectionUtil_timSortWithJavaUtilList_(activeMerges);
    jint activeMergeCount = [activeMerges size];
    jint bigMergeCount = 0;
    for (threadIdx = activeMergeCount - 1; threadIdx >= 0; threadIdx--) {
      OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *mergeThread = [activeMerges getWithInt:threadIdx];
      if (JreLoadVolatileLong(&((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mergeThread))->merge_))->estimatedMergeBytes_) > OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_BIG_MERGE_MB * 1024 * 1024) {
        bigMergeCount = 1 + threadIdx;
        break;
      }
    }
    jlong now = JavaLangSystem_nanoTime();
    JavaLangStringBuilder *message;
    if ([self verbose]) {
      message = [new_JavaLangStringBuilder_init() autorelease];
      [message appendWithNSString:NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"updateMergeThreads ioThrottle=%s targetMBPerSec=%.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_(doAutoIOThrottle_), JavaLangDouble_valueOfWithDouble_(targetMBPerSec_) } count:2 type:NSObject_class_()])];
    }
    else {
      message = nil;
    }
    for (threadIdx = 0; threadIdx < activeMergeCount; threadIdx++) {
      OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *mergeThread = [activeMerges getWithInt:threadIdx];
      OrgApacheLuceneIndexMergePolicy_OneMerge *merge = ((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mergeThread))->merge_;
      jboolean doPause = threadIdx < bigMergeCount - maxThreadCount_;
      jdouble newMBPerSec;
      if (doPause) {
        newMBPerSec = 0.0;
      }
      else if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ != -1) {
        newMBPerSec = forceMergeMBPerSec_;
      }
      else if (doAutoIOThrottle_ == NO) {
        newMBPerSec = JavaLangDouble_POSITIVE_INFINITY;
      }
      else if (JreLoadVolatileLong(&merge->estimatedMergeBytes_) < OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_BIG_MERGE_MB * 1024 * 1024) {
        newMBPerSec = JavaLangDouble_POSITIVE_INFINITY;
      }
      else {
        newMBPerSec = targetMBPerSec_;
      }
      jdouble curMBPerSec = [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->rateLimiter_)) getMBPerSec];
      if ([self verbose]) {
        jlong mergeStartNS = JreLoadVolatileLong(&merge->mergeStartNS_);
        if (mergeStartNS == -1) {
          mergeStartNS = now;
        }
        [((JavaLangStringBuilder *) nil_chk(message)) appendWithChar:0x000a];
        [message appendWithNSString:NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"merge thread %s estSize=%.1f MB (written=%.1f MB) runTime=%.1fs (stopped=%.1fs, paused=%.1fs) rate=%s\n", [IOSObjectArray arrayWithObjects:(id[]){ [mergeThread getName], JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(JreLoadVolatileLong(&merge->estimatedMergeBytes_))), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(JreLoadVolatileLong(&merge->rateLimiter_->totalBytesWritten_))), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexConcurrentMergeScheduler_nsToSecWithLong_(now - mergeStartNS)), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexConcurrentMergeScheduler_nsToSecWithLong_([merge->rateLimiter_ getTotalStoppedNS])), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexConcurrentMergeScheduler_nsToSecWithLong_([merge->rateLimiter_ getTotalPausedNS])), OrgApacheLuceneIndexConcurrentMergeScheduler_rateToStringWithDouble_([merge->rateLimiter_ getMBPerSec]) } count:7 type:NSObject_class_()])];
        if (newMBPerSec != curMBPerSec) {
          if (newMBPerSec == 0.0) {
            [message appendWithNSString:@"  now stop"];
          }
          else if (curMBPerSec == 0.0) {
            if (newMBPerSec == JavaLangDouble_POSITIVE_INFINITY) {
              [message appendWithNSString:@"  now resume"];
            }
            else {
              [message appendWithNSString:NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"  now resume to %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(newMBPerSec) } count:1 type:NSObject_class_()])];
            }
          }
          else {
            [message appendWithNSString:NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"  now change from %.1f MB/sec to %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(curMBPerSec), JavaLangDouble_valueOfWithDouble_(newMBPerSec) } count:2 type:NSObject_class_()])];
          }
        }
        else if (curMBPerSec == 0.0) {
          [message appendWithNSString:@"  leave stopped"];
        }
        else {
          [message appendWithNSString:NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"  leave running at %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(curMBPerSec) } count:1 type:NSObject_class_()])];
        }
      }
      [merge->rateLimiter_ setMBPerSecWithDouble:newMBPerSec];
    }
    if ([self verbose]) {
      [self messageWithNSString:[((JavaLangStringBuilder *) nil_chk(message)) description]];
    }
  }
}

- (void)initDynamicDefaultsWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  OrgApacheLuceneIndexConcurrentMergeScheduler_initDynamicDefaultsWithOrgApacheLuceneIndexIndexWriter_(self, writer);
}

+ (NSString *)rateToStringWithDouble:(jdouble)mbPerSec {
  return OrgApacheLuceneIndexConcurrentMergeScheduler_rateToStringWithDouble_(mbPerSec);
}

- (void)close {
  [self sync];
}

- (void)sync {
  jboolean interrupted = NO;
  @try {
    while (YES) {
      OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *toSync = nil;
      @synchronized(self) {
        for (OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread * __strong t in nil_chk(mergeThreads_)) {
          if ([((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(t)) isAlive] && t != JavaLangThread_currentThread()) {
            toSync = t;
            break;
          }
        }
      }
      if (toSync != nil) {
        @try {
          [toSync join];
        }
        @catch (JavaLangInterruptedException *ie) {
          interrupted = YES;
        }
      }
      else {
        break;
      }
    }
  }
  @finally {
    if (interrupted) [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
  }
}

- (jint)mergeThreadCount {
  @synchronized(self) {
    JavaLangThread *currentThread = JavaLangThread_currentThread();
    jint count = 0;
    for (OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread * __strong mergeThread in nil_chk(mergeThreads_)) {
      if (currentThread != mergeThread && [((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mergeThread)) isAlive] && [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(mergeThread->merge_))->rateLimiter_)) getAbort] == NO) {
        count++;
      }
    }
    return count;
  }
}

- (void)mergeWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
        withOrgApacheLuceneIndexMergeTriggerEnum:(OrgApacheLuceneIndexMergeTriggerEnum *)trigger
                                     withBoolean:(jboolean)newMergesFound {
  @synchronized(self) {
    JreAssert((!JavaLangThread_holdsLockWithId_(writer)), (@"org/apache/lucene/index/ConcurrentMergeScheduler.java:462 condition failed: assert !Thread.holdsLock(writer);"));
    OrgApacheLuceneIndexConcurrentMergeScheduler_initDynamicDefaultsWithOrgApacheLuceneIndexIndexWriter_(self, writer);
    if (trigger == JreLoadStatic(OrgApacheLuceneIndexMergeTriggerEnum, CLOSING)) {
      targetMBPerSec_ = OrgApacheLuceneIndexConcurrentMergeScheduler_MAX_MERGE_MB_PER_SEC;
      [self updateMergeThreads];
    }
    if ([self verbose]) {
      [self messageWithNSString:@"now merge"];
      [self messageWithNSString:JreStrcat("$$", @"  index: ", [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) segString])];
    }
    while (YES) {
      if ([self maybeStallWithOrgApacheLuceneIndexIndexWriter:writer] == NO) {
        break;
      }
      OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) getNextMerge];
      if (merge == nil) {
        if ([self verbose]) {
          [self messageWithNSString:@"  no more merges pending; now return"];
        }
        return;
      }
      OrgApacheLuceneIndexConcurrentMergeScheduler_updateIOThrottleWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
      jboolean success = NO;
      @try {
        if ([self verbose]) {
          [self messageWithNSString:JreStrcat("$$", @"  consider merge ", [writer segStringWithJavaLangIterable:((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_])];
        }
        OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *merger = [self getMergeThreadWithOrgApacheLuceneIndexIndexWriter:writer withOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
        [((id<JavaUtilList>) nil_chk(mergeThreads_)) addWithId:merger];
        if ([self verbose]) {
          [self messageWithNSString:JreStrcat("$$C", @"    launch new thread [", [((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(merger)) getName], ']')];
        }
        [((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(merger)) start];
        [self updateMergeThreads];
        success = YES;
      }
      @finally {
        if (!success) {
          [writer mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
        }
      }
    }
  }
}

- (jboolean)maybeStallWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  @synchronized(self) {
    jlong startStallTime = 0;
    while ([((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) hasPendingMerges] && [self mergeThreadCount] >= maxMergeCount_) {
      if ([((id<JavaUtilList>) nil_chk(mergeThreads_)) containsWithId:JavaLangThread_currentThread()]) {
        return NO;
      }
      if ([self verbose] && startStallTime == 0) {
        [self messageWithNSString:@"    too many merges; stalling..."];
      }
      startStallTime = JavaLangSystem_currentTimeMillis();
      [self doStall];
    }
    if ([self verbose] && startStallTime != 0) {
      [self messageWithNSString:JreStrcat("$J$", @"  stalled for ", (JavaLangSystem_currentTimeMillis() - startStallTime), @" msec")];
    }
    return YES;
  }
}

- (void)doStall {
  @synchronized(self) {
    @try {
      [self waitWithLong:250];
    }
    @catch (JavaLangInterruptedException *ie) {
      @throw [new_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie) autorelease];
    }
  }
}

- (void)doMergeWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
      withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) mergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
}

- (OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *)getMergeThreadWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                                                   withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  @synchronized(self) {
    OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *thread = [new_OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, writer, merge) autorelease];
    [thread setDaemonWithBoolean:YES];
    [thread setNameWithNSString:JreStrcat("$I", @"Lucene Merge Thread #", mergeThreadCount_++)];
    return thread;
  }
}

- (void)handleMergeExceptionWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
                                        withJavaLangThrowable:(JavaLangThrowable *)exc {
  @throw [new_OrgApacheLuceneIndexMergePolicy_MergeException_initWithJavaLangThrowable_withOrgApacheLuceneStoreDirectory_(exc, dir) autorelease];
}

- (void)setSuppressExceptions {
  suppressExceptions_ = YES;
}

- (void)clearSuppressExceptions {
  suppressExceptions_ = NO;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithNSString_(JreStrcat("$$", [[self getClass] getSimpleName], @": ")) autorelease];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxThreadCount="])) appendWithInt:maxThreadCount_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxMergeCount="])) appendWithInt:maxMergeCount_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"ioThrottle="])) appendWithBoolean:doAutoIOThrottle_];
  return [sb description];
}

- (jboolean)isBacklogWithLong:(jlong)now
withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  return OrgApacheLuceneIndexConcurrentMergeScheduler_isBacklogWithLong_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, now, merge);
}

- (void)updateIOThrottleWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)newMerge {
  OrgApacheLuceneIndexConcurrentMergeScheduler_updateIOThrottleWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, newMerge);
}

- (void)targetMBPerSecChanged {
}

+ (jdouble)nsToSecWithLong:(jlong)ns {
  return OrgApacheLuceneIndexConcurrentMergeScheduler_nsToSecWithLong_(ns);
}

+ (jdouble)bytesToMBWithLong:(jlong)bytes {
  return OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(bytes);
}

- (void)dealloc {
  RELEASE_(mergeThreads_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ConcurrentMergeScheduler", NULL, 0x1, NULL, NULL },
    { "setMaxMergesAndThreadsWithInt:withInt:", "setMaxMergesAndThreads", "V", 0x21, NULL, NULL },
    { "setDefaultMaxMergesAndThreadsWithBoolean:", "setDefaultMaxMergesAndThreads", "V", 0x21, NULL, NULL },
    { "setForceMergeMBPerSecWithDouble:", "setForceMergeMBPerSec", "V", 0x21, NULL, NULL },
    { "getForceMergeMBPerSec", NULL, "D", 0x21, NULL, NULL },
    { "enableAutoIOThrottle", NULL, "V", 0x21, NULL, NULL },
    { "disableAutoIOThrottle", NULL, "V", 0x21, NULL, NULL },
    { "getAutoIOThrottle", NULL, "Z", 0x21, NULL, NULL },
    { "getIORateLimitMBPerSec", NULL, "D", 0x21, NULL, NULL },
    { "getMaxThreadCount", NULL, "I", 0x21, NULL, NULL },
    { "getMaxMergeCount", NULL, "I", 0x21, NULL, NULL },
    { "removeMergeThread", NULL, "V", 0x20, NULL, NULL },
    { "updateMergeThreads", NULL, "V", 0x24, NULL, NULL },
    { "initDynamicDefaultsWithOrgApacheLuceneIndexIndexWriter:", "initDynamicDefaults", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "rateToStringWithDouble:", "rateToString", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "sync", NULL, "V", 0x1, NULL, NULL },
    { "mergeThreadCount", NULL, "I", 0x21, NULL, NULL },
    { "mergeWithOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexMergeTriggerEnum:withBoolean:", "merge", "V", 0x21, "Ljava.io.IOException;", NULL },
    { "maybeStallWithOrgApacheLuceneIndexIndexWriter:", "maybeStall", "Z", 0x24, NULL, NULL },
    { "doStall", NULL, "V", 0x24, NULL, NULL },
    { "doMergeWithOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexMergePolicy_OneMerge:", "doMerge", "V", 0x4, "Ljava.io.IOException;", NULL },
    { "getMergeThreadWithOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexMergePolicy_OneMerge:", "getMergeThread", "Lorg.apache.lucene.index.ConcurrentMergeScheduler$MergeThread;", 0x24, "Ljava.io.IOException;", NULL },
    { "handleMergeExceptionWithOrgApacheLuceneStoreDirectory:withJavaLangThrowable:", "handleMergeException", "V", 0x4, NULL, NULL },
    { "setSuppressExceptions", NULL, "V", 0x0, NULL, NULL },
    { "clearSuppressExceptions", NULL, "V", 0x0, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isBacklogWithLong:withOrgApacheLuceneIndexMergePolicy_OneMerge:", "isBacklog", "Z", 0x2, NULL, NULL },
    { "updateIOThrottleWithOrgApacheLuceneIndexMergePolicy_OneMerge:", "updateIOThrottle", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "targetMBPerSecChanged", NULL, "V", 0x4, NULL, NULL },
    { "nsToSecWithLong:", "nsToSec", "D", 0xa, NULL, NULL },
    { "bytesToMBWithLong:", "bytesToMB", "D", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "AUTO_DETECT_MERGES_AND_THREADS", "AUTO_DETECT_MERGES_AND_THREADS", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS },
    { "DEFAULT_CPU_CORE_COUNT_PROPERTY_", NULL, 0x19, "Ljava.lang.String;", &OrgApacheLuceneIndexConcurrentMergeScheduler_DEFAULT_CPU_CORE_COUNT_PROPERTY_, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_SPINS_PROPERTY_", NULL, 0x19, "Ljava.lang.String;", &OrgApacheLuceneIndexConcurrentMergeScheduler_DEFAULT_SPINS_PROPERTY_, NULL, .constantValue.asLong = 0 },
    { "mergeThreads_", NULL, 0x14, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/index/ConcurrentMergeScheduler$MergeThread;>;", .constantValue.asLong = 0 },
    { "maxThreadCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "maxMergeCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mergeThreadCount_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "MIN_MERGE_MB_PER_SEC", "MIN_MERGE_MB_PER_SEC", 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_MERGE_MB_PER_SEC },
    { "MAX_MERGE_MB_PER_SEC", "MAX_MERGE_MB_PER_SEC", 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgApacheLuceneIndexConcurrentMergeScheduler_MAX_MERGE_MB_PER_SEC },
    { "START_MB_PER_SEC", "START_MB_PER_SEC", 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgApacheLuceneIndexConcurrentMergeScheduler_START_MB_PER_SEC },
    { "MIN_BIG_MERGE_MB", "MIN_BIG_MERGE_MB", 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_BIG_MERGE_MB },
    { "targetMBPerSec_", NULL, 0x4, "D", NULL, NULL, .constantValue.asLong = 0 },
    { "doAutoIOThrottle_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "forceMergeMBPerSec_", NULL, 0x2, "D", NULL, NULL, .constantValue.asLong = 0 },
    { "suppressExceptions_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.index.ConcurrentMergeScheduler$MergeThread;"};
  static const J2ObjcClassInfo _OrgApacheLuceneIndexConcurrentMergeScheduler = { 2, "ConcurrentMergeScheduler", "org.apache.lucene.index", NULL, 0x1, 32, methods, 15, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneIndexConcurrentMergeScheduler;
}

@end

void OrgApacheLuceneIndexConcurrentMergeScheduler_init(OrgApacheLuceneIndexConcurrentMergeScheduler *self) {
  OrgApacheLuceneIndexMergeScheduler_init(self);
  JreStrongAssignAndConsume(&self->mergeThreads_, new_JavaUtilArrayList_init());
  self->maxThreadCount_ = OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS;
  self->maxMergeCount_ = OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS;
  self->targetMBPerSec_ = OrgApacheLuceneIndexConcurrentMergeScheduler_START_MB_PER_SEC;
  self->doAutoIOThrottle_ = YES;
  self->forceMergeMBPerSec_ = JavaLangDouble_POSITIVE_INFINITY;
}

OrgApacheLuceneIndexConcurrentMergeScheduler *new_OrgApacheLuceneIndexConcurrentMergeScheduler_init() {
  OrgApacheLuceneIndexConcurrentMergeScheduler *self = [OrgApacheLuceneIndexConcurrentMergeScheduler alloc];
  OrgApacheLuceneIndexConcurrentMergeScheduler_init(self);
  return self;
}

void OrgApacheLuceneIndexConcurrentMergeScheduler_initDynamicDefaultsWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexConcurrentMergeScheduler *self, OrgApacheLuceneIndexIndexWriter *writer) {
  @synchronized(self) {
    if (self->maxThreadCount_ == OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS) {
      jboolean spins = OrgApacheLuceneUtilIOUtils_spinsWithOrgApacheLuceneStoreDirectory_([((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) getDirectory]);
      @try {
        NSString *value = JavaLangSystem_getPropertyWithNSString_(OrgApacheLuceneIndexConcurrentMergeScheduler_DEFAULT_SPINS_PROPERTY_);
        if (value != nil) {
          spins = JavaLangBoolean_parseBooleanWithNSString_(value);
        }
      }
      @catch (JavaLangThrowable *ignored) {
      }
      [self setDefaultMaxMergesAndThreadsWithBoolean:spins];
      if ([self verbose]) {
        [self messageWithNSString:JreStrcat("$Z$I$I", @"initDynamicDefaults spins=", spins, @" maxThreadCount=", self->maxThreadCount_, @" maxMergeCount=", self->maxMergeCount_)];
      }
    }
  }
}

NSString *OrgApacheLuceneIndexConcurrentMergeScheduler_rateToStringWithDouble_(jdouble mbPerSec) {
  OrgApacheLuceneIndexConcurrentMergeScheduler_initialize();
  if (mbPerSec == 0.0) {
    return @"stopped";
  }
  else if (mbPerSec == JavaLangDouble_POSITIVE_INFINITY) {
    return @"unlimited";
  }
  else {
    return NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"%.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(mbPerSec) } count:1 type:NSObject_class_()]);
  }
}

jboolean OrgApacheLuceneIndexConcurrentMergeScheduler_isBacklogWithLong_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler *self, jlong now, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  jdouble mergeMB = OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(JreLoadVolatileLong(&((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->estimatedMergeBytes_));
  for (OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread * __strong mergeThread in nil_chk(self->mergeThreads_)) {
    jlong mergeStartNS = JreLoadVolatileLong(&((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mergeThread))->merge_))->mergeStartNS_);
    if ([mergeThread isAlive] && mergeThread->merge_ != merge && mergeStartNS != -1 && JreLoadVolatileLong(&mergeThread->merge_->estimatedMergeBytes_) >= OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_BIG_MERGE_MB * 1024 * 1024 && OrgApacheLuceneIndexConcurrentMergeScheduler_nsToSecWithLong_(now - mergeStartNS) > 3.0) {
      jdouble otherMergeMB = OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(JreLoadVolatileLong(&mergeThread->merge_->estimatedMergeBytes_));
      jdouble ratio = otherMergeMB / mergeMB;
      if (ratio > 0.3 && ratio < 3.0) {
        return YES;
      }
    }
  }
  return NO;
}

void OrgApacheLuceneIndexConcurrentMergeScheduler_updateIOThrottleWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler *self, OrgApacheLuceneIndexMergePolicy_OneMerge *newMerge) {
  @synchronized(self) {
    if (self->doAutoIOThrottle_ == NO) {
      return;
    }
    jdouble mergeMB = OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(JreLoadVolatileLong(&((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(newMerge))->estimatedMergeBytes_));
    if (mergeMB < OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_BIG_MERGE_MB) {
      return;
    }
    jlong now = JavaLangSystem_nanoTime();
    jboolean newBacklog = OrgApacheLuceneIndexConcurrentMergeScheduler_isBacklogWithLong_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, now, newMerge);
    jboolean curBacklog = NO;
    if (newBacklog == NO) {
      if ([((id<JavaUtilList>) nil_chk(self->mergeThreads_)) size] > self->maxThreadCount_) {
        curBacklog = YES;
      }
      else {
        for (OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread * __strong mergeThread in self->mergeThreads_) {
          if (OrgApacheLuceneIndexConcurrentMergeScheduler_isBacklogWithLong_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, now, ((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mergeThread))->merge_)) {
            curBacklog = YES;
            break;
          }
        }
      }
    }
    jdouble curMBPerSec = self->targetMBPerSec_;
    if (newBacklog) {
      JreTimesAssignDoubleD(&self->targetMBPerSec_, 1.20);
      if (self->targetMBPerSec_ > OrgApacheLuceneIndexConcurrentMergeScheduler_MAX_MERGE_MB_PER_SEC) {
        self->targetMBPerSec_ = OrgApacheLuceneIndexConcurrentMergeScheduler_MAX_MERGE_MB_PER_SEC;
      }
      if ([self verbose]) {
        if (curMBPerSec == self->targetMBPerSec_) {
          [self messageWithNSString:NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"io throttle: new merge backlog; leave IO rate at ceiling %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(self->targetMBPerSec_) } count:1 type:NSObject_class_()])];
        }
        else {
          [self messageWithNSString:NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"io throttle: new merge backlog; increase IO rate to %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(self->targetMBPerSec_) } count:1 type:NSObject_class_()])];
        }
      }
    }
    else if (curBacklog) {
      if ([self verbose]) {
        [self messageWithNSString:NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"io throttle: current merge backlog; leave IO rate at %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(self->targetMBPerSec_) } count:1 type:NSObject_class_()])];
      }
    }
    else {
      JreDivideAssignDoubleD(&self->targetMBPerSec_, 1.10);
      if (self->targetMBPerSec_ < OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_MERGE_MB_PER_SEC) {
        self->targetMBPerSec_ = OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_MERGE_MB_PER_SEC;
      }
      if ([self verbose]) {
        if (curMBPerSec == self->targetMBPerSec_) {
          [self messageWithNSString:NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"io throttle: no merge backlog; leave IO rate at floor %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(self->targetMBPerSec_) } count:1 type:NSObject_class_()])];
        }
        else {
          [self messageWithNSString:NSString_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT_), @"io throttle: no merge backlog; decrease IO rate to %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(self->targetMBPerSec_) } count:1 type:NSObject_class_()])];
        }
      }
    }
    jdouble rate;
    if (newMerge->maxNumSegments_ != -1) {
      rate = self->forceMergeMBPerSec_;
    }
    else {
      rate = self->targetMBPerSec_;
    }
    [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(newMerge->rateLimiter_)) setMBPerSecWithDouble:rate];
    [self targetMBPerSecChanged];
  }
}

jdouble OrgApacheLuceneIndexConcurrentMergeScheduler_nsToSecWithLong_(jlong ns) {
  OrgApacheLuceneIndexConcurrentMergeScheduler_initialize();
  return ns / 1000000000.0;
}

jdouble OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(jlong bytes) {
  OrgApacheLuceneIndexConcurrentMergeScheduler_initialize();
  return bytes / 1024. / 1024.;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexConcurrentMergeScheduler)

@implementation OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread

- (instancetype)initWithOrgApacheLuceneIndexConcurrentMergeScheduler:(OrgApacheLuceneIndexConcurrentMergeScheduler *)outer$
                                 withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                        withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, outer$, writer, merge);
  return self;
}

- (jint)compareToWithId:(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *)other {
  check_class_cast(other, [OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread class]);
  return JavaLangLong_compareWithLong_withLong_(JreLoadVolatileLong(&((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(other))->merge_))->estimatedMergeBytes_), JreLoadVolatileLong(&merge_->estimatedMergeBytes_));
}

- (void)run {
  @try {
    if ([this$0_ verbose]) {
      [this$0_ messageWithNSString:@"  merge thread: start"];
    }
    [this$0_ doMergeWithOrgApacheLuceneIndexIndexWriter:writer_ withOrgApacheLuceneIndexMergePolicy_OneMerge:merge_];
    if ([this$0_ verbose]) {
      [this$0_ messageWithNSString:@"  merge thread: done"];
    }
    @try {
      [this$0_ mergeWithOrgApacheLuceneIndexIndexWriter:writer_ withOrgApacheLuceneIndexMergeTriggerEnum:JreLoadStatic(OrgApacheLuceneIndexMergeTriggerEnum, MERGE_FINISHED) withBoolean:YES];
    }
    @catch (OrgApacheLuceneStoreAlreadyClosedException *ace) {
    }
    @catch (JavaIoIOException *ioe) {
      @throw [new_JavaLangRuntimeException_initWithJavaLangThrowable_(ioe) autorelease];
    }
  }
  @catch (JavaLangThrowable *exc) {
    if ([exc isKindOfClass:[OrgApacheLuceneIndexMergePolicy_MergeAbortedException class]]) {
    }
    else if (this$0_->suppressExceptions_ == NO) {
      [this$0_ handleMergeExceptionWithOrgApacheLuceneStoreDirectory:[((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer_)) getDirectory] withJavaLangThrowable:exc];
    }
  }
  @finally {
    @synchronized(this$0_) {
      [this$0_ removeMergeThread];
      [this$0_ updateMergeThreads];
      [this$0_ notifyAll];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(writer_);
  RELEASE_(merge_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexConcurrentMergeScheduler:withOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexMergePolicy_OneMerge:", "MergeThread", NULL, 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "run", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.lucene.index.ConcurrentMergeScheduler;", NULL, NULL, .constantValue.asLong = 0 },
    { "writer_", NULL, 0x10, "Lorg.apache.lucene.index.IndexWriter;", NULL, NULL, .constantValue.asLong = 0 },
    { "merge_", NULL, 0x10, "Lorg.apache.lucene.index.MergePolicy$OneMerge;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread = { 2, "MergeThread", "org.apache.lucene.index", "ConcurrentMergeScheduler", 0x4, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Thread;Ljava/lang/Comparable<Lorg/apache/lucene/index/ConcurrentMergeScheduler$MergeThread;>;" };
  return &_OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread;
}

@end

void OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *self, OrgApacheLuceneIndexConcurrentMergeScheduler *outer$, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaLangThread_init(self);
  JreStrongAssign(&self->writer_, writer);
  JreStrongAssign(&self->merge_, merge);
}

OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *new_OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler *outer$, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *self = [OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread alloc];
  OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, outer$, writer, merge);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread)
