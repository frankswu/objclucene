//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Throwable.h"
#include "java/text/NumberFormat.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/index/AbortingException.h"
#include "org/apache/lucene/index/BufferedUpdates.h"
#include "org/apache/lucene/index/DefaultIndexingChain.h"
#include "org/apache/lucene/index/DocConsumer.h"
#include "org/apache/lucene/index/DocumentsWriterDeleteQueue.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FrozenBufferedUpdates.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/TrackingDirectoryWrapper.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/Counter.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/Version.h"

#define OrgApacheLuceneIndexDocumentsWriterPerThread_INFO_VERBOSE NO

@interface OrgApacheLuceneIndexDocumentsWriterPerThread () {
 @public
  OrgApacheLuceneIndexSegmentInfo *segmentInfo_;
  OrgApacheLuceneIndexFieldInfos_Builder *fieldInfos_;
  OrgApacheLuceneUtilInfoStream *infoStream_;
  jint numDocsInRAM_;
  OrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice *deleteSlice_;
  JavaTextNumberFormat *nf_;
  JavaUtilConcurrentAtomicAtomicLong *pendingNumDocs_;
  OrgApacheLuceneIndexLiveIndexWriterConfig *indexWriterConfig_;
  jboolean enableTestPoints_;
  OrgApacheLuceneIndexIndexWriter *indexWriter_;
  id<JavaUtilSet> filesToDelete_;
}

- (void)reserveOneDoc;

- (void)finishDocumentWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, segmentInfo_, OrgApacheLuceneIndexSegmentInfo *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, fieldInfos_, OrgApacheLuceneIndexFieldInfos_Builder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, infoStream_, OrgApacheLuceneUtilInfoStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, deleteSlice_, OrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, nf_, JavaTextNumberFormat *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, pendingNumDocs_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, indexWriterConfig_, OrgApacheLuceneIndexLiveIndexWriterConfig *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, indexWriter_, OrgApacheLuceneIndexIndexWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, filesToDelete_, id<JavaUtilSet>)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, INFO_VERBOSE, jboolean)

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterPerThread_testPointWithNSString_(OrgApacheLuceneIndexDocumentsWriterPerThread *self, NSString *message);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterPerThread_reserveOneDoc(OrgApacheLuceneIndexDocumentsWriterPerThread *self);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterPerThread_finishDocumentWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexDocumentsWriterPerThread *self, OrgApacheLuceneIndexTerm *delTerm);

@interface OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment ()

- (instancetype)initWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)segmentInfo
                           withOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fieldInfos
                      withOrgApacheLuceneIndexBufferedUpdates:(OrgApacheLuceneIndexBufferedUpdates *)segmentUpdates
                           withOrgApacheLuceneUtilMutableBits:(id<OrgApacheLuceneUtilMutableBits>)liveDocs
                                                      withInt:(jint)delCount;

@end

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *self, OrgApacheLuceneIndexSegmentCommitInfo *segmentInfo, OrgApacheLuceneIndexFieldInfos *fieldInfos, OrgApacheLuceneIndexBufferedUpdates *segmentUpdates, id<OrgApacheLuceneUtilMutableBits> liveDocs, jint delCount);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *new_OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(OrgApacheLuceneIndexSegmentCommitInfo *segmentInfo, OrgApacheLuceneIndexFieldInfos *fieldInfos, OrgApacheLuceneIndexBufferedUpdates *segmentUpdates, id<OrgApacheLuceneUtilMutableBits> liveDocs, jint delCount) NS_RETURNS_RETAINED;

@interface OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator : OrgApacheLuceneUtilIntBlockPool_Allocator {
 @public
  OrgApacheLuceneUtilCounter *bytesUsed_;
}

- (instancetype)initWithOrgApacheLuceneUtilCounter:(OrgApacheLuceneUtilCounter *)bytesUsed;

- (IOSIntArray *)getIntBlock;

- (void)recycleIntBlocksWithIntArray2:(IOSObjectArray *)blocks
                              withInt:(jint)offset
                              withInt:(jint)length;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator, bytesUsed_, OrgApacheLuceneUtilCounter *)

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator *self, OrgApacheLuceneUtilCounter *bytesUsed);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator *new_OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(OrgApacheLuceneUtilCounter *bytesUsed) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator)

@interface OrgApacheLuceneIndexDocumentsWriterPerThread_$1 : OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain

- (OrgApacheLuceneIndexDocConsumer *)getChainWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)documentsWriterPerThread;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDocumentsWriterPerThread_$1)

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterPerThread_$1_init(OrgApacheLuceneIndexDocumentsWriterPerThread_$1 *self);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterPerThread_$1 *new_OrgApacheLuceneIndexDocumentsWriterPerThread_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexDocumentsWriterPerThread_$1)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexDocumentsWriterPerThread)

OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain *OrgApacheLuceneIndexDocumentsWriterPerThread_defaultIndexingChain_;

@implementation OrgApacheLuceneIndexDocumentsWriterPerThread

- (void)abort {
  aborted_ = YES;
  @try {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWPT"]) {
      [infoStream_ messageWithNSString:@"DWPT" withNSString:@"now abort"];
    }
    @try {
      [((OrgApacheLuceneIndexDocConsumer *) nil_chk(consumer_)) abort];
    }
    @catch (JavaLangThrowable *t) {
    }
    [((OrgApacheLuceneIndexBufferedUpdates *) nil_chk(pendingUpdates_)) clear];
  }
  @finally {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWPT"]) {
      [infoStream_ messageWithNSString:@"DWPT" withNSString:@"done abort"];
    }
  }
}

- (instancetype)initWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                           withNSString:(NSString *)segmentName
                      withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directoryOrig
                      withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
          withOrgApacheLuceneIndexLiveIndexWriterConfig:(OrgApacheLuceneIndexLiveIndexWriterConfig *)indexWriterConfig
                      withOrgApacheLuceneUtilInfoStream:(OrgApacheLuceneUtilInfoStream *)infoStream
     withOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)deleteQueue
             withOrgApacheLuceneIndexFieldInfos_Builder:(OrgApacheLuceneIndexFieldInfos_Builder *)fieldInfos
                 withJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)pendingNumDocs
                                            withBoolean:(jboolean)enableTestPoints {
  OrgApacheLuceneIndexDocumentsWriterPerThread_initWithOrgApacheLuceneIndexIndexWriter_withNSString_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_withOrgApacheLuceneIndexFieldInfos_Builder_withJavaUtilConcurrentAtomicAtomicLong_withBoolean_(self, writer, segmentName, directoryOrig, directory, indexWriterConfig, infoStream, deleteQueue, fieldInfos, pendingNumDocs, enableTestPoints);
  return self;
}

- (OrgApacheLuceneIndexFieldInfos_Builder *)getFieldInfosBuilder {
  return fieldInfos_;
}

- (void)testPointWithNSString:(NSString *)message {
  OrgApacheLuceneIndexDocumentsWriterPerThread_testPointWithNSString_(self, message);
}

- (void)reserveOneDoc {
  OrgApacheLuceneIndexDocumentsWriterPerThread_reserveOneDoc(self);
}

- (void)updateDocumentWithJavaLangIterable:(id<JavaLangIterable>)doc
       withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
              withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm {
  OrgApacheLuceneIndexDocumentsWriterPerThread_testPointWithNSString_(self, @"DocumentsWriterPerThread addDocument start");
  JreAssert((deleteQueue_ != nil), (@"org/apache/lucene/index/DocumentsWriterPerThread.java:217 condition failed: assert deleteQueue != null;"));
  OrgApacheLuceneIndexDocumentsWriterPerThread_reserveOneDoc(self);
  JreStrongAssign(&((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(docState_))->doc_, doc);
  JreStrongAssign(&docState_->analyzer_, analyzer);
  docState_->docID_ = numDocsInRAM_;
  jboolean success = NO;
  @try {
    @try {
      [((OrgApacheLuceneIndexDocConsumer *) nil_chk(consumer_)) processDocument];
    }
    @finally {
      [docState_ clear];
    }
    success = YES;
  }
  @finally {
    if (!success) {
      [self deleteDocIDWithInt:docState_->docID_];
      numDocsInRAM_++;
    }
  }
  OrgApacheLuceneIndexDocumentsWriterPerThread_finishDocumentWithOrgApacheLuceneIndexTerm_(self, delTerm);
}

- (jint)updateDocumentsWithJavaLangIterable:(id<JavaLangIterable>)docs
        withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
               withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm {
  OrgApacheLuceneIndexDocumentsWriterPerThread_testPointWithNSString_(self, @"DocumentsWriterPerThread addDocuments start");
  JreAssert((deleteQueue_ != nil), (@"org/apache/lucene/index/DocumentsWriterPerThread.java:251 condition failed: assert deleteQueue != null;"));
  JreStrongAssign(&((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(docState_))->analyzer_, analyzer);
  jint docCount = 0;
  jboolean allDocsIndexed = NO;
  @try {
    for (id<JavaLangIterable> __strong doc in nil_chk(docs)) {
      OrgApacheLuceneIndexDocumentsWriterPerThread_reserveOneDoc(self);
      JreStrongAssign(&docState_->doc_, doc);
      docState_->docID_ = numDocsInRAM_;
      docCount++;
      jboolean success = NO;
      @try {
        [((OrgApacheLuceneIndexDocConsumer *) nil_chk(consumer_)) processDocument];
        success = YES;
      }
      @finally {
        if (!success) {
          numDocsInRAM_++;
        }
      }
      OrgApacheLuceneIndexDocumentsWriterPerThread_finishDocumentWithOrgApacheLuceneIndexTerm_(self, nil);
    }
    allDocsIndexed = YES;
    if (delTerm != nil) {
      [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(deleteQueue_)) addWithOrgApacheLuceneIndexTerm:delTerm withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice:deleteSlice_];
      JreAssert(([((OrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice *) nil_chk(deleteSlice_)) isTailItemWithId:delTerm]), (@"expected the delete term as the tail item"));
      [deleteSlice_ applyWithOrgApacheLuceneIndexBufferedUpdates:pendingUpdates_ withInt:numDocsInRAM_ - docCount];
    }
  }
  @finally {
    if (!allDocsIndexed && !aborted_) {
      jint docID = numDocsInRAM_ - 1;
      jint endDocID = docID - docCount;
      while (docID > endDocID) {
        [self deleteDocIDWithInt:docID];
        docID--;
      }
    }
    [docState_ clear];
  }
  return docCount;
}

- (void)finishDocumentWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm {
  OrgApacheLuceneIndexDocumentsWriterPerThread_finishDocumentWithOrgApacheLuceneIndexTerm_(self, delTerm);
}

- (void)deleteDocIDWithInt:(jint)docIDUpto {
  [((OrgApacheLuceneIndexBufferedUpdates *) nil_chk(pendingUpdates_)) addDocIDWithInt:docIDUpto];
}

- (jint)numDeleteTerms {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(((OrgApacheLuceneIndexBufferedUpdates *) nil_chk(pendingUpdates_))->numTermDeletes_)) get];
}

- (jint)getNumDocsInRAM {
  return numDocsInRAM_;
}

- (OrgApacheLuceneIndexFrozenBufferedUpdates *)prepareFlush {
  JreAssert((numDocsInRAM_ > 0), (@"org/apache/lucene/index/DocumentsWriterPerThread.java:375 condition failed: assert numDocsInRAM > 0;"));
  OrgApacheLuceneIndexFrozenBufferedUpdates *globalUpdates = [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(deleteQueue_)) freezeGlobalBufferWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice:deleteSlice_];
  if (deleteSlice_ != nil) {
    [deleteSlice_ applyWithOrgApacheLuceneIndexBufferedUpdates:pendingUpdates_ withInt:numDocsInRAM_];
    JreAssert(([deleteSlice_ isEmpty]), (@"org/apache/lucene/index/DocumentsWriterPerThread.java:382 condition failed: assert deleteSlice.isEmpty();"));
    [deleteSlice_ reset];
  }
  return globalUpdates;
}

- (OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *)flush {
  JreAssert((numDocsInRAM_ > 0), (@"org/apache/lucene/index/DocumentsWriterPerThread.java:390 condition failed: assert numDocsInRAM > 0;"));
  JreAssert(([((OrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice *) nil_chk(deleteSlice_)) isEmpty]), (@"all deletes must be applied in prepareFlush"));
  [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(segmentInfo_)) setMaxDocWithInt:numDocsInRAM_];
  OrgApacheLuceneIndexSegmentWriteState *flushState = [new_OrgApacheLuceneIndexSegmentWriteState_initWithOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneStoreIOContext_(infoStream_, directory_, segmentInfo_, [((OrgApacheLuceneIndexFieldInfos_Builder *) nil_chk(fieldInfos_)) finish], pendingUpdates_, [new_OrgApacheLuceneStoreIOContext_initWithOrgApacheLuceneStoreFlushInfo_([new_OrgApacheLuceneStoreFlushInfo_initWithInt_withLong_(numDocsInRAM_, [self bytesUsed]) autorelease]) autorelease]) autorelease];
  jdouble startMBUsed = [self bytesUsed] / 1024. / 1024.;
  if ([((id<JavaUtilList>) nil_chk(((OrgApacheLuceneIndexBufferedUpdates *) nil_chk(pendingUpdates_))->docIDs_)) size] > 0) {
    JreStrongAssign(&flushState->liveDocs_, [((OrgApacheLuceneCodecsLiveDocsFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk(codec_)) liveDocsFormat])) newLiveDocsWithInt:numDocsInRAM_]);
    for (JavaLangInteger *boxed__ in pendingUpdates_->docIDs_) {
      jint delDocID = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      [((id<OrgApacheLuceneUtilMutableBits>) nil_chk(flushState->liveDocs_)) clearWithInt:delDocID];
    }
    flushState->delCountOnFlush_ = [pendingUpdates_->docIDs_ size];
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(pendingUpdates_->bytesUsed_)) addAndGetWithLong:-[pendingUpdates_->docIDs_ size] * JreLoadStatic(OrgApacheLuceneIndexBufferedUpdates, BYTES_PER_DEL_DOCID_)];
    [pendingUpdates_->docIDs_ clear];
  }
  if (aborted_) {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWPT"]) {
      [infoStream_ messageWithNSString:@"DWPT" withNSString:@"flush: skip because aborting is set"];
    }
    return nil;
  }
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWPT"]) {
    [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$$$I", @"flush postings as segment ", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(flushState->segmentInfo_))->name_, @" numDocs=", numDocsInRAM_)];
  }
  @try {
    [((OrgApacheLuceneIndexDocConsumer *) nil_chk(consumer_)) flushWithOrgApacheLuceneIndexSegmentWriteState:flushState];
    [((id<JavaUtilMap>) nil_chk(pendingUpdates_->terms_)) clear];
    [segmentInfo_ setFilesWithJavaUtilCollection:[new_JavaUtilHashSet_initWithJavaUtilCollection_([((OrgApacheLuceneStoreTrackingDirectoryWrapper *) nil_chk(directory_)) getCreatedFiles]) autorelease]];
    OrgApacheLuceneIndexSegmentCommitInfo *segmentInfoPerCommit = [new_OrgApacheLuceneIndexSegmentCommitInfo_initWithOrgApacheLuceneIndexSegmentInfo_withInt_withLong_withLong_withLong_(segmentInfo_, 0, -1LL, -1LL, -1LL) autorelease];
    if ([infoStream_ isEnabledWithNSString:@"DWPT"]) {
      [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$I$", @"new segment has ", (flushState->liveDocs_ == nil ? 0 : flushState->delCountOnFlush_), @" deleted docs")];
      [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$$$$$$$$$$", @"new segment has ", ([((OrgApacheLuceneIndexFieldInfos *) nil_chk(flushState->fieldInfos_)) hasVectors] ? @"vectors" : @"no vectors"), @"; ", ([flushState->fieldInfos_ hasNorms] ? @"norms" : @"no norms"), @"; ", ([flushState->fieldInfos_ hasDocValues] ? @"docValues" : @"no docValues"), @"; ", ([flushState->fieldInfos_ hasProx] ? @"prox" : @"no prox"), @"; ", ([flushState->fieldInfos_ hasFreq] ? @"freqs" : @"no freqs"))];
      [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$@", @"flushedFiles=", [segmentInfoPerCommit files])];
      [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$@", @"flushed codec=", codec_)];
    }
    OrgApacheLuceneIndexBufferedUpdates *segmentDeletes;
    if ([((id<JavaUtilMap>) nil_chk(pendingUpdates_->queries_)) isEmpty] && [((id<JavaUtilMap>) nil_chk(pendingUpdates_->numericUpdates_)) isEmpty] && [((id<JavaUtilMap>) nil_chk(pendingUpdates_->binaryUpdates_)) isEmpty]) {
      [pendingUpdates_ clear];
      segmentDeletes = nil;
    }
    else {
      segmentDeletes = pendingUpdates_;
    }
    if ([infoStream_ isEnabledWithNSString:@"DWPT"]) {
      jdouble newSegmentSize = [segmentInfoPerCommit sizeInBytes] / 1024. / 1024.;
      [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$$$$$$$$", @"flushed: segment=", segmentInfo_->name_, @" ramUsed=", [((JavaTextNumberFormat *) nil_chk(nf_)) formatWithDouble:startMBUsed], @" MB newFlushedSize=", [nf_ formatWithDouble:newSegmentSize], @" MB docs/MB=", [nf_ formatWithDouble:[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(flushState->segmentInfo_)) maxDoc] / newSegmentSize])];
    }
    JreAssert((segmentInfo_ != nil), (@"org/apache/lucene/index/DocumentsWriterPerThread.java:455 condition failed: assert segmentInfo != null;"));
    OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *fs = [new_OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(segmentInfoPerCommit, flushState->fieldInfos_, segmentDeletes, flushState->liveDocs_, flushState->delCountOnFlush_) autorelease];
    [self sealFlushedSegmentWithOrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment:fs];
    return fs;
  }
  @catch (JavaLangThrowable *th) {
    [self abort];
    @throw OrgApacheLuceneIndexAbortingException_wrapWithJavaLangThrowable_(th);
  }
}

- (id<JavaUtilSet>)pendingFilesToDelete {
  return filesToDelete_;
}

- (void)sealFlushedSegmentWithOrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment:(OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *)flushedSegment {
  JreAssert((flushedSegment != nil), (@"org/apache/lucene/index/DocumentsWriterPerThread.java:478 condition failed: assert flushedSegment != null;"));
  OrgApacheLuceneIndexSegmentCommitInfo *newSegment = ((OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *) nil_chk(flushedSegment))->segmentInfo_;
  OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(newSegment))->info_, OrgApacheLuceneIndexIndexWriter_SOURCE_FLUSH_);
  OrgApacheLuceneStoreIOContext *context = [new_OrgApacheLuceneStoreIOContext_initWithOrgApacheLuceneStoreFlushInfo_([new_OrgApacheLuceneStoreFlushInfo_initWithInt_withLong_([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(newSegment->info_)) maxDoc], [newSegment sizeInBytes]) autorelease]) autorelease];
  jboolean success = NO;
  @try {
    if ([((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(indexWriterConfig_)) getUseCompoundFile]) {
      id<JavaUtilSet> originalFiles = [newSegment->info_ files];
      [((OrgApacheLuceneIndexIndexWriter *) nil_chk(indexWriter_)) createCompoundFileWithOrgApacheLuceneUtilInfoStream:infoStream_ withOrgApacheLuceneStoreTrackingDirectoryWrapper:[new_OrgApacheLuceneStoreTrackingDirectoryWrapper_initWithOrgApacheLuceneStoreDirectory_(directory_) autorelease] withOrgApacheLuceneIndexSegmentInfo:newSegment->info_ withOrgApacheLuceneStoreIOContext:context];
      [((id<JavaUtilSet>) nil_chk(filesToDelete_)) addAllWithJavaUtilCollection:originalFiles];
      [newSegment->info_ setUseCompoundFileWithBoolean:YES];
    }
    [((OrgApacheLuceneCodecsSegmentInfoFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk(codec_)) segmentInfoFormat])) writeWithOrgApacheLuceneStoreDirectory:directory_ withOrgApacheLuceneIndexSegmentInfo:newSegment->info_ withOrgApacheLuceneStoreIOContext:context];
    if (flushedSegment->liveDocs_ != nil) {
      jint delCount = flushedSegment->delCount_;
      JreAssert((delCount > 0), (@"org/apache/lucene/index/DocumentsWriterPerThread.java:511 condition failed: assert delCount > 0;"));
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWPT"]) {
        [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$I$J", @"flush: write ", delCount, @" deletes gen=", [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(flushedSegment->segmentInfo_)) getDelGen])];
      }
      OrgApacheLuceneIndexSegmentCommitInfo *info = flushedSegment->segmentInfo_;
      OrgApacheLuceneCodecsCodec *codec = [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_ getCodec];
      [((OrgApacheLuceneCodecsLiveDocsFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk(codec)) liveDocsFormat])) writeLiveDocsWithOrgApacheLuceneUtilMutableBits:flushedSegment->liveDocs_ withOrgApacheLuceneStoreDirectory:directory_ withOrgApacheLuceneIndexSegmentCommitInfo:info withInt:delCount withOrgApacheLuceneStoreIOContext:context];
      [newSegment setDelCountWithInt:delCount];
      [newSegment advanceDelGen];
    }
    success = YES;
  }
  @finally {
    if (!success) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWPT"]) {
        [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$$", @"hit exception creating compound file for newly flushed segment ", newSegment->info_->name_)];
      }
    }
  }
}

- (OrgApacheLuceneIndexSegmentInfo *)getSegmentInfo {
  return segmentInfo_;
}

- (jlong)bytesUsed {
  return [((OrgApacheLuceneUtilCounter *) nil_chk(bytesUsed_)) get] + [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(((OrgApacheLuceneIndexBufferedUpdates *) nil_chk(pendingUpdates_))->bytesUsed_)) get];
}

- (NSString *)description {
  return JreStrcat("$@$$$Z$I$@C", @"DocumentsWriterPerThread [pendingDeletes=", pendingUpdates_, @", segment=", (segmentInfo_ != nil ? segmentInfo_->name_ : @"null"), @", aborted=", aborted_, @", numDocsInRAM=", numDocsInRAM_, @", deleteQueue=", deleteQueue_, ']');
}

- (void)dealloc {
  RELEASE_(codec_);
  RELEASE_(directory_);
  RELEASE_(directoryOrig_);
  RELEASE_(docState_);
  RELEASE_(consumer_);
  RELEASE_(bytesUsed_);
  RELEASE_(flushState_);
  RELEASE_(pendingUpdates_);
  RELEASE_(segmentInfo_);
  RELEASE_(fieldInfos_);
  RELEASE_(infoStream_);
  RELEASE_(deleteQueue_);
  RELEASE_(deleteSlice_);
  RELEASE_(nf_);
  RELEASE_(byteBlockAllocator_);
  RELEASE_(intBlockAllocator_);
  RELEASE_(pendingNumDocs_);
  RELEASE_(indexWriterConfig_);
  RELEASE_(indexWriter_);
  RELEASE_(filesToDelete_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexDocumentsWriterPerThread class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexDocumentsWriterPerThread_defaultIndexingChain_, new_OrgApacheLuceneIndexDocumentsWriterPerThread_$1_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexDocumentsWriterPerThread)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "abort", NULL, "V", 0x0, NULL, NULL },
    { "initWithOrgApacheLuceneIndexIndexWriter:withNSString:withOrgApacheLuceneStoreDirectory:withOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexLiveIndexWriterConfig:withOrgApacheLuceneUtilInfoStream:withOrgApacheLuceneIndexDocumentsWriterDeleteQueue:withOrgApacheLuceneIndexFieldInfos_Builder:withJavaUtilConcurrentAtomicAtomicLong:withBoolean:", "DocumentsWriterPerThread", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "getFieldInfosBuilder", NULL, "Lorg.apache.lucene.index.FieldInfos$Builder;", 0x1, NULL, NULL },
    { "testPointWithNSString:", "testPoint", "V", 0x10, NULL, NULL },
    { "reserveOneDoc", NULL, "V", 0x2, NULL, NULL },
    { "updateDocumentWithJavaLangIterable:withOrgApacheLuceneAnalysisAnalyzer:withOrgApacheLuceneIndexTerm:", "updateDocument", "V", 0x1, "Ljava.io.IOException;Lorg.apache.lucene.index.AbortingException;", NULL },
    { "updateDocumentsWithJavaLangIterable:withOrgApacheLuceneAnalysisAnalyzer:withOrgApacheLuceneIndexTerm:", "updateDocuments", "I", 0x1, "Ljava.io.IOException;Lorg.apache.lucene.index.AbortingException;", NULL },
    { "finishDocumentWithOrgApacheLuceneIndexTerm:", "finishDocument", "V", 0x2, NULL, NULL },
    { "deleteDocIDWithInt:", "deleteDocID", "V", 0x0, NULL, NULL },
    { "numDeleteTerms", NULL, "I", 0x1, NULL, NULL },
    { "getNumDocsInRAM", NULL, "I", 0x1, NULL, NULL },
    { "prepareFlush", NULL, "Lorg.apache.lucene.index.FrozenBufferedUpdates;", 0x0, NULL, NULL },
    { "flush", NULL, "Lorg.apache.lucene.index.DocumentsWriterPerThread$FlushedSegment;", 0x0, "Ljava.io.IOException;Lorg.apache.lucene.index.AbortingException;", NULL },
    { "pendingFilesToDelete", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "sealFlushedSegmentWithOrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment:", "sealFlushedSegment", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "getSegmentInfo", NULL, "Lorg.apache.lucene.index.SegmentInfo;", 0x0, NULL, NULL },
    { "bytesUsed", NULL, "J", 0x0, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defaultIndexingChain_", NULL, 0x18, "Lorg.apache.lucene.index.DocumentsWriterPerThread$IndexingChain;", &OrgApacheLuceneIndexDocumentsWriterPerThread_defaultIndexingChain_, NULL, .constantValue.asLong = 0 },
    { "INFO_VERBOSE", "INFO_VERBOSE", 0x1a, "Z", NULL, NULL, .constantValue.asBOOL = OrgApacheLuceneIndexDocumentsWriterPerThread_INFO_VERBOSE },
    { "codec_", NULL, 0x10, "Lorg.apache.lucene.codecs.Codec;", NULL, NULL, .constantValue.asLong = 0 },
    { "directory_", NULL, 0x10, "Lorg.apache.lucene.store.TrackingDirectoryWrapper;", NULL, NULL, .constantValue.asLong = 0 },
    { "directoryOrig_", NULL, 0x10, "Lorg.apache.lucene.store.Directory;", NULL, NULL, .constantValue.asLong = 0 },
    { "docState_", NULL, 0x10, "Lorg.apache.lucene.index.DocumentsWriterPerThread$DocState;", NULL, NULL, .constantValue.asLong = 0 },
    { "consumer_", NULL, 0x10, "Lorg.apache.lucene.index.DocConsumer;", NULL, NULL, .constantValue.asLong = 0 },
    { "bytesUsed_", NULL, 0x10, "Lorg.apache.lucene.util.Counter;", NULL, NULL, .constantValue.asLong = 0 },
    { "flushState_", NULL, 0x0, "Lorg.apache.lucene.index.SegmentWriteState;", NULL, NULL, .constantValue.asLong = 0 },
    { "pendingUpdates_", NULL, 0x10, "Lorg.apache.lucene.index.BufferedUpdates;", NULL, NULL, .constantValue.asLong = 0 },
    { "segmentInfo_", NULL, 0x12, "Lorg.apache.lucene.index.SegmentInfo;", NULL, NULL, .constantValue.asLong = 0 },
    { "aborted_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldInfos_", NULL, 0x12, "Lorg.apache.lucene.index.FieldInfos$Builder;", NULL, NULL, .constantValue.asLong = 0 },
    { "infoStream_", NULL, 0x12, "Lorg.apache.lucene.util.InfoStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "numDocsInRAM_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "deleteQueue_", NULL, 0x10, "Lorg.apache.lucene.index.DocumentsWriterDeleteQueue;", NULL, NULL, .constantValue.asLong = 0 },
    { "deleteSlice_", NULL, 0x12, "Lorg.apache.lucene.index.DocumentsWriterDeleteQueue$DeleteSlice;", NULL, NULL, .constantValue.asLong = 0 },
    { "nf_", NULL, 0x12, "Ljava.text.NumberFormat;", NULL, NULL, .constantValue.asLong = 0 },
    { "byteBlockAllocator_", NULL, 0x10, "Lorg.apache.lucene.util.ByteBlockPool$Allocator;", NULL, NULL, .constantValue.asLong = 0 },
    { "intBlockAllocator_", NULL, 0x10, "Lorg.apache.lucene.util.IntBlockPool$Allocator;", NULL, NULL, .constantValue.asLong = 0 },
    { "pendingNumDocs_", NULL, 0x12, "Ljava.util.concurrent.atomic.AtomicLong;", NULL, NULL, .constantValue.asLong = 0 },
    { "indexWriterConfig_", NULL, 0x12, "Lorg.apache.lucene.index.LiveIndexWriterConfig;", NULL, NULL, .constantValue.asLong = 0 },
    { "enableTestPoints_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "indexWriter_", NULL, 0x12, "Lorg.apache.lucene.index.IndexWriter;", NULL, NULL, .constantValue.asLong = 0 },
    { "filesToDelete_", NULL, 0x12, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "BYTE_BLOCK_NOT_MASK", "BYTE_BLOCK_NOT_MASK", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriterPerThread_BYTE_BLOCK_NOT_MASK },
    { "MAX_TERM_LENGTH_UTF8", "MAX_TERM_LENGTH_UTF8", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriterPerThread_MAX_TERM_LENGTH_UTF8 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.index.DocumentsWriterPerThread$IndexingChain;", "Lorg.apache.lucene.index.DocumentsWriterPerThread$DocState;", "Lorg.apache.lucene.index.DocumentsWriterPerThread$FlushedSegment;", "Lorg.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator;"};
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterPerThread = { 2, "DocumentsWriterPerThread", "org.apache.lucene.index", NULL, 0x0, 18, methods, 27, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneIndexDocumentsWriterPerThread;
}

@end

void OrgApacheLuceneIndexDocumentsWriterPerThread_initWithOrgApacheLuceneIndexIndexWriter_withNSString_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_withOrgApacheLuceneIndexFieldInfos_Builder_withJavaUtilConcurrentAtomicAtomicLong_withBoolean_(OrgApacheLuceneIndexDocumentsWriterPerThread *self, OrgApacheLuceneIndexIndexWriter *writer, NSString *segmentName, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexLiveIndexWriterConfig *indexWriterConfig, OrgApacheLuceneUtilInfoStream *infoStream, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *deleteQueue, OrgApacheLuceneIndexFieldInfos_Builder *fieldInfos, JavaUtilConcurrentAtomicAtomicLong *pendingNumDocs, jboolean enableTestPoints) {
  NSObject_init(self);
  self->aborted_ = NO;
  JreStrongAssign(&self->nf_, JavaTextNumberFormat_getInstanceWithJavaUtilLocale_(JreLoadStatic(JavaUtilLocale, ROOT_)));
  JreStrongAssignAndConsume(&self->filesToDelete_, new_JavaUtilHashSet_init());
  JreStrongAssign(&self->indexWriter_, writer);
  JreStrongAssign(&self->directoryOrig_, directoryOrig);
  JreStrongAssignAndConsume(&self->directory_, new_OrgApacheLuceneStoreTrackingDirectoryWrapper_initWithOrgApacheLuceneStoreDirectory_(directory));
  JreStrongAssign(&self->fieldInfos_, fieldInfos);
  JreStrongAssign(&self->indexWriterConfig_, indexWriterConfig);
  JreStrongAssign(&self->infoStream_, infoStream);
  JreStrongAssign(&self->codec_, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(indexWriterConfig)) getCodec]);
  JreStrongAssignAndConsume(&self->docState_, new_OrgApacheLuceneIndexDocumentsWriterPerThread_DocState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withOrgApacheLuceneUtilInfoStream_(self, infoStream));
  JreStrongAssign(&self->docState_->similarity_, [indexWriterConfig getSimilarity]);
  JreStrongAssign(&self->pendingNumDocs_, pendingNumDocs);
  JreStrongAssign(&self->bytesUsed_, OrgApacheLuceneUtilCounter_newCounter());
  JreStrongAssignAndConsume(&self->byteBlockAllocator_, new_OrgApacheLuceneUtilByteBlockPool_DirectTrackingAllocator_initWithOrgApacheLuceneUtilCounter_(self->bytesUsed_));
  JreStrongAssignAndConsume(&self->pendingUpdates_, new_OrgApacheLuceneIndexBufferedUpdates_init());
  JreStrongAssignAndConsume(&self->intBlockAllocator_, new_OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(self->bytesUsed_));
  JreStrongAssign(&self->deleteQueue_, deleteQueue);
  JreAssert((self->numDocsInRAM_ == 0), (JreStrcat("$I", @"num docs ", self->numDocsInRAM_)));
  [self->pendingUpdates_ clear];
  JreStrongAssign(&self->deleteSlice_, [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(deleteQueue)) newSlice]);
  JreStrongAssignAndConsume(&self->segmentInfo_, new_OrgApacheLuceneIndexSegmentInfo_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneUtilVersion_withNSString_withInt_withBoolean_withOrgApacheLuceneCodecsCodec_withJavaUtilMap_withByteArray_withJavaUtilMap_(directoryOrig, JreLoadStatic(OrgApacheLuceneUtilVersion, LATEST_), segmentName, -1, NO, self->codec_, JavaUtilCollections_emptyMap(), OrgApacheLuceneUtilStringHelper_randomId(), [new_JavaUtilHashMap_init() autorelease]));
  JreAssert((self->numDocsInRAM_ == 0), (@"org/apache/lucene/index/DocumentsWriterPerThread.java:184 condition failed: assert numDocsInRAM == 0;"));
  JreStrongAssign(&self->consumer_, [((OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain *) nil_chk([indexWriterConfig getIndexingChain])) getChainWithOrgApacheLuceneIndexDocumentsWriterPerThread:self]);
  self->enableTestPoints_ = enableTestPoints;
}

OrgApacheLuceneIndexDocumentsWriterPerThread *new_OrgApacheLuceneIndexDocumentsWriterPerThread_initWithOrgApacheLuceneIndexIndexWriter_withNSString_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_withOrgApacheLuceneIndexFieldInfos_Builder_withJavaUtilConcurrentAtomicAtomicLong_withBoolean_(OrgApacheLuceneIndexIndexWriter *writer, NSString *segmentName, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexLiveIndexWriterConfig *indexWriterConfig, OrgApacheLuceneUtilInfoStream *infoStream, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *deleteQueue, OrgApacheLuceneIndexFieldInfos_Builder *fieldInfos, JavaUtilConcurrentAtomicAtomicLong *pendingNumDocs, jboolean enableTestPoints) {
  OrgApacheLuceneIndexDocumentsWriterPerThread *self = [OrgApacheLuceneIndexDocumentsWriterPerThread alloc];
  OrgApacheLuceneIndexDocumentsWriterPerThread_initWithOrgApacheLuceneIndexIndexWriter_withNSString_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_withOrgApacheLuceneIndexFieldInfos_Builder_withJavaUtilConcurrentAtomicAtomicLong_withBoolean_(self, writer, segmentName, directoryOrig, directory, indexWriterConfig, infoStream, deleteQueue, fieldInfos, pendingNumDocs, enableTestPoints);
  return self;
}

void OrgApacheLuceneIndexDocumentsWriterPerThread_testPointWithNSString_(OrgApacheLuceneIndexDocumentsWriterPerThread *self, NSString *message) {
  if (self->enableTestPoints_) {
    JreAssert(([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"TP"]), (@"org/apache/lucene/index/DocumentsWriterPerThread.java:200 condition failed: assert infoStream.isEnabled(\"TP\");"));
    [self->infoStream_ messageWithNSString:@"TP" withNSString:message];
  }
}

void OrgApacheLuceneIndexDocumentsWriterPerThread_reserveOneDoc(OrgApacheLuceneIndexDocumentsWriterPerThread *self) {
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->pendingNumDocs_)) incrementAndGet] > OrgApacheLuceneIndexIndexWriter_getActualMaxDocs()) {
    [self->pendingNumDocs_ decrementAndGet];
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"number of documents in the index cannot exceed ", OrgApacheLuceneIndexIndexWriter_getActualMaxDocs())) autorelease];
  }
}

void OrgApacheLuceneIndexDocumentsWriterPerThread_finishDocumentWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexDocumentsWriterPerThread *self, OrgApacheLuceneIndexTerm *delTerm) {
  jboolean applySlice = self->numDocsInRAM_ != 0;
  if (delTerm != nil) {
    [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(self->deleteQueue_)) addWithOrgApacheLuceneIndexTerm:delTerm withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice:self->deleteSlice_];
    JreAssert(([((OrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice *) nil_chk(self->deleteSlice_)) isTailItemWithId:delTerm]), (@"expected the delete term as the tail item"));
  }
  else {
    applySlice &= [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(self->deleteQueue_)) updateSliceWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice:self->deleteSlice_];
  }
  if (applySlice) {
    [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice *) nil_chk(self->deleteSlice_)) applyWithOrgApacheLuceneIndexBufferedUpdates:self->pendingUpdates_ withInt:self->numDocsInRAM_];
  }
  else {
    [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice *) nil_chk(self->deleteSlice_)) reset];
  }
  ++self->numDocsInRAM_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterPerThread)

@implementation OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain

- (OrgApacheLuceneIndexDocConsumer *)getChainWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)documentsWriterPerThread {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)init {
  OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getChainWithOrgApacheLuceneIndexDocumentsWriterPerThread:", "getChain", "Lorg.apache.lucene.index.DocConsumer;", 0x400, "Ljava.io.IOException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain = { 2, "IndexingChain", "org.apache.lucene.index", "DocumentsWriterPerThread", 0x408, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain;
}

@end

void OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain_init(OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain)

@implementation OrgApacheLuceneIndexDocumentsWriterPerThread_DocState

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)docWriter
                                   withOrgApacheLuceneUtilInfoStream:(OrgApacheLuceneUtilInfoStream *)infoStream {
  OrgApacheLuceneIndexDocumentsWriterPerThread_DocState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withOrgApacheLuceneUtilInfoStream_(self, docWriter, infoStream);
  return self;
}

- (void)testPointWithNSString:(NSString *)name {
  OrgApacheLuceneIndexDocumentsWriterPerThread_testPointWithNSString_(nil_chk(docWriter_), name);
}

- (void)clear {
  JreStrongAssign(&doc_, nil);
  JreStrongAssign(&analyzer_, nil);
}

- (void)dealloc {
  RELEASE_(docWriter_);
  RELEASE_(analyzer_);
  RELEASE_(infoStream_);
  RELEASE_(similarity_);
  RELEASE_(doc_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexDocumentsWriterPerThread:withOrgApacheLuceneUtilInfoStream:", "DocState", NULL, 0x0, NULL, NULL },
    { "testPointWithNSString:", "testPoint", "V", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "docWriter_", NULL, 0x10, "Lorg.apache.lucene.index.DocumentsWriterPerThread;", NULL, NULL, .constantValue.asLong = 0 },
    { "analyzer_", NULL, 0x0, "Lorg.apache.lucene.analysis.Analyzer;", NULL, NULL, .constantValue.asLong = 0 },
    { "infoStream_", NULL, 0x0, "Lorg.apache.lucene.util.InfoStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "similarity_", NULL, 0x0, "Lorg.apache.lucene.search.similarities.Similarity;", NULL, NULL, .constantValue.asLong = 0 },
    { "docID_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "doc_", NULL, 0x0, "Ljava.lang.Iterable;", NULL, "Ljava/lang/Iterable<+Lorg/apache/lucene/index/IndexableField;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterPerThread_DocState = { 2, "DocState", "org.apache.lucene.index", "DocumentsWriterPerThread", 0x8, 3, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexDocumentsWriterPerThread_DocState;
}

@end

void OrgApacheLuceneIndexDocumentsWriterPerThread_DocState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withOrgApacheLuceneUtilInfoStream_(OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *self, OrgApacheLuceneIndexDocumentsWriterPerThread *docWriter, OrgApacheLuceneUtilInfoStream *infoStream) {
  NSObject_init(self);
  JreStrongAssign(&self->docWriter_, docWriter);
  JreStrongAssign(&self->infoStream_, infoStream);
}

OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *new_OrgApacheLuceneIndexDocumentsWriterPerThread_DocState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withOrgApacheLuceneUtilInfoStream_(OrgApacheLuceneIndexDocumentsWriterPerThread *docWriter, OrgApacheLuceneUtilInfoStream *infoStream) {
  OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *self = [OrgApacheLuceneIndexDocumentsWriterPerThread_DocState alloc];
  OrgApacheLuceneIndexDocumentsWriterPerThread_DocState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withOrgApacheLuceneUtilInfoStream_(self, docWriter, infoStream);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterPerThread_DocState)

@implementation OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment

- (instancetype)initWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)segmentInfo
                           withOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fieldInfos
                      withOrgApacheLuceneIndexBufferedUpdates:(OrgApacheLuceneIndexBufferedUpdates *)segmentUpdates
                           withOrgApacheLuceneUtilMutableBits:(id<OrgApacheLuceneUtilMutableBits>)liveDocs
                                                      withInt:(jint)delCount {
  OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(self, segmentInfo, fieldInfos, segmentUpdates, liveDocs, delCount);
  return self;
}

- (void)dealloc {
  RELEASE_(segmentInfo_);
  RELEASE_(fieldInfos_);
  RELEASE_(segmentUpdates_);
  RELEASE_(liveDocs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexSegmentCommitInfo:withOrgApacheLuceneIndexFieldInfos:withOrgApacheLuceneIndexBufferedUpdates:withOrgApacheLuceneUtilMutableBits:withInt:", "FlushedSegment", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "segmentInfo_", NULL, 0x10, "Lorg.apache.lucene.index.SegmentCommitInfo;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldInfos_", NULL, 0x10, "Lorg.apache.lucene.index.FieldInfos;", NULL, NULL, .constantValue.asLong = 0 },
    { "segmentUpdates_", NULL, 0x10, "Lorg.apache.lucene.index.FrozenBufferedUpdates;", NULL, NULL, .constantValue.asLong = 0 },
    { "liveDocs_", NULL, 0x10, "Lorg.apache.lucene.util.MutableBits;", NULL, NULL, .constantValue.asLong = 0 },
    { "delCount_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment = { 2, "FlushedSegment", "org.apache.lucene.index", "DocumentsWriterPerThread", 0x8, 1, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment;
}

@end

void OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *self, OrgApacheLuceneIndexSegmentCommitInfo *segmentInfo, OrgApacheLuceneIndexFieldInfos *fieldInfos, OrgApacheLuceneIndexBufferedUpdates *segmentUpdates, id<OrgApacheLuceneUtilMutableBits> liveDocs, jint delCount) {
  NSObject_init(self);
  JreStrongAssign(&self->segmentInfo_, segmentInfo);
  JreStrongAssign(&self->fieldInfos_, fieldInfos);
  JreStrongAssign(&self->segmentUpdates_, segmentUpdates != nil && [segmentUpdates any] ? [new_OrgApacheLuceneIndexFrozenBufferedUpdates_initWithOrgApacheLuceneIndexBufferedUpdates_withBoolean_(segmentUpdates, YES) autorelease] : nil);
  JreStrongAssign(&self->liveDocs_, liveDocs);
  self->delCount_ = delCount;
}

OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *new_OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(OrgApacheLuceneIndexSegmentCommitInfo *segmentInfo, OrgApacheLuceneIndexFieldInfos *fieldInfos, OrgApacheLuceneIndexBufferedUpdates *segmentUpdates, id<OrgApacheLuceneUtilMutableBits> liveDocs, jint delCount) {
  OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *self = [OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment alloc];
  OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(self, segmentInfo, fieldInfos, segmentUpdates, liveDocs, delCount);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment)

@implementation OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator

- (instancetype)initWithOrgApacheLuceneUtilCounter:(OrgApacheLuceneUtilCounter *)bytesUsed {
  OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(self, bytesUsed);
  return self;
}

- (IOSIntArray *)getIntBlock {
  IOSIntArray *b = [IOSIntArray arrayWithLength:OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE];
  [((OrgApacheLuceneUtilCounter *) nil_chk(bytesUsed_)) addAndGetWithLong:OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT];
  return b;
}

- (void)recycleIntBlocksWithIntArray2:(IOSObjectArray *)blocks
                              withInt:(jint)offset
                              withInt:(jint)length {
  [((OrgApacheLuceneUtilCounter *) nil_chk(bytesUsed_)) addAndGetWithLong:-(length * (OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT))];
}

- (void)dealloc {
  RELEASE_(bytesUsed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneUtilCounter:", "IntBlockAllocator", NULL, 0x1, NULL, NULL },
    { "getIntBlock", NULL, "[I", 0x1, NULL, NULL },
    { "recycleIntBlocksWithIntArray2:withInt:withInt:", "recycleIntBlocks", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bytesUsed_", NULL, 0x12, "Lorg.apache.lucene.util.Counter;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator = { 2, "IntBlockAllocator", "org.apache.lucene.index", "DocumentsWriterPerThread", 0xa, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator;
}

@end

void OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator *self, OrgApacheLuceneUtilCounter *bytesUsed) {
  OrgApacheLuceneUtilIntBlockPool_Allocator_initWithInt_(self, OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE);
  JreStrongAssign(&self->bytesUsed_, bytesUsed);
}

OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator *new_OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(OrgApacheLuceneUtilCounter *bytesUsed) {
  OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator *self = [OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator alloc];
  OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(self, bytesUsed);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator)

@implementation OrgApacheLuceneIndexDocumentsWriterPerThread_$1

- (OrgApacheLuceneIndexDocConsumer *)getChainWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)documentsWriterPerThread {
  return [new_OrgApacheLuceneIndexDefaultIndexingChain_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_(documentsWriterPerThread) autorelease];
}

- (instancetype)init {
  OrgApacheLuceneIndexDocumentsWriterPerThread_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getChainWithOrgApacheLuceneIndexDocumentsWriterPerThread:", "getChain", "Lorg.apache.lucene.index.DocConsumer;", 0x0, "Ljava.io.IOException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterPerThread_$1 = { 2, "", "org.apache.lucene.index", "DocumentsWriterPerThread", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexDocumentsWriterPerThread_$1;
}

@end

void OrgApacheLuceneIndexDocumentsWriterPerThread_$1_init(OrgApacheLuceneIndexDocumentsWriterPerThread_$1 *self) {
  OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain_init(self);
}

OrgApacheLuceneIndexDocumentsWriterPerThread_$1 *new_OrgApacheLuceneIndexDocumentsWriterPerThread_$1_init() {
  OrgApacheLuceneIndexDocumentsWriterPerThread_$1 *self = [OrgApacheLuceneIndexDocumentsWriterPerThread_$1 alloc];
  OrgApacheLuceneIndexDocumentsWriterPerThread_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterPerThread_$1)
