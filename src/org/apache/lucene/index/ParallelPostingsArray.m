//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/ParallelPostingsArray.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/apache/lucene/index/ParallelPostingsArray.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

@implementation OrgApacheLuceneIndexParallelPostingsArray

- (instancetype)initWithInt:(jint)size {
  OrgApacheLuceneIndexParallelPostingsArray_initWithInt_(self, size);
  return self;
}

- (jint)bytesPerPosting {
  return OrgApacheLuceneIndexParallelPostingsArray_BYTES_PER_POSTING;
}

- (OrgApacheLuceneIndexParallelPostingsArray *)newInstanceWithInt:(jint)size {
  return [new_OrgApacheLuceneIndexParallelPostingsArray_initWithInt_(size) autorelease];
}

- (OrgApacheLuceneIndexParallelPostingsArray *)grow {
  jint newSize = OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(size_ + 1, [self bytesPerPosting]);
  OrgApacheLuceneIndexParallelPostingsArray *newArray = [self newInstanceWithInt:newSize];
  [self copyToWithOrgApacheLuceneIndexParallelPostingsArray:newArray withInt:size_];
  return newArray;
}

- (void)copyToWithOrgApacheLuceneIndexParallelPostingsArray:(OrgApacheLuceneIndexParallelPostingsArray *)toArray
                                                    withInt:(jint)numToCopy {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(textStarts_, 0, ((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(toArray))->textStarts_, 0, numToCopy);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(intStarts_, 0, toArray->intStarts_, 0, numToCopy);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(byteStarts_, 0, toArray->byteStarts_, 0, numToCopy);
}

- (void)dealloc {
  RELEASE_(textStarts_);
  RELEASE_(intStarts_);
  RELEASE_(byteStarts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "ParallelPostingsArray", NULL, 0x0, NULL, NULL },
    { "bytesPerPosting", NULL, "I", 0x0, NULL, NULL },
    { "newInstanceWithInt:", "newInstance", "Lorg.apache.lucene.index.ParallelPostingsArray;", 0x0, NULL, NULL },
    { "grow", NULL, "Lorg.apache.lucene.index.ParallelPostingsArray;", 0x10, NULL, NULL },
    { "copyToWithOrgApacheLuceneIndexParallelPostingsArray:withInt:", "copyTo", "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BYTES_PER_POSTING", "BYTES_PER_POSTING", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneIndexParallelPostingsArray_BYTES_PER_POSTING },
    { "size_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "textStarts_", NULL, 0x10, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "intStarts_", NULL, 0x10, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "byteStarts_", NULL, 0x10, "[I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexParallelPostingsArray = { 2, "ParallelPostingsArray", "org.apache.lucene.index", NULL, 0x0, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexParallelPostingsArray;
}

@end

void OrgApacheLuceneIndexParallelPostingsArray_initWithInt_(OrgApacheLuceneIndexParallelPostingsArray *self, jint size) {
  NSObject_init(self);
  self->size_ = size;
  JreStrongAssignAndConsume(&self->textStarts_, [IOSIntArray newArrayWithLength:size]);
  JreStrongAssignAndConsume(&self->intStarts_, [IOSIntArray newArrayWithLength:size]);
  JreStrongAssignAndConsume(&self->byteStarts_, [IOSIntArray newArrayWithLength:size]);
}

OrgApacheLuceneIndexParallelPostingsArray *new_OrgApacheLuceneIndexParallelPostingsArray_initWithInt_(jint size) {
  OrgApacheLuceneIndexParallelPostingsArray *self = [OrgApacheLuceneIndexParallelPostingsArray alloc];
  OrgApacheLuceneIndexParallelPostingsArray_initWithInt_(self, size);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexParallelPostingsArray)
