//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/IndexFileDeleter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexFileDeleter.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/CollectionUtil.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/lukhnos/portmobile/file/NoSuchFileException.h"
#include "org/lukhnos/portmobile/util/Objects.h"

@class OrgApacheLuceneIndexIndexFileDeleter_RefCount;

@interface OrgApacheLuceneIndexIndexFileDeleter () {
 @public
  id<JavaUtilSet> deletable_;
  id<JavaUtilMap> refCounts_;
  id<JavaUtilList> commits_;
  id<JavaUtilList> lastFiles_;
  id<JavaUtilList> commitsToDelete_;
  OrgApacheLuceneUtilInfoStream *infoStream_;
  OrgApacheLuceneStoreDirectory *directoryOrig_;
  OrgApacheLuceneStoreDirectory *directory_;
  OrgApacheLuceneIndexIndexDeletionPolicy *policy_;
  OrgApacheLuceneIndexSegmentInfos *lastSegmentInfos_;
  OrgApacheLuceneIndexIndexWriter *writer_;
}

- (jboolean)locked;

/*!
 @brief Remove the CommitPoints in the commitsToDelete List by
 DecRef'ing all files from each SegmentInfos.
 */
- (void)deleteCommits;

- (void)decRefWithNSString:(NSString *)fileName;

- (OrgApacheLuceneIndexIndexFileDeleter_RefCount *)getRefCountWithNSString:(NSString *)fileName;

/*!
 @brief Returns true if the delete succeeded.
 Otherwise, the fileName is
 added to the deletable set so we will retry the delete later, and
 we return false. 
 */
- (jboolean)deleteFileWithNSString:(NSString *)fileName;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, deletable_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, refCounts_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, commits_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, lastFiles_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, commitsToDelete_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, infoStream_, OrgApacheLuceneUtilInfoStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, directoryOrig_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, directory_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, policy_, OrgApacheLuceneIndexIndexDeletionPolicy *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, lastSegmentInfos_, OrgApacheLuceneIndexSegmentInfos *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter, writer_, OrgApacheLuceneIndexIndexWriter *)

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexFileDeleter_locked(OrgApacheLuceneIndexIndexFileDeleter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexFileDeleter_deleteCommits(OrgApacheLuceneIndexIndexFileDeleter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexFileDeleter_decRefWithNSString_(OrgApacheLuceneIndexIndexFileDeleter *self, NSString *fileName);

__attribute__((unused)) static OrgApacheLuceneIndexIndexFileDeleter_RefCount *OrgApacheLuceneIndexIndexFileDeleter_getRefCountWithNSString_(OrgApacheLuceneIndexIndexFileDeleter *self, NSString *fileName);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexFileDeleter_deleteFileWithNSString_(OrgApacheLuceneIndexIndexFileDeleter *self, NSString *fileName);

/*!
 @brief Tracks the reference count for a single index file:
 */
@interface OrgApacheLuceneIndexIndexFileDeleter_RefCount : NSObject {
 @public
  NSString *fileName_;
  jboolean initDone_;
  jint count_;
}

- (instancetype)initWithNSString:(NSString *)fileName;

- (jint)IncRef;

- (jint)DecRef;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexIndexFileDeleter_RefCount)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter_RefCount, fileName_, NSString *)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(OrgApacheLuceneIndexIndexFileDeleter_RefCount *self, NSString *fileName);

__attribute__((unused)) static OrgApacheLuceneIndexIndexFileDeleter_RefCount *new_OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(NSString *fileName) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexIndexFileDeleter_RefCount *create_OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(NSString *fileName);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexIndexFileDeleter_RefCount)

/*!
 @brief Holds details for each commit point.
 This class is
 also passed to the deletion policy.  Note: this class
 has a natural ordering that is inconsistent with
 equals.
 */
@interface OrgApacheLuceneIndexIndexFileDeleter_CommitPoint : OrgApacheLuceneIndexIndexCommit {
 @public
  id<JavaUtilCollection> files_;
  NSString *segmentsFileName_;
  jboolean deleted_;
  OrgApacheLuceneStoreDirectory *directoryOrig_;
  id<JavaUtilCollection> commitsToDelete_;
  jlong generation_;
  id<JavaUtilMap> userData_;
  jint segmentCount_;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)commitsToDelete
         withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directoryOrig
      withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos;

- (NSString *)description;

- (jint)getSegmentCount;

- (NSString *)getSegmentsFileName;

- (id<JavaUtilCollection>)getFileNames;

- (OrgApacheLuceneStoreDirectory *)getDirectory;

- (jlong)getGeneration;

- (id<JavaUtilMap>)getUserData;

/*!
 @brief Called only be the deletion policy, to remove this
 commit point from the index.
 */
- (void)delete__;

- (jboolean)isDeleted;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint, files_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint, segmentsFileName_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint, directoryOrig_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint, commitsToDelete_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint, userData_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *self, id<JavaUtilCollection> commitsToDelete, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneIndexSegmentInfos *segmentInfos);

__attribute__((unused)) static OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *new_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(id<JavaUtilCollection> commitsToDelete, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneIndexSegmentInfos *segmentInfos) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *create_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(id<JavaUtilCollection> commitsToDelete, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneIndexSegmentInfos *segmentInfos);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint)

jboolean OrgApacheLuceneIndexIndexFileDeleter_VERBOSE_REF_COUNTS = false;

@implementation OrgApacheLuceneIndexIndexFileDeleter

+ (jboolean)VERBOSE_REF_COUNTS {
  return OrgApacheLuceneIndexIndexFileDeleter_VERBOSE_REF_COUNTS;
}

+ (void)setVERBOSE_REF_COUNTS:(jboolean)value {
  OrgApacheLuceneIndexIndexFileDeleter_VERBOSE_REF_COUNTS = value;
}

- (jboolean)locked {
  return OrgApacheLuceneIndexIndexFileDeleter_locked(self);
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)files
    withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directoryOrig
    withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
withOrgApacheLuceneIndexIndexDeletionPolicy:(OrgApacheLuceneIndexIndexDeletionPolicy *)policy
 withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos
    withOrgApacheLuceneUtilInfoStream:(OrgApacheLuceneUtilInfoStream *)infoStream
  withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                          withBoolean:(jboolean)initialIndexExists
                          withBoolean:(jboolean)isReaderInit {
  OrgApacheLuceneIndexIndexFileDeleter_initWithNSStringArray_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexIndexWriter_withBoolean_withBoolean_(self, files, directoryOrig, directory, policy, segmentInfos, infoStream, writer, initialIndexExists, isReaderInit);
  return self;
}

+ (void)inflateGensWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                 withJavaUtilCollection:(id<JavaUtilCollection>)files
                      withOrgApacheLuceneUtilInfoStream:(OrgApacheLuceneUtilInfoStream *)infoStream {
  OrgApacheLuceneIndexIndexFileDeleter_inflateGensWithOrgApacheLuceneIndexSegmentInfos_withJavaUtilCollection_withOrgApacheLuceneUtilInfoStream_(infos, files, infoStream);
}

- (void)ensureOpen {
  [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer_)) ensureOpenWithBoolean:false];
  if (JreLoadVolatileId(&writer_->tragedy_) != nil) {
    @throw create_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_withNSException_(@"refusing to delete any files: this IndexWriter hit an unrecoverable exception", JreLoadVolatileId(&writer_->tragedy_));
  }
}

- (jboolean)isClosed {
  @try {
    [self ensureOpen];
    return false;
  }
  @catch (OrgApacheLuceneStoreAlreadyClosedException *ace) {
    return true;
  }
}

- (OrgApacheLuceneIndexSegmentInfos *)getLastSegmentInfos {
  return lastSegmentInfos_;
}

- (void)deleteCommits {
  OrgApacheLuceneIndexIndexFileDeleter_deleteCommits(self);
}

- (void)refreshWithNSString:(NSString *)segmentName {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:422 condition failed: assert locked();"));
  IOSObjectArray *files = [((OrgApacheLuceneStoreDirectory *) nil_chk(directory_)) listAll];
  NSString *segmentPrefix1;
  NSString *segmentPrefix2;
  if (segmentName != nil) {
    segmentPrefix1 = JreStrcat("$C", segmentName, '.');
    segmentPrefix2 = JreStrcat("$C", segmentName, '_');
  }
  else {
    segmentPrefix1 = nil;
    segmentPrefix2 = nil;
  }
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(OrgApacheLuceneIndexIndexFileNames, CODEC_FILE_PATTERN))) matcherWithJavaLangCharSequence:@""];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(files))->size_; i++) {
    NSString *fileName = IOSObjectArray_Get(files, i);
    [((JavaUtilRegexMatcher *) nil_chk(m)) resetWithJavaLangCharSequence:fileName];
    if ((segmentName == nil || [((NSString *) nil_chk(fileName)) hasPrefix:segmentPrefix1] || [fileName hasPrefix:segmentPrefix2]) && ![((NSString *) nil_chk(fileName)) hasSuffix:@"write.lock"] && ![((id<JavaUtilMap>) nil_chk(refCounts_)) containsKeyWithId:fileName] && ([m matches] || [fileName hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS] || (segmentName == nil && [fileName hasPrefix:OrgApacheLuceneIndexIndexFileNames_PENDING_SEGMENTS]))) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IFD"]) {
        [infoStream_ messageWithNSString:@"IFD" withNSString:JreStrcat("$$$$C", @"refresh [prefix=", segmentName, @"]: removing newly created unreferenced file \"", fileName, '"')];
      }
      [((id<JavaUtilSet>) nil_chk(deletable_)) addWithId:fileName];
    }
  }
  [self deletePendingFiles];
}

- (void)refresh {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:460 condition failed: assert locked();"));
  [((id<JavaUtilSet>) nil_chk(deletable_)) clear];
  [self refreshWithNSString:nil];
}

- (void)close {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:468 condition failed: assert locked();"));
  if (![((id<JavaUtilList>) nil_chk(lastFiles_)) isEmpty]) {
    @try {
      [self decRefWithJavaUtilCollection:lastFiles_];
    }
    @finally {
      [lastFiles_ clear];
    }
  }
  [self deletePendingFiles];
}

- (void)revisitPolicy {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:491 condition failed: assert locked();"));
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IFD"]) {
    [infoStream_ messageWithNSString:@"IFD" withNSString:@"now revisitPolicy"];
  }
  if ([((id<JavaUtilList>) nil_chk(commits_)) size] > 0) {
    [((OrgApacheLuceneIndexIndexDeletionPolicy *) nil_chk(policy_)) onCommitWithJavaUtilList:commits_];
    OrgApacheLuceneIndexIndexFileDeleter_deleteCommits(self);
  }
}

- (void)deletePendingFiles {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:503 condition failed: assert locked();"));
  id<JavaUtilList> toDelete = create_JavaUtilArrayList_initWithJavaUtilCollection_(deletable_);
  for (NSString * __strong fileName in toDelete) {
    OrgApacheLuceneIndexIndexFileDeleter_RefCount *rc = [((id<JavaUtilMap>) nil_chk(refCounts_)) getWithId:fileName];
    if (rc != nil && rc->count_ > 0) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$I", @"file \"", fileName, @"\" is in pending delete set but has non-zero refCount=", rc->count_));
    }
    else if ([((NSString *) nil_chk(fileName)) hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS]) {
      if (OrgApacheLuceneIndexIndexFileDeleter_deleteFileWithNSString_(self, fileName) == false) {
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IFD"]) {
          [infoStream_ messageWithNSString:@"IFD" withNSString:JreStrcat("$$$", @"failed to remove commit point \"", fileName, @"\"; skipping deletion of all other pending files")];
        }
        return;
      }
    }
  }
  for (NSString * __strong fileName in toDelete) {
    if ([((NSString *) nil_chk(fileName)) hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS] == false) {
      OrgApacheLuceneIndexIndexFileDeleter_deleteFileWithNSString_(self, fileName);
    }
  }
}

- (void)checkpointWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos
                                           withBoolean:(jboolean)isCommit {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:556 condition failed: assert locked();"));
  JreAssert((JavaLangThread_holdsLockWithId_(writer_)), (@"org/apache/lucene/index/IndexFileDeleter.java:558 condition failed: assert Thread.holdsLock(writer);"));
  jlong t0 = 0;
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IFD"]) {
    t0 = JavaLangSystem_nanoTime();
    [infoStream_ messageWithNSString:@"IFD" withNSString:JreStrcat("$$$I$ZC", @"now checkpoint \"", [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer_)) segStringWithJavaLangIterable:[writer_ toLiveInfosWithOrgApacheLuceneIndexSegmentInfos:segmentInfos]], @"\" [", [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) size], @" segments ; isCommit = ", isCommit, ']')];
  }
  [self incRefWithOrgApacheLuceneIndexSegmentInfos:segmentInfos withBoolean:isCommit];
  if (isCommit) {
    [((id<JavaUtilList>) nil_chk(commits_)) addWithId:create_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(commitsToDelete_, directoryOrig_, segmentInfos)];
    [((OrgApacheLuceneIndexIndexDeletionPolicy *) nil_chk(policy_)) onCommitWithJavaUtilList:commits_];
    OrgApacheLuceneIndexIndexFileDeleter_deleteCommits(self);
  }
  else {
    @try {
      [self decRefWithJavaUtilCollection:lastFiles_];
    }
    @finally {
      [((id<JavaUtilList>) nil_chk(lastFiles_)) clear];
    }
    [lastFiles_ addAllWithJavaUtilCollection:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) filesWithBoolean:false]];
  }
  if ([infoStream_ isEnabledWithNSString:@"IFD"]) {
    jlong t1 = JavaLangSystem_nanoTime();
    [infoStream_ messageWithNSString:@"IFD" withNSString:JreStrcat("J$", ((t1 - t0) / 1000000), @" msec to checkpoint")];
  }
}

- (void)incRefWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos
                                       withBoolean:(jboolean)isCommit {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:596 condition failed: assert locked();"));
  for (NSString * __strong fileName in nil_chk([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) filesWithBoolean:isCommit])) {
    [self incRefWithNSString:fileName];
  }
}

- (void)incRefWithJavaUtilCollection:(id<JavaUtilCollection>)files {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:605 condition failed: assert locked();"));
  for (NSString * __strong file in nil_chk(files)) {
    [self incRefWithNSString:file];
  }
}

- (void)incRefWithNSString:(NSString *)fileName {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:612 condition failed: assert locked();"));
  OrgApacheLuceneIndexIndexFileDeleter_RefCount *rc = OrgApacheLuceneIndexIndexFileDeleter_getRefCountWithNSString_(self, fileName);
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IFD"]) {
    if (OrgApacheLuceneIndexIndexFileDeleter_VERBOSE_REF_COUNTS) {
      [infoStream_ messageWithNSString:@"IFD" withNSString:JreStrcat("$$$I", @"  IncRef \"", fileName, @"\": pre-incr count is ", ((OrgApacheLuceneIndexIndexFileDeleter_RefCount *) nil_chk(rc))->count_)];
    }
  }
  [((OrgApacheLuceneIndexIndexFileDeleter_RefCount *) nil_chk(rc)) IncRef];
}

- (void)decRefWithJavaUtilCollection:(id<JavaUtilCollection>)files {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:624 condition failed: assert locked();"));
  NSException *firstThrowable = nil;
  for (NSString * __strong file in nil_chk(files)) {
    @try {
      OrgApacheLuceneIndexIndexFileDeleter_decRefWithNSString_(self, file);
    }
    @catch (NSException *t) {
      if (firstThrowable == nil) {
        firstThrowable = t;
      }
    }
  }
  @try {
    [self deletePendingFiles];
  }
  @catch (NSException *t) {
    if (firstThrowable == nil) {
      firstThrowable = t;
    }
  }
  OrgApacheLuceneUtilIOUtils_reThrowUncheckedWithNSException_(firstThrowable);
}

- (void)decRefWhileHandlingExceptionWithJavaUtilCollection:(id<JavaUtilCollection>)files {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:653 condition failed: assert locked();"));
  for (NSString * __strong file in nil_chk(files)) {
    @try {
      OrgApacheLuceneIndexIndexFileDeleter_decRefWithNSString_(self, file);
    }
    @catch (NSException *t) {
    }
  }
  @try {
    [self deletePendingFiles];
  }
  @catch (NSException *t) {
  }
}

- (void)decRefWithNSString:(NSString *)fileName {
  OrgApacheLuceneIndexIndexFileDeleter_decRefWithNSString_(self, fileName);
}

- (void)decRefWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:687 condition failed: assert locked();"));
  [self decRefWithJavaUtilCollection:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) filesWithBoolean:false]];
}

- (jboolean)existsWithNSString:(NSString *)fileName {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:692 condition failed: assert locked();"));
  if (![((id<JavaUtilMap>) nil_chk(refCounts_)) containsKeyWithId:fileName]) {
    return false;
  }
  else {
    return ((OrgApacheLuceneIndexIndexFileDeleter_RefCount *) nil_chk(OrgApacheLuceneIndexIndexFileDeleter_getRefCountWithNSString_(self, fileName)))->count_ > 0;
  }
}

- (OrgApacheLuceneIndexIndexFileDeleter_RefCount *)getRefCountWithNSString:(NSString *)fileName {
  return OrgApacheLuceneIndexIndexFileDeleter_getRefCountWithNSString_(self, fileName);
}

- (void)deleteNewFilesWithJavaUtilCollection:(id<JavaUtilCollection>)files {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:717 condition failed: assert locked();"));
  for (NSString * __strong fileName in nil_chk(files)) {
    if (![((id<JavaUtilMap>) nil_chk(refCounts_)) containsKeyWithId:fileName] || ((OrgApacheLuceneIndexIndexFileDeleter_RefCount *) nil_chk([((id<JavaUtilMap>) nil_chk(refCounts_)) getWithId:fileName]))->count_ == 0) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IFD"]) {
        [infoStream_ messageWithNSString:@"IFD" withNSString:JreStrcat("$$C", @"will delete new file \"", fileName, '"')];
      }
      [((id<JavaUtilSet>) nil_chk(deletable_)) addWithId:fileName];
    }
  }
  [self deletePendingFiles];
}

- (jboolean)deleteFileWithNSString:(NSString *)fileName {
  return OrgApacheLuceneIndexIndexFileDeleter_deleteFileWithNSString_(self, fileName);
}

- (void)dealloc {
  RELEASE_(deletable_);
  RELEASE_(refCounts_);
  RELEASE_(commits_);
  RELEASE_(lastFiles_);
  RELEASE_(commitsToDelete_);
  RELEASE_(infoStream_);
  RELEASE_(directoryOrig_);
  RELEASE_(directory_);
  RELEASE_(policy_);
  RELEASE_(lastSegmentInfos_);
  RELEASE_(writer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "locked", NULL, "Z", 0x2, NULL, NULL },
    { "initWithNSStringArray:withOrgApacheLuceneStoreDirectory:withOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexDeletionPolicy:withOrgApacheLuceneIndexSegmentInfos:withOrgApacheLuceneUtilInfoStream:withOrgApacheLuceneIndexIndexWriter:withBoolean:withBoolean:", "IndexFileDeleter", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "inflateGensWithOrgApacheLuceneIndexSegmentInfos:withJavaUtilCollection:withOrgApacheLuceneUtilInfoStream:", "inflateGens", "V", 0x8, NULL, "(Lorg/apache/lucene/index/SegmentInfos;Ljava/util/Collection<Ljava/lang/String;>;Lorg/apache/lucene/util/InfoStream;)V" },
    { "ensureOpen", NULL, "V", 0x0, "Lorg.apache.lucene.store.AlreadyClosedException;", NULL },
    { "isClosed", NULL, "Z", 0x0, NULL, NULL },
    { "getLastSegmentInfos", NULL, "Lorg.apache.lucene.index.SegmentInfos;", 0x1, NULL, NULL },
    { "deleteCommits", NULL, "V", 0x2, NULL, NULL },
    { "refreshWithNSString:", "refresh", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "refresh", NULL, "V", 0x0, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "revisitPolicy", NULL, "V", 0x0, "Ljava.io.IOException;", NULL },
    { "deletePendingFiles", NULL, "V", 0x1, NULL, NULL },
    { "checkpointWithOrgApacheLuceneIndexSegmentInfos:withBoolean:", "checkpoint", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "incRefWithOrgApacheLuceneIndexSegmentInfos:withBoolean:", "incRef", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "incRefWithJavaUtilCollection:", "incRef", "V", 0x0, NULL, "(Ljava/util/Collection<Ljava/lang/String;>;)V" },
    { "incRefWithNSString:", "incRef", "V", 0x0, NULL, NULL },
    { "decRefWithJavaUtilCollection:", "decRef", "V", 0x0, NULL, "(Ljava/util/Collection<Ljava/lang/String;>;)V" },
    { "decRefWhileHandlingExceptionWithJavaUtilCollection:", "decRefWhileHandlingException", "V", 0x0, NULL, "(Ljava/util/Collection<Ljava/lang/String;>;)V" },
    { "decRefWithNSString:", "decRef", "V", 0x2, NULL, NULL },
    { "decRefWithOrgApacheLuceneIndexSegmentInfos:", "decRef", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "existsWithNSString:", "exists", "Z", 0x1, NULL, NULL },
    { "getRefCountWithNSString:", "getRefCount", "Lorg.apache.lucene.index.IndexFileDeleter$RefCount;", 0x2, NULL, NULL },
    { "deleteNewFilesWithJavaUtilCollection:", "deleteNewFiles", "V", 0x0, "Ljava.io.IOException;", "(Ljava/util/Collection<Ljava/lang/String;>;)V" },
    { "deleteFileWithNSString:", "deleteFile", "Z", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "deletable_", NULL, 0x12, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "refCounts_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/index/IndexFileDeleter$RefCount;>;", .constantValue.asLong = 0 },
    { "commits_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/index/IndexFileDeleter$CommitPoint;>;", .constantValue.asLong = 0 },
    { "lastFiles_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "commitsToDelete_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/lucene/index/IndexFileDeleter$CommitPoint;>;", .constantValue.asLong = 0 },
    { "infoStream_", NULL, 0x12, "Lorg.apache.lucene.util.InfoStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "directoryOrig_", NULL, 0x12, "Lorg.apache.lucene.store.Directory;", NULL, NULL, .constantValue.asLong = 0 },
    { "directory_", NULL, 0x12, "Lorg.apache.lucene.store.Directory;", NULL, NULL, .constantValue.asLong = 0 },
    { "policy_", NULL, 0x12, "Lorg.apache.lucene.index.IndexDeletionPolicy;", NULL, NULL, .constantValue.asLong = 0 },
    { "startingCommitDeleted_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "lastSegmentInfos_", NULL, 0x2, "Lorg.apache.lucene.index.SegmentInfos;", NULL, NULL, .constantValue.asLong = 0 },
    { "VERBOSE_REF_COUNTS", "VERBOSE_REF_COUNTS", 0x9, "Z", &OrgApacheLuceneIndexIndexFileDeleter_VERBOSE_REF_COUNTS, NULL, .constantValue.asLong = 0 },
    { "writer_", NULL, 0x12, "Lorg.apache.lucene.index.IndexWriter;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.index.IndexFileDeleter$RefCount;", "Lorg.apache.lucene.index.IndexFileDeleter$CommitPoint;"};
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexFileDeleter = { 2, "IndexFileDeleter", "org.apache.lucene.index", NULL, 0x10, 24, methods, 13, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneIndexIndexFileDeleter;
}

@end

jboolean OrgApacheLuceneIndexIndexFileDeleter_locked(OrgApacheLuceneIndexIndexFileDeleter *self) {
  return self->writer_ == nil || JavaLangThread_holdsLockWithId_(self->writer_);
}

void OrgApacheLuceneIndexIndexFileDeleter_initWithNSStringArray_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexIndexWriter_withBoolean_withBoolean_(OrgApacheLuceneIndexIndexFileDeleter *self, IOSObjectArray *files, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexIndexDeletionPolicy *policy, OrgApacheLuceneIndexSegmentInfos *segmentInfos, OrgApacheLuceneUtilInfoStream *infoStream, OrgApacheLuceneIndexIndexWriter *writer, jboolean initialIndexExists, jboolean isReaderInit) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->deletable_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->refCounts_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->commits_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->lastFiles_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->commitsToDelete_, new_JavaUtilArrayList_init());
  OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_(writer);
  JreStrongAssign(&self->infoStream_, infoStream);
  JreStrongAssign(&self->writer_, writer);
  NSString *currentSegmentsFile = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) getSegmentsFileName];
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream)) isEnabledWithNSString:@"IFD"]) {
    [infoStream messageWithNSString:@"IFD" withNSString:JreStrcat("$$$@", @"init: current segments file is \"", currentSegmentsFile, @"\"; deletionPolicy=", policy)];
  }
  JreStrongAssign(&self->policy_, policy);
  JreStrongAssign(&self->directoryOrig_, directoryOrig);
  JreStrongAssign(&self->directory_, directory);
  jlong currentGen = [segmentInfos getGeneration];
  OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *currentCommitPoint = nil;
  if (currentSegmentsFile != nil) {
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(OrgApacheLuceneIndexIndexFileNames, CODEC_FILE_PATTERN))) matcherWithJavaLangCharSequence:@""];
    {
      IOSObjectArray *a__ = files;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *fileName = *b__++;
        [((JavaUtilRegexMatcher *) nil_chk(m)) resetWithJavaLangCharSequence:fileName];
        if (![((NSString *) nil_chk(fileName)) hasSuffix:@"write.lock"] && ([m matches] || [fileName hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS] || [fileName hasPrefix:OrgApacheLuceneIndexIndexFileNames_PENDING_SEGMENTS])) {
          OrgApacheLuceneIndexIndexFileDeleter_getRefCountWithNSString_(self, fileName);
          if ([fileName hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS] && ![fileName isEqual:OrgApacheLuceneIndexIndexFileNames_OLD_SEGMENTS_GEN]) {
            if ([infoStream isEnabledWithNSString:@"IFD"]) {
              [infoStream messageWithNSString:@"IFD" withNSString:JreStrcat("$$C", @"init: load commit \"", fileName, '"')];
            }
            OrgApacheLuceneIndexSegmentInfos *sis = OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(directoryOrig, fileName);
            OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *commitPoint = create_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(self->commitsToDelete_, directoryOrig, sis);
            if ([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(sis)) getGeneration] == [segmentInfos getGeneration]) {
              currentCommitPoint = commitPoint;
            }
            [((id<JavaUtilList>) nil_chk(self->commits_)) addWithId:commitPoint];
            [self incRefWithOrgApacheLuceneIndexSegmentInfos:sis withBoolean:true];
            if (self->lastSegmentInfos_ == nil || [sis getGeneration] > [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->lastSegmentInfos_)) getGeneration]) {
              JreStrongAssign(&self->lastSegmentInfos_, sis);
            }
          }
        }
      }
    }
  }
  if (currentCommitPoint == nil && currentSegmentsFile != nil && initialIndexExists) {
    OrgApacheLuceneIndexSegmentInfos *sis = nil;
    @try {
      sis = OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(directoryOrig, currentSegmentsFile);
    }
    @catch (JavaIoIOException *e) {
      @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withNSString_withNSException_(@"unable to read current segments_N file", currentSegmentsFile, e);
    }
    if ([infoStream isEnabledWithNSString:@"IFD"]) {
      [infoStream messageWithNSString:@"IFD" withNSString:JreStrcat("$$", @"forced open of current segments file ", [segmentInfos getSegmentsFileName])];
    }
    currentCommitPoint = create_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(self->commitsToDelete_, directoryOrig, sis);
    [((id<JavaUtilList>) nil_chk(self->commits_)) addWithId:currentCommitPoint];
    [self incRefWithOrgApacheLuceneIndexSegmentInfos:sis withBoolean:true];
  }
  if (isReaderInit) {
    [self checkpointWithOrgApacheLuceneIndexSegmentInfos:segmentInfos withBoolean:false];
  }
  OrgApacheLuceneUtilCollectionUtil_timSortWithJavaUtilList_(self->commits_);
  OrgApacheLuceneIndexIndexFileDeleter_inflateGensWithOrgApacheLuceneIndexSegmentInfos_withJavaUtilCollection_withOrgApacheLuceneUtilInfoStream_(segmentInfos, [((id<JavaUtilMap>) nil_chk(self->refCounts_)) keySet], infoStream);
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(self->refCounts_)) entrySet])) {
    OrgApacheLuceneIndexIndexFileDeleter_RefCount *rc = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    NSString *fileName = [entry_ getKey];
    if (0 == ((OrgApacheLuceneIndexIndexFileDeleter_RefCount *) nil_chk(rc))->count_) {
      if ([((NSString *) nil_chk(fileName)) hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS] && [fileName isEqual:OrgApacheLuceneIndexIndexFileNames_OLD_SEGMENTS_GEN] == false) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"file \"", fileName, @"\" has refCount=0, which should never happen on init"));
      }
      if ([infoStream isEnabledWithNSString:@"IFD"]) {
        [infoStream messageWithNSString:@"IFD" withNSString:JreStrcat("$$C", @"init: removing unreferenced file \"", fileName, '"')];
      }
      OrgApacheLuceneIndexIndexFileDeleter_deleteFileWithNSString_(self, fileName);
    }
  }
  [((OrgApacheLuceneIndexIndexDeletionPolicy *) nil_chk(policy)) onInitWithJavaUtilList:self->commits_];
  [self checkpointWithOrgApacheLuceneIndexSegmentInfos:segmentInfos withBoolean:false];
  if (currentCommitPoint == nil) {
    self->startingCommitDeleted_ = false;
  }
  else {
    self->startingCommitDeleted_ = [currentCommitPoint isDeleted];
  }
  OrgApacheLuceneIndexIndexFileDeleter_deleteCommits(self);
}

OrgApacheLuceneIndexIndexFileDeleter *new_OrgApacheLuceneIndexIndexFileDeleter_initWithNSStringArray_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexIndexWriter_withBoolean_withBoolean_(IOSObjectArray *files, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexIndexDeletionPolicy *policy, OrgApacheLuceneIndexSegmentInfos *segmentInfos, OrgApacheLuceneUtilInfoStream *infoStream, OrgApacheLuceneIndexIndexWriter *writer, jboolean initialIndexExists, jboolean isReaderInit) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexFileDeleter, initWithNSStringArray_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexIndexWriter_withBoolean_withBoolean_, files, directoryOrig, directory, policy, segmentInfos, infoStream, writer, initialIndexExists, isReaderInit)
}

OrgApacheLuceneIndexIndexFileDeleter *create_OrgApacheLuceneIndexIndexFileDeleter_initWithNSStringArray_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexIndexWriter_withBoolean_withBoolean_(IOSObjectArray *files, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexIndexDeletionPolicy *policy, OrgApacheLuceneIndexSegmentInfos *segmentInfos, OrgApacheLuceneUtilInfoStream *infoStream, OrgApacheLuceneIndexIndexWriter *writer, jboolean initialIndexExists, jboolean isReaderInit) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexFileDeleter, initWithNSStringArray_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexIndexWriter_withBoolean_withBoolean_, files, directoryOrig, directory, policy, segmentInfos, infoStream, writer, initialIndexExists, isReaderInit)
}

void OrgApacheLuceneIndexIndexFileDeleter_inflateGensWithOrgApacheLuceneIndexSegmentInfos_withJavaUtilCollection_withOrgApacheLuceneUtilInfoStream_(OrgApacheLuceneIndexSegmentInfos *infos, id<JavaUtilCollection> files, OrgApacheLuceneUtilInfoStream *infoStream) {
  OrgApacheLuceneIndexIndexFileDeleter_initialize();
  jlong maxSegmentGen = JavaLangLong_MIN_VALUE;
  jint maxSegmentName = JavaLangInteger_MIN_VALUE;
  id<JavaUtilMap> maxPerSegmentGen = create_JavaUtilHashMap_init();
  for (NSString * __strong fileName in nil_chk(files)) {
    if ([((NSString *) nil_chk(fileName)) isEqual:OrgApacheLuceneIndexIndexFileNames_OLD_SEGMENTS_GEN] || [fileName isEqual:OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME]) {
    }
    else if ([fileName hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS]) {
      @try {
        maxSegmentGen = JavaLangMath_maxWithLong_withLong_(OrgApacheLuceneIndexSegmentInfos_generationFromSegmentsFileNameWithNSString_(fileName), maxSegmentGen);
      }
      @catch (JavaLangNumberFormatException *ignore) {
      }
    }
    else if ([fileName hasPrefix:OrgApacheLuceneIndexIndexFileNames_PENDING_SEGMENTS]) {
      @try {
        maxSegmentGen = JavaLangMath_maxWithLong_withLong_(OrgApacheLuceneIndexSegmentInfos_generationFromSegmentsFileNameWithNSString_([fileName substring:8]), maxSegmentGen);
      }
      @catch (JavaLangNumberFormatException *ignore) {
      }
    }
    else {
      NSString *segmentName = OrgApacheLuceneIndexIndexFileNames_parseSegmentNameWithNSString_(fileName);
      JreAssert(([((NSString *) nil_chk(segmentName)) hasPrefix:@"_"]), (JreStrcat("$$", @"wtf? file=", fileName)));
      maxSegmentName = JavaLangMath_maxWithInt_withInt_(maxSegmentName, JavaLangInteger_parseIntWithNSString_withInt_([segmentName substring:1], JavaLangCharacter_MAX_RADIX));
      JavaLangLong *curGen = [maxPerSegmentGen getWithId:segmentName];
      if (curGen == nil) {
        curGen = JavaLangLong_valueOfWithLong_(0LL);
      }
      @try {
        curGen = JavaLangLong_valueOfWithLong_(JavaLangMath_maxWithLong_withLong_([curGen longLongValue], OrgApacheLuceneIndexIndexFileNames_parseGenerationWithNSString_(fileName)));
      }
      @catch (JavaLangNumberFormatException *ignore) {
      }
      [maxPerSegmentGen putWithId:segmentName withId:curGen];
    }
  }
  [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) setNextWriteGenerationWithLong:JavaLangMath_maxWithLong_withLong_([infos getGeneration], maxSegmentGen)];
  if (infos->counter_ < 1 + maxSegmentName) {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream)) isEnabledWithNSString:@"IFD"]) {
      [infoStream messageWithNSString:@"IFD" withNSString:JreStrcat("$I$I", @"init: inflate infos.counter to ", (1 + maxSegmentName), @" vs current=", infos->counter_)];
    }
    infos->counter_ = 1 + maxSegmentName;
  }
  for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in infos) {
    JavaLangLong *gen = [maxPerSegmentGen getWithId:((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->name_];
    JreAssert((gen != nil), (@"org/apache/lucene/index/IndexFileDeleter.java:315 condition failed: assert gen != null;"));
    jlong genLong = [((JavaLangLong *) nil_chk(gen)) longLongValue];
    if ([info getNextWriteDelGen] < genLong + 1) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream)) isEnabledWithNSString:@"IFD"]) {
        [infoStream messageWithNSString:@"IFD" withNSString:JreStrcat("$$$J$J", @"init: seg=", info->info_->name_, @" set nextWriteDelGen=", (genLong + 1), @" vs current=", [info getNextWriteDelGen])];
      }
      [info setNextWriteDelGenWithLong:genLong + 1];
    }
    if ([info getNextWriteFieldInfosGen] < genLong + 1) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream)) isEnabledWithNSString:@"IFD"]) {
        [infoStream messageWithNSString:@"IFD" withNSString:JreStrcat("$$$J$J", @"init: seg=", info->info_->name_, @" set nextWriteFieldInfosGen=", (genLong + 1), @" vs current=", [info getNextWriteFieldInfosGen])];
      }
      [info setNextWriteFieldInfosGenWithLong:genLong + 1];
    }
    if ([info getNextWriteDocValuesGen] < genLong + 1) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream)) isEnabledWithNSString:@"IFD"]) {
        [infoStream messageWithNSString:@"IFD" withNSString:JreStrcat("$$$J$J", @"init: seg=", info->info_->name_, @" set nextWriteDocValuesGen=", (genLong + 1), @" vs current=", [info getNextWriteDocValuesGen])];
      }
      [info setNextWriteDocValuesGenWithLong:genLong + 1];
    }
  }
}

void OrgApacheLuceneIndexIndexFileDeleter_deleteCommits(OrgApacheLuceneIndexIndexFileDeleter *self) {
  jint size = [((id<JavaUtilList>) nil_chk(self->commitsToDelete_)) size];
  if (size > 0) {
    NSException *firstThrowable = nil;
    for (jint i = 0; i < size; i++) {
      OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *commit = [((id<JavaUtilList>) nil_chk(self->commitsToDelete_)) getWithInt:i];
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IFD"]) {
        [self->infoStream_ messageWithNSString:@"IFD" withNSString:JreStrcat("$$C", @"deleteCommits: now decRef commit \"", [((OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *) nil_chk(commit)) getSegmentsFileName], '"')];
      }
      @try {
        [self decRefWithJavaUtilCollection:((OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *) nil_chk(commit))->files_];
      }
      @catch (NSException *t) {
        if (firstThrowable == nil) {
          firstThrowable = t;
        }
      }
    }
    [((id<JavaUtilList>) nil_chk(self->commitsToDelete_)) clear];
    OrgApacheLuceneUtilIOUtils_reThrowUncheckedWithNSException_(firstThrowable);
    size = [((id<JavaUtilList>) nil_chk(self->commits_)) size];
    jint readFrom = 0;
    jint writeTo = 0;
    while (readFrom < size) {
      OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *commit = [((id<JavaUtilList>) nil_chk(self->commits_)) getWithInt:readFrom];
      if (!((OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *) nil_chk(commit))->deleted_) {
        if (writeTo != readFrom) {
          [((id<JavaUtilList>) nil_chk(self->commits_)) setWithInt:writeTo withId:[self->commits_ getWithInt:readFrom]];
        }
        writeTo++;
      }
      readFrom++;
    }
    while (size > writeTo) {
      [((id<JavaUtilList>) nil_chk(self->commits_)) removeWithInt:size - 1];
      size--;
    }
  }
}

void OrgApacheLuceneIndexIndexFileDeleter_decRefWithNSString_(OrgApacheLuceneIndexIndexFileDeleter *self, NSString *fileName) {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:668 condition failed: assert locked();"));
  OrgApacheLuceneIndexIndexFileDeleter_RefCount *rc = OrgApacheLuceneIndexIndexFileDeleter_getRefCountWithNSString_(self, fileName);
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IFD"]) {
    if (OrgApacheLuceneIndexIndexFileDeleter_VERBOSE_REF_COUNTS) {
      [self->infoStream_ messageWithNSString:@"IFD" withNSString:JreStrcat("$$$I", @"  DecRef \"", fileName, @"\": pre-decr count is ", ((OrgApacheLuceneIndexIndexFileDeleter_RefCount *) nil_chk(rc))->count_)];
    }
  }
  if (0 == [((OrgApacheLuceneIndexIndexFileDeleter_RefCount *) nil_chk(rc)) DecRef]) {
    @try {
      [((id<JavaUtilSet>) nil_chk(self->deletable_)) addWithId:fileName];
    }
    @finally {
      [((id<JavaUtilMap>) nil_chk(self->refCounts_)) removeWithId:fileName];
    }
  }
}

OrgApacheLuceneIndexIndexFileDeleter_RefCount *OrgApacheLuceneIndexIndexFileDeleter_getRefCountWithNSString_(OrgApacheLuceneIndexIndexFileDeleter *self, NSString *fileName) {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:701 condition failed: assert locked();"));
  OrgApacheLuceneIndexIndexFileDeleter_RefCount *rc;
  if (![((id<JavaUtilMap>) nil_chk(self->refCounts_)) containsKeyWithId:fileName]) {
    rc = create_OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(fileName);
    JreAssert((self->deletable_ == nil || [self->deletable_ containsWithId:fileName] == false), (JreStrcat("$$$", @"file \"", fileName, @"\" cannot be incRef'd: it's already pending delete")));
    [((id<JavaUtilMap>) nil_chk(self->refCounts_)) putWithId:fileName withId:rc];
  }
  else {
    rc = [((id<JavaUtilMap>) nil_chk(self->refCounts_)) getWithId:fileName];
  }
  return rc;
}

jboolean OrgApacheLuceneIndexIndexFileDeleter_deleteFileWithNSString_(OrgApacheLuceneIndexIndexFileDeleter *self, NSString *fileName) {
  JreAssert((OrgApacheLuceneIndexIndexFileDeleter_locked(self)), (@"org/apache/lucene/index/IndexFileDeleter.java:740 condition failed: assert locked();"));
  [self ensureOpen];
  @try {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IFD"]) {
      [self->infoStream_ messageWithNSString:@"IFD" withNSString:JreStrcat("$$C", @"delete \"", fileName, '"')];
    }
    [((OrgApacheLuceneStoreDirectory *) nil_chk(self->directory_)) deleteFileWithNSString:fileName];
    [((id<JavaUtilSet>) nil_chk(self->deletable_)) removeWithId:fileName];
    return true;
  }
  @catch (JavaIoIOException *e) {
    JreAssert(([e isKindOfClass:[OrgLukhnosPortmobileFileNoSuchFileException class]] == false), (JreStrcat("$$", @"hit unexpected NoSuchFileException: file=", fileName)));
    JreAssert(([e isKindOfClass:[JavaIoFileNotFoundException class]] == false), (JreStrcat("$$", @"hit unexpected FileNotFoundException: file=", fileName)));
    if ([self->infoStream_ isEnabledWithNSString:@"IFD"]) {
      [self->infoStream_ messageWithNSString:@"IFD" withNSString:JreStrcat("$$$$$", @"unable to remove file \"", fileName, @"\": ", [((JavaIoIOException *) nil_chk(e)) description], @"; Will re-try later.")];
    }
    [((id<JavaUtilSet>) nil_chk(self->deletable_)) addWithId:fileName];
    return false;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexFileDeleter)

@implementation OrgApacheLuceneIndexIndexFileDeleter_RefCount

- (instancetype)initWithNSString:(NSString *)fileName {
  OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(self, fileName);
  return self;
}

- (jint)IncRef {
  if (!initDone_) {
    initDone_ = true;
  }
  else {
    JreAssert((count_ > 0), (JreStrcat("$$$C", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], @": RefCount is 0 pre-increment for file \"", fileName_, '"')));
  }
  return ++count_;
}

- (jint)DecRef {
  JreAssert((count_ > 0), (JreStrcat("$$$C", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], @": RefCount is 0 pre-decrement for file \"", fileName_, '"')));
  return --count_;
}

- (void)dealloc {
  RELEASE_(fileName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "RefCount", NULL, 0x0, NULL, NULL },
    { "IncRef", NULL, "I", 0x1, NULL, NULL },
    { "DecRef", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fileName_", NULL, 0x10, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "initDone_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "count_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexFileDeleter_RefCount = { 2, "RefCount", "org.apache.lucene.index", "IndexFileDeleter", 0x1a, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexIndexFileDeleter_RefCount;
}

@end

void OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(OrgApacheLuceneIndexIndexFileDeleter_RefCount *self, NSString *fileName) {
  NSObject_init(self);
  JreStrongAssign(&self->fileName_, fileName);
}

OrgApacheLuceneIndexIndexFileDeleter_RefCount *new_OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(NSString *fileName) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexFileDeleter_RefCount, initWithNSString_, fileName)
}

OrgApacheLuceneIndexIndexFileDeleter_RefCount *create_OrgApacheLuceneIndexIndexFileDeleter_RefCount_initWithNSString_(NSString *fileName) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexFileDeleter_RefCount, initWithNSString_, fileName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexFileDeleter_RefCount)

@implementation OrgApacheLuceneIndexIndexFileDeleter_CommitPoint

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)commitsToDelete
         withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directoryOrig
      withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos {
  OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(self, commitsToDelete, directoryOrig, segmentInfos);
  return self;
}

- (NSString *)description {
  return JreStrcat("$$C", @"IndexFileDeleter.CommitPoint(", segmentsFileName_, ')');
}

- (jint)getSegmentCount {
  return segmentCount_;
}

- (NSString *)getSegmentsFileName {
  return segmentsFileName_;
}

- (id<JavaUtilCollection>)getFileNames {
  return files_;
}

- (OrgApacheLuceneStoreDirectory *)getDirectory {
  return directoryOrig_;
}

- (jlong)getGeneration {
  return generation_;
}

- (id<JavaUtilMap>)getUserData {
  return userData_;
}

- (void)delete__ {
  if (!deleted_) {
    deleted_ = true;
    [((id<JavaUtilCollection>) nil_chk(commitsToDelete_)) addWithId:self];
  }
}

- (jboolean)isDeleted {
  return deleted_;
}

- (void)dealloc {
  RELEASE_(files_);
  RELEASE_(segmentsFileName_);
  RELEASE_(directoryOrig_);
  RELEASE_(commitsToDelete_);
  RELEASE_(userData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilCollection:withOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexSegmentInfos:", "CommitPoint", NULL, 0x1, "Ljava.io.IOException;", "(Ljava/util/Collection<Lorg/apache/lucene/index/IndexFileDeleter$CommitPoint;>;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfos;)V" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getSegmentCount", NULL, "I", 0x1, NULL, NULL },
    { "getSegmentsFileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFileNames", NULL, "Ljava.util.Collection;", 0x1, NULL, "()Ljava/util/Collection<Ljava/lang/String;>;" },
    { "getDirectory", NULL, "Lorg.apache.lucene.store.Directory;", 0x1, NULL, NULL },
    { "getGeneration", NULL, "J", 0x1, NULL, NULL },
    { "getUserData", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" },
    { "delete__", "delete", "V", 0x1, NULL, NULL },
    { "isDeleted", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "files_", NULL, 0x0, "Ljava.util.Collection;", NULL, "Ljava/util/Collection<Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "segmentsFileName_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "deleted_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "directoryOrig_", NULL, 0x0, "Lorg.apache.lucene.store.Directory;", NULL, NULL, .constantValue.asLong = 0 },
    { "commitsToDelete_", NULL, 0x0, "Ljava.util.Collection;", NULL, "Ljava/util/Collection<Lorg/apache/lucene/index/IndexFileDeleter$CommitPoint;>;", .constantValue.asLong = 0 },
    { "generation_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "userData_", NULL, 0x10, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "segmentCount_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexFileDeleter_CommitPoint = { 2, "CommitPoint", "org.apache.lucene.index", "IndexFileDeleter", 0x1a, 10, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint;
}

@end

void OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *self, id<JavaUtilCollection> commitsToDelete, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneIndexSegmentInfos *segmentInfos) {
  OrgApacheLuceneIndexIndexCommit_init(self);
  JreStrongAssign(&self->directoryOrig_, directoryOrig);
  JreStrongAssign(&self->commitsToDelete_, commitsToDelete);
  JreStrongAssign(&self->userData_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) getUserData]);
  JreStrongAssign(&self->segmentsFileName_, [segmentInfos getSegmentsFileName]);
  self->generation_ = [segmentInfos getGeneration];
  JreStrongAssign(&self->files_, JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([segmentInfos filesWithBoolean:true]));
  self->segmentCount_ = [segmentInfos size];
}

OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *new_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(id<JavaUtilCollection> commitsToDelete, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneIndexSegmentInfos *segmentInfos) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint, initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_, commitsToDelete, directoryOrig, segmentInfos)
}

OrgApacheLuceneIndexIndexFileDeleter_CommitPoint *create_OrgApacheLuceneIndexIndexFileDeleter_CommitPoint_initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_(id<JavaUtilCollection> commitsToDelete, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneIndexSegmentInfos *segmentInfos) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint, initWithJavaUtilCollection_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_, commitsToDelete, directoryOrig, segmentInfos)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexFileDeleter_CommitPoint)
