//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/MultiTermsEnum.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/MultiPostingsEnum.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/PriorityQueue.h"

@class OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue;

@interface OrgApacheLuceneIndexMultiTermsEnum () {
 @public
  OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *queue_;
  IOSObjectArray *subs_;
  IOSObjectArray *currentSubs_;
  IOSObjectArray *top_;
  IOSObjectArray *subDocs_;
  OrgApacheLuceneUtilBytesRef *lastSeek_;
  jboolean lastSeekExact_;
  OrgApacheLuceneUtilBytesRefBuilder *lastSeekScratch_;
  jint numTop_;
  jint numSubs_;
  OrgApacheLuceneUtilBytesRef *current_;
}

- (void)pullTop;

- (void)pushTop;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, queue_, OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, subs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, currentSubs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, top_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, subDocs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, lastSeek_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, lastSeekScratch_, OrgApacheLuceneUtilBytesRefBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, current_, OrgApacheLuceneUtilBytesRef *)

static id<JavaUtilComparator> OrgApacheLuceneIndexMultiTermsEnum_INDEX_COMPARATOR_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneIndexMultiTermsEnum, INDEX_COMPARATOR_, id<JavaUtilComparator>)

__attribute__((unused)) static void OrgApacheLuceneIndexMultiTermsEnum_pullTop(OrgApacheLuceneIndexMultiTermsEnum *self);

__attribute__((unused)) static void OrgApacheLuceneIndexMultiTermsEnum_pushTop(OrgApacheLuceneIndexMultiTermsEnum *self);

@interface OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice () {
 @public
  OrgApacheLuceneIndexReaderSlice *subSlice_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice, subSlice_, OrgApacheLuceneIndexReaderSlice *)

@interface OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue : OrgApacheLuceneUtilPriorityQueue {
 @public
  IOSIntArray *stack_;
}

- (instancetype)initWithInt:(jint)size;

- (jboolean)lessThanWithId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)termsA
                    withId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)termsB;

- (jint)fillTopWithOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSliceArray:(IOSObjectArray *)tops;

- (OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)getWithInt:(jint)i;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue, stack_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *self, jint size);

__attribute__((unused)) static OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *new_OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_getWithInt_(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *self, jint i);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue)

@interface OrgApacheLuceneIndexMultiTermsEnum_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)o1
               withId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)o2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexMultiTermsEnum_$1)

__attribute__((unused)) static void OrgApacheLuceneIndexMultiTermsEnum_$1_init(OrgApacheLuceneIndexMultiTermsEnum_$1 *self);

__attribute__((unused)) static OrgApacheLuceneIndexMultiTermsEnum_$1 *new_OrgApacheLuceneIndexMultiTermsEnum_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexMultiTermsEnum_$1)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexMultiTermsEnum)

@implementation OrgApacheLuceneIndexMultiTermsEnum

- (jint)getMatchCount {
  return numTop_;
}

- (IOSObjectArray *)getMatchArray {
  return top_;
}

- (instancetype)initWithOrgApacheLuceneIndexReaderSliceArray:(IOSObjectArray *)slices {
  OrgApacheLuceneIndexMultiTermsEnum_initWithOrgApacheLuceneIndexReaderSliceArray_(self, slices);
  return self;
}

- (OrgApacheLuceneUtilBytesRef *)term {
  return current_;
}

- (OrgApacheLuceneIndexTermsEnum *)resetWithOrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndexArray:(IOSObjectArray *)termsEnumsIndex {
  JreAssert((((IOSObjectArray *) nil_chk(termsEnumsIndex))->size_ <= ((IOSObjectArray *) nil_chk(top_))->size_), (@"org/apache/lucene/index/MultiTermsEnum.java:104 condition failed: assert termsEnumsIndex.length <= top.length;"));
  numSubs_ = 0;
  numTop_ = 0;
  [((OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *) nil_chk(queue_)) clear];
  for (jint i = 0; i < termsEnumsIndex->size_; i++) {
    OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex *termsEnumIndex = IOSObjectArray_Get(termsEnumsIndex, i);
    JreAssert((termsEnumIndex != nil), (@"org/apache/lucene/index/MultiTermsEnum.java:111 condition failed: assert termsEnumIndex != null;"));
    OrgApacheLuceneUtilBytesRef *term = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex *) nil_chk(termsEnumIndex))->termsEnum_)) next];
    if (term != nil) {
      OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *entry_ = IOSObjectArray_Get(nil_chk(subs_), termsEnumIndex->subIndex_);
      [((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(entry_)) resetWithOrgApacheLuceneIndexTermsEnum:termsEnumIndex->termsEnum_ withOrgApacheLuceneUtilBytesRef:term];
      [queue_ addWithId:entry_];
      IOSObjectArray_Set(nil_chk(currentSubs_), numSubs_++, entry_);
    }
    else {
    }
  }
  if ([queue_ size] == 0) {
    return JreLoadStatic(OrgApacheLuceneIndexTermsEnum, EMPTY_);
  }
  else {
    return self;
  }
}

- (jboolean)seekExactWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  [((OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *) nil_chk(queue_)) clear];
  numTop_ = 0;
  jboolean seekOpt = NO;
  if (lastSeek_ != nil && [lastSeek_ compareToWithId:term] <= 0) {
    seekOpt = YES;
  }
  JreStrongAssign(&lastSeek_, nil);
  lastSeekExact_ = YES;
  for (jint i = 0; i < numSubs_; i++) {
    jboolean status;
    if (seekOpt) {
      OrgApacheLuceneUtilBytesRef *curTerm = ((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(currentSubs_), i)))->current_;
      if (curTerm != nil) {
        jint cmp = [((OrgApacheLuceneUtilBytesRef *) nil_chk(term)) compareToWithId:curTerm];
        if (cmp == 0) {
          status = YES;
        }
        else if (cmp < 0) {
          status = NO;
        }
        else {
          status = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->terms_)) seekExactWithOrgApacheLuceneUtilBytesRef:term];
        }
      }
      else {
        status = NO;
      }
    }
    else {
      status = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(currentSubs_), i)))->terms_)) seekExactWithOrgApacheLuceneUtilBytesRef:term];
    }
    if (status) {
      IOSObjectArray_Set(nil_chk(top_), numTop_++, IOSObjectArray_Get(nil_chk(currentSubs_), i));
      JreStrongAssign(&current_, JreStrongAssign(&((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->current_, [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->terms_)) term]));
      JreAssert(([((OrgApacheLuceneUtilBytesRef *) nil_chk(term)) isEqual:((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->current_]), (@"org/apache/lucene/index/MultiTermsEnum.java:173 condition failed: assert term.equals(currentSubs[i].current);"));
    }
  }
  return numTop_ > 0;
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *)seekCeilWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  [((OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *) nil_chk(queue_)) clear];
  numTop_ = 0;
  lastSeekExact_ = NO;
  jboolean seekOpt = NO;
  if (lastSeek_ != nil && [lastSeek_ compareToWithId:term] <= 0) {
    seekOpt = YES;
  }
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(lastSeekScratch_)) copyBytesWithOrgApacheLuceneUtilBytesRef:term];
  JreStrongAssign(&lastSeek_, [lastSeekScratch_ get]);
  for (jint i = 0; i < numSubs_; i++) {
    OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *status;
    if (seekOpt) {
      OrgApacheLuceneUtilBytesRef *curTerm = ((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(currentSubs_), i)))->current_;
      if (curTerm != nil) {
        jint cmp = [((OrgApacheLuceneUtilBytesRef *) nil_chk(term)) compareToWithId:curTerm];
        if (cmp == 0) {
          status = JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND);
        }
        else if (cmp < 0) {
          status = JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, NOT_FOUND);
        }
        else {
          status = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->terms_)) seekCeilWithOrgApacheLuceneUtilBytesRef:term];
        }
      }
      else {
        status = JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END);
      }
    }
    else {
      status = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(currentSubs_), i)))->terms_)) seekCeilWithOrgApacheLuceneUtilBytesRef:term];
    }
    if (status == JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND)) {
      IOSObjectArray_Set(nil_chk(top_), numTop_++, IOSObjectArray_Get(nil_chk(currentSubs_), i));
      JreStrongAssign(&current_, JreStrongAssign(&((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->current_, [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->terms_)) term]));
      [queue_ addWithId:IOSObjectArray_Get(currentSubs_, i)];
    }
    else {
      if (status == JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, NOT_FOUND)) {
        JreStrongAssign(&((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(currentSubs_), i)))->current_, [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->terms_)) term]);
        JreAssert((((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->current_ != nil), (@"org/apache/lucene/index/MultiTermsEnum.java:229 condition failed: assert currentSubs[i].current != null;"));
        [queue_ addWithId:IOSObjectArray_Get(currentSubs_, i)];
      }
      else {
        JreAssert((status == JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END)), (@"org/apache/lucene/index/MultiTermsEnum.java:232 condition failed: assert status == SeekStatus.END;"));
        JreStrongAssign(&((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(currentSubs_), i)))->current_, nil);
      }
    }
  }
  if (numTop_ > 0) {
    return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND);
  }
  else if ([queue_ size] > 0) {
    OrgApacheLuceneIndexMultiTermsEnum_pullTop(self);
    return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, NOT_FOUND);
  }
  else {
    return JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, END);
  }
}

- (void)seekExactWithLong:(jlong)ord {
  @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
}

- (jlong)ord {
  @throw [new_JavaLangUnsupportedOperationException_init() autorelease];
}

- (void)pullTop {
  OrgApacheLuceneIndexMultiTermsEnum_pullTop(self);
}

- (void)pushTop {
  OrgApacheLuceneIndexMultiTermsEnum_pushTop(self);
}

- (OrgApacheLuceneUtilBytesRef *)next {
  if (lastSeekExact_) {
    OrgApacheLuceneIndexTermsEnum_SeekStatusEnum *status = [self seekCeilWithOrgApacheLuceneUtilBytesRef:current_];
    JreAssert((status == JreLoadStatic(OrgApacheLuceneIndexTermsEnum_SeekStatusEnum, FOUND)), (@"org/apache/lucene/index/MultiTermsEnum.java:295 condition failed: assert status == SeekStatus.FOUND;"));
    lastSeekExact_ = NO;
  }
  JreStrongAssign(&lastSeek_, nil);
  OrgApacheLuceneIndexMultiTermsEnum_pushTop(self);
  if ([((OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *) nil_chk(queue_)) size] > 0) {
    OrgApacheLuceneIndexMultiTermsEnum_pullTop(self);
  }
  else {
    JreStrongAssign(&current_, nil);
  }
  return current_;
}

- (jint)docFreq {
  jint sum = 0;
  for (jint i = 0; i < numTop_; i++) {
    sum += [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(top_), i)))->terms_)) docFreq];
  }
  return sum;
}

- (jlong)totalTermFreq {
  jlong sum = 0;
  for (jint i = 0; i < numTop_; i++) {
    jlong v = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(top_), i)))->terms_)) totalTermFreq];
    if (v == -1) {
      return v;
    }
    sum += v;
  }
  return sum;
}

- (OrgApacheLuceneIndexPostingsEnum *)postingsWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)reuse
                                                                           withInt:(jint)flags {
  OrgApacheLuceneIndexMultiPostingsEnum *docsEnum;
  if (reuse != nil && [reuse isKindOfClass:[OrgApacheLuceneIndexMultiPostingsEnum class]]) {
    docsEnum = (OrgApacheLuceneIndexMultiPostingsEnum *) check_class_cast(reuse, [OrgApacheLuceneIndexMultiPostingsEnum class]);
    if (![docsEnum canReuseWithOrgApacheLuceneIndexMultiTermsEnum:self]) {
      docsEnum = [new_OrgApacheLuceneIndexMultiPostingsEnum_initWithOrgApacheLuceneIndexMultiTermsEnum_withInt_(self, ((IOSObjectArray *) nil_chk(subs_))->size_) autorelease];
    }
  }
  else {
    docsEnum = [new_OrgApacheLuceneIndexMultiPostingsEnum_initWithOrgApacheLuceneIndexMultiTermsEnum_withInt_(self, ((IOSObjectArray *) nil_chk(subs_))->size_) autorelease];
  }
  jint upto = 0;
  OrgApacheLuceneUtilArrayUtil_timSortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(top_, 0, numTop_, OrgApacheLuceneIndexMultiTermsEnum_INDEX_COMPARATOR_);
  for (jint i = 0; i < numTop_; i++) {
    OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *entry_ = IOSObjectArray_Get(nil_chk(top_), i);
    JreAssert((((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(entry_))->index_ < ((IOSObjectArray *) nil_chk(((OrgApacheLuceneIndexMultiPostingsEnum *) nil_chk(docsEnum))->subPostingsEnums_))->size_), (JreStrcat("I$I$I", entry_->index_, @" vs ", docsEnum->subPostingsEnums_->size_, @"; ", ((IOSObjectArray *) nil_chk(subs_))->size_)));
    OrgApacheLuceneIndexPostingsEnum *subPostingsEnum = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(entry_->terms_)) postingsWithOrgApacheLuceneIndexPostingsEnum:IOSObjectArray_Get(docsEnum->subPostingsEnums_, entry_->index_) withInt:flags];
    JreAssert((subPostingsEnum != nil), (@"org/apache/lucene/index/MultiTermsEnum.java:360 condition failed: assert subPostingsEnum != null;"));
    IOSObjectArray_Set(docsEnum->subPostingsEnums_, entry_->index_, subPostingsEnum);
    JreStrongAssign(&((OrgApacheLuceneIndexMultiPostingsEnum_EnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(subDocs_), upto)))->postingsEnum_, subPostingsEnum);
    JreStrongAssign(&((OrgApacheLuceneIndexMultiPostingsEnum_EnumWithSlice *) nil_chk(IOSObjectArray_Get(subDocs_, upto)))->slice_, entry_->subSlice_);
    upto++;
  }
  return [((OrgApacheLuceneIndexMultiPostingsEnum *) nil_chk(docsEnum)) resetWithOrgApacheLuceneIndexMultiPostingsEnum_EnumWithSliceArray:subDocs_ withInt:upto];
}

- (NSString *)description {
  return JreStrcat("$$C", @"MultiTermsEnum(", JavaUtilArrays_toStringWithNSObjectArray_(subs_), ')');
}

- (void)dealloc {
  RELEASE_(queue_);
  RELEASE_(subs_);
  RELEASE_(currentSubs_);
  RELEASE_(top_);
  RELEASE_(subDocs_);
  RELEASE_(lastSeek_);
  RELEASE_(lastSeekScratch_);
  RELEASE_(current_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexMultiTermsEnum class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexMultiTermsEnum_INDEX_COMPARATOR_, new_OrgApacheLuceneIndexMultiTermsEnum_$1_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexMultiTermsEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getMatchCount", NULL, "I", 0x1, NULL, NULL },
    { "getMatchArray", NULL, "[Lorg.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice;", 0x1, NULL, NULL },
    { "initWithOrgApacheLuceneIndexReaderSliceArray:", "MultiTermsEnum", NULL, 0x1, NULL, NULL },
    { "term", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, NULL, NULL },
    { "resetWithOrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndexArray:", "reset", "Lorg.apache.lucene.index.TermsEnum;", 0x1, "Ljava.io.IOException;", NULL },
    { "seekExactWithOrgApacheLuceneUtilBytesRef:", "seekExact", "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "seekCeilWithOrgApacheLuceneUtilBytesRef:", "seekCeil", "Lorg.apache.lucene.index.TermsEnum$SeekStatus;", 0x1, "Ljava.io.IOException;", NULL },
    { "seekExactWithLong:", "seekExact", "V", 0x1, NULL, NULL },
    { "ord", NULL, "J", 0x1, NULL, NULL },
    { "pullTop", NULL, "V", 0x2, NULL, NULL },
    { "pushTop", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "next", NULL, "Lorg.apache.lucene.util.BytesRef;", 0x1, "Ljava.io.IOException;", NULL },
    { "docFreq", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "totalTermFreq", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "postingsWithOrgApacheLuceneIndexPostingsEnum:withInt:", "postings", "Lorg.apache.lucene.index.PostingsEnum;", 0x1, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INDEX_COMPARATOR_", NULL, 0x1a, "Ljava.util.Comparator;", &OrgApacheLuceneIndexMultiTermsEnum_INDEX_COMPARATOR_, "Ljava/util/Comparator<Lorg/apache/lucene/index/MultiTermsEnum$TermsEnumWithSlice;>;", .constantValue.asLong = 0 },
    { "queue_", NULL, 0x12, "Lorg.apache.lucene.index.MultiTermsEnum$TermMergeQueue;", NULL, NULL, .constantValue.asLong = 0 },
    { "subs_", NULL, 0x12, "[Lorg.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice;", NULL, NULL, .constantValue.asLong = 0 },
    { "currentSubs_", NULL, 0x12, "[Lorg.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice;", NULL, NULL, .constantValue.asLong = 0 },
    { "top_", NULL, 0x12, "[Lorg.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice;", NULL, NULL, .constantValue.asLong = 0 },
    { "subDocs_", NULL, 0x12, "[Lorg.apache.lucene.index.MultiPostingsEnum$EnumWithSlice;", NULL, NULL, .constantValue.asLong = 0 },
    { "lastSeek_", NULL, 0x2, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "lastSeekExact_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "lastSeekScratch_", NULL, 0x12, "Lorg.apache.lucene.util.BytesRefBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "numTop_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "numSubs_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "current_", NULL, 0x2, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.index.MultiTermsEnum$TermsEnumIndex;", "Lorg.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice;", "Lorg.apache.lucene.index.MultiTermsEnum$TermMergeQueue;"};
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiTermsEnum = { 2, "MultiTermsEnum", "org.apache.lucene.index", NULL, 0x11, 16, methods, 12, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneIndexMultiTermsEnum;
}

@end

void OrgApacheLuceneIndexMultiTermsEnum_initWithOrgApacheLuceneIndexReaderSliceArray_(OrgApacheLuceneIndexMultiTermsEnum *self, IOSObjectArray *slices) {
  OrgApacheLuceneIndexTermsEnum_init(self);
  JreStrongAssignAndConsume(&self->lastSeekScratch_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  JreStrongAssignAndConsume(&self->queue_, new_OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(((IOSObjectArray *) nil_chk(slices))->size_));
  JreStrongAssignAndConsume(&self->top_, [IOSObjectArray newArrayWithLength:slices->size_ type:OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_class_()]);
  JreStrongAssignAndConsume(&self->subs_, [IOSObjectArray newArrayWithLength:slices->size_ type:OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_class_()]);
  JreStrongAssignAndConsume(&self->subDocs_, [IOSObjectArray newArrayWithLength:slices->size_ type:OrgApacheLuceneIndexMultiPostingsEnum_EnumWithSlice_class_()]);
  for (jint i = 0; i < slices->size_; i++) {
    IOSObjectArray_SetAndConsume(self->subs_, i, new_OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_initWithInt_withOrgApacheLuceneIndexReaderSlice_(i, IOSObjectArray_Get(slices, i)));
    IOSObjectArray_SetAndConsume(self->subDocs_, i, new_OrgApacheLuceneIndexMultiPostingsEnum_EnumWithSlice_init());
    JreStrongAssign(&((OrgApacheLuceneIndexMultiPostingsEnum_EnumWithSlice *) nil_chk(IOSObjectArray_Get(self->subDocs_, i)))->slice_, IOSObjectArray_Get(slices, i));
  }
  JreStrongAssignAndConsume(&self->currentSubs_, [IOSObjectArray newArrayWithLength:slices->size_ type:OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_class_()]);
}

OrgApacheLuceneIndexMultiTermsEnum *new_OrgApacheLuceneIndexMultiTermsEnum_initWithOrgApacheLuceneIndexReaderSliceArray_(IOSObjectArray *slices) {
  OrgApacheLuceneIndexMultiTermsEnum *self = [OrgApacheLuceneIndexMultiTermsEnum alloc];
  OrgApacheLuceneIndexMultiTermsEnum_initWithOrgApacheLuceneIndexReaderSliceArray_(self, slices);
  return self;
}

void OrgApacheLuceneIndexMultiTermsEnum_pullTop(OrgApacheLuceneIndexMultiTermsEnum *self) {
  JreAssert((self->numTop_ == 0), (@"org/apache/lucene/index/MultiTermsEnum.java:266 condition failed: assert numTop == 0;"));
  self->numTop_ = [((OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *) nil_chk(self->queue_)) fillTopWithOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSliceArray:self->top_];
  JreStrongAssign(&self->current_, ((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(self->top_), 0)))->current_);
}

void OrgApacheLuceneIndexMultiTermsEnum_pushTop(OrgApacheLuceneIndexMultiTermsEnum *self) {
  for (jint i = 0; i < self->numTop_; i++) {
    OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *top = [((OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *) nil_chk(self->queue_)) top];
    JreStrongAssign(&((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(top))->current_, [((OrgApacheLuceneIndexTermsEnum *) nil_chk(top->terms_)) next]);
    if (top->current_ == nil) {
      [self->queue_ pop];
    }
    else {
      [self->queue_ updateTop];
    }
  }
  self->numTop_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiTermsEnum)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex)

IOSObjectArray *OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_EMPTY_ARRAY_;

@implementation OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex

- (instancetype)initWithOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)termsEnum
                                              withInt:(jint)subIndex {
  OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_initWithOrgApacheLuceneIndexTermsEnum_withInt_(self, termsEnum, subIndex);
  return self;
}

- (void)dealloc {
  RELEASE_(termsEnum_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_EMPTY_ARRAY_, [IOSObjectArray newArrayWithLength:0 type:OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_class_()]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexTermsEnum:withInt:", "TermsEnumIndex", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_ARRAY_", NULL, 0x19, "[Lorg.apache.lucene.index.MultiTermsEnum$TermsEnumIndex;", &OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_EMPTY_ARRAY_, NULL, .constantValue.asLong = 0 },
    { "subIndex_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "termsEnum_", NULL, 0x10, "Lorg.apache.lucene.index.TermsEnum;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex = { 2, "TermsEnumIndex", "org.apache.lucene.index", "MultiTermsEnum", 0x8, 1, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex;
}

@end

void OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_initWithOrgApacheLuceneIndexTermsEnum_withInt_(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex *self, OrgApacheLuceneIndexTermsEnum *termsEnum, jint subIndex) {
  NSObject_init(self);
  JreStrongAssign(&self->termsEnum_, termsEnum);
  self->subIndex_ = subIndex;
}

OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex *new_OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_initWithOrgApacheLuceneIndexTermsEnum_withInt_(OrgApacheLuceneIndexTermsEnum *termsEnum, jint subIndex) {
  OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex *self = [OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex alloc];
  OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_initWithOrgApacheLuceneIndexTermsEnum_withInt_(self, termsEnum, subIndex);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex)

@implementation OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice

- (instancetype)initWithInt:(jint)index
withOrgApacheLuceneIndexReaderSlice:(OrgApacheLuceneIndexReaderSlice *)subSlice {
  OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_initWithInt_withOrgApacheLuceneIndexReaderSlice_(self, index, subSlice);
  return self;
}

- (void)resetWithOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)terms
               withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  JreStrongAssign(&self->terms_, terms);
  JreStrongAssign(&current_, term);
}

- (NSString *)description {
  return JreStrcat("$C@", [((OrgApacheLuceneIndexReaderSlice *) nil_chk(subSlice_)) description], ':', terms_);
}

- (void)dealloc {
  RELEASE_(subSlice_);
  RELEASE_(terms_);
  RELEASE_(current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withOrgApacheLuceneIndexReaderSlice:", "TermsEnumWithSlice", NULL, 0x1, NULL, NULL },
    { "resetWithOrgApacheLuceneIndexTermsEnum:withOrgApacheLuceneUtilBytesRef:", "reset", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "subSlice_", NULL, 0x12, "Lorg.apache.lucene.index.ReaderSlice;", NULL, NULL, .constantValue.asLong = 0 },
    { "terms_", NULL, 0x0, "Lorg.apache.lucene.index.TermsEnum;", NULL, NULL, .constantValue.asLong = 0 },
    { "current_", NULL, 0x1, "Lorg.apache.lucene.util.BytesRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "index_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice = { 2, "TermsEnumWithSlice", "org.apache.lucene.index", "MultiTermsEnum", 0x18, 3, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice;
}

@end

void OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_initWithInt_withOrgApacheLuceneIndexReaderSlice_(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *self, jint index, OrgApacheLuceneIndexReaderSlice *subSlice) {
  NSObject_init(self);
  JreStrongAssign(&self->subSlice_, subSlice);
  self->index_ = index;
  JreAssert((((OrgApacheLuceneIndexReaderSlice *) nil_chk(subSlice))->length_ >= 0), (JreStrcat("$I", @"length=", subSlice->length_)));
}

OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *new_OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_initWithInt_withOrgApacheLuceneIndexReaderSlice_(jint index, OrgApacheLuceneIndexReaderSlice *subSlice) {
  OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *self = [OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice alloc];
  OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_initWithInt_withOrgApacheLuceneIndexReaderSlice_(self, index, subSlice);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice)

@implementation OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue

- (instancetype)initWithInt:(jint)size {
  OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(self, size);
  return self;
}

- (jboolean)lessThanWithId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)termsA
                    withId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)termsB {
  return [((OrgApacheLuceneUtilBytesRef *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(termsA))->current_)) compareToWithId:((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(termsB))->current_] < 0;
}

- (jint)fillTopWithOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSliceArray:(IOSObjectArray *)tops {
  jint size = [self size];
  if (size == 0) {
    return 0;
  }
  IOSObjectArray_Set(nil_chk(tops), 0, [self top]);
  jint numTop = 1;
  *IOSIntArray_GetRef(nil_chk(stack_), 0) = 1;
  jint stackLen = 1;
  while (stackLen != 0) {
    jint index = IOSIntArray_Get(stack_, --stackLen);
    jint leftChild = JreLShift32(index, 1);
    for (jint child = leftChild, end = JavaLangMath_minWithInt_withInt_(size, leftChild + 1); child <= end; ++child) {
      OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *te = OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_getWithInt_(self, child);
      if ([((OrgApacheLuceneUtilBytesRef *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(te))->current_)) isEqual:((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(tops, 0)))->current_]) {
        IOSObjectArray_Set(tops, numTop++, te);
        *IOSIntArray_GetRef(stack_, stackLen++) = child;
      }
    }
  }
  return numTop;
}

- (OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)getWithInt:(jint)i {
  return OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_getWithInt_(self, i);
}

- (void)dealloc {
  RELEASE_(stack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "TermMergeQueue", NULL, 0x0, NULL, NULL },
    { "lessThanWithId:withId:", "lessThan", "Z", 0x4, NULL, NULL },
    { "fillTopWithOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSliceArray:", "fillTop", "I", 0x0, NULL, NULL },
    { "getWithInt:", "get", "Lorg.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "stack_", NULL, 0x10, "[I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Lorg.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice;"};
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue = { 2, "TermMergeQueue", "org.apache.lucene.index", "MultiTermsEnum", 0x1a, 4, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/index/MultiTermsEnum$TermsEnumWithSlice;>;" };
  return &_OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue;
}

@end

void OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *self, jint size) {
  OrgApacheLuceneUtilPriorityQueue_initWithInt_(self, size);
  JreStrongAssignAndConsume(&self->stack_, [IOSIntArray newArrayWithLength:size]);
}

OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *new_OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(jint size) {
  OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *self = [OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue alloc];
  OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(self, size);
  return self;
}

OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_getWithInt_(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *self, jint i) {
  return (OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) check_class_cast(IOSObjectArray_Get(nil_chk([self getHeapArray]), i), [OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue)

@implementation OrgApacheLuceneIndexMultiTermsEnum_$1

- (jint)compareWithId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)o1
               withId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)o2 {
  return ((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(o1))->index_ - ((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(o2))->index_;
}

- (instancetype)init {
  OrgApacheLuceneIndexMultiTermsEnum_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiTermsEnum_$1 = { 2, "", "org.apache.lucene.index", "MultiTermsEnum", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/lucene/index/MultiTermsEnum$TermsEnumWithSlice;>;" };
  return &_OrgApacheLuceneIndexMultiTermsEnum_$1;
}

@end

void OrgApacheLuceneIndexMultiTermsEnum_$1_init(OrgApacheLuceneIndexMultiTermsEnum_$1 *self) {
  NSObject_init(self);
}

OrgApacheLuceneIndexMultiTermsEnum_$1 *new_OrgApacheLuceneIndexMultiTermsEnum_$1_init() {
  OrgApacheLuceneIndexMultiTermsEnum_$1 *self = [OrgApacheLuceneIndexMultiTermsEnum_$1 alloc];
  OrgApacheLuceneIndexMultiTermsEnum_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiTermsEnum_$1)
