//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/FreqProxTermsWriterPerField.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/ParallelPostingsArray.h"
#include "org/apache/lucene/index/TermsHash.h"
#include "org/apache/lucene/index/TermsHashPerField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

@interface OrgApacheLuceneIndexFreqProxTermsWriterPerField () {
 @public
  OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *freqProxPostingsArray_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexFreqProxTermsWriterPerField, freqProxPostingsArray_, OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *)

@implementation OrgApacheLuceneIndexFreqProxTermsWriterPerField

- (instancetype)initWithOrgApacheLuceneIndexFieldInvertState:(OrgApacheLuceneIndexFieldInvertState *)invertState
                           withOrgApacheLuceneIndexTermsHash:(OrgApacheLuceneIndexTermsHash *)termsHash
                           withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                   withOrgApacheLuceneIndexTermsHashPerField:(OrgApacheLuceneIndexTermsHashPerField *)nextPerField {
  OrgApacheLuceneIndexFreqProxTermsWriterPerField_initWithOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermsHash_withOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneIndexTermsHashPerField_(self, invertState, termsHash, fieldInfo, nextPerField);
  return self;
}

- (void)finish {
  [super finish];
  sumDocFreq_ += ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(fieldState_))->uniqueTermCount_;
  sumTotalTermFreq_ += fieldState_->length_;
  if (fieldState_->length_ > 0) {
    docCount_++;
  }
  if (sawPayloads_) {
    [((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) setStorePayloads];
  }
}

- (jboolean)startWithOrgApacheLuceneIndexIndexableField:(id<OrgApacheLuceneIndexIndexableField>)f
                                            withBoolean:(jboolean)first {
  [super startWithOrgApacheLuceneIndexIndexableField:f withBoolean:first];
  JreStrongAssign(&payloadAttribute_, ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(fieldState_))->payloadAttribute_);
  JreStrongAssign(&offsetAttribute_, fieldState_->offsetAttribute_);
  return true;
}

- (void)writeProxWithInt:(jint)termID
                 withInt:(jint)proxCode {
  if (payloadAttribute_ == nil) {
    [self writeVIntWithInt:1 withInt:JreLShift32(proxCode, 1)];
  }
  else {
    OrgApacheLuceneUtilBytesRef *payload = [payloadAttribute_ getPayload];
    if (payload != nil && payload->length_ > 0) {
      [self writeVIntWithInt:1 withInt:(JreLShift32(proxCode, 1)) | 1];
      [self writeVIntWithInt:1 withInt:payload->length_];
      [self writeBytesWithInt:1 withByteArray:payload->bytes_ withInt:payload->offset_ withInt:payload->length_];
      sawPayloads_ = true;
    }
    else {
      [self writeVIntWithInt:1 withInt:JreLShift32(proxCode, 1)];
    }
  }
  JreAssert((postingsArray_ == freqProxPostingsArray_), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:95 condition failed: assert postingsArray == freqProxPostingsArray;"));
  *IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *) nil_chk(freqProxPostingsArray_))->lastPositions_), termID) = ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(fieldState_))->position_;
}

- (void)writeOffsetsWithInt:(jint)termID
                    withInt:(jint)offsetAccum {
  jint startOffset = offsetAccum + [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAttribute_)) startOffset];
  jint endOffset = offsetAccum + [offsetAttribute_ endOffset];
  JreAssert((startOffset - IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *) nil_chk(freqProxPostingsArray_))->lastOffsets_), termID) >= 0), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:102 condition failed: assert startOffset - freqProxPostingsArray.lastOffsets[termID] >= 0;"));
  [self writeVIntWithInt:1 withInt:startOffset - IOSIntArray_Get(freqProxPostingsArray_->lastOffsets_, termID)];
  [self writeVIntWithInt:1 withInt:endOffset - startOffset];
  *IOSIntArray_GetRef(freqProxPostingsArray_->lastOffsets_, termID) = startOffset;
}

- (void)newTermWithInt:(jint)termID {
  OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *postings = freqProxPostingsArray_;
  *IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *) nil_chk(postings))->lastDocIDs_), termID) = ((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(docState_))->docID_;
  if (!hasFreq_) {
    JreAssert((postings->termFreqs_ == nil), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:116 condition failed: assert postings.termFreqs == null;"));
    *IOSIntArray_GetRef(nil_chk(postings->lastDocCodes_), termID) = docState_->docID_;
  }
  else {
    *IOSIntArray_GetRef(nil_chk(postings->lastDocCodes_), termID) = JreLShift32(docState_->docID_, 1);
    *IOSIntArray_GetRef(nil_chk(postings->termFreqs_), termID) = 1;
    if (hasProx_) {
      [self writeProxWithInt:termID withInt:((OrgApacheLuceneIndexFieldInvertState *) nil_chk(fieldState_))->position_];
      if (hasOffsets_) {
        [self writeOffsetsWithInt:termID withInt:fieldState_->offset_];
      }
    }
    else {
      JreAssert((!hasOffsets_), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:127 condition failed: assert !hasOffsets;"));
    }
  }
  ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(fieldState_))->maxTermFrequency_ = JavaLangMath_maxWithInt_withInt_(1, fieldState_->maxTermFrequency_);
  fieldState_->uniqueTermCount_++;
}

- (void)addTermWithInt:(jint)termID {
  OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *postings = freqProxPostingsArray_;
  JreAssert((!hasFreq_ || IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *) nil_chk(postings))->termFreqs_), termID) > 0), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:138 condition failed: assert !hasFreq || postings.termFreqs[termID] > 0;"));
  if (!hasFreq_) {
    JreAssert((((OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *) nil_chk(postings))->termFreqs_ == nil), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:141 condition failed: assert postings.termFreqs == null;"));
    if (((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(docState_))->docID_ != IOSIntArray_Get(nil_chk(postings->lastDocIDs_), termID)) {
      JreAssert((docState_->docID_ > IOSIntArray_Get(postings->lastDocIDs_, termID)), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:144 condition failed: assert docState.docID > postings.lastDocIDs[termID];"));
      [self writeVIntWithInt:0 withInt:IOSIntArray_Get(nil_chk(postings->lastDocCodes_), termID)];
      *IOSIntArray_GetRef(postings->lastDocCodes_, termID) = docState_->docID_ - IOSIntArray_Get(postings->lastDocIDs_, termID);
      *IOSIntArray_GetRef(postings->lastDocIDs_, termID) = docState_->docID_;
      ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(fieldState_))->uniqueTermCount_++;
    }
  }
  else if (((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(docState_))->docID_ != IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *) nil_chk(postings))->lastDocIDs_), termID)) {
    JreAssert((docState_->docID_ > IOSIntArray_Get(postings->lastDocIDs_, termID)), (JreStrcat("$I$I$I", @"id: ", docState_->docID_, @" postings ID: ", IOSIntArray_Get(postings->lastDocIDs_, termID), @" termID: ", termID)));
    if (1 == IOSIntArray_Get(nil_chk(postings->termFreqs_), termID)) {
      [self writeVIntWithInt:0 withInt:IOSIntArray_Get(nil_chk(postings->lastDocCodes_), termID) | 1];
    }
    else {
      [self writeVIntWithInt:0 withInt:IOSIntArray_Get(nil_chk(postings->lastDocCodes_), termID)];
      [self writeVIntWithInt:0 withInt:IOSIntArray_Get(postings->termFreqs_, termID)];
    }
    *IOSIntArray_GetRef(postings->termFreqs_, termID) = 1;
    ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(fieldState_))->maxTermFrequency_ = JavaLangMath_maxWithInt_withInt_(1, fieldState_->maxTermFrequency_);
    *IOSIntArray_GetRef(nil_chk(postings->lastDocCodes_), termID) = JreLShift32((docState_->docID_ - IOSIntArray_Get(postings->lastDocIDs_, termID)), 1);
    *IOSIntArray_GetRef(postings->lastDocIDs_, termID) = docState_->docID_;
    if (hasProx_) {
      [self writeProxWithInt:termID withInt:fieldState_->position_];
      if (hasOffsets_) {
        *IOSIntArray_GetRef(nil_chk(postings->lastOffsets_), termID) = 0;
        [self writeOffsetsWithInt:termID withInt:fieldState_->offset_];
      }
    }
    else {
      JreAssert((!hasOffsets_), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:176 condition failed: assert !hasOffsets;"));
    }
    fieldState_->uniqueTermCount_++;
  }
  else {
    ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(fieldState_))->maxTermFrequency_ = JavaLangMath_maxWithInt_withInt_(fieldState_->maxTermFrequency_, ++(*IOSIntArray_GetRef(nil_chk(postings->termFreqs_), termID)));
    if (hasProx_) {
      [self writeProxWithInt:termID withInt:fieldState_->position_ - IOSIntArray_Get(nil_chk(postings->lastPositions_), termID)];
      if (hasOffsets_) {
        [self writeOffsetsWithInt:termID withInt:fieldState_->offset_];
      }
    }
  }
}

- (void)newPostingsArray {
  JreStrongAssign(&freqProxPostingsArray_, (OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *) check_class_cast(postingsArray_, [OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray class]));
}

- (OrgApacheLuceneIndexParallelPostingsArray *)createPostingsArrayWithInt:(jint)size {
  OrgApacheLuceneIndexIndexOptionsEnum *indexOptions = [((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions];
  JreAssert((indexOptions != JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, NONE)), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:198 condition failed: assert indexOptions != IndexOptions.NONE;"));
  jboolean hasFreq = [((OrgApacheLuceneIndexIndexOptionsEnum *) nil_chk(indexOptions)) compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS)] >= 0;
  jboolean hasProx = [indexOptions compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS_AND_POSITIONS)] >= 0;
  jboolean hasOffsets = [indexOptions compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)] >= 0;
  return [new_OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray_initWithInt_withBoolean_withBoolean_withBoolean_(size, hasFreq, hasProx, hasOffsets) autorelease];
}

- (void)dealloc {
  RELEASE_(freqProxPostingsArray_);
  RELEASE_(payloadAttribute_);
  RELEASE_(offsetAttribute_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneIndexFieldInvertState:withOrgApacheLuceneIndexTermsHash:withOrgApacheLuceneIndexFieldInfo:withOrgApacheLuceneIndexTermsHashPerField:", "FreqProxTermsWriterPerField", NULL, 0x1, NULL, NULL },
    { "finish", NULL, "V", 0x0, "Ljava.io.IOException;", NULL },
    { "startWithOrgApacheLuceneIndexIndexableField:withBoolean:", "start", "Z", 0x0, NULL, NULL },
    { "writeProxWithInt:withInt:", "writeProx", "V", 0x0, NULL, NULL },
    { "writeOffsetsWithInt:withInt:", "writeOffsets", "V", 0x0, NULL, NULL },
    { "newTermWithInt:", "newTerm", "V", 0x0, NULL, NULL },
    { "addTermWithInt:", "addTerm", "V", 0x0, NULL, NULL },
    { "newPostingsArray", NULL, "V", 0x1, NULL, NULL },
    { "createPostingsArrayWithInt:", "createPostingsArray", "Lorg.apache.lucene.index.ParallelPostingsArray;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "freqProxPostingsArray_", NULL, 0x2, "Lorg.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray;", NULL, NULL, .constantValue.asLong = 0 },
    { "hasFreq_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "hasProx_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "hasOffsets_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "payloadAttribute_", NULL, 0x0, "Lorg.apache.lucene.analysis.tokenattributes.PayloadAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "offsetAttribute_", NULL, 0x0, "Lorg.apache.lucene.analysis.tokenattributes.OffsetAttribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "sumTotalTermFreq_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "sumDocFreq_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "docCount_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "sawPayloads_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray;"};
  static const J2ObjcClassInfo _OrgApacheLuceneIndexFreqProxTermsWriterPerField = { 2, "FreqProxTermsWriterPerField", "org.apache.lucene.index", NULL, 0x10, 9, methods, 10, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneIndexFreqProxTermsWriterPerField;
}

@end

void OrgApacheLuceneIndexFreqProxTermsWriterPerField_initWithOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermsHash_withOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneIndexTermsHashPerField_(OrgApacheLuceneIndexFreqProxTermsWriterPerField *self, OrgApacheLuceneIndexFieldInvertState *invertState, OrgApacheLuceneIndexTermsHash *termsHash, OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneIndexTermsHashPerField *nextPerField) {
  OrgApacheLuceneIndexTermsHashPerField_initWithInt_withOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermsHash_withOrgApacheLuceneIndexTermsHashPerField_withOrgApacheLuceneIndexFieldInfo_(self, [((OrgApacheLuceneIndexIndexOptionsEnum *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions])) compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS_AND_POSITIONS)] >= 0 ? 2 : 1, invertState, termsHash, nextPerField, fieldInfo);
  OrgApacheLuceneIndexIndexOptionsEnum *indexOptions = [fieldInfo getIndexOptions];
  JreAssert((indexOptions != JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, NONE)), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:52 condition failed: assert indexOptions != IndexOptions.NONE;"));
  self->hasFreq_ = ([((OrgApacheLuceneIndexIndexOptionsEnum *) nil_chk(indexOptions)) compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS)] >= 0);
  self->hasProx_ = ([indexOptions compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS_AND_POSITIONS)] >= 0);
  self->hasOffsets_ = ([indexOptions compareToWithId:JreLoadStatic(OrgApacheLuceneIndexIndexOptionsEnum, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)] >= 0);
}

OrgApacheLuceneIndexFreqProxTermsWriterPerField *new_OrgApacheLuceneIndexFreqProxTermsWriterPerField_initWithOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermsHash_withOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneIndexTermsHashPerField_(OrgApacheLuceneIndexFieldInvertState *invertState, OrgApacheLuceneIndexTermsHash *termsHash, OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneIndexTermsHashPerField *nextPerField) {
  OrgApacheLuceneIndexFreqProxTermsWriterPerField *self = [OrgApacheLuceneIndexFreqProxTermsWriterPerField alloc];
  OrgApacheLuceneIndexFreqProxTermsWriterPerField_initWithOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermsHash_withOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneIndexTermsHashPerField_(self, invertState, termsHash, fieldInfo, nextPerField);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexFreqProxTermsWriterPerField)

@implementation OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray

- (instancetype)initWithInt:(jint)size
                withBoolean:(jboolean)writeFreqs
                withBoolean:(jboolean)writeProx
                withBoolean:(jboolean)writeOffsets {
  OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray_initWithInt_withBoolean_withBoolean_withBoolean_(self, size, writeFreqs, writeProx, writeOffsets);
  return self;
}

- (OrgApacheLuceneIndexParallelPostingsArray *)newInstanceWithInt:(jint)size {
  return [new_OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray_initWithInt_withBoolean_withBoolean_withBoolean_(size, termFreqs_ != nil, lastPositions_ != nil, lastOffsets_ != nil) autorelease];
}

- (void)copyToWithOrgApacheLuceneIndexParallelPostingsArray:(OrgApacheLuceneIndexParallelPostingsArray *)toArray
                                                    withInt:(jint)numToCopy {
  JreAssert(([toArray isKindOfClass:[OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray class]]), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:237 condition failed: assert toArray instanceof FreqProxPostingsArray;"));
  OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *to = (OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *) check_class_cast(toArray, [OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray class]);
  [super copyToWithOrgApacheLuceneIndexParallelPostingsArray:toArray withInt:numToCopy];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastDocIDs_, 0, ((OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *) nil_chk(to))->lastDocIDs_, 0, numToCopy);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastDocCodes_, 0, to->lastDocCodes_, 0, numToCopy);
  if (lastPositions_ != nil) {
    JreAssert((to->lastPositions_ != nil), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:245 condition failed: assert to.lastPositions != null;"));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastPositions_, 0, to->lastPositions_, 0, numToCopy);
  }
  if (lastOffsets_ != nil) {
    JreAssert((to->lastOffsets_ != nil), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:249 condition failed: assert to.lastOffsets != null;"));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastOffsets_, 0, to->lastOffsets_, 0, numToCopy);
  }
  if (termFreqs_ != nil) {
    JreAssert((to->termFreqs_ != nil), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:253 condition failed: assert to.termFreqs != null;"));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(termFreqs_, 0, to->termFreqs_, 0, numToCopy);
  }
}

- (jint)bytesPerPosting {
  jint bytes = OrgApacheLuceneIndexParallelPostingsArray_BYTES_PER_POSTING + 2 * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT;
  if (lastPositions_ != nil) {
    bytes += OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT;
  }
  if (lastOffsets_ != nil) {
    bytes += OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT;
  }
  if (termFreqs_ != nil) {
    bytes += OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT;
  }
  return bytes;
}

- (void)dealloc {
  RELEASE_(termFreqs_);
  RELEASE_(lastDocIDs_);
  RELEASE_(lastDocCodes_);
  RELEASE_(lastPositions_);
  RELEASE_(lastOffsets_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withBoolean:withBoolean:withBoolean:", "FreqProxPostingsArray", NULL, 0x1, NULL, NULL },
    { "newInstanceWithInt:", "newInstance", "Lorg.apache.lucene.index.ParallelPostingsArray;", 0x0, NULL, NULL },
    { "copyToWithOrgApacheLuceneIndexParallelPostingsArray:withInt:", "copyTo", "V", 0x0, NULL, NULL },
    { "bytesPerPosting", NULL, "I", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "termFreqs_", NULL, 0x0, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastDocIDs_", NULL, 0x0, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastDocCodes_", NULL, 0x0, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastPositions_", NULL, 0x0, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastOffsets_", NULL, 0x0, "[I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray = { 2, "FreqProxPostingsArray", "org.apache.lucene.index", "FreqProxTermsWriterPerField", 0x18, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray;
}

@end

void OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray_initWithInt_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *self, jint size, jboolean writeFreqs, jboolean writeProx, jboolean writeOffsets) {
  OrgApacheLuceneIndexParallelPostingsArray_initWithInt_(self, size);
  if (writeFreqs) {
    JreStrongAssignAndConsume(&self->termFreqs_, [IOSIntArray newArrayWithLength:size]);
  }
  JreStrongAssignAndConsume(&self->lastDocIDs_, [IOSIntArray newArrayWithLength:size]);
  JreStrongAssignAndConsume(&self->lastDocCodes_, [IOSIntArray newArrayWithLength:size]);
  if (writeProx) {
    JreStrongAssignAndConsume(&self->lastPositions_, [IOSIntArray newArrayWithLength:size]);
    if (writeOffsets) {
      JreStrongAssignAndConsume(&self->lastOffsets_, [IOSIntArray newArrayWithLength:size]);
    }
  }
  else {
    JreAssert((!writeOffsets), (@"org/apache/lucene/index/FreqProxTermsWriterPerField.java:219 condition failed: assert !writeOffsets;"));
  }
}

OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *new_OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray_initWithInt_withBoolean_withBoolean_withBoolean_(jint size, jboolean writeFreqs, jboolean writeProx, jboolean writeOffsets) {
  OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray *self = [OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray alloc];
  OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray_initWithInt_withBoolean_withBoolean_withBoolean_(self, size, writeFreqs, writeProx, writeOffsets);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexFreqProxTermsWriterPerField_FreqProxPostingsArray)
