//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/LongsRef.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/util/LongsRef.h"

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilLongsRef)

IOSLongArray *OrgApacheLuceneUtilLongsRef_EMPTY_LONGS_;

@implementation OrgApacheLuceneUtilLongsRef

- (instancetype)init {
  OrgApacheLuceneUtilLongsRef_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)capacity {
  OrgApacheLuceneUtilLongsRef_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithLongArray:(IOSLongArray *)longs
                          withInt:(jint)offset
                          withInt:(jint)length {
  OrgApacheLuceneUtilLongsRef_initWithLongArray_withInt_withInt_(self, longs, offset, length);
  return self;
}

- (OrgApacheLuceneUtilLongsRef *)clone {
  return [new_OrgApacheLuceneUtilLongsRef_initWithLongArray_withInt_withInt_(longs_, offset_, length_) autorelease];
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 0;
  jlong end = offset_ + length_;
  for (jint i = offset_; i < end; i++) {
    result = prime * result + (jint) (IOSLongArray_Get(nil_chk(longs_), i) ^ (JreURShift64(IOSLongArray_Get(longs_, i), 32)));
  }
  return result;
}

- (jboolean)isEqual:(id)other {
  if (other == nil) {
    return NO;
  }
  if ([other isKindOfClass:[OrgApacheLuceneUtilLongsRef class]]) {
    return [self longsEqualsWithOrgApacheLuceneUtilLongsRef:(OrgApacheLuceneUtilLongsRef *) check_class_cast(other, [OrgApacheLuceneUtilLongsRef class])];
  }
  return NO;
}

- (jboolean)longsEqualsWithOrgApacheLuceneUtilLongsRef:(OrgApacheLuceneUtilLongsRef *)other {
  if (length_ == ((OrgApacheLuceneUtilLongsRef *) nil_chk(other))->length_) {
    jint otherUpto = other->offset_;
    IOSLongArray *otherInts = other->longs_;
    jlong end = offset_ + length_;
    for (jint upto = offset_; upto < end; upto++, otherUpto++) {
      if (IOSLongArray_Get(nil_chk(longs_), upto) != IOSLongArray_Get(nil_chk(otherInts), otherUpto)) {
        return NO;
      }
    }
    return YES;
  }
  else {
    return NO;
  }
}

- (jint)compareToWithId:(OrgApacheLuceneUtilLongsRef *)other {
  check_class_cast(other, [OrgApacheLuceneUtilLongsRef class]);
  if (self == other) return 0;
  IOSLongArray *aInts = self->longs_;
  jint aUpto = self->offset_;
  IOSLongArray *bInts = ((OrgApacheLuceneUtilLongsRef *) nil_chk(other))->longs_;
  jint bUpto = other->offset_;
  jlong aStop = aUpto + JavaLangMath_minWithInt_withInt_(self->length_, other->length_);
  while (aUpto < aStop) {
    jlong aInt = IOSLongArray_Get(nil_chk(aInts), aUpto++);
    jlong bInt = IOSLongArray_Get(nil_chk(bInts), bUpto++);
    if (aInt > bInt) {
      return 1;
    }
    else if (aInt < bInt) {
      return -1;
    }
  }
  return self->length_ - other->length_;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithChar:'['];
  jlong end = offset_ + length_;
  for (jint i = offset_; i < end; i++) {
    if (i > offset_) {
      [sb appendWithChar:' '];
    }
    [sb appendWithNSString:JavaLangLong_toHexStringWithLong_(IOSLongArray_Get(nil_chk(longs_), i))];
  }
  [sb appendWithChar:']'];
  return [sb description];
}

- (jboolean)isValid {
  if (longs_ == nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"longs is null") autorelease];
  }
  if (length_ < 0) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"length is negative: ", length_)) autorelease];
  }
  if (length_ > ((IOSLongArray *) nil_chk(longs_))->size_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"length is out of bounds: ", length_, @",longs.length=", longs_->size_)) autorelease];
  }
  if (offset_ < 0) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"offset is negative: ", offset_)) autorelease];
  }
  if (offset_ > longs_->size_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"offset out of bounds: ", offset_, @",longs.length=", longs_->size_)) autorelease];
  }
  if (offset_ + length_ < 0) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"offset+length is negative: offset=", offset_, @",length=", length_)) autorelease];
  }
  if (offset_ + length_ > longs_->size_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I$I", @"offset+length out of bounds: offset=", offset_, @",length=", length_, @",longs.length=", longs_->size_)) autorelease];
  }
  return YES;
}

- (void)dealloc {
  RELEASE_(longs_);
  [super dealloc];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilLongsRef class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilLongsRef_EMPTY_LONGS_, [IOSLongArray newArrayWithLength:0]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilLongsRef)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "LongsRef", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "LongsRef", NULL, 0x1, NULL, NULL },
    { "initWithLongArray:withInt:withInt:", "LongsRef", NULL, 0x1, NULL, NULL },
    { "clone", NULL, "Lorg.apache.lucene.util.LongsRef;", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "longsEqualsWithOrgApacheLuceneUtilLongsRef:", "longsEquals", "Z", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isValid", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_LONGS_", NULL, 0x19, "[J", &OrgApacheLuceneUtilLongsRef_EMPTY_LONGS_, NULL, .constantValue.asLong = 0 },
    { "longs_", NULL, 0x1, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "offset_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "length_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilLongsRef = { 2, "LongsRef", "org.apache.lucene.util", NULL, 0x11, 10, methods, 4, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/util/LongsRef;>;Ljava/lang/Cloneable;" };
  return &_OrgApacheLuceneUtilLongsRef;
}

@end

void OrgApacheLuceneUtilLongsRef_init(OrgApacheLuceneUtilLongsRef *self) {
  NSObject_init(self);
  JreStrongAssign(&self->longs_, OrgApacheLuceneUtilLongsRef_EMPTY_LONGS_);
}

OrgApacheLuceneUtilLongsRef *new_OrgApacheLuceneUtilLongsRef_init() {
  OrgApacheLuceneUtilLongsRef *self = [OrgApacheLuceneUtilLongsRef alloc];
  OrgApacheLuceneUtilLongsRef_init(self);
  return self;
}

void OrgApacheLuceneUtilLongsRef_initWithInt_(OrgApacheLuceneUtilLongsRef *self, jint capacity) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->longs_, [IOSLongArray newArrayWithLength:capacity]);
}

OrgApacheLuceneUtilLongsRef *new_OrgApacheLuceneUtilLongsRef_initWithInt_(jint capacity) {
  OrgApacheLuceneUtilLongsRef *self = [OrgApacheLuceneUtilLongsRef alloc];
  OrgApacheLuceneUtilLongsRef_initWithInt_(self, capacity);
  return self;
}

void OrgApacheLuceneUtilLongsRef_initWithLongArray_withInt_withInt_(OrgApacheLuceneUtilLongsRef *self, IOSLongArray *longs, jint offset, jint length) {
  NSObject_init(self);
  JreStrongAssign(&self->longs_, longs);
  self->offset_ = offset;
  self->length_ = length;
  JreAssert(([self isValid]), (@"org/apache/lucene/util/LongsRef.java:57 condition failed: assert isValid();"));
}

OrgApacheLuceneUtilLongsRef *new_OrgApacheLuceneUtilLongsRef_initWithLongArray_withInt_withInt_(IOSLongArray *longs, jint offset, jint length) {
  OrgApacheLuceneUtilLongsRef *self = [OrgApacheLuceneUtilLongsRef alloc];
  OrgApacheLuceneUtilLongsRef_initWithLongArray_withInt_withInt_(self, longs, offset, length);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilLongsRef)
