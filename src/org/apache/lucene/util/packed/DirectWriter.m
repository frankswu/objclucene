//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/DirectWriter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/packed/BulkOperation.h"
#include "org/apache/lucene/util/packed/DirectWriter.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

@interface OrgApacheLuceneUtilPackedDirectWriter ()

- (void)flush;

+ (jint)roundBitsWithInt:(jint)bitsRequired;

@end

__attribute__((unused)) static void OrgApacheLuceneUtilPackedDirectWriter_flush(OrgApacheLuceneUtilPackedDirectWriter *self);

__attribute__((unused)) static jint OrgApacheLuceneUtilPackedDirectWriter_roundBitsWithInt_(jint bitsRequired);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilPackedDirectWriter)

IOSIntArray *OrgApacheLuceneUtilPackedDirectWriter_SUPPORTED_BITS_PER_VALUE_;

@implementation OrgApacheLuceneUtilPackedDirectWriter

- (instancetype)initWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)output
                                               withLong:(jlong)numValues
                                                withInt:(jint)bitsPerValue {
  OrgApacheLuceneUtilPackedDirectWriter_initWithOrgApacheLuceneStoreIndexOutput_withLong_withInt_(self, output, numValues, bitsPerValue);
  return self;
}

- (void)addWithLong:(jlong)l {
  JreAssert((bitsPerValue_ == 64 || (l >= 0 && l <= OrgApacheLuceneUtilPackedPackedInts_maxValueWithInt_(bitsPerValue_))), (JavaLangInteger_valueOfWithInt_(bitsPerValue_)));
  JreAssert((!finished_), (@"org/apache/lucene/util/packed/DirectWriter.java:72 condition failed: assert !finished;"));
  if (count_ >= numValues_) {
    @throw [new_JavaIoEOFException_initWithNSString_(@"Writing past end of stream") autorelease];
  }
  *IOSLongArray_GetRef(nil_chk(nextValues_), off_++) = l;
  if (off_ == nextValues_->size_) {
    OrgApacheLuceneUtilPackedDirectWriter_flush(self);
  }
  count_++;
}

- (void)flush {
  OrgApacheLuceneUtilPackedDirectWriter_flush(self);
}

- (void)finish {
  if (count_ != numValues_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$J$J", @"Wrong number of values added, expected: ", numValues_, @", got: ", count_)) autorelease];
  }
  JreAssert((!finished_), (@"org/apache/lucene/util/packed/DirectWriter.java:96 condition failed: assert !finished;"));
  OrgApacheLuceneUtilPackedDirectWriter_flush(self);
  for (jint i = 0; i < 3; i++) {
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(output_)) writeByteWithByte:(jbyte) 0];
  }
  finished_ = YES;
}

+ (OrgApacheLuceneUtilPackedDirectWriter *)getInstanceWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)output
                                                                                 withLong:(jlong)numValues
                                                                                  withInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedDirectWriter_getInstanceWithOrgApacheLuceneStoreIndexOutput_withLong_withInt_(output, numValues, bitsPerValue);
}

+ (jint)roundBitsWithInt:(jint)bitsRequired {
  return OrgApacheLuceneUtilPackedDirectWriter_roundBitsWithInt_(bitsRequired);
}

+ (jint)bitsRequiredWithLong:(jlong)maxValue {
  return OrgApacheLuceneUtilPackedDirectWriter_bitsRequiredWithLong_(maxValue);
}

+ (jint)unsignedBitsRequiredWithLong:(jlong)maxValue {
  return OrgApacheLuceneUtilPackedDirectWriter_unsignedBitsRequiredWithLong_(maxValue);
}

- (void)dealloc {
  RELEASE_(output_);
  RELEASE_(nextBlocks_);
  RELEASE_(nextValues_);
  RELEASE_(encoder_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilPackedDirectWriter class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilPackedDirectWriter_SUPPORTED_BITS_PER_VALUE_, [IOSIntArray newArrayWithInts:(jint[]){ 1, 2, 4, 8, 12, 16, 20, 24, 28, 32, 40, 48, 56, 64 } count:14]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilPackedDirectWriter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneStoreIndexOutput:withLong:withInt:", "DirectWriter", NULL, 0x0, NULL, NULL },
    { "addWithLong:", "add", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "flush", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "finish", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "getInstanceWithOrgApacheLuceneStoreIndexOutput:withLong:withInt:", "getInstance", "Lorg.apache.lucene.util.packed.DirectWriter;", 0x9, NULL, NULL },
    { "roundBitsWithInt:", "roundBits", "I", 0xa, NULL, NULL },
    { "bitsRequiredWithLong:", "bitsRequired", "I", 0x9, NULL, NULL },
    { "unsignedBitsRequiredWithLong:", "unsignedBitsRequired", "I", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bitsPerValue_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "numValues_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "output_", NULL, 0x10, "Lorg.apache.lucene.store.IndexOutput;", NULL, NULL, .constantValue.asLong = 0 },
    { "count_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "finished_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "off_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "nextBlocks_", NULL, 0x10, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "nextValues_", NULL, 0x10, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "encoder_", NULL, 0x10, "Lorg.apache.lucene.util.packed.BulkOperation;", NULL, NULL, .constantValue.asLong = 0 },
    { "iterations_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "SUPPORTED_BITS_PER_VALUE_", NULL, 0x18, "[I", &OrgApacheLuceneUtilPackedDirectWriter_SUPPORTED_BITS_PER_VALUE_, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedDirectWriter = { 2, "DirectWriter", "org.apache.lucene.util.packed", NULL, 0x11, 8, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedDirectWriter;
}

@end

void OrgApacheLuceneUtilPackedDirectWriter_initWithOrgApacheLuceneStoreIndexOutput_withLong_withInt_(OrgApacheLuceneUtilPackedDirectWriter *self, OrgApacheLuceneStoreIndexOutput *output, jlong numValues, jint bitsPerValue) {
  NSObject_init(self);
  JreStrongAssign(&self->output_, output);
  self->numValues_ = numValues;
  self->bitsPerValue_ = bitsPerValue;
  JreStrongAssign(&self->encoder_, OrgApacheLuceneUtilPackedBulkOperation_ofWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_(JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED), bitsPerValue));
  self->iterations_ = [((OrgApacheLuceneUtilPackedBulkOperation *) nil_chk(self->encoder_)) computeIterationsWithInt:(jint) JavaLangMath_minWithLong_withLong_(numValues, JavaLangInteger_MAX_VALUE) withInt:OrgApacheLuceneUtilPackedPackedInts_DEFAULT_BUFFER_SIZE];
  JreStrongAssignAndConsume(&self->nextBlocks_, [IOSByteArray newArrayWithLength:self->iterations_ * [self->encoder_ byteBlockCount]]);
  JreStrongAssignAndConsume(&self->nextValues_, [IOSLongArray newArrayWithLength:self->iterations_ * [self->encoder_ byteValueCount]]);
}

OrgApacheLuceneUtilPackedDirectWriter *new_OrgApacheLuceneUtilPackedDirectWriter_initWithOrgApacheLuceneStoreIndexOutput_withLong_withInt_(OrgApacheLuceneStoreIndexOutput *output, jlong numValues, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedDirectWriter *self = [OrgApacheLuceneUtilPackedDirectWriter alloc];
  OrgApacheLuceneUtilPackedDirectWriter_initWithOrgApacheLuceneStoreIndexOutput_withLong_withInt_(self, output, numValues, bitsPerValue);
  return self;
}

void OrgApacheLuceneUtilPackedDirectWriter_flush(OrgApacheLuceneUtilPackedDirectWriter *self) {
  [((OrgApacheLuceneUtilPackedBulkOperation *) nil_chk(self->encoder_)) encodeWithLongArray:self->nextValues_ withInt:0 withByteArray:self->nextBlocks_ withInt:0 withInt:self->iterations_];
  jint blockCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_FormatEnum *) nil_chk(JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED))) byteCountWithInt:OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT withInt:self->off_ withInt:self->bitsPerValue_];
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->output_)) writeBytesWithByteArray:self->nextBlocks_ withInt:blockCount];
  JavaUtilArrays_fillWithLongArray_withLong_(self->nextValues_, 0LL);
  self->off_ = 0;
}

OrgApacheLuceneUtilPackedDirectWriter *OrgApacheLuceneUtilPackedDirectWriter_getInstanceWithOrgApacheLuceneStoreIndexOutput_withLong_withInt_(OrgApacheLuceneStoreIndexOutput *output, jlong numValues, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedDirectWriter_initialize();
  if (JavaUtilArrays_binarySearchWithIntArray_withInt_(OrgApacheLuceneUtilPackedDirectWriter_SUPPORTED_BITS_PER_VALUE_, bitsPerValue) < 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Unsupported bitsPerValue ", bitsPerValue, @". Did you use bitsRequired?")) autorelease];
  }
  return [new_OrgApacheLuceneUtilPackedDirectWriter_initWithOrgApacheLuceneStoreIndexOutput_withLong_withInt_(output, numValues, bitsPerValue) autorelease];
}

jint OrgApacheLuceneUtilPackedDirectWriter_roundBitsWithInt_(jint bitsRequired) {
  OrgApacheLuceneUtilPackedDirectWriter_initialize();
  jint index = JavaUtilArrays_binarySearchWithIntArray_withInt_(OrgApacheLuceneUtilPackedDirectWriter_SUPPORTED_BITS_PER_VALUE_, bitsRequired);
  if (index < 0) {
    return IOSIntArray_Get(nil_chk(OrgApacheLuceneUtilPackedDirectWriter_SUPPORTED_BITS_PER_VALUE_), -index - 1);
  }
  else {
    return bitsRequired;
  }
}

jint OrgApacheLuceneUtilPackedDirectWriter_bitsRequiredWithLong_(jlong maxValue) {
  OrgApacheLuceneUtilPackedDirectWriter_initialize();
  return OrgApacheLuceneUtilPackedDirectWriter_roundBitsWithInt_(OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(maxValue));
}

jint OrgApacheLuceneUtilPackedDirectWriter_unsignedBitsRequiredWithLong_(jlong maxValue) {
  OrgApacheLuceneUtilPackedDirectWriter_initialize();
  return OrgApacheLuceneUtilPackedDirectWriter_roundBitsWithInt_(OrgApacheLuceneUtilPackedPackedInts_unsignedBitsRequiredWithLong_(maxValue));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedDirectWriter)
