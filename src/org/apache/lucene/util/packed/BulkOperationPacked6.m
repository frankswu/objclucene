//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/BulkOperationPacked6.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/util/packed/BulkOperationPacked.h"
#include "org/apache/lucene/util/packed/BulkOperationPacked6.h"

@implementation OrgApacheLuceneUtilPackedBulkOperationPacked6

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilPackedBulkOperationPacked6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)decodeWithLongArray:(IOSLongArray *)blocks
                    withInt:(jint)blocksOffset
               withIntArray:(IOSIntArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint i = 0; i < iterations; ++i) {
    jlong block0 = IOSLongArray_Get(nil_chk(blocks), blocksOffset++);
    *IOSIntArray_GetRef(nil_chk(values), valuesOffset++) = (jint) (JreURShift64(block0, 58));
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 52)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 46)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 40)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 34)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 28)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 22)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 16)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 10)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 4)) & 63LL);
    jlong block1 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreLShift64((block0 & 15LL), 2)) | (JreURShift64(block1, 62)));
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 56)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 50)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 44)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 38)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 32)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 26)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 20)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 14)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 8)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 2)) & 63LL);
    jlong block2 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreLShift64((block1 & 3LL), 4)) | (JreURShift64(block2, 60)));
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 54)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 48)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 42)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 36)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 30)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 24)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 18)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 12)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 6)) & 63LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) (block2 & 63LL);
  }
}

- (void)decodeWithByteArray:(IOSByteArray *)blocks
                    withInt:(jint)blocksOffset
               withIntArray:(IOSIntArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint i = 0; i < iterations; ++i) {
    jint byte0 = IOSByteArray_Get(nil_chk(blocks), blocksOffset++) & (jint) 0xFF;
    *IOSIntArray_GetRef(nil_chk(values), valuesOffset++) = JreURShift32(byte0, 2);
    jint byte1 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreLShift32((byte0 & 3), 4)) | (JreURShift32(byte1, 4));
    jint byte2 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreLShift32((byte1 & 15), 2)) | (JreURShift32(byte2, 6));
    *IOSIntArray_GetRef(values, valuesOffset++) = byte2 & 63;
  }
}

- (void)decodeWithLongArray:(IOSLongArray *)blocks
                    withInt:(jint)blocksOffset
              withLongArray:(IOSLongArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint i = 0; i < iterations; ++i) {
    jlong block0 = IOSLongArray_Get(nil_chk(blocks), blocksOffset++);
    *IOSLongArray_GetRef(nil_chk(values), valuesOffset++) = JreURShift64(block0, 58);
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 52)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 46)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 40)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 34)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 28)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 22)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 16)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 10)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 4)) & 63LL;
    jlong block1 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((block0 & 15LL), 2)) | (JreURShift64(block1, 62));
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 56)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 50)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 44)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 38)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 32)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 26)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 20)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 14)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 8)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 2)) & 63LL;
    jlong block2 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((block1 & 3LL), 4)) | (JreURShift64(block2, 60));
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 54)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 48)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 42)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 36)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 30)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 24)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 18)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 12)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 6)) & 63LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = block2 & 63LL;
  }
}

- (void)decodeWithByteArray:(IOSByteArray *)blocks
                    withInt:(jint)blocksOffset
              withLongArray:(IOSLongArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint i = 0; i < iterations; ++i) {
    jlong byte0 = IOSByteArray_Get(nil_chk(blocks), blocksOffset++) & (jint) 0xFF;
    *IOSLongArray_GetRef(nil_chk(values), valuesOffset++) = JreURShift64(byte0, 2);
    jlong byte1 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((byte0 & 3), 4)) | (JreURShift64(byte1, 4));
    jlong byte2 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((byte1 & 15), 2)) | (JreURShift64(byte2, 6));
    *IOSLongArray_GetRef(values, valuesOffset++) = byte2 & 63;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BulkOperationPacked6", NULL, 0x1, NULL, NULL },
    { "decodeWithLongArray:withInt:withIntArray:withInt:withInt:", "decode", "V", 0x1, NULL, NULL },
    { "decodeWithByteArray:withInt:withIntArray:withInt:withInt:", "decode", "V", 0x1, NULL, NULL },
    { "decodeWithLongArray:withInt:withLongArray:withInt:withInt:", "decode", "V", 0x1, NULL, NULL },
    { "decodeWithByteArray:withInt:withLongArray:withInt:withInt:", "decode", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedBulkOperationPacked6 = { 2, "BulkOperationPacked6", "org.apache.lucene.util.packed", NULL, 0x10, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedBulkOperationPacked6;
}

@end

void OrgApacheLuceneUtilPackedBulkOperationPacked6_init(OrgApacheLuceneUtilPackedBulkOperationPacked6 *self) {
  OrgApacheLuceneUtilPackedBulkOperationPacked_initWithInt_(self, 6);
}

OrgApacheLuceneUtilPackedBulkOperationPacked6 *new_OrgApacheLuceneUtilPackedBulkOperationPacked6_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedBulkOperationPacked6, init)
}

OrgApacheLuceneUtilPackedBulkOperationPacked6 *create_OrgApacheLuceneUtilPackedBulkOperationPacked6_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedBulkOperationPacked6, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedBulkOperationPacked6)
