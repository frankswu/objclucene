//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/GrowableWriter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/packed/GrowableWriter.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

@interface OrgApacheLuceneUtilPackedGrowableWriter () {
 @public
  jlong currentMask_;
  OrgApacheLuceneUtilPackedPackedInts_Mutable *current_;
  jfloat acceptableOverheadRatio_;
}

+ (jlong)maskWithInt:(jint)bitsPerValue;

- (void)ensureCapacityWithLong:(jlong)value;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilPackedGrowableWriter, current_, OrgApacheLuceneUtilPackedPackedInts_Mutable *)

__attribute__((unused)) static jlong OrgApacheLuceneUtilPackedGrowableWriter_maskWithInt_(jint bitsPerValue);

__attribute__((unused)) static void OrgApacheLuceneUtilPackedGrowableWriter_ensureCapacityWithLong_(OrgApacheLuceneUtilPackedGrowableWriter *self, jlong value);

@implementation OrgApacheLuceneUtilPackedGrowableWriter

- (instancetype)initWithInt:(jint)startBitsPerValue
                    withInt:(jint)valueCount
                  withFloat:(jfloat)acceptableOverheadRatio {
  OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_(self, startBitsPerValue, valueCount, acceptableOverheadRatio);
  return self;
}

+ (jlong)maskWithInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedGrowableWriter_maskWithInt_(bitsPerValue);
}

- (jlong)getWithInt:(jint)index {
  return [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) getWithInt:index];
}

- (jint)size {
  return [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) size];
}

- (jint)getBitsPerValue {
  return [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) getBitsPerValue];
}

- (void)ensureCapacityWithLong:(jlong)value {
  OrgApacheLuceneUtilPackedGrowableWriter_ensureCapacityWithLong_(self, value);
}

- (void)setWithInt:(jint)index
          withLong:(jlong)value {
  OrgApacheLuceneUtilPackedGrowableWriter_ensureCapacityWithLong_(self, value);
  [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) setWithInt:index withLong:value];
}

- (void)clear {
  [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) clear];
}

- (OrgApacheLuceneUtilPackedGrowableWriter *)resizeWithInt:(jint)newSize {
  OrgApacheLuceneUtilPackedGrowableWriter *next = [new_OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_([self getBitsPerValue], newSize, acceptableOverheadRatio_) autorelease];
  jint limit = JavaLangMath_minWithInt_withInt_([self size], newSize);
  OrgApacheLuceneUtilPackedPackedInts_copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader_withInt_withOrgApacheLuceneUtilPackedPackedInts_Mutable_withInt_withInt_withInt_(current_, 0, next, 0, limit, OrgApacheLuceneUtilPackedPackedInts_DEFAULT_BUFFER_SIZE);
  return next;
}

- (jint)getWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len {
  return [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) getWithInt:index withLongArray:arr withInt:off withInt:len];
}

- (jint)setWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len {
  jlong max = 0;
  for (jint i = off, end = off + len; i < end; ++i) {
    max |= IOSLongArray_Get(nil_chk(arr), i);
  }
  OrgApacheLuceneUtilPackedGrowableWriter_ensureCapacityWithLong_(self, max);
  return [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) setWithInt:index withLongArray:arr withInt:off withInt:len];
}

- (void)fillWithInt:(jint)fromIndex
            withInt:(jint)toIndex
           withLong:(jlong)val {
  OrgApacheLuceneUtilPackedGrowableWriter_ensureCapacityWithLong_(self, val);
  [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) fillWithInt:fromIndex withInt:toIndex withLong:val];
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneUtilRamUsageEstimator_alignObjectSizeWithLong_(JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_HEADER_) + JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF_) + OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_LONG + OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_FLOAT) + [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) ramBytesUsed];
}

- (void)saveWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) saveWithOrgApacheLuceneStoreDataOutput:outArg];
}

- (void)dealloc {
  RELEASE_(current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withFloat:", "GrowableWriter", NULL, 0x1, NULL, NULL },
    { "maskWithInt:", "mask", "J", 0xa, NULL, NULL },
    { "getWithInt:", "get", "J", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "getBitsPerValue", NULL, "I", 0x1, NULL, NULL },
    { "ensureCapacityWithLong:", "ensureCapacity", "V", 0x2, NULL, NULL },
    { "setWithInt:withLong:", "set", "V", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "resizeWithInt:", "resize", "Lorg.apache.lucene.util.packed.GrowableWriter;", 0x1, NULL, NULL },
    { "getWithInt:withLongArray:withInt:withInt:", "get", "I", 0x1, NULL, NULL },
    { "setWithInt:withLongArray:withInt:withInt:", "set", "I", 0x1, NULL, NULL },
    { "fillWithInt:withInt:withLong:", "fill", "V", 0x1, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "saveWithOrgApacheLuceneStoreDataOutput:", "save", "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "currentMask_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "current_", NULL, 0x2, "Lorg.apache.lucene.util.packed.PackedInts$Mutable;", NULL, NULL, .constantValue.asLong = 0 },
    { "acceptableOverheadRatio_", NULL, 0x12, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedGrowableWriter = { 2, "GrowableWriter", "org.apache.lucene.util.packed", NULL, 0x1, 14, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedGrowableWriter;
}

@end

void OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_(OrgApacheLuceneUtilPackedGrowableWriter *self, jint startBitsPerValue, jint valueCount, jfloat acceptableOverheadRatio) {
  OrgApacheLuceneUtilPackedPackedInts_Mutable_init(self);
  self->acceptableOverheadRatio_ = acceptableOverheadRatio;
  JreStrongAssign(&self->current_, OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withFloat_(valueCount, startBitsPerValue, self->acceptableOverheadRatio_));
  self->currentMask_ = OrgApacheLuceneUtilPackedGrowableWriter_maskWithInt_([((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(self->current_)) getBitsPerValue]);
}

OrgApacheLuceneUtilPackedGrowableWriter *new_OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_(jint startBitsPerValue, jint valueCount, jfloat acceptableOverheadRatio) {
  OrgApacheLuceneUtilPackedGrowableWriter *self = [OrgApacheLuceneUtilPackedGrowableWriter alloc];
  OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_(self, startBitsPerValue, valueCount, acceptableOverheadRatio);
  return self;
}

jlong OrgApacheLuceneUtilPackedGrowableWriter_maskWithInt_(jint bitsPerValue) {
  OrgApacheLuceneUtilPackedGrowableWriter_initialize();
  return bitsPerValue == 64 ? ~0LL : OrgApacheLuceneUtilPackedPackedInts_maxValueWithInt_(bitsPerValue);
}

void OrgApacheLuceneUtilPackedGrowableWriter_ensureCapacityWithLong_(OrgApacheLuceneUtilPackedGrowableWriter *self, jlong value) {
  if ((value & self->currentMask_) == value) {
    return;
  }
  jint bitsRequired = OrgApacheLuceneUtilPackedPackedInts_unsignedBitsRequiredWithLong_(value);
  JreAssert((bitsRequired > [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(self->current_)) getBitsPerValue]), (@"org/apache/lucene/util/packed/GrowableWriter.java:78 condition failed: assert bitsRequired > current.getBitsPerValue();"));
  jint valueCount = [self size];
  OrgApacheLuceneUtilPackedPackedInts_Mutable *next = OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withFloat_(valueCount, bitsRequired, self->acceptableOverheadRatio_);
  OrgApacheLuceneUtilPackedPackedInts_copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader_withInt_withOrgApacheLuceneUtilPackedPackedInts_Mutable_withInt_withInt_withInt_(self->current_, 0, next, 0, valueCount, OrgApacheLuceneUtilPackedPackedInts_DEFAULT_BUFFER_SIZE);
  JreStrongAssign(&self->current_, next);
  self->currentMask_ = OrgApacheLuceneUtilPackedGrowableWriter_maskWithInt_([((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(self->current_)) getBitsPerValue]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedGrowableWriter)
