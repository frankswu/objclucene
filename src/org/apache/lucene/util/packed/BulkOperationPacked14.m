//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/util/packed/BulkOperationPacked.h"
#include "org/apache/lucene/util/packed/BulkOperationPacked14.h"

@implementation OrgApacheLuceneUtilPackedBulkOperationPacked14

- (instancetype)init {
  OrgApacheLuceneUtilPackedBulkOperationPacked14_init(self);
  return self;
}

- (void)decodeWithLongArray:(IOSLongArray *)blocks
                    withInt:(jint)blocksOffset
               withIntArray:(IOSIntArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint i = 0; i < iterations; ++i) {
    jlong block0 = IOSLongArray_Get(nil_chk(blocks), blocksOffset++);
    *IOSIntArray_GetRef(nil_chk(values), valuesOffset++) = (jint) (JreURShift64(block0, 50));
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 36)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 22)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 8)) & 16383LL);
    jlong block1 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreLShift64((block0 & 255LL), 6)) | (JreURShift64(block1, 58)));
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 44)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 30)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 16)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 2)) & 16383LL);
    jlong block2 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreLShift64((block1 & 3LL), 12)) | (JreURShift64(block2, 52)));
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 38)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 24)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 10)) & 16383LL);
    jlong block3 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreLShift64((block2 & 1023LL), 4)) | (JreURShift64(block3, 60)));
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block3, 46)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block3, 32)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block3, 18)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block3, 4)) & 16383LL);
    jlong block4 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreLShift64((block3 & 15LL), 10)) | (JreURShift64(block4, 54)));
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block4, 40)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block4, 26)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block4, 12)) & 16383LL);
    jlong block5 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreLShift64((block4 & 4095LL), 2)) | (JreURShift64(block5, 62)));
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block5, 48)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block5, 34)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block5, 20)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block5, 6)) & 16383LL);
    jlong block6 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreLShift64((block5 & 63LL), 8)) | (JreURShift64(block6, 56)));
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block6, 42)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block6, 28)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block6, 14)) & 16383LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) (block6 & 16383LL);
  }
}

- (void)decodeWithByteArray:(IOSByteArray *)blocks
                    withInt:(jint)blocksOffset
               withIntArray:(IOSIntArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint i = 0; i < iterations; ++i) {
    jint byte0 = IOSByteArray_Get(nil_chk(blocks), blocksOffset++) & (jint) 0xFF;
    jint byte1 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSIntArray_GetRef(nil_chk(values), valuesOffset++) = (JreLShift32(byte0, 6)) | (JreURShift32(byte1, 2));
    jint byte2 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    jint byte3 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreLShift32((byte1 & 3), 12)) | (JreLShift32(byte2, 4)) | (JreURShift32(byte3, 4));
    jint byte4 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    jint byte5 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreLShift32((byte3 & 15), 10)) | (JreLShift32(byte4, 2)) | (JreURShift32(byte5, 6));
    jint byte6 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreLShift32((byte5 & 63), 8)) | byte6;
  }
}

- (void)decodeWithLongArray:(IOSLongArray *)blocks
                    withInt:(jint)blocksOffset
              withLongArray:(IOSLongArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint i = 0; i < iterations; ++i) {
    jlong block0 = IOSLongArray_Get(nil_chk(blocks), blocksOffset++);
    *IOSLongArray_GetRef(nil_chk(values), valuesOffset++) = JreURShift64(block0, 50);
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 36)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 22)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 8)) & 16383LL;
    jlong block1 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((block0 & 255LL), 6)) | (JreURShift64(block1, 58));
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 44)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 30)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 16)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 2)) & 16383LL;
    jlong block2 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((block1 & 3LL), 12)) | (JreURShift64(block2, 52));
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 38)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 24)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 10)) & 16383LL;
    jlong block3 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((block2 & 1023LL), 4)) | (JreURShift64(block3, 60));
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block3, 46)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block3, 32)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block3, 18)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block3, 4)) & 16383LL;
    jlong block4 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((block3 & 15LL), 10)) | (JreURShift64(block4, 54));
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block4, 40)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block4, 26)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block4, 12)) & 16383LL;
    jlong block5 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((block4 & 4095LL), 2)) | (JreURShift64(block5, 62));
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block5, 48)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block5, 34)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block5, 20)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block5, 6)) & 16383LL;
    jlong block6 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((block5 & 63LL), 8)) | (JreURShift64(block6, 56));
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block6, 42)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block6, 28)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block6, 14)) & 16383LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = block6 & 16383LL;
  }
}

- (void)decodeWithByteArray:(IOSByteArray *)blocks
                    withInt:(jint)blocksOffset
              withLongArray:(IOSLongArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint i = 0; i < iterations; ++i) {
    jlong byte0 = IOSByteArray_Get(nil_chk(blocks), blocksOffset++) & (jint) 0xFF;
    jlong byte1 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSLongArray_GetRef(nil_chk(values), valuesOffset++) = (JreLShift64(byte0, 6)) | (JreURShift64(byte1, 2));
    jlong byte2 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    jlong byte3 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((byte1 & 3), 12)) | (JreLShift64(byte2, 4)) | (JreURShift64(byte3, 4));
    jlong byte4 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    jlong byte5 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((byte3 & 15), 10)) | (JreLShift64(byte4, 2)) | (JreURShift64(byte5, 6));
    jlong byte6 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((byte5 & 63), 8)) | byte6;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BulkOperationPacked14", NULL, 0x1, NULL, NULL },
    { "decodeWithLongArray:withInt:withIntArray:withInt:withInt:", "decode", "V", 0x1, NULL, NULL },
    { "decodeWithByteArray:withInt:withIntArray:withInt:withInt:", "decode", "V", 0x1, NULL, NULL },
    { "decodeWithLongArray:withInt:withLongArray:withInt:withInt:", "decode", "V", 0x1, NULL, NULL },
    { "decodeWithByteArray:withInt:withLongArray:withInt:withInt:", "decode", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedBulkOperationPacked14 = { 2, "BulkOperationPacked14", "org.apache.lucene.util.packed", NULL, 0x10, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedBulkOperationPacked14;
}

@end

void OrgApacheLuceneUtilPackedBulkOperationPacked14_init(OrgApacheLuceneUtilPackedBulkOperationPacked14 *self) {
  OrgApacheLuceneUtilPackedBulkOperationPacked_initWithInt_(self, 14);
}

OrgApacheLuceneUtilPackedBulkOperationPacked14 *new_OrgApacheLuceneUtilPackedBulkOperationPacked14_init() {
  OrgApacheLuceneUtilPackedBulkOperationPacked14 *self = [OrgApacheLuceneUtilPackedBulkOperationPacked14 alloc];
  OrgApacheLuceneUtilPackedBulkOperationPacked14_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedBulkOperationPacked14)
