//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/util/packed/BulkOperationPacked.h"
#include "org/apache/lucene/util/packed/BulkOperationPacked1.h"

@implementation OrgApacheLuceneUtilPackedBulkOperationPacked1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilPackedBulkOperationPacked1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)decodeWithLongArray:(IOSLongArray *)blocks
                    withInt:(jint)blocksOffset
               withIntArray:(IOSIntArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint i = 0; i < iterations; ++i) {
    jlong block = IOSLongArray_Get(nil_chk(blocks), blocksOffset++);
    for (jint shift = 63; shift >= 0; shift -= 1) {
      *IOSIntArray_GetRef(nil_chk(values), valuesOffset++) = (jint) ((JreURShift64(block, shift)) & 1);
    }
  }
}

- (void)decodeWithByteArray:(IOSByteArray *)blocks
                    withInt:(jint)blocksOffset
               withIntArray:(IOSIntArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint j = 0; j < iterations; ++j) {
    jbyte block = IOSByteArray_Get(nil_chk(blocks), blocksOffset++);
    *IOSIntArray_GetRef(nil_chk(values), valuesOffset++) = (JreURShift32(block, 7)) & 1;
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreURShift32(block, 6)) & 1;
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreURShift32(block, 5)) & 1;
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreURShift32(block, 4)) & 1;
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreURShift32(block, 3)) & 1;
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreURShift32(block, 2)) & 1;
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreURShift32(block, 1)) & 1;
    *IOSIntArray_GetRef(values, valuesOffset++) = block & 1;
  }
}

- (void)decodeWithLongArray:(IOSLongArray *)blocks
                    withInt:(jint)blocksOffset
              withLongArray:(IOSLongArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint i = 0; i < iterations; ++i) {
    jlong block = IOSLongArray_Get(nil_chk(blocks), blocksOffset++);
    for (jint shift = 63; shift >= 0; shift -= 1) {
      *IOSLongArray_GetRef(nil_chk(values), valuesOffset++) = (JreURShift64(block, shift)) & 1;
    }
  }
}

- (void)decodeWithByteArray:(IOSByteArray *)blocks
                    withInt:(jint)blocksOffset
              withLongArray:(IOSLongArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint j = 0; j < iterations; ++j) {
    jbyte block = IOSByteArray_Get(nil_chk(blocks), blocksOffset++);
    *IOSLongArray_GetRef(nil_chk(values), valuesOffset++) = (JreURShift32(block, 7)) & 1;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift32(block, 6)) & 1;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift32(block, 5)) & 1;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift32(block, 4)) & 1;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift32(block, 3)) & 1;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift32(block, 2)) & 1;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift32(block, 1)) & 1;
    *IOSLongArray_GetRef(values, valuesOffset++) = block & 1;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BulkOperationPacked1", NULL, 0x1, NULL, NULL },
    { "decodeWithLongArray:withInt:withIntArray:withInt:withInt:", "decode", "V", 0x1, NULL, NULL },
    { "decodeWithByteArray:withInt:withIntArray:withInt:withInt:", "decode", "V", 0x1, NULL, NULL },
    { "decodeWithLongArray:withInt:withLongArray:withInt:withInt:", "decode", "V", 0x1, NULL, NULL },
    { "decodeWithByteArray:withInt:withLongArray:withInt:withInt:", "decode", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedBulkOperationPacked1 = { 2, "BulkOperationPacked1", "org.apache.lucene.util.packed", NULL, 0x10, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedBulkOperationPacked1;
}

@end

void OrgApacheLuceneUtilPackedBulkOperationPacked1_init(OrgApacheLuceneUtilPackedBulkOperationPacked1 *self) {
  OrgApacheLuceneUtilPackedBulkOperationPacked_initWithInt_(self, 1);
}

OrgApacheLuceneUtilPackedBulkOperationPacked1 *new_OrgApacheLuceneUtilPackedBulkOperationPacked1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedBulkOperationPacked1, init)
}

OrgApacheLuceneUtilPackedBulkOperationPacked1 *create_OrgApacheLuceneUtilPackedBulkOperationPacked1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedBulkOperationPacked1, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedBulkOperationPacked1)
