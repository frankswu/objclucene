//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/Direct8.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/packed/Direct8.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

@implementation OrgApacheLuceneUtilPackedDirect8

- (instancetype)initWithInt:(jint)valueCount {
  OrgApacheLuceneUtilPackedDirect8_initWithInt_(self, valueCount);
  return self;
}

- (instancetype)initWithInt:(jint)packedIntsVersion
withOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                    withInt:(jint)valueCount {
  OrgApacheLuceneUtilPackedDirect8_initWithInt_withOrgApacheLuceneStoreDataInput_withInt_(self, packedIntsVersion, inArg, valueCount);
  return self;
}

- (jlong)getWithInt:(jint)index {
  return IOSByteArray_Get(nil_chk(values_), index) & (jlong) 0xFFLL;
}

- (void)setWithInt:(jint)index
          withLong:(jlong)value {
  *IOSByteArray_GetRef(nil_chk(values_), index) = (jbyte) (value);
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneUtilRamUsageEstimator_alignObjectSizeWithLong_(JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_HEADER_) + 2 * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT + JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF_)) + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithByteArray_(values_);
}

- (void)clear {
  JavaUtilArrays_fillWithByteArray_withByte_(values_, (jbyte) 0LL);
}

- (jint)getWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len {
  JreAssert((len > 0), (JreStrcat("$IC", @"len must be > 0 (got ", len, ')')));
  JreAssert((index >= 0 && index < valueCount_), (@"org/apache/lucene/util/packed/Direct8.java:77 condition failed: assert index >= 0 && index < valueCount;"));
  JreAssert((off + len <= ((IOSLongArray *) nil_chk(arr))->size_), (@"org/apache/lucene/util/packed/Direct8.java:78 condition failed: assert off + len <= arr.length;"));
  jint gets = JavaLangMath_minWithInt_withInt_(valueCount_ - index, len);
  for (jint i = index, o = off, end = index + gets; i < end; ++i, ++o) {
    *IOSLongArray_GetRef(arr, o) = IOSByteArray_Get(nil_chk(values_), i) & (jlong) 0xFFLL;
  }
  return gets;
}

- (jint)setWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len {
  JreAssert((len > 0), (JreStrcat("$IC", @"len must be > 0 (got ", len, ')')));
  JreAssert((index >= 0 && index < valueCount_), (@"org/apache/lucene/util/packed/Direct8.java:90 condition failed: assert index >= 0 && index < valueCount;"));
  JreAssert((off + len <= ((IOSLongArray *) nil_chk(arr))->size_), (@"org/apache/lucene/util/packed/Direct8.java:91 condition failed: assert off + len <= arr.length;"));
  jint sets = JavaLangMath_minWithInt_withInt_(valueCount_ - index, len);
  for (jint i = index, o = off, end = index + sets; i < end; ++i, ++o) {
    *IOSByteArray_GetRef(nil_chk(values_), i) = (jbyte) IOSLongArray_Get(arr, o);
  }
  return sets;
}

- (void)fillWithInt:(jint)fromIndex
            withInt:(jint)toIndex
           withLong:(jlong)val {
  JreAssert((val == (val & (jlong) 0xFFLL)), (@"org/apache/lucene/util/packed/Direct8.java:102 condition failed: assert val == (val & 0xFFL);"));
  JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(values_, fromIndex, toIndex, (jbyte) val);
}

- (void)dealloc {
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "Direct8", NULL, 0x0, NULL, NULL },
    { "initWithInt:withOrgApacheLuceneStoreDataInput:withInt:", "Direct8", NULL, 0x0, "Ljava.io.IOException;", NULL },
    { "getWithInt:", "get", "J", 0x1, NULL, NULL },
    { "setWithInt:withLong:", "set", "V", 0x1, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "getWithInt:withLongArray:withInt:withInt:", "get", "I", 0x1, NULL, NULL },
    { "setWithInt:withLongArray:withInt:withInt:", "set", "I", 0x1, NULL, NULL },
    { "fillWithInt:withInt:withLong:", "fill", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "values_", NULL, 0x10, "[B", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedDirect8 = { 2, "Direct8", "org.apache.lucene.util.packed", NULL, 0x10, 9, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedDirect8;
}

@end

void OrgApacheLuceneUtilPackedDirect8_initWithInt_(OrgApacheLuceneUtilPackedDirect8 *self, jint valueCount) {
  OrgApacheLuceneUtilPackedPackedInts_MutableImpl_initWithInt_withInt_(self, valueCount, 8);
  JreStrongAssignAndConsume(&self->values_, [IOSByteArray newArrayWithLength:valueCount]);
}

OrgApacheLuceneUtilPackedDirect8 *new_OrgApacheLuceneUtilPackedDirect8_initWithInt_(jint valueCount) {
  OrgApacheLuceneUtilPackedDirect8 *self = [OrgApacheLuceneUtilPackedDirect8 alloc];
  OrgApacheLuceneUtilPackedDirect8_initWithInt_(self, valueCount);
  return self;
}

void OrgApacheLuceneUtilPackedDirect8_initWithInt_withOrgApacheLuceneStoreDataInput_withInt_(OrgApacheLuceneUtilPackedDirect8 *self, jint packedIntsVersion, OrgApacheLuceneStoreDataInput *inArg, jint valueCount) {
  OrgApacheLuceneUtilPackedDirect8_initWithInt_(self, valueCount);
  [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readBytesWithByteArray:self->values_ withInt:0 withInt:valueCount];
  jint remaining = (jint) ([((OrgApacheLuceneUtilPackedPackedInts_FormatEnum *) nil_chk(JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED))) byteCountWithInt:packedIntsVersion withInt:valueCount withInt:8] - 1LL * valueCount);
  for (jint i = 0; i < remaining; ++i) {
    [inArg readByte];
  }
}

OrgApacheLuceneUtilPackedDirect8 *new_OrgApacheLuceneUtilPackedDirect8_initWithInt_withOrgApacheLuceneStoreDataInput_withInt_(jint packedIntsVersion, OrgApacheLuceneStoreDataInput *inArg, jint valueCount) {
  OrgApacheLuceneUtilPackedDirect8 *self = [OrgApacheLuceneUtilPackedDirect8 alloc];
  OrgApacheLuceneUtilPackedDirect8_initWithInt_withOrgApacheLuceneStoreDataInput_withInt_(self, packedIntsVersion, inArg, valueCount);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedDirect8)
