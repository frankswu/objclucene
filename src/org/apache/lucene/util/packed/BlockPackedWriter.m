//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/BlockPackedWriter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "org/apache/lucene/util/packed/AbstractBlockPackedWriter.h"
#include "org/apache/lucene/util/packed/BlockPackedWriter.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

@implementation OrgApacheLuceneUtilPackedBlockPackedWriter

- (instancetype)initWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                               withInt:(jint)blockSize {
  OrgApacheLuceneUtilPackedBlockPackedWriter_initWithOrgApacheLuceneStoreDataOutput_withInt_(self, outArg, blockSize);
  return self;
}

- (void)flush {
  JreAssert((off_ > 0), (@"org/apache/lucene/util/packed/BlockPackedWriter.java:71 condition failed: assert off > 0;"));
  jlong min = JavaLangLong_MAX_VALUE, max = JavaLangLong_MIN_VALUE;
  for (jint i = 0; i < off_; ++i) {
    min = JavaLangMath_minWithLong_withLong_(IOSLongArray_Get(nil_chk(values_), i), min);
    max = JavaLangMath_maxWithLong_withLong_(IOSLongArray_Get(values_, i), max);
  }
  jlong delta = max - min;
  jint bitsRequired = delta == 0 ? 0 : OrgApacheLuceneUtilPackedPackedInts_unsignedBitsRequiredWithLong_(delta);
  if (bitsRequired == 64) {
    min = 0LL;
  }
  else if (min > 0LL) {
    min = JavaLangMath_maxWithLong_withLong_(0LL, max - OrgApacheLuceneUtilPackedPackedInts_maxValueWithInt_(bitsRequired));
  }
  jint token = (JreLShift32(bitsRequired, OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_BPV_SHIFT)) | (min == 0 ? OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_MIN_VALUE_EQUALS_0 : 0);
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(out_)) writeByteWithByte:(jbyte) token];
  if (min != 0) {
    OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_writeVLongWithOrgApacheLuceneStoreDataOutput_withLong_(out_, OrgApacheLuceneUtilBitUtil_zigZagEncodeWithLong_(min) - 1);
  }
  if (bitsRequired > 0) {
    if (min != 0) {
      for (jint i = 0; i < off_; ++i) {
        *IOSLongArray_GetRef(nil_chk(values_), i) -= min;
      }
    }
    [self writeValuesWithInt:bitsRequired];
  }
  off_ = 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneStoreDataOutput:withInt:", "BlockPackedWriter", NULL, 0x1, NULL, NULL },
    { "flush", NULL, "V", 0x4, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedBlockPackedWriter = { 2, "BlockPackedWriter", "org.apache.lucene.util.packed", NULL, 0x11, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedBlockPackedWriter;
}

@end

void OrgApacheLuceneUtilPackedBlockPackedWriter_initWithOrgApacheLuceneStoreDataOutput_withInt_(OrgApacheLuceneUtilPackedBlockPackedWriter *self, OrgApacheLuceneStoreDataOutput *outArg, jint blockSize) {
  OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_initWithOrgApacheLuceneStoreDataOutput_withInt_(self, outArg, blockSize);
}

OrgApacheLuceneUtilPackedBlockPackedWriter *new_OrgApacheLuceneUtilPackedBlockPackedWriter_initWithOrgApacheLuceneStoreDataOutput_withInt_(OrgApacheLuceneStoreDataOutput *outArg, jint blockSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedBlockPackedWriter, initWithOrgApacheLuceneStoreDataOutput_withInt_, outArg, blockSize)
}

OrgApacheLuceneUtilPackedBlockPackedWriter *create_OrgApacheLuceneUtilPackedBlockPackedWriter_initWithOrgApacheLuceneStoreDataOutput_withInt_(OrgApacheLuceneStoreDataOutput *outArg, jint blockSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedBlockPackedWriter, initWithOrgApacheLuceneStoreDataOutput_withInt_, outArg, blockSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedBlockPackedWriter)
