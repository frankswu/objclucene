//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/PackedInts.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/packed/BulkOperation.h"
#include "org/apache/lucene/util/packed/Direct16.h"
#include "org/apache/lucene/util/packed/Direct32.h"
#include "org/apache/lucene/util/packed/Direct64.h"
#include "org/apache/lucene/util/packed/Direct8.h"
#include "org/apache/lucene/util/packed/DirectPacked64SingleBlockReader.h"
#include "org/apache/lucene/util/packed/DirectPackedReader.h"
#include "org/apache/lucene/util/packed/Packed16ThreeBlocks.h"
#include "org/apache/lucene/util/packed/Packed64.h"
#include "org/apache/lucene/util/packed/Packed64SingleBlock.h"
#include "org/apache/lucene/util/packed/Packed8ThreeBlocks.h"
#include "org/apache/lucene/util/packed/PackedInts.h"
#include "org/apache/lucene/util/packed/PackedReaderIterator.h"
#include "org/apache/lucene/util/packed/PackedWriter.h"

#pragma clang diagnostic ignored "-Wprotocol"

__attribute__((unused)) static void OrgApacheLuceneUtilPackedPackedInts_FormatEnum_initWithInt_withNSString_withInt_(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *self, jint id_, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgApacheLuceneUtilPackedPackedInts_FormatEnum *new_OrgApacheLuceneUtilPackedPackedInts_FormatEnum_initWithInt_withNSString_withInt_(jint id_, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum : OrgApacheLuceneUtilPackedPackedInts_FormatEnum < NSCopying >

- (jlong)byteCountWithInt:(jint)packedIntsVersion
                  withInt:(jint)valueCount
                  withInt:(jint)bitsPerValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum)

__attribute__((unused)) static void OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum_initWithInt_withNSString_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum *self, jint arg$0, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum *new_OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum_initWithInt_withNSString_withInt_(jint arg$0, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum)

@interface OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum : OrgApacheLuceneUtilPackedPackedInts_FormatEnum < NSCopying >

- (jint)longCountWithInt:(jint)packedIntsVersion
                 withInt:(jint)valueCount
                 withInt:(jint)bitsPerValue;

- (jboolean)isSupportedWithInt:(jint)bitsPerValue;

- (jfloat)overheadPerValueWithInt:(jint)bitsPerValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum)

__attribute__((unused)) static void OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum_initWithInt_withNSString_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum *self, jint arg$0, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum *new_OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum_initWithInt_withNSString_withInt_(jint arg$0, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum)

@interface OrgApacheLuceneUtilPackedPackedInts_Decoder : NSObject

@end

@interface OrgApacheLuceneUtilPackedPackedInts_Encoder : NSObject

@end

@interface OrgApacheLuceneUtilPackedPackedInts_ReaderIterator : NSObject

@end

@interface OrgApacheLuceneUtilPackedPackedInts_NullReader () {
 @public
  jint valueCount_;
}

@end

@interface OrgApacheLuceneUtilPackedPackedInts_$1 : OrgApacheLuceneUtilPackedDirectPackedReader {
 @public
  jlong val$endPointer_;
}

- (jlong)getWithInt:(jint)index;

- (instancetype)initWithLong:(jlong)capture$0
                     withInt:(jint)arg$0
                     withInt:(jint)arg$1
withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)arg$2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilPackedPackedInts_$1)

__attribute__((unused)) static void OrgApacheLuceneUtilPackedPackedInts_$1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneUtilPackedPackedInts_$1 *self, jlong capture$0, jint arg$0, jint arg$1, OrgApacheLuceneStoreIndexInput *arg$2);

__attribute__((unused)) static OrgApacheLuceneUtilPackedPackedInts_$1 *new_OrgApacheLuceneUtilPackedPackedInts_$1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(jlong capture$0, jint arg$0, jint arg$1, OrgApacheLuceneStoreIndexInput *arg$2) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilPackedPackedInts_$1)

NSString *OrgApacheLuceneUtilPackedPackedInts_CODEC_NAME_ = @"PackedInts";

@implementation OrgApacheLuceneUtilPackedPackedInts

+ (void)checkVersionWithInt:(jint)version_ {
  OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(version_);
}

+ (OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *)fastestFormatAndBitsWithInt:(jint)valueCount
                                                                           withInt:(jint)bitsPerValue
                                                                         withFloat:(jfloat)acceptableOverheadRatio {
  return OrgApacheLuceneUtilPackedPackedInts_fastestFormatAndBitsWithInt_withInt_withFloat_(valueCount, bitsPerValue, acceptableOverheadRatio);
}

+ (id<OrgApacheLuceneUtilPackedPackedInts_Decoder>)getDecoderWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum:(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *)format
                                                                                                        withInt:(jint)version_
                                                                                                        withInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedPackedInts_getDecoderWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_(format, version_, bitsPerValue);
}

+ (id<OrgApacheLuceneUtilPackedPackedInts_Encoder>)getEncoderWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum:(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *)format
                                                                                                        withInt:(jint)version_
                                                                                                        withInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedPackedInts_getEncoderWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_(format, version_, bitsPerValue);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Reader *)getReaderNoHeaderWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                                                withOrgApacheLuceneUtilPackedPackedInts_FormatEnum:(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *)format
                                                                                           withInt:(jint)version_
                                                                                           withInt:(jint)valueCount
                                                                                           withInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedPackedInts_getReaderNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_(inArg, format, version_, valueCount, bitsPerValue);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Reader *)getReaderWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  return OrgApacheLuceneUtilPackedPackedInts_getReaderWithOrgApacheLuceneStoreDataInput_(inArg);
}

+ (id<OrgApacheLuceneUtilPackedPackedInts_ReaderIterator>)getReaderIteratorNoHeaderWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                                                                  withOrgApacheLuceneUtilPackedPackedInts_FormatEnum:(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *)format
                                                                                                             withInt:(jint)version_
                                                                                                             withInt:(jint)valueCount
                                                                                                             withInt:(jint)bitsPerValue
                                                                                                             withInt:(jint)mem {
  return OrgApacheLuceneUtilPackedPackedInts_getReaderIteratorNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_withInt_(inArg, format, version_, valueCount, bitsPerValue, mem);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Reader *)getDirectReaderNoHeaderWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg
                                                       withOrgApacheLuceneUtilPackedPackedInts_FormatEnum:(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *)format
                                                                                                  withInt:(jint)version_
                                                                                                  withInt:(jint)valueCount
                                                                                                  withInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedPackedInts_getDirectReaderNoHeaderWithOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_(inArg, format, version_, valueCount, bitsPerValue);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Mutable *)getMutableWithInt:(jint)valueCount
                                                           withInt:(jint)bitsPerValue
                                                         withFloat:(jfloat)acceptableOverheadRatio {
  return OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withFloat_(valueCount, bitsPerValue, acceptableOverheadRatio);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Mutable *)getMutableWithInt:(jint)valueCount
                                                           withInt:(jint)bitsPerValue
                withOrgApacheLuceneUtilPackedPackedInts_FormatEnum:(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *)format {
  return OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_(valueCount, bitsPerValue, format);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Writer *)getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                                 withOrgApacheLuceneUtilPackedPackedInts_FormatEnum:(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *)format
                                                                                            withInt:(jint)valueCount
                                                                                            withInt:(jint)bitsPerValue
                                                                                            withInt:(jint)mem {
  return OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_(outArg, format, valueCount, bitsPerValue, mem);
}

+ (jint)bitsRequiredWithLong:(jlong)maxValue {
  return OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(maxValue);
}

+ (jint)unsignedBitsRequiredWithLong:(jlong)bits {
  return OrgApacheLuceneUtilPackedPackedInts_unsignedBitsRequiredWithLong_(bits);
}

+ (jlong)maxValueWithInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedPackedInts_maxValueWithInt_(bitsPerValue);
}

+ (void)copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader:(OrgApacheLuceneUtilPackedPackedInts_Reader *)src
                                                     withInt:(jint)srcPos
             withOrgApacheLuceneUtilPackedPackedInts_Mutable:(OrgApacheLuceneUtilPackedPackedInts_Mutable *)dest
                                                     withInt:(jint)destPos
                                                     withInt:(jint)len
                                                     withInt:(jint)mem {
  OrgApacheLuceneUtilPackedPackedInts_copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader_withInt_withOrgApacheLuceneUtilPackedPackedInts_Mutable_withInt_withInt_withInt_(src, srcPos, dest, destPos, len, mem);
}

+ (void)copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader:(OrgApacheLuceneUtilPackedPackedInts_Reader *)src
                                                     withInt:(jint)srcPos
             withOrgApacheLuceneUtilPackedPackedInts_Mutable:(OrgApacheLuceneUtilPackedPackedInts_Mutable *)dest
                                                     withInt:(jint)destPos
                                                     withInt:(jint)len
                                               withLongArray:(IOSLongArray *)buf {
  OrgApacheLuceneUtilPackedPackedInts_copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader_withInt_withOrgApacheLuceneUtilPackedPackedInts_Mutable_withInt_withInt_withLongArray_(src, srcPos, dest, destPos, len, buf);
}

+ (jint)checkBlockSizeWithInt:(jint)blockSize
                      withInt:(jint)minBlockSize
                      withInt:(jint)maxBlockSize {
  return OrgApacheLuceneUtilPackedPackedInts_checkBlockSizeWithInt_withInt_withInt_(blockSize, minBlockSize, maxBlockSize);
}

+ (jint)numBlocksWithLong:(jlong)size
                  withInt:(jint)blockSize {
  return OrgApacheLuceneUtilPackedPackedInts_numBlocksWithLong_withInt_(size, blockSize);
}

- (instancetype)init {
  OrgApacheLuceneUtilPackedPackedInts_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkVersionWithInt:", "checkVersion", "V", 0x9, NULL, NULL },
    { "fastestFormatAndBitsWithInt:withInt:withFloat:", "fastestFormatAndBits", "Lorg.apache.lucene.util.packed.PackedInts$FormatAndBits;", 0x9, NULL, NULL },
    { "getDecoderWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum:withInt:withInt:", "getDecoder", "Lorg.apache.lucene.util.packed.PackedInts$Decoder;", 0x9, NULL, NULL },
    { "getEncoderWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum:withInt:withInt:", "getEncoder", "Lorg.apache.lucene.util.packed.PackedInts$Encoder;", 0x9, NULL, NULL },
    { "getReaderNoHeaderWithOrgApacheLuceneStoreDataInput:withOrgApacheLuceneUtilPackedPackedInts_FormatEnum:withInt:withInt:withInt:", "getReaderNoHeader", "Lorg.apache.lucene.util.packed.PackedInts$Reader;", 0x9, "Ljava.io.IOException;", NULL },
    { "getReaderWithOrgApacheLuceneStoreDataInput:", "getReader", "Lorg.apache.lucene.util.packed.PackedInts$Reader;", 0x9, "Ljava.io.IOException;", NULL },
    { "getReaderIteratorNoHeaderWithOrgApacheLuceneStoreDataInput:withOrgApacheLuceneUtilPackedPackedInts_FormatEnum:withInt:withInt:withInt:withInt:", "getReaderIteratorNoHeader", "Lorg.apache.lucene.util.packed.PackedInts$ReaderIterator;", 0x9, NULL, NULL },
    { "getDirectReaderNoHeaderWithOrgApacheLuceneStoreIndexInput:withOrgApacheLuceneUtilPackedPackedInts_FormatEnum:withInt:withInt:withInt:", "getDirectReaderNoHeader", "Lorg.apache.lucene.util.packed.PackedInts$Reader;", 0x9, NULL, NULL },
    { "getMutableWithInt:withInt:withFloat:", "getMutable", "Lorg.apache.lucene.util.packed.PackedInts$Mutable;", 0x9, NULL, NULL },
    { "getMutableWithInt:withInt:withOrgApacheLuceneUtilPackedPackedInts_FormatEnum:", "getMutable", "Lorg.apache.lucene.util.packed.PackedInts$Mutable;", 0x9, NULL, NULL },
    { "getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput:withOrgApacheLuceneUtilPackedPackedInts_FormatEnum:withInt:withInt:withInt:", "getWriterNoHeader", "Lorg.apache.lucene.util.packed.PackedInts$Writer;", 0x9, NULL, NULL },
    { "bitsRequiredWithLong:", "bitsRequired", "I", 0x9, NULL, NULL },
    { "unsignedBitsRequiredWithLong:", "unsignedBitsRequired", "I", 0x9, NULL, NULL },
    { "maxValueWithInt:", "maxValue", "J", 0x9, NULL, NULL },
    { "copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader:withInt:withOrgApacheLuceneUtilPackedPackedInts_Mutable:withInt:withInt:withInt:", "copy", "V", 0x9, NULL, NULL },
    { "copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader:withInt:withOrgApacheLuceneUtilPackedPackedInts_Mutable:withInt:withInt:withLongArray:", "copy", "V", 0x8, NULL, NULL },
    { "checkBlockSizeWithInt:withInt:withInt:", "checkBlockSize", "I", 0x8, NULL, NULL },
    { "numBlocksWithLong:withInt:", "numBlocks", "I", 0x8, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FASTEST", "FASTEST", 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgApacheLuceneUtilPackedPackedInts_FASTEST },
    { "FAST", "FAST", 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgApacheLuceneUtilPackedPackedInts_FAST },
    { "DEFAULT", "DEFAULT", 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgApacheLuceneUtilPackedPackedInts_DEFAULT },
    { "COMPACT", "COMPACT", 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgApacheLuceneUtilPackedPackedInts_COMPACT },
    { "DEFAULT_BUFFER_SIZE", "DEFAULT_BUFFER_SIZE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneUtilPackedPackedInts_DEFAULT_BUFFER_SIZE },
    { "CODEC_NAME_", NULL, 0x19, "Ljava.lang.String;", &OrgApacheLuceneUtilPackedPackedInts_CODEC_NAME_, NULL, .constantValue.asLong = 0 },
    { "VERSION_START", "VERSION_START", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneUtilPackedPackedInts_VERSION_START },
    { "VERSION_BYTE_ALIGNED", "VERSION_BYTE_ALIGNED", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneUtilPackedPackedInts_VERSION_BYTE_ALIGNED },
    { "VERSION_MONOTONIC_WITHOUT_ZIGZAG", "VERSION_MONOTONIC_WITHOUT_ZIGZAG", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneUtilPackedPackedInts_VERSION_MONOTONIC_WITHOUT_ZIGZAG },
    { "VERSION_CURRENT", "VERSION_CURRENT", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.util.packed.PackedInts$Format;", "Lorg.apache.lucene.util.packed.PackedInts$FormatAndBits;", "Lorg.apache.lucene.util.packed.PackedInts$Decoder;", "Lorg.apache.lucene.util.packed.PackedInts$Encoder;", "Lorg.apache.lucene.util.packed.PackedInts$Reader;", "Lorg.apache.lucene.util.packed.PackedInts$ReaderIterator;", "Lorg.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl;", "Lorg.apache.lucene.util.packed.PackedInts$Mutable;", "Lorg.apache.lucene.util.packed.PackedInts$ReaderImpl;", "Lorg.apache.lucene.util.packed.PackedInts$MutableImpl;", "Lorg.apache.lucene.util.packed.PackedInts$NullReader;", "Lorg.apache.lucene.util.packed.PackedInts$Writer;"};
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts = { 2, "PackedInts", "org.apache.lucene.util.packed", NULL, 0x1, 19, methods, 10, fields, 0, NULL, 12, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(jint version_) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  if (version_ < OrgApacheLuceneUtilPackedPackedInts_VERSION_START) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"Version is too old, should be at least ", OrgApacheLuceneUtilPackedPackedInts_VERSION_START, @" (got ", version_, ')')) autorelease];
  }
  else if (version_ > OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"Version is too new, should be at most ", OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT, @" (got ", version_, ')')) autorelease];
  }
}

OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *OrgApacheLuceneUtilPackedPackedInts_fastestFormatAndBitsWithInt_withInt_withFloat_(jint valueCount, jint bitsPerValue, jfloat acceptableOverheadRatio) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  if (valueCount == -1) {
    valueCount = JavaLangInteger_MAX_VALUE;
  }
  acceptableOverheadRatio = JavaLangMath_maxWithFloat_withFloat_(OrgApacheLuceneUtilPackedPackedInts_COMPACT, acceptableOverheadRatio);
  acceptableOverheadRatio = JavaLangMath_minWithFloat_withFloat_(OrgApacheLuceneUtilPackedPackedInts_FASTEST, acceptableOverheadRatio);
  jfloat acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue;
  jint maxBitsPerValue = bitsPerValue + JreFpToInt(acceptableOverheadPerValue);
  jint actualBitsPerValue = -1;
  OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format = JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED);
  if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {
    actualBitsPerValue = 8;
  }
  else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {
    actualBitsPerValue = 16;
  }
  else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {
    actualBitsPerValue = 32;
  }
  else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {
    actualBitsPerValue = 64;
  }
  else if (valueCount <= OrgApacheLuceneUtilPackedPacked8ThreeBlocks_MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {
    actualBitsPerValue = 24;
  }
  else if (valueCount <= OrgApacheLuceneUtilPackedPacked16ThreeBlocks_MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {
    actualBitsPerValue = 48;
  }
  else {
    for (jint bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {
      if ([((OrgApacheLuceneUtilPackedPackedInts_FormatEnum *) nil_chk(JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED_SINGLE_BLOCK))) isSupportedWithInt:bpv]) {
        jfloat overhead = [JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED_SINGLE_BLOCK) overheadPerValueWithInt:bpv];
        jfloat acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;
        if (overhead <= acceptableOverhead) {
          actualBitsPerValue = bpv;
          format = JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED_SINGLE_BLOCK);
          break;
        }
      }
    }
    if (actualBitsPerValue < 0) {
      actualBitsPerValue = bitsPerValue;
    }
  }
  return [new_OrgApacheLuceneUtilPackedPackedInts_FormatAndBits_initWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_(format, actualBitsPerValue) autorelease];
}

id<OrgApacheLuceneUtilPackedPackedInts_Decoder> OrgApacheLuceneUtilPackedPackedInts_getDecoderWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format, jint version_, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(version_);
  return OrgApacheLuceneUtilPackedBulkOperation_ofWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_(format, bitsPerValue);
}

id<OrgApacheLuceneUtilPackedPackedInts_Encoder> OrgApacheLuceneUtilPackedPackedInts_getEncoderWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format, jint version_, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(version_);
  return OrgApacheLuceneUtilPackedBulkOperation_ofWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_(format, bitsPerValue);
}

OrgApacheLuceneUtilPackedPackedInts_Reader *OrgApacheLuceneUtilPackedPackedInts_getReaderNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_(OrgApacheLuceneStoreDataInput *inArg, OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format, jint version_, jint valueCount, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(version_);
  switch ([format ordinal]) {
    case OrgApacheLuceneUtilPackedPackedInts_Format_PACKED_SINGLE_BLOCK:
    return OrgApacheLuceneUtilPackedPacked64SingleBlock_createWithOrgApacheLuceneStoreDataInput_withInt_withInt_(inArg, valueCount, bitsPerValue);
    case OrgApacheLuceneUtilPackedPackedInts_Format_PACKED:
    switch (bitsPerValue) {
      case 8:
      return [new_OrgApacheLuceneUtilPackedDirect8_initWithInt_withOrgApacheLuceneStoreDataInput_withInt_(version_, inArg, valueCount) autorelease];
      case 16:
      return [new_OrgApacheLuceneUtilPackedDirect16_initWithInt_withOrgApacheLuceneStoreDataInput_withInt_(version_, inArg, valueCount) autorelease];
      case 32:
      return [new_OrgApacheLuceneUtilPackedDirect32_initWithInt_withOrgApacheLuceneStoreDataInput_withInt_(version_, inArg, valueCount) autorelease];
      case 64:
      return [new_OrgApacheLuceneUtilPackedDirect64_initWithInt_withOrgApacheLuceneStoreDataInput_withInt_(version_, inArg, valueCount) autorelease];
      case 24:
      if (valueCount <= OrgApacheLuceneUtilPackedPacked8ThreeBlocks_MAX_SIZE) {
        return [new_OrgApacheLuceneUtilPackedPacked8ThreeBlocks_initWithInt_withOrgApacheLuceneStoreDataInput_withInt_(version_, inArg, valueCount) autorelease];
      }
      break;
      case 48:
      if (valueCount <= OrgApacheLuceneUtilPackedPacked16ThreeBlocks_MAX_SIZE) {
        return [new_OrgApacheLuceneUtilPackedPacked16ThreeBlocks_initWithInt_withOrgApacheLuceneStoreDataInput_withInt_(version_, inArg, valueCount) autorelease];
      }
      break;
    }
    return [new_OrgApacheLuceneUtilPackedPacked64_initWithInt_withOrgApacheLuceneStoreDataInput_withInt_withInt_(version_, inArg, valueCount, bitsPerValue) autorelease];
    default:
    @throw [new_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"Unknown Writer format: ", format)) autorelease];
  }
}

OrgApacheLuceneUtilPackedPackedInts_Reader *OrgApacheLuceneUtilPackedPackedInts_getReaderWithOrgApacheLuceneStoreDataInput_(OrgApacheLuceneStoreDataInput *inArg) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  jint version_ = OrgApacheLuceneCodecsCodecUtil_checkHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(inArg, OrgApacheLuceneUtilPackedPackedInts_CODEC_NAME_, OrgApacheLuceneUtilPackedPackedInts_VERSION_START, OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT);
  jint bitsPerValue = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readVInt];
  JreAssert((bitsPerValue > 0 && bitsPerValue <= 64), (JreStrcat("$I", @"bitsPerValue=", bitsPerValue)));
  jint valueCount = [inArg readVInt];
  OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format = OrgApacheLuceneUtilPackedPackedInts_FormatEnum_byIdWithInt_([inArg readVInt]);
  return OrgApacheLuceneUtilPackedPackedInts_getReaderNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_(inArg, format, version_, valueCount, bitsPerValue);
}

id<OrgApacheLuceneUtilPackedPackedInts_ReaderIterator> OrgApacheLuceneUtilPackedPackedInts_getReaderIteratorNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_withInt_(OrgApacheLuceneStoreDataInput *inArg, OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format, jint version_, jint valueCount, jint bitsPerValue, jint mem) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(version_);
  return [new_OrgApacheLuceneUtilPackedPackedReaderIterator_initWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_withOrgApacheLuceneStoreDataInput_withInt_(format, version_, valueCount, bitsPerValue, inArg, mem) autorelease];
}

OrgApacheLuceneUtilPackedPackedInts_Reader *OrgApacheLuceneUtilPackedPackedInts_getDirectReaderNoHeaderWithOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_(OrgApacheLuceneStoreIndexInput *inArg, OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format, jint version_, jint valueCount, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(version_);
  {
    jlong byteCount;
    switch ([format ordinal]) {
      case OrgApacheLuceneUtilPackedPackedInts_Format_PACKED:
      byteCount = [((OrgApacheLuceneUtilPackedPackedInts_FormatEnum *) nil_chk(format)) byteCountWithInt:version_ withInt:valueCount withInt:bitsPerValue];
      if (byteCount != [format byteCountWithInt:OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT withInt:valueCount withInt:bitsPerValue]) {
        JreAssert((version_ == OrgApacheLuceneUtilPackedPackedInts_VERSION_START), (@"org/apache/lucene/util/packed/PackedInts.java:901 condition failed: assert version == VERSION_START;"));
        jlong endPointer = [((OrgApacheLuceneStoreIndexInput *) nil_chk(inArg)) getFilePointer] + byteCount;
        return [new_OrgApacheLuceneUtilPackedPackedInts_$1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(endPointer, bitsPerValue, valueCount, inArg) autorelease];
      }
      else {
        return [new_OrgApacheLuceneUtilPackedDirectPackedReader_initWithInt_withInt_withOrgApacheLuceneStoreIndexInput_(bitsPerValue, valueCount, inArg) autorelease];
      }
      case OrgApacheLuceneUtilPackedPackedInts_Format_PACKED_SINGLE_BLOCK:
      return [new_OrgApacheLuceneUtilPackedDirectPacked64SingleBlockReader_initWithInt_withInt_withOrgApacheLuceneStoreIndexInput_(bitsPerValue, valueCount, inArg) autorelease];
      default:
      @throw [new_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"Unknwown format: ", format)) autorelease];
    }
  }
}

OrgApacheLuceneUtilPackedPackedInts_Mutable *OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withFloat_(jint valueCount, jint bitsPerValue, jfloat acceptableOverheadRatio) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *formatAndBits = OrgApacheLuceneUtilPackedPackedInts_fastestFormatAndBitsWithInt_withInt_withFloat_(valueCount, bitsPerValue, acceptableOverheadRatio);
  return OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_(valueCount, ((OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *) nil_chk(formatAndBits))->bitsPerValue_, formatAndBits->format_);
}

OrgApacheLuceneUtilPackedPackedInts_Mutable *OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_(jint valueCount, jint bitsPerValue, OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  JreAssert((valueCount >= 0), (@"org/apache/lucene/util/packed/PackedInts.java:984 condition failed: assert valueCount >= 0;"));
  switch ([format ordinal]) {
    case OrgApacheLuceneUtilPackedPackedInts_Format_PACKED_SINGLE_BLOCK:
    return OrgApacheLuceneUtilPackedPacked64SingleBlock_createWithInt_withInt_(valueCount, bitsPerValue);
    case OrgApacheLuceneUtilPackedPackedInts_Format_PACKED:
    switch (bitsPerValue) {
      case 8:
      return [new_OrgApacheLuceneUtilPackedDirect8_initWithInt_(valueCount) autorelease];
      case 16:
      return [new_OrgApacheLuceneUtilPackedDirect16_initWithInt_(valueCount) autorelease];
      case 32:
      return [new_OrgApacheLuceneUtilPackedDirect32_initWithInt_(valueCount) autorelease];
      case 64:
      return [new_OrgApacheLuceneUtilPackedDirect64_initWithInt_(valueCount) autorelease];
      case 24:
      if (valueCount <= OrgApacheLuceneUtilPackedPacked8ThreeBlocks_MAX_SIZE) {
        return [new_OrgApacheLuceneUtilPackedPacked8ThreeBlocks_initWithInt_(valueCount) autorelease];
      }
      break;
      case 48:
      if (valueCount <= OrgApacheLuceneUtilPackedPacked16ThreeBlocks_MAX_SIZE) {
        return [new_OrgApacheLuceneUtilPackedPacked16ThreeBlocks_initWithInt_(valueCount) autorelease];
      }
      break;
    }
    return [new_OrgApacheLuceneUtilPackedPacked64_initWithInt_withInt_(valueCount, bitsPerValue) autorelease];
    default:
    @throw [new_JavaLangAssertionError_init() autorelease];
  }
}

OrgApacheLuceneUtilPackedPackedInts_Writer *OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_(OrgApacheLuceneStoreDataOutput *outArg, OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format, jint valueCount, jint bitsPerValue, jint mem) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  return [new_OrgApacheLuceneUtilPackedPackedWriter_initWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withOrgApacheLuceneStoreDataOutput_withInt_withInt_withInt_(format, outArg, valueCount, bitsPerValue, mem) autorelease];
}

jint OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(jlong maxValue) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  if (maxValue < 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$JC", @"maxValue must be non-negative (got: ", maxValue, ')')) autorelease];
  }
  return OrgApacheLuceneUtilPackedPackedInts_unsignedBitsRequiredWithLong_(maxValue);
}

jint OrgApacheLuceneUtilPackedPackedInts_unsignedBitsRequiredWithLong_(jlong bits) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  return JavaLangMath_maxWithInt_withInt_(1, 64 - JavaLangLong_numberOfLeadingZerosWithLong_(bits));
}

jlong OrgApacheLuceneUtilPackedPackedInts_maxValueWithInt_(jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  return bitsPerValue == 64 ? JavaLangLong_MAX_VALUE : ~(JreLShift64(~0LL, bitsPerValue));
}

void OrgApacheLuceneUtilPackedPackedInts_copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader_withInt_withOrgApacheLuceneUtilPackedPackedInts_Mutable_withInt_withInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_Reader *src, jint srcPos, OrgApacheLuceneUtilPackedPackedInts_Mutable *dest, jint destPos, jint len, jint mem) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  JreAssert((srcPos + len <= [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(src)) size]), (@"org/apache/lucene/util/packed/PackedInts.java:1147 condition failed: assert srcPos + len <= src.size();"));
  JreAssert((destPos + len <= [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(dest)) size]), (@"org/apache/lucene/util/packed/PackedInts.java:1148 condition failed: assert destPos + len <= dest.size();"));
  jint capacity = JreURShift32(mem, 3);
  if (capacity == 0) {
    for (jint i = 0; i < len; ++i) {
      [dest setWithInt:destPos++ withLong:[src getWithInt:srcPos++]];
    }
  }
  else if (len > 0) {
    IOSLongArray *buf = [IOSLongArray arrayWithLength:JavaLangMath_minWithInt_withInt_(capacity, len)];
    OrgApacheLuceneUtilPackedPackedInts_copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader_withInt_withOrgApacheLuceneUtilPackedPackedInts_Mutable_withInt_withInt_withLongArray_(src, srcPos, dest, destPos, len, buf);
  }
}

void OrgApacheLuceneUtilPackedPackedInts_copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader_withInt_withOrgApacheLuceneUtilPackedPackedInts_Mutable_withInt_withInt_withLongArray_(OrgApacheLuceneUtilPackedPackedInts_Reader *src, jint srcPos, OrgApacheLuceneUtilPackedPackedInts_Mutable *dest, jint destPos, jint len, IOSLongArray *buf) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  JreAssert((((IOSLongArray *) nil_chk(buf))->size_ > 0), (@"org/apache/lucene/util/packed/PackedInts.java:1163 condition failed: assert buf.length > 0;"));
  jint remaining = 0;
  while (len > 0) {
    jint read = [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(src)) getWithInt:srcPos withLongArray:buf withInt:remaining withInt:JavaLangMath_minWithInt_withInt_(len, buf->size_ - remaining)];
    JreAssert((read > 0), (@"org/apache/lucene/util/packed/PackedInts.java:1167 condition failed: assert read > 0;"));
    srcPos += read;
    len -= read;
    remaining += read;
    jint written = [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(dest)) setWithInt:destPos withLongArray:buf withInt:0 withInt:remaining];
    JreAssert((written > 0), (@"org/apache/lucene/util/packed/PackedInts.java:1172 condition failed: assert written > 0;"));
    destPos += written;
    if (written < remaining) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, written, buf, 0, remaining - written);
    }
    remaining -= written;
  }
  while (remaining > 0) {
    jint written = [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(dest)) setWithInt:destPos withLongArray:buf withInt:0 withInt:remaining];
    destPos += written;
    remaining -= written;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, written, buf, 0, remaining);
  }
}

jint OrgApacheLuceneUtilPackedPackedInts_checkBlockSizeWithInt_withInt_withInt_(jint blockSize, jint minBlockSize, jint maxBlockSize) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  if (blockSize < minBlockSize || blockSize > maxBlockSize) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$I", @"blockSize must be >= ", minBlockSize, @" and <= ", maxBlockSize, @", got ", blockSize)) autorelease];
  }
  if ((blockSize & (blockSize - 1)) != 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"blockSize must be a power of two, got ", blockSize)) autorelease];
  }
  return JavaLangInteger_numberOfTrailingZerosWithInt_(blockSize);
}

jint OrgApacheLuceneUtilPackedPackedInts_numBlocksWithLong_withInt_(jlong size, jint blockSize) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  jint numBlocks = (jint) (size / blockSize) + (size % blockSize == 0 ? 0 : 1);
  if ((jlong) numBlocks * blockSize < size) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"size is too large for this block size") autorelease];
  }
  return numBlocks;
}

void OrgApacheLuceneUtilPackedPackedInts_init(OrgApacheLuceneUtilPackedPackedInts *self) {
  NSObject_init(self);
}

OrgApacheLuceneUtilPackedPackedInts *new_OrgApacheLuceneUtilPackedPackedInts_init() {
  OrgApacheLuceneUtilPackedPackedInts *self = [OrgApacheLuceneUtilPackedPackedInts alloc];
  OrgApacheLuceneUtilPackedPackedInts_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilPackedPackedInts_FormatEnum)

OrgApacheLuceneUtilPackedPackedInts_FormatEnum *OrgApacheLuceneUtilPackedPackedInts_FormatEnum_values_[2];

@implementation OrgApacheLuceneUtilPackedPackedInts_FormatEnum

+ (OrgApacheLuceneUtilPackedPackedInts_FormatEnum *)byIdWithInt:(jint)id_ {
  return OrgApacheLuceneUtilPackedPackedInts_FormatEnum_byIdWithInt_(id_);
}

- (instancetype)initWithInt:(jint)id_
               withNSString:(NSString *)__name
                    withInt:(jint)__ordinal {
  OrgApacheLuceneUtilPackedPackedInts_FormatEnum_initWithInt_withNSString_withInt_(self, id_, __name, __ordinal);
  return self;
}

- (jint)getId {
  return id__;
}

- (jlong)byteCountWithInt:(jint)packedIntsVersion
                  withInt:(jint)valueCount
                  withInt:(jint)bitsPerValue {
  JreAssert((bitsPerValue >= 0 && bitsPerValue <= 64), (JavaLangInteger_valueOfWithInt_(bitsPerValue)));
  return 8LL * [self longCountWithInt:packedIntsVersion withInt:valueCount withInt:bitsPerValue];
}

- (jint)longCountWithInt:(jint)packedIntsVersion
                 withInt:(jint)valueCount
                 withInt:(jint)bitsPerValue {
  JreAssert((bitsPerValue >= 0 && bitsPerValue <= 64), (JavaLangInteger_valueOfWithInt_(bitsPerValue)));
  jlong byteCount = [self byteCountWithInt:packedIntsVersion withInt:valueCount withInt:bitsPerValue];
  JreAssert((byteCount < 8LL * JavaLangInteger_MAX_VALUE), (@"org/apache/lucene/util/packed/PackedInts.java:180 condition failed: assert byteCount < 8L * Integer.MAX_VALUE;"));
  if ((byteCount % 8) == 0) {
    return (jint) (byteCount / 8);
  }
  else {
    return (jint) (byteCount / 8 + 1);
  }
}

- (jboolean)isSupportedWithInt:(jint)bitsPerValue {
  return bitsPerValue >= 1 && bitsPerValue <= 64;
}

- (jfloat)overheadPerValueWithInt:(jint)bitsPerValue {
  JreAssert(([self isSupportedWithInt:bitsPerValue]), (@"org/apache/lucene/util/packed/PackedInts.java:200 condition failed: assert isSupported(bitsPerValue);"));
  return 0.0f;
}

IOSObjectArray *OrgApacheLuceneUtilPackedPackedInts_FormatEnum_values() {
  OrgApacheLuceneUtilPackedPackedInts_FormatEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgApacheLuceneUtilPackedPackedInts_FormatEnum_values_ count:2 type:OrgApacheLuceneUtilPackedPackedInts_FormatEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgApacheLuceneUtilPackedPackedInts_FormatEnum_values();
}

+ (OrgApacheLuceneUtilPackedPackedInts_FormatEnum *)valueOfWithNSString:(NSString *)name {
  return OrgApacheLuceneUtilPackedPackedInts_FormatEnum_valueOfWithNSString_(name);
}

OrgApacheLuceneUtilPackedPackedInts_FormatEnum *OrgApacheLuceneUtilPackedPackedInts_FormatEnum_valueOfWithNSString_(NSString *name) {
  OrgApacheLuceneUtilPackedPackedInts_FormatEnum_initialize();
  for (int i = 0; i < 2; i++) {
    OrgApacheLuceneUtilPackedPackedInts_FormatEnum *e = OrgApacheLuceneUtilPackedPackedInts_FormatEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilPackedPackedInts_FormatEnum class]) {
    OrgApacheLuceneUtilPackedPackedInts_FormatEnum_PACKED = new_OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum_initWithInt_withNSString_withInt_(0, @"PACKED", 0);
    OrgApacheLuceneUtilPackedPackedInts_FormatEnum_PACKED_SINGLE_BLOCK = new_OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum_initWithInt_withNSString_withInt_(1, @"PACKED_SINGLE_BLOCK", 1);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilPackedPackedInts_FormatEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "byIdWithInt:", "byId", "Lorg.apache.lucene.util.packed.PackedInts$Format;", 0x9, NULL, NULL },
    { "getId", NULL, "I", 0x1, NULL, NULL },
    { "byteCountWithInt:withInt:withInt:", "byteCount", "J", 0x1, NULL, NULL },
    { "longCountWithInt:withInt:withInt:", "longCount", "I", 0x1, NULL, NULL },
    { "isSupportedWithInt:", "isSupported", "Z", 0x1, NULL, NULL },
    { "overheadPerValueWithInt:", "overheadPerValue", "F", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PACKED", "PACKED", 0x4019, "Lorg.apache.lucene.util.packed.PackedInts$Format;", &OrgApacheLuceneUtilPackedPackedInts_FormatEnum_PACKED, NULL, .constantValue.asLong = 0 },
    { "PACKED_SINGLE_BLOCK", "PACKED_SINGLE_BLOCK", 0x4019, "Lorg.apache.lucene.util.packed.PackedInts$Format;", &OrgApacheLuceneUtilPackedPackedInts_FormatEnum_PACKED_SINGLE_BLOCK, NULL, .constantValue.asLong = 0 },
    { "id__", "id", 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Lorg.apache.lucene.util.packed.PackedInts$Format;"};
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_FormatEnum = { 2, "Format", "org.apache.lucene.util.packed", "PackedInts", 0x4009, 6, methods, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/apache/lucene/util/packed/PackedInts$Format;>;" };
  return &_OrgApacheLuceneUtilPackedPackedInts_FormatEnum;
}

@end

OrgApacheLuceneUtilPackedPackedInts_FormatEnum *OrgApacheLuceneUtilPackedPackedInts_FormatEnum_byIdWithInt_(jint id_) {
  OrgApacheLuceneUtilPackedPackedInts_FormatEnum_initialize();
  {
    IOSObjectArray *a__ = OrgApacheLuceneUtilPackedPackedInts_FormatEnum_values();
    OrgApacheLuceneUtilPackedPackedInts_FormatEnum * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneUtilPackedPackedInts_FormatEnum * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format = *b__++;
      if ([((OrgApacheLuceneUtilPackedPackedInts_FormatEnum *) nil_chk(format)) getId] == id_) {
        return format;
      }
    }
  }
  @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Unknown format id: ", id_)) autorelease];
}

void OrgApacheLuceneUtilPackedPackedInts_FormatEnum_initWithInt_withNSString_withInt_(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *self, jint id_, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->id__ = id_;
}

OrgApacheLuceneUtilPackedPackedInts_FormatEnum *new_OrgApacheLuceneUtilPackedPackedInts_FormatEnum_initWithInt_withNSString_withInt_(jint id_, NSString *__name, jint __ordinal) {
  OrgApacheLuceneUtilPackedPackedInts_FormatEnum *self = [OrgApacheLuceneUtilPackedPackedInts_FormatEnum alloc];
  OrgApacheLuceneUtilPackedPackedInts_FormatEnum_initWithInt_withNSString_withInt_(self, id_, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_FormatEnum)

@implementation OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum

- (jlong)byteCountWithInt:(jint)packedIntsVersion
                  withInt:(jint)valueCount
                  withInt:(jint)bitsPerValue {
  if (packedIntsVersion < OrgApacheLuceneUtilPackedPackedInts_VERSION_BYTE_ALIGNED) {
    return 8LL * JreFpToLong(JavaLangMath_ceilWithDouble_((jdouble) valueCount * bitsPerValue / 64));
  }
  else {
    return JreFpToLong(JavaLangMath_ceilWithDouble_((jdouble) valueCount * bitsPerValue / 8));
  }
}

- (instancetype)initWithInt:(jint)arg$0
               withNSString:(NSString *)__name
                    withInt:(jint)__ordinal {
  OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum_initWithInt_withNSString_withInt_(self, arg$0, __name, __ordinal);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "byteCountWithInt:withInt:withInt:", "byteCount", "J", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum = { 2, "", "org.apache.lucene.util.packed", "PackedInts$Format", 0xc018, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum_initWithInt_withNSString_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum *self, jint arg$0, NSString *__name, jint __ordinal) {
  OrgApacheLuceneUtilPackedPackedInts_FormatEnum_initWithInt_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum *new_OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum_initWithInt_withNSString_withInt_(jint arg$0, NSString *__name, jint __ordinal) {
  OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum *self = [OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum alloc];
  OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum_initWithInt_withNSString_withInt_(self, arg$0, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_Format_$1Enum)

@implementation OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum

- (jint)longCountWithInt:(jint)packedIntsVersion
                 withInt:(jint)valueCount
                 withInt:(jint)bitsPerValue {
  jint valuesPerBlock = 64 / bitsPerValue;
  return JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) valueCount / valuesPerBlock));
}

- (jboolean)isSupportedWithInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedPacked64SingleBlock_isSupportedWithInt_(bitsPerValue);
}

- (jfloat)overheadPerValueWithInt:(jint)bitsPerValue {
  JreAssert(([self isSupportedWithInt:bitsPerValue]), (@"org/apache/lucene/util/packed/PackedInts.java:130 condition failed: assert isSupported(bitsPerValue);"));
  jint valuesPerBlock = 64 / bitsPerValue;
  jint overhead = 64 % bitsPerValue;
  return (jfloat) overhead / valuesPerBlock;
}

- (instancetype)initWithInt:(jint)arg$0
               withNSString:(NSString *)__name
                    withInt:(jint)__ordinal {
  OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum_initWithInt_withNSString_withInt_(self, arg$0, __name, __ordinal);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "longCountWithInt:withInt:withInt:", "longCount", "I", 0x1, NULL, NULL },
    { "isSupportedWithInt:", "isSupported", "Z", 0x1, NULL, NULL },
    { "overheadPerValueWithInt:", "overheadPerValue", "F", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum = { 2, "", "org.apache.lucene.util.packed", "PackedInts$Format", 0xc018, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum_initWithInt_withNSString_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum *self, jint arg$0, NSString *__name, jint __ordinal) {
  OrgApacheLuceneUtilPackedPackedInts_FormatEnum_initWithInt_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum *new_OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum_initWithInt_withNSString_withInt_(jint arg$0, NSString *__name, jint __ordinal) {
  OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum *self = [OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum alloc];
  OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum_initWithInt_withNSString_withInt_(self, arg$0, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_Format_$2Enum)

@implementation OrgApacheLuceneUtilPackedPackedInts_FormatAndBits

- (instancetype)initWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum:(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *)format
                                                               withInt:(jint)bitsPerValue {
  OrgApacheLuceneUtilPackedPackedInts_FormatAndBits_initWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_(self, format, bitsPerValue);
  return self;
}

- (NSString *)description {
  return JreStrcat("$@$IC", @"FormatAndBits(format=", format_, @" bitsPerValue=", bitsPerValue_, ')');
}

- (void)dealloc {
  RELEASE_(format_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum:withInt:", "FormatAndBits", NULL, 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "format_", NULL, 0x11, "Lorg.apache.lucene.util.packed.PackedInts$Format;", NULL, NULL, .constantValue.asLong = 0 },
    { "bitsPerValue_", NULL, 0x11, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_FormatAndBits = { 2, "FormatAndBits", "org.apache.lucene.util.packed", "PackedInts", 0x9, 2, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts_FormatAndBits;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_FormatAndBits_initWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_(OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *self, OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format, jint bitsPerValue) {
  NSObject_init(self);
  JreStrongAssign(&self->format_, format);
  self->bitsPerValue_ = bitsPerValue;
}

OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *new_OrgApacheLuceneUtilPackedPackedInts_FormatAndBits_initWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_(OrgApacheLuceneUtilPackedPackedInts_FormatEnum *format, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *self = [OrgApacheLuceneUtilPackedPackedInts_FormatAndBits alloc];
  OrgApacheLuceneUtilPackedPackedInts_FormatAndBits_initWithOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_(self, format, bitsPerValue);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_FormatAndBits)

@implementation OrgApacheLuceneUtilPackedPackedInts_Decoder

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "longBlockCount", NULL, "I", 0x401, NULL, NULL },
    { "longValueCount", NULL, "I", 0x401, NULL, NULL },
    { "byteBlockCount", NULL, "I", 0x401, NULL, NULL },
    { "byteValueCount", NULL, "I", 0x401, NULL, NULL },
    { "decodeWithLongArray:withInt:withLongArray:withInt:withInt:", "decode", "V", 0x401, NULL, NULL },
    { "decodeWithByteArray:withInt:withLongArray:withInt:withInt:", "decode", "V", 0x401, NULL, NULL },
    { "decodeWithByteArray:withInt:withIntArray:withInt:withInt:", "decode", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Decoder = { 2, "Decoder", "org.apache.lucene.util.packed", "PackedInts", 0x609, 7, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts_Decoder;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_Decoder)

@implementation OrgApacheLuceneUtilPackedPackedInts_Encoder

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "longValueCount", NULL, "I", 0x401, NULL, NULL },
    { "byteBlockCount", NULL, "I", 0x401, NULL, NULL },
    { "byteValueCount", NULL, "I", 0x401, NULL, NULL },
    { "encodeWithLongArray:withInt:withLongArray:withInt:withInt:", "encode", "V", 0x401, NULL, NULL },
    { "encodeWithLongArray:withInt:withByteArray:withInt:withInt:", "encode", "V", 0x401, NULL, NULL },
    { "encodeWithIntArray:withInt:withByteArray:withInt:withInt:", "encode", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Encoder = { 2, "Encoder", "org.apache.lucene.util.packed", "PackedInts", 0x609, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts_Encoder;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_Encoder)

@implementation OrgApacheLuceneUtilPackedPackedInts_Reader

- (jint)getWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len {
  JreAssert((len > 0), (JreStrcat("$IC", @"len must be > 0 (got ", len, ')')));
  JreAssert((index >= 0 && index < [self size]), (@"org/apache/lucene/util/packed/PackedInts.java:468 condition failed: assert index >= 0 && index < size();"));
  JreAssert((off + len <= ((IOSLongArray *) nil_chk(arr))->size_), (@"org/apache/lucene/util/packed/PackedInts.java:469 condition failed: assert off + len <= arr.length;"));
  jint gets = JavaLangMath_minWithInt_withInt_([self size] - index, len);
  for (jint i = index, o = off, end = index + gets; i < end; ++i, ++o) {
    *IOSLongArray_GetRef(arr, o) = [self getWithInt:i];
  }
  return gets;
}

- (jint)size {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)init {
  OrgApacheLuceneUtilPackedPackedInts_Reader_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getWithInt:withLongArray:withInt:withInt:", "get", "I", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x401, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Reader = { 2, "Reader", "org.apache.lucene.util.packed", "PackedInts", 0x409, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts_Reader;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_Reader_init(OrgApacheLuceneUtilPackedPackedInts_Reader *self) {
  OrgApacheLuceneIndexNumericDocValues_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_Reader)

@implementation OrgApacheLuceneUtilPackedPackedInts_ReaderIterator

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "next", NULL, "J", 0x401, "Ljava.io.IOException;", NULL },
    { "nextWithInt:", "next", "Lorg.apache.lucene.util.LongsRef;", 0x401, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_ReaderIterator = { 2, "ReaderIterator", "org.apache.lucene.util.packed", "PackedInts", 0x609, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts_ReaderIterator;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_ReaderIterator)

@implementation OrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl

- (instancetype)initWithInt:(jint)valueCount
                    withInt:(jint)bitsPerValue
withOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  OrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl_initWithInt_withInt_withOrgApacheLuceneStoreDataInput_(self, valueCount, bitsPerValue, inArg);
  return self;
}

- (jlong)next {
  OrgApacheLuceneUtilLongsRef *nextValues = [self nextWithInt:1];
  JreAssert((((OrgApacheLuceneUtilLongsRef *) nil_chk(nextValues))->length_ > 0), (@"org/apache/lucene/util/packed/PackedInts.java:521 condition failed: assert nextValues.length > 0;"));
  jlong result = IOSLongArray_Get(nil_chk(nextValues->longs_), nextValues->offset_);
  ++nextValues->offset_;
  --nextValues->length_;
  return result;
}

- (void)dealloc {
  RELEASE_(in_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withOrgApacheLuceneStoreDataInput:", "ReaderIteratorImpl", NULL, 0x4, NULL, NULL },
    { "next", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "in_", NULL, 0x14, "Lorg.apache.lucene.store.DataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "bitsPerValue_", NULL, 0x14, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "valueCount_", NULL, 0x14, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl = { 2, "ReaderIteratorImpl", "org.apache.lucene.util.packed", "PackedInts", 0x408, 2, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl_initWithInt_withInt_withOrgApacheLuceneStoreDataInput_(OrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl *self, jint valueCount, jint bitsPerValue, OrgApacheLuceneStoreDataInput *inArg) {
  NSObject_init(self);
  JreStrongAssign(&self->in_, inArg);
  self->bitsPerValue_ = bitsPerValue;
  self->valueCount_ = valueCount;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl)

@implementation OrgApacheLuceneUtilPackedPackedInts_Mutable

- (jint)getBitsPerValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setWithInt:(jint)index
          withLong:(jlong)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)setWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len {
  JreAssert((len > 0), (JreStrcat("$IC", @"len must be > 0 (got ", len, ')')));
  JreAssert((index >= 0 && index < [self size]), (@"org/apache/lucene/util/packed/PackedInts.java:568 condition failed: assert index >= 0 && index < size();"));
  len = JavaLangMath_minWithInt_withInt_(len, [self size] - index);
  JreAssert((off + len <= ((IOSLongArray *) nil_chk(arr))->size_), (@"org/apache/lucene/util/packed/PackedInts.java:570 condition failed: assert off + len <= arr.length;"));
  for (jint i = index, o = off, end = index + len; i < end; ++i, ++o) {
    [self setWithInt:i withLong:IOSLongArray_Get(arr, o)];
  }
  return len;
}

- (void)fillWithInt:(jint)fromIndex
            withInt:(jint)toIndex
           withLong:(jlong)val {
  JreAssert((val <= OrgApacheLuceneUtilPackedPackedInts_maxValueWithInt_([self getBitsPerValue])), (@"org/apache/lucene/util/packed/PackedInts.java:583 condition failed: assert val <= maxValue(getBitsPerValue());"));
  JreAssert((fromIndex <= toIndex), (@"org/apache/lucene/util/packed/PackedInts.java:584 condition failed: assert fromIndex <= toIndex;"));
  for (jint i = fromIndex; i < toIndex; ++i) {
    [self setWithInt:i withLong:val];
  }
}

- (void)clear {
  [self fillWithInt:0 withInt:[self size] withLong:0];
}

- (void)saveWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  OrgApacheLuceneUtilPackedPackedInts_Writer *writer = OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_FormatEnum_withInt_withInt_withInt_(outArg, [self getFormat], [self size], [self getBitsPerValue], OrgApacheLuceneUtilPackedPackedInts_DEFAULT_BUFFER_SIZE);
  [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) writeHeader];
  for (jint i = 0; i < [self size]; ++i) {
    [writer addWithLong:[self getWithInt:i]];
  }
  [writer finish];
}

- (OrgApacheLuceneUtilPackedPackedInts_FormatEnum *)getFormat {
  return JreLoadStatic(OrgApacheLuceneUtilPackedPackedInts_FormatEnum, PACKED);
}

- (instancetype)init {
  OrgApacheLuceneUtilPackedPackedInts_Mutable_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getBitsPerValue", NULL, "I", 0x401, NULL, NULL },
    { "setWithInt:withLong:", "set", "V", 0x401, NULL, NULL },
    { "setWithInt:withLongArray:withInt:withInt:", "set", "I", 0x1, NULL, NULL },
    { "fillWithInt:withInt:withLong:", "fill", "V", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "saveWithOrgApacheLuceneStoreDataOutput:", "save", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "getFormat", NULL, "Lorg.apache.lucene.util.packed.PackedInts$Format;", 0x0, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Mutable = { 2, "Mutable", "org.apache.lucene.util.packed", "PackedInts", 0x409, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts_Mutable;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_Mutable_init(OrgApacheLuceneUtilPackedPackedInts_Mutable *self) {
  OrgApacheLuceneUtilPackedPackedInts_Reader_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_Mutable)

@implementation OrgApacheLuceneUtilPackedPackedInts_ReaderImpl

- (instancetype)initWithInt:(jint)valueCount {
  OrgApacheLuceneUtilPackedPackedInts_ReaderImpl_initWithInt_(self, valueCount);
  return self;
}

- (jint)size {
  return valueCount_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "ReaderImpl", NULL, 0x4, NULL, NULL },
    { "size", NULL, "I", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "valueCount_", NULL, 0x14, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_ReaderImpl = { 2, "ReaderImpl", "org.apache.lucene.util.packed", "PackedInts", 0x408, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts_ReaderImpl;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_ReaderImpl_initWithInt_(OrgApacheLuceneUtilPackedPackedInts_ReaderImpl *self, jint valueCount) {
  OrgApacheLuceneUtilPackedPackedInts_Reader_init(self);
  self->valueCount_ = valueCount;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_ReaderImpl)

@implementation OrgApacheLuceneUtilPackedPackedInts_MutableImpl

- (instancetype)initWithInt:(jint)valueCount
                    withInt:(jint)bitsPerValue {
  OrgApacheLuceneUtilPackedPackedInts_MutableImpl_initWithInt_withInt_(self, valueCount, bitsPerValue);
  return self;
}

- (jint)getBitsPerValue {
  return bitsPerValue_;
}

- (jint)size {
  return valueCount_;
}

- (NSString *)description {
  return JreStrcat("$$I$IC", [[self getClass] getSimpleName], @"(valueCount=", valueCount_, @",bitsPerValue=", bitsPerValue_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "MutableImpl", NULL, 0x4, NULL, NULL },
    { "getBitsPerValue", NULL, "I", 0x11, NULL, NULL },
    { "size", NULL, "I", 0x11, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "valueCount_", NULL, 0x14, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "bitsPerValue_", NULL, 0x14, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_MutableImpl = { 2, "MutableImpl", "org.apache.lucene.util.packed", "PackedInts", 0x408, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts_MutableImpl;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_MutableImpl_initWithInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_MutableImpl *self, jint valueCount, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_Mutable_init(self);
  self->valueCount_ = valueCount;
  JreAssert((bitsPerValue > 0 && bitsPerValue <= 64), (JreStrcat("$I", @"bitsPerValue=", bitsPerValue)));
  self->bitsPerValue_ = bitsPerValue;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_MutableImpl)

@implementation OrgApacheLuceneUtilPackedPackedInts_NullReader

- (instancetype)initWithInt:(jint)valueCount {
  OrgApacheLuceneUtilPackedPackedInts_NullReader_initWithInt_(self, valueCount);
  return self;
}

- (jlong)getWithInt:(jint)index {
  return 0;
}

- (jint)getWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len {
  JreAssert((len > 0), (JreStrcat("$IC", @"len must be > 0 (got ", len, ')')));
  JreAssert((index >= 0 && index < valueCount_), (@"org/apache/lucene/util/packed/PackedInts.java:683 condition failed: assert index >= 0 && index < valueCount;"));
  len = JavaLangMath_minWithInt_withInt_(len, valueCount_ - index);
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(arr, off, off + len, 0);
  return len;
}

- (jint)size {
  return valueCount_;
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneUtilRamUsageEstimator_alignObjectSizeWithLong_(JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_HEADER_) + OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "NullReader", NULL, 0x1, NULL, NULL },
    { "getWithInt:", "get", "J", 0x1, NULL, NULL },
    { "getWithInt:withLongArray:withInt:withInt:", "get", "I", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "valueCount_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_NullReader = { 2, "NullReader", "org.apache.lucene.util.packed", "PackedInts", 0x19, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts_NullReader;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_NullReader_initWithInt_(OrgApacheLuceneUtilPackedPackedInts_NullReader *self, jint valueCount) {
  OrgApacheLuceneUtilPackedPackedInts_Reader_init(self);
  self->valueCount_ = valueCount;
}

OrgApacheLuceneUtilPackedPackedInts_NullReader *new_OrgApacheLuceneUtilPackedPackedInts_NullReader_initWithInt_(jint valueCount) {
  OrgApacheLuceneUtilPackedPackedInts_NullReader *self = [OrgApacheLuceneUtilPackedPackedInts_NullReader alloc];
  OrgApacheLuceneUtilPackedPackedInts_NullReader_initWithInt_(self, valueCount);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_NullReader)

@implementation OrgApacheLuceneUtilPackedPackedInts_Writer

- (instancetype)initWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                               withInt:(jint)valueCount
                                               withInt:(jint)bitsPerValue {
  OrgApacheLuceneUtilPackedPackedInts_Writer_initWithOrgApacheLuceneStoreDataOutput_withInt_withInt_(self, outArg, valueCount, bitsPerValue);
  return self;
}

- (void)writeHeader {
  JreAssert((valueCount_ != -1), (@"org/apache/lucene/util/packed/PackedInts.java:717 condition failed: assert valueCount != -1;"));
  OrgApacheLuceneCodecsCodecUtil_writeHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_(out_, OrgApacheLuceneUtilPackedPackedInts_CODEC_NAME_, OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT);
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(out_)) writeVIntWithInt:bitsPerValue_];
  [out_ writeVIntWithInt:valueCount_];
  [out_ writeVIntWithInt:[((OrgApacheLuceneUtilPackedPackedInts_FormatEnum *) nil_chk([self getFormat])) getId]];
}

- (OrgApacheLuceneUtilPackedPackedInts_FormatEnum *)getFormat {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addWithLong:(jlong)v {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)bitsPerValue {
  return bitsPerValue_;
}

- (void)finish {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)ord {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(out_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheLuceneStoreDataOutput:withInt:withInt:", "Writer", NULL, 0x4, NULL, NULL },
    { "writeHeader", NULL, "V", 0x0, "Ljava.io.IOException;", NULL },
    { "getFormat", NULL, "Lorg.apache.lucene.util.packed.PackedInts$Format;", 0x404, NULL, NULL },
    { "addWithLong:", "add", "V", 0x401, "Ljava.io.IOException;", NULL },
    { "bitsPerValue", NULL, "I", 0x11, NULL, NULL },
    { "finish", NULL, "V", 0x401, "Ljava.io.IOException;", NULL },
    { "ord", NULL, "I", 0x401, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "out_", NULL, 0x14, "Lorg.apache.lucene.store.DataOutput;", NULL, NULL, .constantValue.asLong = 0 },
    { "valueCount_", NULL, 0x14, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "bitsPerValue_", NULL, 0x14, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Writer = { 2, "Writer", "org.apache.lucene.util.packed", "PackedInts", 0x409, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts_Writer;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_Writer_initWithOrgApacheLuceneStoreDataOutput_withInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_Writer *self, OrgApacheLuceneStoreDataOutput *outArg, jint valueCount, jint bitsPerValue) {
  NSObject_init(self);
  JreAssert((bitsPerValue <= 64), (@"org/apache/lucene/util/packed/PackedInts.java:709 condition failed: assert bitsPerValue <= 64;"));
  JreAssert((valueCount >= 0 || valueCount == -1), (@"org/apache/lucene/util/packed/PackedInts.java:710 condition failed: assert valueCount >= 0 || valueCount == -1;"));
  JreStrongAssign(&self->out_, outArg);
  self->valueCount_ = valueCount;
  self->bitsPerValue_ = bitsPerValue;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_Writer)

@implementation OrgApacheLuceneUtilPackedPackedInts_$1

- (jlong)getWithInt:(jint)index {
  jlong result = [super getWithInt:index];
  if (index == valueCount_ - 1) {
    @try {
      [((OrgApacheLuceneStoreIndexInput *) nil_chk(in_)) seekWithLong:val$endPointer_];
    }
    @catch (JavaIoIOException *e) {
      @throw [new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"failed", e) autorelease];
    }
  }
  return result;
}

- (instancetype)initWithLong:(jlong)capture$0
                     withInt:(jint)arg$0
                     withInt:(jint)arg$1
withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)arg$2 {
  OrgApacheLuceneUtilPackedPackedInts_$1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(self, capture$0, arg$0, arg$1, arg$2);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getWithInt:", "get", "J", 0x1, NULL, NULL },
    { "initWithLong:withInt:withInt:withOrgApacheLuceneStoreIndexInput:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$endPointer_", NULL, 0x1012, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheLuceneUtilPackedPackedInts", "getDirectReaderNoHeaderWithOrgApacheLuceneStoreIndexInput:withOrgApacheLuceneUtilPackedPackedInts_FormatEnum:withInt:withInt:withInt:" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_$1 = { 2, "", "org.apache.lucene.util.packed", "PackedInts", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgApacheLuceneUtilPackedPackedInts_$1;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_$1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneUtilPackedPackedInts_$1 *self, jlong capture$0, jint arg$0, jint arg$1, OrgApacheLuceneStoreIndexInput *arg$2) {
  self->val$endPointer_ = capture$0;
  OrgApacheLuceneUtilPackedDirectPackedReader_initWithInt_withInt_withOrgApacheLuceneStoreIndexInput_(self, arg$0, arg$1, arg$2);
}

OrgApacheLuceneUtilPackedPackedInts_$1 *new_OrgApacheLuceneUtilPackedPackedInts_$1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(jlong capture$0, jint arg$0, jint arg$1, OrgApacheLuceneStoreIndexInput *arg$2) {
  OrgApacheLuceneUtilPackedPackedInts_$1 *self = [OrgApacheLuceneUtilPackedPackedInts_$1 alloc];
  OrgApacheLuceneUtilPackedPackedInts_$1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(self, capture$0, arg$0, arg$1, arg$2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_$1)
