//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/CharsRef.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/CharsRef.h"

static id<JavaUtilComparator> OrgApacheLuceneUtilCharsRef_utf16SortedAsUTF8SortOrder_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneUtilCharsRef, utf16SortedAsUTF8SortOrder_, id<JavaUtilComparator>)

@interface OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(OrgApacheLuceneUtilCharsRef *)a
               withId:(OrgApacheLuceneUtilCharsRef *)b;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator)

__attribute__((unused)) static void OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator_init(OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator *self);

__attribute__((unused)) static OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator *new_OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilCharsRef)

IOSCharArray *OrgApacheLuceneUtilCharsRef_EMPTY_CHARS_;

@implementation OrgApacheLuceneUtilCharsRef

- (instancetype)init {
  OrgApacheLuceneUtilCharsRef_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)capacity {
  OrgApacheLuceneUtilCharsRef_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)chars
                          withInt:(jint)offset
                          withInt:(jint)length {
  OrgApacheLuceneUtilCharsRef_initWithCharArray_withInt_withInt_(self, chars, offset, length);
  return self;
}

- (instancetype)initWithNSString:(NSString *)string {
  OrgApacheLuceneUtilCharsRef_initWithNSString_(self, string);
  return self;
}

- (OrgApacheLuceneUtilCharsRef *)clone {
  return [new_OrgApacheLuceneUtilCharsRef_initWithCharArray_withInt_withInt_(chars_, offset_, length_) autorelease];
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 0;
  jint end = offset_ + length_;
  for (jint i = offset_; i < end; i++) {
    result = prime * result + IOSCharArray_Get(nil_chk(chars_), i);
  }
  return result;
}

- (jboolean)isEqual:(id)other {
  if (other == nil) {
    return NO;
  }
  if ([other isKindOfClass:[OrgApacheLuceneUtilCharsRef class]]) {
    return [self charsEqualsWithOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *) check_class_cast(other, [OrgApacheLuceneUtilCharsRef class])];
  }
  return NO;
}

- (jboolean)charsEqualsWithOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *)other {
  if (length_ == ((OrgApacheLuceneUtilCharsRef *) nil_chk(other))->length_) {
    jint otherUpto = other->offset_;
    IOSCharArray *otherChars = other->chars_;
    jint end = offset_ + length_;
    for (jint upto = offset_; upto < end; upto++, otherUpto++) {
      if (IOSCharArray_Get(nil_chk(chars_), upto) != IOSCharArray_Get(nil_chk(otherChars), otherUpto)) {
        return NO;
      }
    }
    return YES;
  }
  else {
    return NO;
  }
}

- (jint)compareToWithId:(OrgApacheLuceneUtilCharsRef *)other {
  check_class_cast(other, [OrgApacheLuceneUtilCharsRef class]);
  if (self == other) return 0;
  IOSCharArray *aChars = self->chars_;
  jint aUpto = self->offset_;
  IOSCharArray *bChars = ((OrgApacheLuceneUtilCharsRef *) nil_chk(other))->chars_;
  jint bUpto = other->offset_;
  jint aStop = aUpto + JavaLangMath_minWithInt_withInt_(self->length_, other->length_);
  while (aUpto < aStop) {
    jint aInt = IOSCharArray_Get(nil_chk(aChars), aUpto++);
    jint bInt = IOSCharArray_Get(nil_chk(bChars), bUpto++);
    if (aInt > bInt) {
      return 1;
    }
    else if (aInt < bInt) {
      return -1;
    }
  }
  return self->length_ - other->length_;
}

- (NSString *)description {
  return [NSString stringWithCharacters:chars_ offset:offset_ length:length_];
}

- (jint)length {
  return length_;
}

- (jchar)charAtWithInt:(jint)index {
  if (index < 0 || index >= length_) {
    @throw [new_JavaLangIndexOutOfBoundsException_init() autorelease];
  }
  return IOSCharArray_Get(nil_chk(chars_), offset_ + index);
}

- (id<JavaLangCharSequence>)subSequenceFrom:(jint)start
                                         to:(jint)end {
  if (start < 0 || end > length_ || start > end) {
    @throw [new_JavaLangIndexOutOfBoundsException_init() autorelease];
  }
  return [new_OrgApacheLuceneUtilCharsRef_initWithCharArray_withInt_withInt_(chars_, offset_ + start, end - start) autorelease];
}

+ (id<JavaUtilComparator>)getUTF16SortedAsUTF8Comparator {
  return OrgApacheLuceneUtilCharsRef_getUTF16SortedAsUTF8Comparator();
}

+ (OrgApacheLuceneUtilCharsRef *)deepCopyOfWithOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *)other {
  return OrgApacheLuceneUtilCharsRef_deepCopyOfWithOrgApacheLuceneUtilCharsRef_(other);
}

- (jboolean)isValid {
  if (chars_ == nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"chars is null") autorelease];
  }
  if (length_ < 0) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"length is negative: ", length_)) autorelease];
  }
  if (length_ > ((IOSCharArray *) nil_chk(chars_))->size_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"length is out of bounds: ", length_, @",chars.length=", chars_->size_)) autorelease];
  }
  if (offset_ < 0) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"offset is negative: ", offset_)) autorelease];
  }
  if (offset_ > chars_->size_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"offset out of bounds: ", offset_, @",chars.length=", chars_->size_)) autorelease];
  }
  if (offset_ + length_ < 0) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"offset+length is negative: offset=", offset_, @",length=", length_)) autorelease];
  }
  if (offset_ + length_ > chars_->size_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I$I", @"offset+length out of bounds: offset=", offset_, @",length=", length_, @",chars.length=", chars_->size_)) autorelease];
  }
  return YES;
}

- (void)dealloc {
  RELEASE_(chars_);
  [super dealloc];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilCharsRef class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilCharsRef_EMPTY_CHARS_, [IOSCharArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilCharsRef_utf16SortedAsUTF8SortOrder_, new_OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilCharsRef)
  }
}

+ (IOSObjectArray *)__annotations_getUTF16SortedAsUTF8Comparator {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_utf16SortedAsUTF8SortOrder_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CharsRef", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "CharsRef", NULL, 0x1, NULL, NULL },
    { "initWithCharArray:withInt:withInt:", "CharsRef", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "CharsRef", NULL, 0x1, NULL, NULL },
    { "clone", NULL, "Lorg.apache.lucene.util.CharsRef;", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "charsEqualsWithOrgApacheLuceneUtilCharsRef:", "charsEquals", "Z", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "length", NULL, "I", 0x1, NULL, NULL },
    { "charAtWithInt:", "charAt", "C", 0x1, NULL, NULL },
    { "subSequenceFrom:to:", "subSequence", "Ljava.lang.CharSequence;", 0x1, NULL, NULL },
    { "getUTF16SortedAsUTF8Comparator", NULL, "Ljava.util.Comparator;", 0x9, NULL, NULL },
    { "deepCopyOfWithOrgApacheLuceneUtilCharsRef:", "deepCopyOf", "Lorg.apache.lucene.util.CharsRef;", 0x9, NULL, NULL },
    { "isValid", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_CHARS_", NULL, 0x19, "[C", &OrgApacheLuceneUtilCharsRef_EMPTY_CHARS_, NULL, .constantValue.asLong = 0 },
    { "chars_", NULL, 0x1, "[C", NULL, NULL, .constantValue.asLong = 0 },
    { "offset_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "length_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "utf16SortedAsUTF8SortOrder_", NULL, 0x1a, "Ljava.util.Comparator;", &OrgApacheLuceneUtilCharsRef_utf16SortedAsUTF8SortOrder_, "Ljava/util/Comparator<Lorg/apache/lucene/util/CharsRef;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.util.CharsRef$UTF16SortedAsUTF8Comparator;"};
  static const J2ObjcClassInfo _OrgApacheLuceneUtilCharsRef = { 2, "CharsRef", "org.apache.lucene.util", NULL, 0x11, 16, methods, 5, fields, 0, NULL, 1, inner_classes, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/util/CharsRef;>;Ljava/lang/CharSequence;Ljava/lang/Cloneable;" };
  return &_OrgApacheLuceneUtilCharsRef;
}

@end

void OrgApacheLuceneUtilCharsRef_init(OrgApacheLuceneUtilCharsRef *self) {
  OrgApacheLuceneUtilCharsRef_initWithCharArray_withInt_withInt_(self, OrgApacheLuceneUtilCharsRef_EMPTY_CHARS_, 0, 0);
}

OrgApacheLuceneUtilCharsRef *new_OrgApacheLuceneUtilCharsRef_init() {
  OrgApacheLuceneUtilCharsRef *self = [OrgApacheLuceneUtilCharsRef alloc];
  OrgApacheLuceneUtilCharsRef_init(self);
  return self;
}

void OrgApacheLuceneUtilCharsRef_initWithInt_(OrgApacheLuceneUtilCharsRef *self, jint capacity) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->chars_, [IOSCharArray newArrayWithLength:capacity]);
}

OrgApacheLuceneUtilCharsRef *new_OrgApacheLuceneUtilCharsRef_initWithInt_(jint capacity) {
  OrgApacheLuceneUtilCharsRef *self = [OrgApacheLuceneUtilCharsRef alloc];
  OrgApacheLuceneUtilCharsRef_initWithInt_(self, capacity);
  return self;
}

void OrgApacheLuceneUtilCharsRef_initWithCharArray_withInt_withInt_(OrgApacheLuceneUtilCharsRef *self, IOSCharArray *chars, jint offset, jint length) {
  NSObject_init(self);
  JreStrongAssign(&self->chars_, chars);
  self->offset_ = offset;
  self->length_ = length;
  JreAssert(([self isValid]), (@"org/apache/lucene/util/CharsRef.java:62 condition failed: assert isValid();"));
}

OrgApacheLuceneUtilCharsRef *new_OrgApacheLuceneUtilCharsRef_initWithCharArray_withInt_withInt_(IOSCharArray *chars, jint offset, jint length) {
  OrgApacheLuceneUtilCharsRef *self = [OrgApacheLuceneUtilCharsRef alloc];
  OrgApacheLuceneUtilCharsRef_initWithCharArray_withInt_withInt_(self, chars, offset, length);
  return self;
}

void OrgApacheLuceneUtilCharsRef_initWithNSString_(OrgApacheLuceneUtilCharsRef *self, NSString *string) {
  NSObject_init(self);
  JreStrongAssign(&self->chars_, [((NSString *) nil_chk(string)) toCharArray]);
  self->offset_ = 0;
  self->length_ = ((IOSCharArray *) nil_chk(self->chars_))->size_;
}

OrgApacheLuceneUtilCharsRef *new_OrgApacheLuceneUtilCharsRef_initWithNSString_(NSString *string) {
  OrgApacheLuceneUtilCharsRef *self = [OrgApacheLuceneUtilCharsRef alloc];
  OrgApacheLuceneUtilCharsRef_initWithNSString_(self, string);
  return self;
}

id<JavaUtilComparator> OrgApacheLuceneUtilCharsRef_getUTF16SortedAsUTF8Comparator() {
  OrgApacheLuceneUtilCharsRef_initialize();
  return OrgApacheLuceneUtilCharsRef_utf16SortedAsUTF8SortOrder_;
}

OrgApacheLuceneUtilCharsRef *OrgApacheLuceneUtilCharsRef_deepCopyOfWithOrgApacheLuceneUtilCharsRef_(OrgApacheLuceneUtilCharsRef *other) {
  OrgApacheLuceneUtilCharsRef_initialize();
  return [new_OrgApacheLuceneUtilCharsRef_initWithCharArray_withInt_withInt_(JavaUtilArrays_copyOfRangeWithCharArray_withInt_withInt_(((OrgApacheLuceneUtilCharsRef *) nil_chk(other))->chars_, other->offset_, other->offset_ + other->length_), 0, other->length_) autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilCharsRef)

@implementation OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator

- (instancetype)init {
  OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator_init(self);
  return self;
}

- (jint)compareWithId:(OrgApacheLuceneUtilCharsRef *)a
               withId:(OrgApacheLuceneUtilCharsRef *)b {
  if (a == b) return 0;
  IOSCharArray *aChars = ((OrgApacheLuceneUtilCharsRef *) nil_chk(a))->chars_;
  jint aUpto = a->offset_;
  IOSCharArray *bChars = ((OrgApacheLuceneUtilCharsRef *) nil_chk(b))->chars_;
  jint bUpto = b->offset_;
  jint aStop = aUpto + JavaLangMath_minWithInt_withInt_(a->length_, b->length_);
  while (aUpto < aStop) {
    jchar aChar = IOSCharArray_Get(nil_chk(aChars), aUpto++);
    jchar bChar = IOSCharArray_Get(nil_chk(bChars), bUpto++);
    if (aChar != bChar) {
      if (aChar >= (jint) 0xd800 && bChar >= (jint) 0xd800) {
        if (aChar >= (jint) 0xe000) {
          aChar -= (jint) 0x800;
        }
        else {
          aChar += (jint) 0x2000;
        }
        if (bChar >= (jint) 0xe000) {
          bChar -= (jint) 0x800;
        }
        else {
          bChar += (jint) 0x2000;
        }
      }
      return (jint) aChar - (jint) bChar;
    }
  }
  return a->length_ - b->length_;
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "UTF16SortedAsUTF8Comparator", NULL, 0x2, NULL, NULL },
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator = { 2, "UTF16SortedAsUTF8Comparator", "org.apache.lucene.util", "CharsRef", 0xa, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/lucene/util/CharsRef;>;" };
  return &_OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator;
}

@end

void OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator_init(OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator *self) {
  NSObject_init(self);
}

OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator *new_OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator_init() {
  OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator *self = [OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator alloc];
  OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilCharsRef_UTF16SortedAsUTF8Comparator)
