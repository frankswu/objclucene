//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/FixedBitSet.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BitSet.h"
#include "org/apache/lucene/util/BitSetIterator.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

@interface OrgApacheLuceneUtilFixedBitSet () {
 @public
  IOSLongArray *bits_;
  jint numBits_;
  jint numWords_;
}

- (jboolean)verifyGhostBitsClear;

- (void)or__WithLongArray:(IOSLongArray *)otherArr
                  withInt:(jint)otherNumWords;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFixedBitSet, bits_, IOSLongArray *)

static jlong OrgApacheLuceneUtilFixedBitSet_BASE_RAM_BYTES_USED_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneUtilFixedBitSet, BASE_RAM_BYTES_USED_, jlong)

__attribute__((unused)) static jboolean OrgApacheLuceneUtilFixedBitSet_verifyGhostBitsClear(OrgApacheLuceneUtilFixedBitSet *self);

__attribute__((unused)) static void OrgApacheLuceneUtilFixedBitSet_or__WithLongArray_withInt_(OrgApacheLuceneUtilFixedBitSet *self, IOSLongArray *otherArr, jint otherNumWords);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilFixedBitSet)

@implementation OrgApacheLuceneUtilFixedBitSet

+ (OrgApacheLuceneUtilFixedBitSet *)ensureCapacityWithOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)bits
                                                                             withInt:(jint)numBits {
  return OrgApacheLuceneUtilFixedBitSet_ensureCapacityWithOrgApacheLuceneUtilFixedBitSet_withInt_(bits, numBits);
}

+ (jint)bits2wordsWithInt:(jint)numBits {
  return OrgApacheLuceneUtilFixedBitSet_bits2wordsWithInt_(numBits);
}

- (instancetype)initWithInt:(jint)numBits {
  OrgApacheLuceneUtilFixedBitSet_initWithInt_(self, numBits);
  return self;
}

- (instancetype)initWithLongArray:(IOSLongArray *)storedBits
                          withInt:(jint)numBits {
  OrgApacheLuceneUtilFixedBitSet_initWithLongArray_withInt_(self, storedBits, numBits);
  return self;
}

- (jboolean)verifyGhostBitsClear {
  return OrgApacheLuceneUtilFixedBitSet_verifyGhostBitsClear(self);
}

- (jint)length {
  return numBits_;
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneUtilFixedBitSet_BASE_RAM_BYTES_USED_ + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithLongArray_(bits_);
}

- (IOSLongArray *)getBits {
  return bits_;
}

- (jint)cardinality {
  return (jint) OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(bits_, 0, numWords_);
}

- (jboolean)getWithInt:(jint)index {
  JreAssert((index >= 0 && index < numBits_), (JreStrcat("$I$I", @"index=", index, @", numBits=", numBits_)));
  jint i = JreRShift32(index, 6);
  jlong bitmask = JreLShift64(1LL, index);
  return (IOSLongArray_Get(nil_chk(bits_), i) & bitmask) != 0;
}

- (void)setWithInt:(jint)index {
  JreAssert((index >= 0 && index < numBits_), (JreStrcat("$I$I", @"index=", index, @", numBits=", numBits_)));
  jint wordNum = JreRShift32(index, 6);
  jlong bitmask = JreLShift64(1LL, index);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) |= bitmask;
}

- (void)clearWithInt:(jint)index {
  JreAssert((index >= 0 && index < numBits_), (JreStrcat("$I$I", @"index=", index, @", numBits=", numBits_)));
  jint wordNum = JreRShift32(index, 6);
  jlong bitmask = JreLShift64(1LL, index);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) &= ~bitmask;
}

- (jint)nextSetBitWithInt:(jint)index {
  JreAssert((index >= 0 && index < numBits_), (JreStrcat("$I$I", @"index=", index, @", numBits=", numBits_)));
  jint i = JreRShift32(index, 6);
  jlong word = JreRShift64(IOSLongArray_Get(nil_chk(bits_), i), index);
  if (word != 0) {
    return index + JavaLangLong_numberOfTrailingZerosWithLong_(word);
  }
  while (++i < numWords_) {
    word = IOSLongArray_Get(bits_, i);
    if (word != 0) {
      return (JreLShift32(i, 6)) + JavaLangLong_numberOfTrailingZerosWithLong_(word);
    }
  }
  return OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
}

- (jint)prevSetBitWithInt:(jint)index {
  JreAssert((index >= 0 && index < numBits_), (JreStrcat("$I$I", @"index=", index, @" numBits=", numBits_)));
  jint i = JreRShift32(index, 6);
  jint subIndex = index & (jint) 0x3f;
  jlong word = (JreLShift64(IOSLongArray_Get(nil_chk(bits_), i), (63 - subIndex)));
  if (word != 0) {
    return (JreLShift32(i, 6)) + subIndex - JavaLangLong_numberOfLeadingZerosWithLong_(word);
  }
  while (--i >= 0) {
    word = IOSLongArray_Get(bits_, i);
    if (word != 0) {
      return (JreLShift32(i, 6)) + 63 - JavaLangLong_numberOfLeadingZerosWithLong_(word);
    }
  }
  return -1;
}

- (void)or__WithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)iter {
  if (OrgApacheLuceneUtilBitSetIterator_getFixedBitSetOrNullWithOrgApacheLuceneSearchDocIdSetIterator_(iter) != nil) {
    [self assertUnpositionedWithOrgApacheLuceneSearchDocIdSetIterator:iter];
    OrgApacheLuceneUtilFixedBitSet *bits = OrgApacheLuceneUtilBitSetIterator_getFixedBitSetOrNullWithOrgApacheLuceneSearchDocIdSetIterator_(iter);
    [self or__WithOrgApacheLuceneUtilFixedBitSet:bits];
  }
  else {
    [super or__WithOrgApacheLuceneSearchDocIdSetIterator:iter];
  }
}

- (void)or__WithOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)other {
  OrgApacheLuceneUtilFixedBitSet_or__WithLongArray_withInt_(self, ((OrgApacheLuceneUtilFixedBitSet *) nil_chk(other))->bits_, other->numWords_);
}

- (void)or__WithLongArray:(IOSLongArray *)otherArr
                  withInt:(jint)otherNumWords {
  OrgApacheLuceneUtilFixedBitSet_or__WithLongArray_withInt_(self, otherArr, otherNumWords);
}

- (jboolean)intersectsWithOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)other {
  jint pos = JavaLangMath_minWithInt_withInt_(numWords_, ((OrgApacheLuceneUtilFixedBitSet *) nil_chk(other))->numWords_);
  while (--pos >= 0) {
    if ((IOSLongArray_Get(nil_chk(bits_), pos) & IOSLongArray_Get(other->bits_, pos)) != 0) return YES;
  }
  return NO;
}

- (void)setWithInt:(jint)startIndex
           withInt:(jint)endIndex {
  JreAssert((startIndex >= 0 && startIndex < numBits_), (JreStrcat("$I$I", @"startIndex=", startIndex, @", numBits=", numBits_)));
  JreAssert((endIndex >= 0 && endIndex <= numBits_), (JreStrcat("$I$I", @"endIndex=", endIndex, @", numBits=", numBits_)));
  if (endIndex <= startIndex) {
    return;
  }
  jint startWord = JreRShift32(startIndex, 6);
  jint endWord = JreRShift32((endIndex - 1), 6);
  jlong startmask = JreLShift64(-1LL, startIndex);
  jlong endmask = JreURShift64(-1LL, -endIndex);
  if (startWord == endWord) {
    *IOSLongArray_GetRef(nil_chk(bits_), startWord) |= (startmask & endmask);
    return;
  }
  *IOSLongArray_GetRef(nil_chk(bits_), startWord) |= startmask;
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(bits_, startWord + 1, endWord, -1LL);
  *IOSLongArray_GetRef(bits_, endWord) |= endmask;
}

- (void)clearWithInt:(jint)startIndex
             withInt:(jint)endIndex {
  JreAssert((startIndex >= 0 && startIndex < numBits_), (JreStrcat("$I$I", @"startIndex=", startIndex, @", numBits=", numBits_)));
  JreAssert((endIndex >= 0 && endIndex <= numBits_), (JreStrcat("$I$I", @"endIndex=", endIndex, @", numBits=", numBits_)));
  if (endIndex <= startIndex) {
    return;
  }
  jint startWord = JreRShift32(startIndex, 6);
  jint endWord = JreRShift32((endIndex - 1), 6);
  jlong startmask = JreLShift64(-1LL, startIndex);
  jlong endmask = JreURShift64(-1LL, -endIndex);
  startmask = ~startmask;
  endmask = ~endmask;
  if (startWord == endWord) {
    *IOSLongArray_GetRef(nil_chk(bits_), startWord) &= (startmask | endmask);
    return;
  }
  *IOSLongArray_GetRef(nil_chk(bits_), startWord) &= startmask;
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(bits_, startWord + 1, endWord, 0LL);
  *IOSLongArray_GetRef(bits_, endWord) &= endmask;
}

- (OrgApacheLuceneUtilFixedBitSet *)clone {
  IOSLongArray *bits = [IOSLongArray arrayWithLength:((IOSLongArray *) nil_chk(self->bits_))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->bits_, 0, bits, 0, numWords_);
  return [new_OrgApacheLuceneUtilFixedBitSet_initWithLongArray_withInt_(bits, numBits_) autorelease];
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return YES;
  }
  if (!([o isKindOfClass:[OrgApacheLuceneUtilFixedBitSet class]])) {
    return NO;
  }
  OrgApacheLuceneUtilFixedBitSet *other = (OrgApacheLuceneUtilFixedBitSet *) check_class_cast(o, [OrgApacheLuceneUtilFixedBitSet class]);
  if (numBits_ != ((OrgApacheLuceneUtilFixedBitSet *) nil_chk(other))->numBits_) {
    return NO;
  }
  return JavaUtilArrays_equalsWithLongArray_withLongArray_(bits_, other->bits_);
}

- (NSUInteger)hash {
  jlong h = 0;
  for (jint i = numWords_; --i >= 0; ) {
    h ^= IOSLongArray_Get(nil_chk(bits_), i);
    h = (JreLShift64(h, 1)) | (JreURShift64(h, 63));
  }
  return (jint) ((JreRShift64(h, 32)) ^ h) + (jint) 0x98761234;
}

- (void)dealloc {
  RELEASE_(bits_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilFixedBitSet class]) {
    OrgApacheLuceneUtilFixedBitSet_BASE_RAM_BYTES_USED_ = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneUtilFixedBitSet_class_());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilFixedBitSet)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "ensureCapacityWithOrgApacheLuceneUtilFixedBitSet:withInt:", "ensureCapacity", "Lorg.apache.lucene.util.FixedBitSet;", 0x9, NULL, NULL },
    { "bits2wordsWithInt:", "bits2words", "I", 0x9, NULL, NULL },
    { "initWithInt:", "FixedBitSet", NULL, 0x1, NULL, NULL },
    { "initWithLongArray:withInt:", "FixedBitSet", NULL, 0x1, NULL, NULL },
    { "verifyGhostBitsClear", NULL, "Z", 0x2, NULL, NULL },
    { "length", NULL, "I", 0x1, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "getBits", NULL, "[J", 0x1, NULL, NULL },
    { "cardinality", NULL, "I", 0x1, NULL, NULL },
    { "getWithInt:", "get", "Z", 0x1, NULL, NULL },
    { "setWithInt:", "set", "V", 0x1, NULL, NULL },
    { "clearWithInt:", "clear", "V", 0x1, NULL, NULL },
    { "nextSetBitWithInt:", "nextSetBit", "I", 0x1, NULL, NULL },
    { "prevSetBitWithInt:", "prevSetBit", "I", 0x1, NULL, NULL },
    { "or__WithOrgApacheLuceneSearchDocIdSetIterator:", "or", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "or__WithOrgApacheLuceneUtilFixedBitSet:", "or", "V", 0x1, NULL, NULL },
    { "or__WithLongArray:withInt:", "or", "V", 0x2, NULL, NULL },
    { "intersectsWithOrgApacheLuceneUtilFixedBitSet:", "intersects", "Z", 0x1, NULL, NULL },
    { "setWithInt:withInt:", "set", "V", 0x1, NULL, NULL },
    { "clearWithInt:withInt:", "clear", "V", 0x1, NULL, NULL },
    { "clone", NULL, "Lorg.apache.lucene.util.FixedBitSet;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_RAM_BYTES_USED_", NULL, 0x1a, "J", &OrgApacheLuceneUtilFixedBitSet_BASE_RAM_BYTES_USED_, NULL, .constantValue.asLong = 0 },
    { "bits_", NULL, 0x12, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "numBits_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "numWords_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFixedBitSet = { 2, "FixedBitSet", "org.apache.lucene.util", NULL, 0x11, 23, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilFixedBitSet;
}

@end

OrgApacheLuceneUtilFixedBitSet *OrgApacheLuceneUtilFixedBitSet_ensureCapacityWithOrgApacheLuceneUtilFixedBitSet_withInt_(OrgApacheLuceneUtilFixedBitSet *bits, jint numBits) {
  OrgApacheLuceneUtilFixedBitSet_initialize();
  if (numBits < ((OrgApacheLuceneUtilFixedBitSet *) nil_chk(bits))->numBits_) {
    return bits;
  }
  else {
    jint numWords = OrgApacheLuceneUtilFixedBitSet_bits2wordsWithInt_(numBits);
    IOSLongArray *arr = [bits getBits];
    if (numWords >= ((IOSLongArray *) nil_chk(arr))->size_) {
      arr = OrgApacheLuceneUtilArrayUtil_growWithLongArray_withInt_(arr, numWords + 1);
    }
    return [new_OrgApacheLuceneUtilFixedBitSet_initWithLongArray_withInt_(arr, JreLShift32(((IOSLongArray *) nil_chk(arr))->size_, 6)) autorelease];
  }
}

jint OrgApacheLuceneUtilFixedBitSet_bits2wordsWithInt_(jint numBits) {
  OrgApacheLuceneUtilFixedBitSet_initialize();
  return (JreRShift32((numBits - 1), 6)) + 1;
}

void OrgApacheLuceneUtilFixedBitSet_initWithInt_(OrgApacheLuceneUtilFixedBitSet *self, jint numBits) {
  OrgApacheLuceneUtilBitSet_init(self);
  self->numBits_ = numBits;
  JreStrongAssignAndConsume(&self->bits_, [IOSLongArray newArrayWithLength:OrgApacheLuceneUtilFixedBitSet_bits2wordsWithInt_(numBits)]);
  self->numWords_ = self->bits_->size_;
}

OrgApacheLuceneUtilFixedBitSet *new_OrgApacheLuceneUtilFixedBitSet_initWithInt_(jint numBits) {
  OrgApacheLuceneUtilFixedBitSet *self = [OrgApacheLuceneUtilFixedBitSet alloc];
  OrgApacheLuceneUtilFixedBitSet_initWithInt_(self, numBits);
  return self;
}

void OrgApacheLuceneUtilFixedBitSet_initWithLongArray_withInt_(OrgApacheLuceneUtilFixedBitSet *self, IOSLongArray *storedBits, jint numBits) {
  OrgApacheLuceneUtilBitSet_init(self);
  self->numWords_ = OrgApacheLuceneUtilFixedBitSet_bits2wordsWithInt_(numBits);
  if (self->numWords_ > ((IOSLongArray *) nil_chk(storedBits))->size_) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"The given long array is too small  to hold ", numBits, @" bits")) autorelease];
  }
  self->numBits_ = numBits;
  JreStrongAssign(&self->bits_, storedBits);
  JreAssert((OrgApacheLuceneUtilFixedBitSet_verifyGhostBitsClear(self)), (@"org/apache/lucene/util/FixedBitSet.java:134 condition failed: assert verifyGhostBitsClear();"));
}

OrgApacheLuceneUtilFixedBitSet *new_OrgApacheLuceneUtilFixedBitSet_initWithLongArray_withInt_(IOSLongArray *storedBits, jint numBits) {
  OrgApacheLuceneUtilFixedBitSet *self = [OrgApacheLuceneUtilFixedBitSet alloc];
  OrgApacheLuceneUtilFixedBitSet_initWithLongArray_withInt_(self, storedBits, numBits);
  return self;
}

jboolean OrgApacheLuceneUtilFixedBitSet_verifyGhostBitsClear(OrgApacheLuceneUtilFixedBitSet *self) {
  for (jint i = self->numWords_; i < ((IOSLongArray *) nil_chk(self->bits_))->size_; i++) {
    if (IOSLongArray_Get(self->bits_, i) != 0) return NO;
  }
  if ((self->numBits_ & (jint) 0x3f) == 0) return YES;
  jlong mask = JreLShift64(-1LL, self->numBits_);
  return (IOSLongArray_Get(self->bits_, self->numWords_ - 1) & mask) == 0;
}

void OrgApacheLuceneUtilFixedBitSet_or__WithLongArray_withInt_(OrgApacheLuceneUtilFixedBitSet *self, IOSLongArray *otherArr, jint otherNumWords) {
  JreAssert((otherNumWords <= self->numWords_), (JreStrcat("$I$I", @"numWords=", self->numWords_, @", otherNumWords=", otherNumWords)));
  IOSLongArray *thisArr = self->bits_;
  jint pos = JavaLangMath_minWithInt_withInt_(self->numWords_, otherNumWords);
  while (--pos >= 0) {
    *IOSLongArray_GetRef(nil_chk(thisArr), pos) |= IOSLongArray_Get(nil_chk(otherArr), pos);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFixedBitSet)
