//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/CloseableThreadLocal.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Thread.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/apache/lucene/util/CloseableThreadLocal.h"

@interface OrgApacheLuceneUtilCloseableThreadLocal () {
 @public
  JavaLangThreadLocal *t_;
  id<JavaUtilMap> hardRefs_;
  JavaUtilConcurrentAtomicAtomicInteger *countUntilPurge_;
}

- (void)maybePurge;

- (void)purge;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilCloseableThreadLocal, t_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilCloseableThreadLocal, hardRefs_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilCloseableThreadLocal, countUntilPurge_, JavaUtilConcurrentAtomicAtomicInteger *)

inline jint OrgApacheLuceneUtilCloseableThreadLocal_get_PURGE_MULTIPLIER();
inline jint OrgApacheLuceneUtilCloseableThreadLocal_set_PURGE_MULTIPLIER(jint value);
inline jint *OrgApacheLuceneUtilCloseableThreadLocal_getRef_PURGE_MULTIPLIER();
static jint OrgApacheLuceneUtilCloseableThreadLocal_PURGE_MULTIPLIER = 20;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgApacheLuceneUtilCloseableThreadLocal, PURGE_MULTIPLIER, jint)

__attribute__((unused)) static void OrgApacheLuceneUtilCloseableThreadLocal_maybePurge(OrgApacheLuceneUtilCloseableThreadLocal *self);

__attribute__((unused)) static void OrgApacheLuceneUtilCloseableThreadLocal_purge(OrgApacheLuceneUtilCloseableThreadLocal *self);

@implementation OrgApacheLuceneUtilCloseableThreadLocal

- (id)initialValue {
  return nil;
}

- (id)get {
  JavaLangRefWeakReference *weakRef = [((JavaLangThreadLocal *) nil_chk(t_)) get];
  if (weakRef == nil) {
    id iv = [self initialValue];
    if (iv != nil) {
      [self setWithId:iv];
      return iv;
    }
    else {
      return nil;
    }
  }
  else {
    OrgApacheLuceneUtilCloseableThreadLocal_maybePurge(self);
    return [weakRef get];
  }
}

- (void)setWithId:(id)object {
  [((JavaLangThreadLocal *) nil_chk(t_)) setWithId:new_JavaLangRefWeakReference_initWithId_(object)];
  @synchronized(hardRefs_) {
    (void) [((id<JavaUtilMap>) nil_chk(hardRefs_)) putWithId:JavaLangThread_currentThread() withId:object];
    OrgApacheLuceneUtilCloseableThreadLocal_maybePurge(self);
  }
}

- (void)maybePurge {
  OrgApacheLuceneUtilCloseableThreadLocal_maybePurge(self);
}

- (void)purge {
  OrgApacheLuceneUtilCloseableThreadLocal_purge(self);
}

- (void)close {
  hardRefs_ = nil;
  if (t_ != nil) {
    [t_ remove];
  }
  t_ = nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilCloseableThreadLocal_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "TT;", 0x4, NULL, "()TT;" },
    { "get", NULL, "TT;", 0x1, NULL, "()TT;" },
    { "setWithId:", "set", "V", 0x1, NULL, "(TT;)V" },
    { "maybePurge", NULL, "V", 0x2, NULL, NULL },
    { "purge", NULL, "V", 0x2, NULL, NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "init", "CloseableThreadLocal", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "t_", NULL, 0x2, "Ljava.lang.ThreadLocal;", NULL, "Ljava/lang/ThreadLocal<Ljava/lang/ref/WeakReference<TT;>;>;", .constantValue.asLong = 0 },
    { "hardRefs_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Thread;TT;>;", .constantValue.asLong = 0 },
    { "PURGE_MULTIPLIER", "PURGE_MULTIPLIER", 0xa, "I", &OrgApacheLuceneUtilCloseableThreadLocal_PURGE_MULTIPLIER, NULL, .constantValue.asLong = 0 },
    { "countUntilPurge_", NULL, 0x12, "Ljava.util.concurrent.atomic.AtomicInteger;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilCloseableThreadLocal = { 2, "CloseableThreadLocal", "org.apache.lucene.util", NULL, 0x1, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/io/Closeable;" };
  return &_OrgApacheLuceneUtilCloseableThreadLocal;
}

@end

void OrgApacheLuceneUtilCloseableThreadLocal_maybePurge(OrgApacheLuceneUtilCloseableThreadLocal *self) {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->countUntilPurge_)) getAndDecrement] == 0) {
    OrgApacheLuceneUtilCloseableThreadLocal_purge(self);
  }
}

void OrgApacheLuceneUtilCloseableThreadLocal_purge(OrgApacheLuceneUtilCloseableThreadLocal *self) {
  @synchronized(self->hardRefs_) {
    jint stillAliveCount = 0;
    for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(self->hardRefs_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      JavaLangThread *t = [it next];
      if (![((JavaLangThread *) nil_chk(t)) isAlive]) {
        [it remove];
      }
      else {
        stillAliveCount++;
      }
    }
    jint nextCount = (1 + stillAliveCount) * OrgApacheLuceneUtilCloseableThreadLocal_PURGE_MULTIPLIER;
    if (nextCount <= 0) {
      nextCount = 1000000;
    }
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->countUntilPurge_)) setWithInt:nextCount];
  }
}

void OrgApacheLuceneUtilCloseableThreadLocal_init(OrgApacheLuceneUtilCloseableThreadLocal *self) {
  NSObject_init(self);
  self->t_ = new_JavaLangThreadLocal_init();
  self->hardRefs_ = new_JavaUtilWeakHashMap_init();
  self->countUntilPurge_ = new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(OrgApacheLuceneUtilCloseableThreadLocal_PURGE_MULTIPLIER);
}

OrgApacheLuceneUtilCloseableThreadLocal *new_OrgApacheLuceneUtilCloseableThreadLocal_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilCloseableThreadLocal, init)
}

OrgApacheLuceneUtilCloseableThreadLocal *create_OrgApacheLuceneUtilCloseableThreadLocal_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilCloseableThreadLocal, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilCloseableThreadLocal)
