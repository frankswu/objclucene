//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/RecyclingIntBlockAllocator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/Counter.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/RecyclingIntBlockAllocator.h"

@interface OrgApacheLuceneUtilRecyclingIntBlockAllocator () {
 @public
  IOSObjectArray *freeByteBlocks_;
  jint maxBufferedBlocks_;
  jint freeBlocks_;
  OrgApacheLuceneUtilCounter *bytesUsed_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilRecyclingIntBlockAllocator, freeByteBlocks_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilRecyclingIntBlockAllocator, bytesUsed_, OrgApacheLuceneUtilCounter *)

@implementation OrgApacheLuceneUtilRecyclingIntBlockAllocator

- (instancetype)initWithInt:(jint)blockSize
                    withInt:(jint)maxBufferedBlocks
withOrgApacheLuceneUtilCounter:(OrgApacheLuceneUtilCounter *)bytesUsed {
  OrgApacheLuceneUtilRecyclingIntBlockAllocator_initWithInt_withInt_withOrgApacheLuceneUtilCounter_(self, blockSize, maxBufferedBlocks, bytesUsed);
  return self;
}

- (instancetype)initWithInt:(jint)blockSize
                    withInt:(jint)maxBufferedBlocks {
  OrgApacheLuceneUtilRecyclingIntBlockAllocator_initWithInt_withInt_(self, blockSize, maxBufferedBlocks);
  return self;
}

- (instancetype)init {
  OrgApacheLuceneUtilRecyclingIntBlockAllocator_init(self);
  return self;
}

- (IOSIntArray *)getIntBlock {
  if (freeBlocks_ == 0) {
    [((OrgApacheLuceneUtilCounter *) nil_chk(bytesUsed_)) addAndGetWithLong:blockSize_ * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT];
    return [IOSIntArray arrayWithLength:blockSize_];
  }
  IOSIntArray *b = IOSObjectArray_Get(nil_chk(freeByteBlocks_), --freeBlocks_);
  IOSObjectArray_Set(freeByteBlocks_, freeBlocks_, nil);
  return b;
}

- (void)recycleIntBlocksWithIntArray2:(IOSObjectArray *)blocks
                              withInt:(jint)start
                              withInt:(jint)end {
  jint numBlocks = JavaLangMath_minWithInt_withInt_(maxBufferedBlocks_ - freeBlocks_, end - start);
  jint size = freeBlocks_ + numBlocks;
  if (size >= ((IOSObjectArray *) nil_chk(freeByteBlocks_))->size_) {
    IOSObjectArray *newBlocks = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(size, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF_)) type:IOSClass_intArray(1)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(freeByteBlocks_, 0, newBlocks, 0, freeBlocks_);
    JreStrongAssign(&freeByteBlocks_, newBlocks);
  }
  jint stop = start + numBlocks;
  for (jint i = start; i < stop; i++) {
    IOSObjectArray_Set(freeByteBlocks_, freeBlocks_++, IOSObjectArray_Get(nil_chk(blocks), i));
    IOSObjectArray_Set(blocks, i, nil);
  }
  for (jint i = stop; i < end; i++) {
    IOSObjectArray_Set(nil_chk(blocks), i, nil);
  }
  [((OrgApacheLuceneUtilCounter *) nil_chk(bytesUsed_)) addAndGetWithLong:-(end - stop) * (blockSize_ * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT)];
  JreAssert(([bytesUsed_ get] >= 0), (@"org/apache/lucene/util/RecyclingIntBlockAllocator.java:108 condition failed: assert bytesUsed.get() >= 0;"));
}

- (jint)numBufferedBlocks {
  return freeBlocks_;
}

- (jlong)bytesUsed {
  return [((OrgApacheLuceneUtilCounter *) nil_chk(bytesUsed_)) get];
}

- (jint)maxBufferedBlocks {
  return maxBufferedBlocks_;
}

- (jint)freeBlocksWithInt:(jint)num {
  JreAssert((num >= 0), (JreStrcat("$I", @"free blocks must be >= 0 but was: ", num)));
  jint stop;
  jint count;
  if (num > freeBlocks_) {
    stop = 0;
    count = freeBlocks_;
  }
  else {
    stop = freeBlocks_ - num;
    count = num;
  }
  while (freeBlocks_ > stop) {
    IOSObjectArray_Set(nil_chk(freeByteBlocks_), --freeBlocks_, nil);
  }
  [((OrgApacheLuceneUtilCounter *) nil_chk(bytesUsed_)) addAndGetWithLong:-count * blockSize_ * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT];
  JreAssert(([bytesUsed_ get] >= 0), (@"org/apache/lucene/util/RecyclingIntBlockAllocator.java:154 condition failed: assert bytesUsed.get() >= 0;"));
  return count;
}

- (void)dealloc {
  RELEASE_(freeByteBlocks_);
  RELEASE_(bytesUsed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withOrgApacheLuceneUtilCounter:", "RecyclingIntBlockAllocator", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "RecyclingIntBlockAllocator", NULL, 0x1, NULL, NULL },
    { "init", "RecyclingIntBlockAllocator", NULL, 0x1, NULL, NULL },
    { "getIntBlock", NULL, "[I", 0x1, NULL, NULL },
    { "recycleIntBlocksWithIntArray2:withInt:withInt:", "recycleIntBlocks", "V", 0x1, NULL, NULL },
    { "numBufferedBlocks", NULL, "I", 0x1, NULL, NULL },
    { "bytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "maxBufferedBlocks", NULL, "I", 0x1, NULL, NULL },
    { "freeBlocksWithInt:", "freeBlocks", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "freeByteBlocks_", NULL, 0x2, "[[I", NULL, NULL, .constantValue.asLong = 0 },
    { "maxBufferedBlocks_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "freeBlocks_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "bytesUsed_", NULL, 0x12, "Lorg.apache.lucene.util.Counter;", NULL, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_BUFFERED_BLOCKS", "DEFAULT_BUFFERED_BLOCKS", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneUtilRecyclingIntBlockAllocator_DEFAULT_BUFFERED_BLOCKS },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilRecyclingIntBlockAllocator = { 2, "RecyclingIntBlockAllocator", "org.apache.lucene.util", NULL, 0x11, 9, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilRecyclingIntBlockAllocator;
}

@end

void OrgApacheLuceneUtilRecyclingIntBlockAllocator_initWithInt_withInt_withOrgApacheLuceneUtilCounter_(OrgApacheLuceneUtilRecyclingIntBlockAllocator *self, jint blockSize, jint maxBufferedBlocks, OrgApacheLuceneUtilCounter *bytesUsed) {
  OrgApacheLuceneUtilIntBlockPool_Allocator_initWithInt_(self, blockSize);
  self->freeBlocks_ = 0;
  JreStrongAssignAndConsume(&self->freeByteBlocks_, [IOSObjectArray newArrayWithLength:maxBufferedBlocks type:IOSClass_intArray(1)]);
  self->maxBufferedBlocks_ = maxBufferedBlocks;
  JreStrongAssign(&self->bytesUsed_, bytesUsed);
}

OrgApacheLuceneUtilRecyclingIntBlockAllocator *new_OrgApacheLuceneUtilRecyclingIntBlockAllocator_initWithInt_withInt_withOrgApacheLuceneUtilCounter_(jint blockSize, jint maxBufferedBlocks, OrgApacheLuceneUtilCounter *bytesUsed) {
  OrgApacheLuceneUtilRecyclingIntBlockAllocator *self = [OrgApacheLuceneUtilRecyclingIntBlockAllocator alloc];
  OrgApacheLuceneUtilRecyclingIntBlockAllocator_initWithInt_withInt_withOrgApacheLuceneUtilCounter_(self, blockSize, maxBufferedBlocks, bytesUsed);
  return self;
}

void OrgApacheLuceneUtilRecyclingIntBlockAllocator_initWithInt_withInt_(OrgApacheLuceneUtilRecyclingIntBlockAllocator *self, jint blockSize, jint maxBufferedBlocks) {
  OrgApacheLuceneUtilRecyclingIntBlockAllocator_initWithInt_withInt_withOrgApacheLuceneUtilCounter_(self, blockSize, maxBufferedBlocks, OrgApacheLuceneUtilCounter_newCounterWithBoolean_(NO));
}

OrgApacheLuceneUtilRecyclingIntBlockAllocator *new_OrgApacheLuceneUtilRecyclingIntBlockAllocator_initWithInt_withInt_(jint blockSize, jint maxBufferedBlocks) {
  OrgApacheLuceneUtilRecyclingIntBlockAllocator *self = [OrgApacheLuceneUtilRecyclingIntBlockAllocator alloc];
  OrgApacheLuceneUtilRecyclingIntBlockAllocator_initWithInt_withInt_(self, blockSize, maxBufferedBlocks);
  return self;
}

void OrgApacheLuceneUtilRecyclingIntBlockAllocator_init(OrgApacheLuceneUtilRecyclingIntBlockAllocator *self) {
  OrgApacheLuceneUtilRecyclingIntBlockAllocator_initWithInt_withInt_withOrgApacheLuceneUtilCounter_(self, OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE, 64, OrgApacheLuceneUtilCounter_newCounterWithBoolean_(NO));
}

OrgApacheLuceneUtilRecyclingIntBlockAllocator *new_OrgApacheLuceneUtilRecyclingIntBlockAllocator_init() {
  OrgApacheLuceneUtilRecyclingIntBlockAllocator *self = [OrgApacheLuceneUtilRecyclingIntBlockAllocator alloc];
  OrgApacheLuceneUtilRecyclingIntBlockAllocator_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilRecyclingIntBlockAllocator)
