//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/IOUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/nio/channels/FileChannel.h"
#include "java/nio/charset/Charset.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "org/apache/lucene/store/FileSwitchDirectory.h"
#include "org/apache/lucene/store/FilterDirectory.h"
#include "org/apache/lucene/store/RAMDirectory.h"
#include "org/apache/lucene/util/Constants.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"
#include "org/lukhnos/portmobile/channels/utils/FileChannelUtils.h"
#include "org/lukhnos/portmobile/charset/StandardCharsets.h"
#include "org/lukhnos/portmobile/file/Path.h"
#include "org/lukhnos/portmobile/file/StandardOpenOption.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheLuceneUtilIOUtils ()

- (instancetype)init;

+ (void)addSuppressedWithJavaLangThrowable:(JavaLangThrowable *)exception
                     withJavaLangThrowable:(JavaLangThrowable *)suppressed;

@end

__attribute__((unused)) static void OrgApacheLuceneUtilIOUtils_init(OrgApacheLuceneUtilIOUtils *self);

__attribute__((unused)) static OrgApacheLuceneUtilIOUtils *new_OrgApacheLuceneUtilIOUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgApacheLuceneUtilIOUtils_addSuppressedWithJavaLangThrowable_withJavaLangThrowable_(JavaLangThrowable *exception, JavaLangThrowable *suppressed);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilIOUtils)

JavaNioCharsetCharset *OrgApacheLuceneUtilIOUtils_CHARSET_UTF_8_;
NSString *OrgApacheLuceneUtilIOUtils_UTF_8_;

@implementation OrgApacheLuceneUtilIOUtils

- (instancetype)init {
  OrgApacheLuceneUtilIOUtils_init(self);
  return self;
}

+ (void)closeWithJavaIoCloseableArray:(IOSObjectArray *)objects {
  OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_(objects);
}

+ (void)closeWithJavaLangIterable:(id<JavaLangIterable>)objects {
  OrgApacheLuceneUtilIOUtils_closeWithJavaLangIterable_(objects);
}

+ (void)closeWhileHandlingExceptionWithJavaIoCloseableArray:(IOSObjectArray *)objects {
  OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_(objects);
}

+ (void)closeWhileHandlingExceptionWithJavaLangIterable:(id<JavaLangIterable>)objects {
  OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaLangIterable_(objects);
}

+ (void)addSuppressedWithJavaLangThrowable:(JavaLangThrowable *)exception
                     withJavaLangThrowable:(JavaLangThrowable *)suppressed {
  OrgApacheLuceneUtilIOUtils_addSuppressedWithJavaLangThrowable_withJavaLangThrowable_(exception, suppressed);
}

+ (void)deleteFilesIgnoringExceptionsWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
                                                     withNSStringArray:(IOSObjectArray *)files {
  OrgApacheLuceneUtilIOUtils_deleteFilesIgnoringExceptionsWithOrgApacheLuceneStoreDirectory_withNSStringArray_(dir, files);
}

+ (void)reThrowWithJavaLangThrowable:(JavaLangThrowable *)th {
  OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(th);
}

+ (void)reThrowUncheckedWithJavaLangThrowable:(JavaLangThrowable *)th {
  OrgApacheLuceneUtilIOUtils_reThrowUncheckedWithJavaLangThrowable_(th);
}

+ (void)fsyncWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)fileToSync
                                  withBoolean:(jboolean)isDir {
  OrgApacheLuceneUtilIOUtils_fsyncWithOrgLukhnosPortmobileFilePath_withBoolean_(fileToSync, isDir);
}

+ (jboolean)spinsWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  return OrgApacheLuceneUtilIOUtils_spinsWithOrgApacheLuceneStoreDirectory_(dir);
}

+ (jboolean)spinsWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)path {
  return OrgApacheLuceneUtilIOUtils_spinsWithOrgLukhnosPortmobileFilePath_(path);
}

+ (jboolean)spinsLinuxWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)path {
  return OrgApacheLuceneUtilIOUtils_spinsLinuxWithOrgLukhnosPortmobileFilePath_(path);
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilIOUtils class]) {
    JreStrongAssign(&OrgApacheLuceneUtilIOUtils_CHARSET_UTF_8_, JreLoadStatic(OrgLukhnosPortmobileCharsetStandardCharsets, UTF_8_));
    JreStrongAssign(&OrgApacheLuceneUtilIOUtils_UTF_8_, [((JavaNioCharsetCharset *) nil_chk(JreLoadStatic(OrgLukhnosPortmobileCharsetStandardCharsets, UTF_8_))) name]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilIOUtils)
  }
}

+ (IOSObjectArray *)__annotations_CHARSET_UTF_8_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "IOUtils", NULL, 0x2, NULL, NULL },
    { "closeWithJavaIoCloseableArray:", "close", "V", 0x89, "Ljava.io.IOException;", NULL },
    { "closeWithJavaLangIterable:", "close", "V", 0x9, "Ljava.io.IOException;", NULL },
    { "closeWhileHandlingExceptionWithJavaIoCloseableArray:", "closeWhileHandlingException", "V", 0x89, NULL, NULL },
    { "closeWhileHandlingExceptionWithJavaLangIterable:", "closeWhileHandlingException", "V", 0x9, NULL, NULL },
    { "addSuppressedWithJavaLangThrowable:withJavaLangThrowable:", "addSuppressed", "V", 0xa, NULL, NULL },
    { "deleteFilesIgnoringExceptionsWithOrgApacheLuceneStoreDirectory:withNSStringArray:", "deleteFilesIgnoringExceptions", "V", 0x89, NULL, NULL },
    { "reThrowWithJavaLangThrowable:", "reThrow", "V", 0x9, "Ljava.io.IOException;", NULL },
    { "reThrowUncheckedWithJavaLangThrowable:", "reThrowUnchecked", "V", 0x9, NULL, NULL },
    { "fsyncWithOrgLukhnosPortmobileFilePath:withBoolean:", "fsync", "V", 0x9, "Ljava.io.IOException;", NULL },
    { "spinsWithOrgApacheLuceneStoreDirectory:", "spins", "Z", 0x9, "Ljava.io.IOException;", NULL },
    { "spinsWithOrgLukhnosPortmobileFilePath:", "spins", "Z", 0x9, "Ljava.io.IOException;", NULL },
    { "spinsLinuxWithOrgLukhnosPortmobileFilePath:", "spinsLinux", "Z", 0x8, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CHARSET_UTF_8_", NULL, 0x19, "Ljava.nio.charset.Charset;", &OrgApacheLuceneUtilIOUtils_CHARSET_UTF_8_, NULL, .constantValue.asLong = 0 },
    { "UTF_8_", NULL, 0x19, "Ljava.lang.String;", &OrgApacheLuceneUtilIOUtils_UTF_8_, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilIOUtils = { 2, "IOUtils", "org.apache.lucene.util", NULL, 0x11, 13, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilIOUtils;
}

@end

void OrgApacheLuceneUtilIOUtils_init(OrgApacheLuceneUtilIOUtils *self) {
  NSObject_init(self);
}

OrgApacheLuceneUtilIOUtils *new_OrgApacheLuceneUtilIOUtils_init() {
  OrgApacheLuceneUtilIOUtils *self = [OrgApacheLuceneUtilIOUtils alloc];
  OrgApacheLuceneUtilIOUtils_init(self);
  return self;
}

void OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_(IOSObjectArray *objects) {
  OrgApacheLuceneUtilIOUtils_initialize();
  OrgApacheLuceneUtilIOUtils_closeWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_(objects));
}

void OrgApacheLuceneUtilIOUtils_closeWithJavaLangIterable_(id<JavaLangIterable> objects) {
  OrgApacheLuceneUtilIOUtils_initialize();
  JavaLangThrowable *th = nil;
  for (id<JavaIoCloseable> __strong object in nil_chk(objects)) {
    @try {
      if (object != nil) {
        [object close];
      }
    }
    @catch (JavaLangThrowable *t) {
      OrgApacheLuceneUtilIOUtils_addSuppressedWithJavaLangThrowable_withJavaLangThrowable_(th, t);
      if (th == nil) {
        th = t;
      }
    }
  }
  OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(th);
}

void OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_(IOSObjectArray *objects) {
  OrgApacheLuceneUtilIOUtils_initialize();
  OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_(objects));
}

void OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaLangIterable_(id<JavaLangIterable> objects) {
  OrgApacheLuceneUtilIOUtils_initialize();
  for (id<JavaIoCloseable> __strong object in nil_chk(objects)) {
    @try {
      if (object != nil) {
        [object close];
      }
    }
    @catch (JavaLangThrowable *t) {
    }
  }
}

void OrgApacheLuceneUtilIOUtils_addSuppressedWithJavaLangThrowable_withJavaLangThrowable_(JavaLangThrowable *exception, JavaLangThrowable *suppressed) {
  OrgApacheLuceneUtilIOUtils_initialize();
  if (exception != nil && suppressed != nil) {
    [exception addSuppressedWithJavaLangThrowable:suppressed];
  }
}

void OrgApacheLuceneUtilIOUtils_deleteFilesIgnoringExceptionsWithOrgApacheLuceneStoreDirectory_withNSStringArray_(OrgApacheLuceneStoreDirectory *dir, IOSObjectArray *files) {
  OrgApacheLuceneUtilIOUtils_initialize();
  {
    IOSObjectArray *a__ = files;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *name = *b__++;
      @try {
        [((OrgApacheLuceneStoreDirectory *) nil_chk(dir)) deleteFileWithNSString:name];
      }
      @catch (JavaLangThrowable *ignored) {
      }
    }
  }
}

void OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(JavaLangThrowable *th) {
  OrgApacheLuceneUtilIOUtils_initialize();
  if (th != nil) {
    if ([th isKindOfClass:[JavaIoIOException class]]) {
      @throw (JavaIoIOException *) check_class_cast(th, [JavaIoIOException class]);
    }
    OrgApacheLuceneUtilIOUtils_reThrowUncheckedWithJavaLangThrowable_(th);
  }
}

void OrgApacheLuceneUtilIOUtils_reThrowUncheckedWithJavaLangThrowable_(JavaLangThrowable *th) {
  OrgApacheLuceneUtilIOUtils_initialize();
  if (th != nil) {
    if ([th isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) check_class_cast(th, [JavaLangRuntimeException class]);
    }
    if ([th isKindOfClass:[JavaLangError class]]) {
      @throw (JavaLangError *) check_class_cast(th, [JavaLangError class]);
    }
    @throw [new_JavaLangRuntimeException_initWithJavaLangThrowable_(th) autorelease];
  }
}

void OrgApacheLuceneUtilIOUtils_fsyncWithOrgLukhnosPortmobileFilePath_withBoolean_(OrgLukhnosPortmobileFilePath *fileToSync, jboolean isDir) {
  OrgApacheLuceneUtilIOUtils_initialize();
  JavaIoIOException *exc = nil;
  if (isDir) {
    return;
  }
  {
    JavaLangThrowable *__mainException = nil;
    JavaNioChannelsFileChannel *file = OrgLukhnosPortmobileChannelsUtilsFileChannelUtils_openWithOrgLukhnosPortmobileFilePath_withOrgLukhnosPortmobileFileStandardOpenOptionEnumArray_(fileToSync, [IOSObjectArray arrayWithObjects:(id[]){ isDir ? JreLoadStatic(OrgLukhnosPortmobileFileStandardOpenOptionEnum, READ) : JreLoadStatic(OrgLukhnosPortmobileFileStandardOpenOptionEnum, WRITE) } count:1 type:OrgLukhnosPortmobileFileStandardOpenOptionEnum_class_()]);
    @try {
      for (jint retry = 0; retry < 5; retry++) {
        @try {
          [((JavaNioChannelsFileChannel *) nil_chk(file)) forceWithBoolean:YES];
          return;
        }
        @catch (JavaIoIOException *ioe) {
          if (exc == nil) {
            exc = ioe;
          }
          @try {
            JavaLangThread_sleepWithLong_(5LL);
          }
          @catch (JavaLangInterruptedException *ie) {
            OrgApacheLuceneUtilThreadInterruptedException *ex = [new_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie) autorelease];
            [ex addSuppressedWithJavaLangThrowable:exc];
            @throw ex;
          }
        }
      }
    }
    @catch (JavaIoIOException *ioe) {
      __mainException = ioe;
      if (exc == nil) {
        exc = ioe;
      }
    }
    @finally {
      @try {
        [file close];
      }
      @catch (JavaLangThrowable *e) {
        if (__mainException) {
          [__mainException addSuppressedWithJavaLangThrowable:e];
        } else {
          __mainException = e;
        }
      }
      if (__mainException) {
        @throw __mainException;
      }
    }
  }
  if (isDir) {
    JreAssert(((JreLoadStatic(OrgApacheLuceneUtilConstants, LINUX_) || JreLoadStatic(OrgApacheLuceneUtilConstants, MAC_OS_X_)) == NO || JreLoadStatic(OrgApacheLuceneUtilConstants, JRE_IS_MINIMUM_JAVA9_)), (JreStrcat("$@", @"On Linux and MacOSX fsyncing a directory should not throw IOException, we just don't want to rely on that in production (undocumented). Got: ", exc)));
    return;
  }
  @throw exc;
}

jboolean OrgApacheLuceneUtilIOUtils_spinsWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *dir) {
  OrgApacheLuceneUtilIOUtils_initialize();
  dir = OrgApacheLuceneStoreFilterDirectory_unwrapWithOrgApacheLuceneStoreDirectory_(dir);
  if ([dir isKindOfClass:[OrgApacheLuceneStoreFileSwitchDirectory class]]) {
    OrgApacheLuceneStoreFileSwitchDirectory *fsd = (OrgApacheLuceneStoreFileSwitchDirectory *) check_class_cast(dir, [OrgApacheLuceneStoreFileSwitchDirectory class]);
    return OrgApacheLuceneUtilIOUtils_spinsWithOrgApacheLuceneStoreDirectory_([((OrgApacheLuceneStoreFileSwitchDirectory *) nil_chk(fsd)) getPrimaryDir]) || OrgApacheLuceneUtilIOUtils_spinsWithOrgApacheLuceneStoreDirectory_([fsd getSecondaryDir]);
  }
  else if ([dir isKindOfClass:[OrgApacheLuceneStoreRAMDirectory class]]) {
    return NO;
  }
  else if ([dir isKindOfClass:[OrgApacheLuceneStoreFSDirectory class]]) {
    return OrgApacheLuceneUtilIOUtils_spinsWithOrgLukhnosPortmobileFilePath_([((OrgApacheLuceneStoreFSDirectory *) nil_chk(((OrgApacheLuceneStoreFSDirectory *) check_class_cast(dir, [OrgApacheLuceneStoreFSDirectory class])))) getDirectory]);
  }
  else {
    return YES;
  }
}

jboolean OrgApacheLuceneUtilIOUtils_spinsWithOrgLukhnosPortmobileFilePath_(OrgLukhnosPortmobileFilePath *path) {
  OrgApacheLuceneUtilIOUtils_initialize();
  path = [((OrgLukhnosPortmobileFilePath *) nil_chk(path)) toRealPath];
  if (!JreLoadStatic(OrgApacheLuceneUtilConstants, LINUX_)) {
    return YES;
  }
  @try {
    return OrgApacheLuceneUtilIOUtils_spinsLinuxWithOrgLukhnosPortmobileFilePath_(path);
  }
  @catch (JavaLangException *exc) {
    return YES;
  }
}

jboolean OrgApacheLuceneUtilIOUtils_spinsLinuxWithOrgLukhnosPortmobileFilePath_(OrgLukhnosPortmobileFilePath *path) {
  OrgApacheLuceneUtilIOUtils_initialize();
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilIOUtils)
