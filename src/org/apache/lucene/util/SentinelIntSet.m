//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/SentinelIntSet.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/SentinelIntSet.h"

@implementation OrgApacheLuceneUtilSentinelIntSet

- (instancetype)initWithInt:(jint)size
                    withInt:(jint)emptyVal {
  OrgApacheLuceneUtilSentinelIntSet_initWithInt_withInt_(self, size, emptyVal);
  return self;
}

- (void)clear {
  JavaUtilArrays_fillWithIntArray_withInt_(keys_, emptyVal_);
  count_ = 0;
}

- (jint)hash__WithInt:(jint)key {
  return key;
}

- (jint)size {
  return count_;
}

- (jint)getSlotWithInt:(jint)key {
  JreAssert((key != emptyVal_), (@"org/apache/lucene/util/SentinelIntSet.java:84 condition failed: assert key != emptyVal;"));
  jint h = [self hash__WithInt:key];
  jint s = h & (((IOSIntArray *) nil_chk(keys_))->size_ - 1);
  if (IOSIntArray_Get(keys_, s) == key || IOSIntArray_Get(keys_, s) == emptyVal_) return s;
  jint increment = (JreRShift32(h, 7)) | 1;
  do {
    s = (s + increment) & (keys_->size_ - 1);
  }
  while (IOSIntArray_Get(keys_, s) != key && IOSIntArray_Get(keys_, s) != emptyVal_);
  return s;
}

- (jint)findWithInt:(jint)key {
  JreAssert((key != emptyVal_), (@"org/apache/lucene/util/SentinelIntSet.java:98 condition failed: assert key != emptyVal;"));
  jint h = [self hash__WithInt:key];
  jint s = h & (((IOSIntArray *) nil_chk(keys_))->size_ - 1);
  if (IOSIntArray_Get(keys_, s) == key) return s;
  if (IOSIntArray_Get(keys_, s) == emptyVal_) return -s - 1;
  jint increment = (JreRShift32(h, 7)) | 1;
  for (; ; ) {
    s = (s + increment) & (keys_->size_ - 1);
    if (IOSIntArray_Get(keys_, s) == key) return s;
    if (IOSIntArray_Get(keys_, s) == emptyVal_) return -s - 1;
  }
}

- (jboolean)existsWithInt:(jint)key {
  return [self findWithInt:key] >= 0;
}

- (jint)putWithInt:(jint)key {
  jint s = [self findWithInt:key];
  if (s < 0) {
    count_++;
    if (count_ >= rehashCount_) {
      [self rehash];
      s = [self getSlotWithInt:key];
    }
    else {
      s = -s - 1;
    }
    *IOSIntArray_GetRef(nil_chk(keys_), s) = key;
  }
  return s;
}

- (void)rehash {
  jint newSize = JreLShift32(((IOSIntArray *) nil_chk(keys_))->size_, 1);
  IOSIntArray *oldKeys = keys_;
  JreStrongAssignAndConsume(&keys_, [IOSIntArray newArrayWithLength:newSize]);
  if (emptyVal_ != 0) JavaUtilArrays_fillWithIntArray_withInt_(keys_, emptyVal_);
  {
    IOSIntArray *a__ = oldKeys;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint key = *b__++;
      if (key == emptyVal_) continue;
      jint newSlot = [self getSlotWithInt:key];
      *IOSIntArray_GetRef(keys_, newSlot) = key;
    }
  }
  rehashCount_ = newSize - (JreRShift32(newSize, 2));
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneUtilRamUsageEstimator_alignObjectSizeWithLong_(OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT * 3 + JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF_)) + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithIntArray_(keys_);
}

- (void)dealloc {
  RELEASE_(keys_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "SentinelIntSet", NULL, 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "hash__WithInt:", "hash", "I", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "getSlotWithInt:", "getSlot", "I", 0x1, NULL, NULL },
    { "findWithInt:", "find", "I", 0x1, NULL, NULL },
    { "existsWithInt:", "exists", "Z", 0x1, NULL, NULL },
    { "putWithInt:", "put", "I", 0x1, NULL, NULL },
    { "rehash", NULL, "V", 0x1, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "keys_", NULL, 0x1, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "count_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "emptyVal_", NULL, 0x11, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "rehashCount_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilSentinelIntSet = { 2, "SentinelIntSet", "org.apache.lucene.util", NULL, 0x1, 10, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilSentinelIntSet;
}

@end

void OrgApacheLuceneUtilSentinelIntSet_initWithInt_withInt_(OrgApacheLuceneUtilSentinelIntSet *self, jint size, jint emptyVal) {
  NSObject_init(self);
  self->emptyVal_ = emptyVal;
  jint tsize = JavaLangMath_maxWithInt_withInt_(OrgApacheLuceneUtilBitUtil_nextHighestPowerOfTwoWithInt_(size), 1);
  self->rehashCount_ = tsize - (JreRShift32(tsize, 2));
  if (size >= self->rehashCount_) {
    JreLShiftAssignInt(&tsize, 1);
    self->rehashCount_ = tsize - (JreRShift32(tsize, 2));
  }
  JreStrongAssignAndConsume(&self->keys_, [IOSIntArray newArrayWithLength:tsize]);
  if (emptyVal != 0) [self clear];
}

OrgApacheLuceneUtilSentinelIntSet *new_OrgApacheLuceneUtilSentinelIntSet_initWithInt_withInt_(jint size, jint emptyVal) {
  OrgApacheLuceneUtilSentinelIntSet *self = [OrgApacheLuceneUtilSentinelIntSet alloc];
  OrgApacheLuceneUtilSentinelIntSet_initWithInt_withInt_(self, size, emptyVal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilSentinelIntSet)
