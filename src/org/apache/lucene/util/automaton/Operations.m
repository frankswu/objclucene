//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/automaton/Operations.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Comparable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/BitSet.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/automaton/Automata.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/Operations.h"
#include "org/apache/lucene/util/automaton/SortedIntSet.h"
#include "org/apache/lucene/util/automaton/StatePair.h"
#include "org/apache/lucene/util/automaton/TooComplexToDeterminizeException.h"
#include "org/apache/lucene/util/automaton/Transition.h"

@interface OrgApacheLuceneUtilAutomatonOperations ()

- (instancetype)init;

+ (id<JavaUtilSet>)toSetWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                          withInt:(jint)offset;

+ (JavaUtilBitSet *)getLiveStatesWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a;

+ (JavaUtilBitSet *)getLiveStatesFromInitialWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a;

+ (JavaUtilBitSet *)getLiveStatesToAcceptWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a;

+ (jboolean)isFiniteWithOrgApacheLuceneUtilAutomatonTransition:(OrgApacheLuceneUtilAutomatonTransition *)scratch
                     withOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                       withInt:(jint)state
                                            withJavaUtilBitSet:(JavaUtilBitSet *)path
                                            withJavaUtilBitSet:(JavaUtilBitSet *)visited;

+ (void)reverseBytesWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)ref;

+ (jint)topoSortStatesRecurseWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                    withJavaUtilBitSet:(JavaUtilBitSet *)visited
                                                          withIntArray:(IOSIntArray *)states
                                                               withInt:(jint)upto
                                                               withInt:(jint)state;

@end

__attribute__((unused)) static void OrgApacheLuceneUtilAutomatonOperations_init(OrgApacheLuceneUtilAutomatonOperations *self);

__attribute__((unused)) static OrgApacheLuceneUtilAutomatonOperations *new_OrgApacheLuceneUtilAutomatonOperations_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static id<JavaUtilSet> OrgApacheLuceneUtilAutomatonOperations_toSetWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *a, jint offset);

__attribute__((unused)) static JavaUtilBitSet *OrgApacheLuceneUtilAutomatonOperations_getLiveStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a);

__attribute__((unused)) static JavaUtilBitSet *OrgApacheLuceneUtilAutomatonOperations_getLiveStatesFromInitialWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a);

__attribute__((unused)) static JavaUtilBitSet *OrgApacheLuceneUtilAutomatonOperations_getLiveStatesToAcceptWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilAutomatonOperations_isFiniteWithOrgApacheLuceneUtilAutomatonTransition_withOrgApacheLuceneUtilAutomatonAutomaton_withInt_withJavaUtilBitSet_withJavaUtilBitSet_(OrgApacheLuceneUtilAutomatonTransition *scratch, OrgApacheLuceneUtilAutomatonAutomaton *a, jint state, JavaUtilBitSet *path, JavaUtilBitSet *visited);

__attribute__((unused)) static void OrgApacheLuceneUtilAutomatonOperations_reverseBytesWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *ref);

__attribute__((unused)) static jint OrgApacheLuceneUtilAutomatonOperations_topoSortStatesRecurseWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaUtilBitSet_withIntArray_withInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *a, JavaUtilBitSet *visited, IOSIntArray *states, jint upto, jint state);

@interface OrgApacheLuceneUtilAutomatonOperations_TransitionList : NSObject {
 @public
  IOSIntArray *transitions_;
  jint next_;
}

- (void)addWithOrgApacheLuceneUtilAutomatonTransition:(OrgApacheLuceneUtilAutomatonTransition *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilAutomatonOperations_TransitionList)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonOperations_TransitionList, transitions_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneUtilAutomatonOperations_TransitionList_init(OrgApacheLuceneUtilAutomatonOperations_TransitionList *self);

__attribute__((unused)) static OrgApacheLuceneUtilAutomatonOperations_TransitionList *new_OrgApacheLuceneUtilAutomatonOperations_TransitionList_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonOperations_TransitionList)

@interface OrgApacheLuceneUtilAutomatonOperations_PointTransitions : NSObject < JavaLangComparable > {
 @public
  jint point_;
  OrgApacheLuceneUtilAutomatonOperations_TransitionList *ends_;
  OrgApacheLuceneUtilAutomatonOperations_TransitionList *starts_;
}

- (jint)compareToWithId:(OrgApacheLuceneUtilAutomatonOperations_PointTransitions *)other;

- (void)resetWithInt:(jint)point;

- (jboolean)isEqual:(id)other;

- (NSUInteger)hash;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilAutomatonOperations_PointTransitions)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonOperations_PointTransitions, ends_, OrgApacheLuceneUtilAutomatonOperations_TransitionList *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonOperations_PointTransitions, starts_, OrgApacheLuceneUtilAutomatonOperations_TransitionList *)

__attribute__((unused)) static void OrgApacheLuceneUtilAutomatonOperations_PointTransitions_init(OrgApacheLuceneUtilAutomatonOperations_PointTransitions *self);

__attribute__((unused)) static OrgApacheLuceneUtilAutomatonOperations_PointTransitions *new_OrgApacheLuceneUtilAutomatonOperations_PointTransitions_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonOperations_PointTransitions)

#define OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_HASHMAP_CUTOVER 30

@interface OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet : NSObject {
 @public
  jint count_;
  IOSObjectArray *points_;
  JavaUtilHashMap *map_;
  jboolean useHash_;
}

- (OrgApacheLuceneUtilAutomatonOperations_PointTransitions *)nextWithInt:(jint)point;

- (OrgApacheLuceneUtilAutomatonOperations_PointTransitions *)findWithInt:(jint)point;

- (void)reset;

- (void)sort;

- (void)addWithOrgApacheLuceneUtilAutomatonTransition:(OrgApacheLuceneUtilAutomatonTransition *)t;

- (NSString *)description;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet, points_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet, map_, JavaUtilHashMap *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet, HASHMAP_CUTOVER, jint)

__attribute__((unused)) static OrgApacheLuceneUtilAutomatonOperations_PointTransitions *OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_nextWithInt_(OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet *self, jint point);

__attribute__((unused)) static OrgApacheLuceneUtilAutomatonOperations_PointTransitions *OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_findWithInt_(OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet *self, jint point);

__attribute__((unused)) static void OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_init(OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet *self);

__attribute__((unused)) static OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet *new_OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet)

@implementation OrgApacheLuceneUtilAutomatonOperations

- (instancetype)init {
  OrgApacheLuceneUtilAutomatonOperations_init(self);
  return self;
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)concatenateWithJavaUtilList:(id<JavaUtilList>)l {
  return OrgApacheLuceneUtilAutomatonOperations_concatenateWithJavaUtilList_(l);
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)optionalWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_optionalWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)repeatWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_repeatWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)repeatWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                                                   withInt:(jint)count {
  return OrgApacheLuceneUtilAutomatonOperations_repeatWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(a, count);
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)repeatWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                                                   withInt:(jint)min
                                                                                   withInt:(jint)max {
  return OrgApacheLuceneUtilAutomatonOperations_repeatWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_withInt_(a, min, max);
}

+ (id<JavaUtilSet>)toSetWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                          withInt:(jint)offset {
  return OrgApacheLuceneUtilAutomatonOperations_toSetWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(a, offset);
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)complementWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                                                       withInt:(jint)maxDeterminizedStates {
  return OrgApacheLuceneUtilAutomatonOperations_complementWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(a, maxDeterminizedStates);
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)intersectionWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a1
                                                       withOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a2 {
  return OrgApacheLuceneUtilAutomatonOperations_intersectionWithOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneUtilAutomatonAutomaton_(a1, a2);
}

+ (jboolean)hasDeadStatesWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_hasDeadStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)union__WithJavaUtilCollection:(id<JavaUtilCollection>)l {
  return OrgApacheLuceneUtilAutomatonOperations_union__WithJavaUtilCollection_(l);
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)determinizeWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                                                        withInt:(jint)maxDeterminizedStates {
  return OrgApacheLuceneUtilAutomatonOperations_determinizeWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(a, maxDeterminizedStates);
}

+ (jboolean)isEmptyWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_isEmptyWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (jboolean)isTotalWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_isTotalWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (jboolean)isTotalWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                     withInt:(jint)minAlphabet
                                                     withInt:(jint)maxAlphabet {
  return OrgApacheLuceneUtilAutomatonOperations_isTotalWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_withInt_(a, minAlphabet, maxAlphabet);
}

+ (JavaUtilBitSet *)getLiveStatesWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_getLiveStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (JavaUtilBitSet *)getLiveStatesFromInitialWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_getLiveStatesFromInitialWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (JavaUtilBitSet *)getLiveStatesToAcceptWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_getLiveStatesToAcceptWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)removeDeadStatesWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_removeDeadStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (jint)findIndexWithInt:(jint)c
            withIntArray:(IOSIntArray *)points {
  return OrgApacheLuceneUtilAutomatonOperations_findIndexWithInt_withIntArray_(c, points);
}

+ (jboolean)isFiniteWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_isFiniteWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (jboolean)isFiniteWithOrgApacheLuceneUtilAutomatonTransition:(OrgApacheLuceneUtilAutomatonTransition *)scratch
                     withOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                       withInt:(jint)state
                                            withJavaUtilBitSet:(JavaUtilBitSet *)path
                                            withJavaUtilBitSet:(JavaUtilBitSet *)visited {
  return OrgApacheLuceneUtilAutomatonOperations_isFiniteWithOrgApacheLuceneUtilAutomatonTransition_withOrgApacheLuceneUtilAutomatonAutomaton_withInt_withJavaUtilBitSet_withJavaUtilBitSet_(scratch, a, state, path, visited);
}

+ (OrgApacheLuceneUtilBytesRef *)getCommonPrefixBytesRefWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_getCommonPrefixBytesRefWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (OrgApacheLuceneUtilIntsRef *)getSingletonWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_getSingletonWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (OrgApacheLuceneUtilBytesRef *)getCommonSuffixBytesRefWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                                                          withInt:(jint)maxDeterminizedStates {
  return OrgApacheLuceneUtilAutomatonOperations_getCommonSuffixBytesRefWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(a, maxDeterminizedStates);
}

+ (void)reverseBytesWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)ref {
  OrgApacheLuceneUtilAutomatonOperations_reverseBytesWithOrgApacheLuceneUtilBytesRef_(ref);
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)reverseWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_reverseWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)reverseWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                                            withJavaUtilSet:(id<JavaUtilSet>)initialStates {
  return OrgApacheLuceneUtilAutomatonOperations_reverseWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaUtilSet_(a, initialStates);
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)totalizeWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_totalizeWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (IOSIntArray *)topoSortStatesWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a {
  return OrgApacheLuceneUtilAutomatonOperations_topoSortStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

+ (jint)topoSortStatesRecurseWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                    withJavaUtilBitSet:(JavaUtilBitSet *)visited
                                                          withIntArray:(IOSIntArray *)states
                                                               withInt:(jint)upto
                                                               withInt:(jint)state {
  return OrgApacheLuceneUtilAutomatonOperations_topoSortStatesRecurseWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaUtilBitSet_withIntArray_withInt_withInt_(a, visited, states, upto, state);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Operations", NULL, 0x2, NULL, NULL },
    { "concatenateWithJavaUtilList:", "concatenate", "Lorg.apache.lucene.util.automaton.Automaton;", 0x9, NULL, NULL },
    { "optionalWithOrgApacheLuceneUtilAutomatonAutomaton:", "optional", "Lorg.apache.lucene.util.automaton.Automaton;", 0x9, NULL, NULL },
    { "repeatWithOrgApacheLuceneUtilAutomatonAutomaton:", "repeat", "Lorg.apache.lucene.util.automaton.Automaton;", 0x9, NULL, NULL },
    { "repeatWithOrgApacheLuceneUtilAutomatonAutomaton:withInt:", "repeat", "Lorg.apache.lucene.util.automaton.Automaton;", 0x9, NULL, NULL },
    { "repeatWithOrgApacheLuceneUtilAutomatonAutomaton:withInt:withInt:", "repeat", "Lorg.apache.lucene.util.automaton.Automaton;", 0x9, NULL, NULL },
    { "toSetWithOrgApacheLuceneUtilAutomatonAutomaton:withInt:", "toSet", "Ljava.util.Set;", 0xa, NULL, NULL },
    { "complementWithOrgApacheLuceneUtilAutomatonAutomaton:withInt:", "complement", "Lorg.apache.lucene.util.automaton.Automaton;", 0x9, NULL, NULL },
    { "intersectionWithOrgApacheLuceneUtilAutomatonAutomaton:withOrgApacheLuceneUtilAutomatonAutomaton:", "intersection", "Lorg.apache.lucene.util.automaton.Automaton;", 0x9, NULL, NULL },
    { "hasDeadStatesWithOrgApacheLuceneUtilAutomatonAutomaton:", "hasDeadStates", "Z", 0x9, NULL, NULL },
    { "union__WithJavaUtilCollection:", "union", "Lorg.apache.lucene.util.automaton.Automaton;", 0x9, NULL, NULL },
    { "determinizeWithOrgApacheLuceneUtilAutomatonAutomaton:withInt:", "determinize", "Lorg.apache.lucene.util.automaton.Automaton;", 0x9, NULL, NULL },
    { "isEmptyWithOrgApacheLuceneUtilAutomatonAutomaton:", "isEmpty", "Z", 0x9, NULL, NULL },
    { "isTotalWithOrgApacheLuceneUtilAutomatonAutomaton:", "isTotal", "Z", 0x9, NULL, NULL },
    { "isTotalWithOrgApacheLuceneUtilAutomatonAutomaton:withInt:withInt:", "isTotal", "Z", 0x9, NULL, NULL },
    { "getLiveStatesWithOrgApacheLuceneUtilAutomatonAutomaton:", "getLiveStates", "Ljava.util.BitSet;", 0xa, NULL, NULL },
    { "getLiveStatesFromInitialWithOrgApacheLuceneUtilAutomatonAutomaton:", "getLiveStatesFromInitial", "Ljava.util.BitSet;", 0xa, NULL, NULL },
    { "getLiveStatesToAcceptWithOrgApacheLuceneUtilAutomatonAutomaton:", "getLiveStatesToAccept", "Ljava.util.BitSet;", 0xa, NULL, NULL },
    { "removeDeadStatesWithOrgApacheLuceneUtilAutomatonAutomaton:", "removeDeadStates", "Lorg.apache.lucene.util.automaton.Automaton;", 0x9, NULL, NULL },
    { "findIndexWithInt:withIntArray:", "findIndex", "I", 0x8, NULL, NULL },
    { "isFiniteWithOrgApacheLuceneUtilAutomatonAutomaton:", "isFinite", "Z", 0x9, NULL, NULL },
    { "isFiniteWithOrgApacheLuceneUtilAutomatonTransition:withOrgApacheLuceneUtilAutomatonAutomaton:withInt:withJavaUtilBitSet:withJavaUtilBitSet:", "isFinite", "Z", 0xa, NULL, NULL },
    { "getCommonPrefixBytesRefWithOrgApacheLuceneUtilAutomatonAutomaton:", "getCommonPrefixBytesRef", "Lorg.apache.lucene.util.BytesRef;", 0x9, NULL, NULL },
    { "getSingletonWithOrgApacheLuceneUtilAutomatonAutomaton:", "getSingleton", "Lorg.apache.lucene.util.IntsRef;", 0x9, NULL, NULL },
    { "getCommonSuffixBytesRefWithOrgApacheLuceneUtilAutomatonAutomaton:withInt:", "getCommonSuffixBytesRef", "Lorg.apache.lucene.util.BytesRef;", 0x9, NULL, NULL },
    { "reverseBytesWithOrgApacheLuceneUtilBytesRef:", "reverseBytes", "V", 0xa, NULL, NULL },
    { "reverseWithOrgApacheLuceneUtilAutomatonAutomaton:", "reverse", "Lorg.apache.lucene.util.automaton.Automaton;", 0x9, NULL, NULL },
    { "reverseWithOrgApacheLuceneUtilAutomatonAutomaton:withJavaUtilSet:", "reverse", "Lorg.apache.lucene.util.automaton.Automaton;", 0x8, NULL, NULL },
    { "totalizeWithOrgApacheLuceneUtilAutomatonAutomaton:", "totalize", "Lorg.apache.lucene.util.automaton.Automaton;", 0x8, NULL, NULL },
    { "topoSortStatesWithOrgApacheLuceneUtilAutomatonAutomaton:", "topoSortStates", "[I", 0x9, NULL, NULL },
    { "topoSortStatesRecurseWithOrgApacheLuceneUtilAutomatonAutomaton:withJavaUtilBitSet:withIntArray:withInt:withInt:", "topoSortStatesRecurse", "I", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_MAX_DETERMINIZED_STATES", "DEFAULT_MAX_DETERMINIZED_STATES", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneUtilAutomatonOperations_DEFAULT_MAX_DETERMINIZED_STATES },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.util.automaton.Operations$TransitionList;", "Lorg.apache.lucene.util.automaton.Operations$PointTransitions;", "Lorg.apache.lucene.util.automaton.Operations$PointTransitionSet;"};
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonOperations = { 2, "Operations", "org.apache.lucene.util.automaton", NULL, 0x11, 31, methods, 1, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneUtilAutomatonOperations;
}

@end

void OrgApacheLuceneUtilAutomatonOperations_init(OrgApacheLuceneUtilAutomatonOperations *self) {
  NSObject_init(self);
}

OrgApacheLuceneUtilAutomatonOperations *new_OrgApacheLuceneUtilAutomatonOperations_init() {
  OrgApacheLuceneUtilAutomatonOperations *self = [OrgApacheLuceneUtilAutomatonOperations alloc];
  OrgApacheLuceneUtilAutomatonOperations_init(self);
  return self;
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonOperations_concatenateWithJavaUtilList_(id<JavaUtilList> l) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  OrgApacheLuceneUtilAutomatonAutomaton *result = [new_OrgApacheLuceneUtilAutomatonAutomaton_init() autorelease];
  for (OrgApacheLuceneUtilAutomatonAutomaton * __strong a in nil_chk(l)) {
    if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates] == 0) {
      [result finishState];
      return result;
    }
    jint numStates = [a getNumStates];
    for (jint s = 0; s < numStates; s++) {
      [result createState];
    }
  }
  jint stateOffset = 0;
  OrgApacheLuceneUtilAutomatonTransition *t = [new_OrgApacheLuceneUtilAutomatonTransition_init() autorelease];
  for (jint i = 0; i < [l size]; i++) {
    OrgApacheLuceneUtilAutomatonAutomaton *a = [l getWithInt:i];
    jint numStates = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates];
    OrgApacheLuceneUtilAutomatonAutomaton *nextA = (i == [l size] - 1) ? nil : [l getWithInt:i + 1];
    for (jint s = 0; s < numStates; s++) {
      jint numTransitions = [a initTransitionWithInt:s withOrgApacheLuceneUtilAutomatonTransition:t];
      for (jint j = 0; j < numTransitions; j++) {
        [a getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
        [result addTransitionWithInt:stateOffset + s withInt:stateOffset + t->dest_ withInt:t->min_ withInt:t->max_];
      }
      if ([a isAcceptWithInt:s]) {
        OrgApacheLuceneUtilAutomatonAutomaton *followA = nextA;
        jint followOffset = stateOffset;
        jint upto = i + 1;
        while (YES) {
          if (followA != nil) {
            numTransitions = [followA initTransitionWithInt:0 withOrgApacheLuceneUtilAutomatonTransition:t];
            for (jint j = 0; j < numTransitions; j++) {
              [followA getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
              [result addTransitionWithInt:stateOffset + s withInt:followOffset + numStates + t->dest_ withInt:t->min_ withInt:t->max_];
            }
            if ([followA isAcceptWithInt:0]) {
              followOffset += [followA getNumStates];
              followA = (upto == [l size] - 1) ? nil : [l getWithInt:upto + 1];
              upto++;
            }
            else {
              break;
            }
          }
          else {
            [result setAcceptWithInt:stateOffset + s withBoolean:YES];
            break;
          }
        }
      }
    }
    stateOffset += numStates;
  }
  if ([result getNumStates] == 0) {
    [result createState];
  }
  [result finishState];
  return result;
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonOperations_optionalWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  OrgApacheLuceneUtilAutomatonAutomaton *result = [new_OrgApacheLuceneUtilAutomatonAutomaton_init() autorelease];
  [result createState];
  [result setAcceptWithInt:0 withBoolean:YES];
  if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates] > 0) {
    [result copy__WithOrgApacheLuceneUtilAutomatonAutomaton:a];
    [result addEpsilonWithInt:0 withInt:1];
  }
  [result finishState];
  return result;
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonOperations_repeatWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates] == 0) {
    return a;
  }
  OrgApacheLuceneUtilAutomatonAutomaton_Builder *builder = [new_OrgApacheLuceneUtilAutomatonAutomaton_Builder_init() autorelease];
  [builder createState];
  [builder setAcceptWithInt:0 withBoolean:YES];
  [builder copy__WithOrgApacheLuceneUtilAutomatonAutomaton:a];
  OrgApacheLuceneUtilAutomatonTransition *t = [new_OrgApacheLuceneUtilAutomatonTransition_init() autorelease];
  jint count = [a initTransitionWithInt:0 withOrgApacheLuceneUtilAutomatonTransition:t];
  for (jint i = 0; i < count; i++) {
    [a getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
    [builder addTransitionWithInt:0 withInt:t->dest_ + 1 withInt:t->min_ withInt:t->max_];
  }
  jint numStates = [a getNumStates];
  for (jint s = 0; s < numStates; s++) {
    if ([a isAcceptWithInt:s]) {
      count = [a initTransitionWithInt:0 withOrgApacheLuceneUtilAutomatonTransition:t];
      for (jint i = 0; i < count; i++) {
        [a getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
        [builder addTransitionWithInt:s + 1 withInt:t->dest_ + 1 withInt:t->min_ withInt:t->max_];
      }
    }
  }
  return [builder finish];
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonOperations_repeatWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *a, jint count) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  if (count == 0) {
    return OrgApacheLuceneUtilAutomatonOperations_repeatWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
  }
  id<JavaUtilList> as = [new_JavaUtilArrayList_init() autorelease];
  while (count-- > 0) {
    [as addWithId:a];
  }
  [as addWithId:OrgApacheLuceneUtilAutomatonOperations_repeatWithOrgApacheLuceneUtilAutomatonAutomaton_(a)];
  return OrgApacheLuceneUtilAutomatonOperations_concatenateWithJavaUtilList_(as);
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonOperations_repeatWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *a, jint min, jint max) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  if (min > max) {
    return OrgApacheLuceneUtilAutomatonAutomata_makeEmpty();
  }
  OrgApacheLuceneUtilAutomatonAutomaton *b;
  if (min == 0) {
    b = OrgApacheLuceneUtilAutomatonAutomata_makeEmptyString();
  }
  else if (min == 1) {
    b = [new_OrgApacheLuceneUtilAutomatonAutomaton_init() autorelease];
    [b copy__WithOrgApacheLuceneUtilAutomatonAutomaton:a];
  }
  else {
    id<JavaUtilList> as = [new_JavaUtilArrayList_init() autorelease];
    for (jint i = 0; i < min; i++) {
      [as addWithId:a];
    }
    b = OrgApacheLuceneUtilAutomatonOperations_concatenateWithJavaUtilList_(as);
  }
  id<JavaUtilSet> prevAcceptStates = OrgApacheLuceneUtilAutomatonOperations_toSetWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(b, 0);
  OrgApacheLuceneUtilAutomatonAutomaton_Builder *builder = [new_OrgApacheLuceneUtilAutomatonAutomaton_Builder_init() autorelease];
  [builder copy__WithOrgApacheLuceneUtilAutomatonAutomaton:b];
  for (jint i = min; i < max; i++) {
    jint numStates = [builder getNumStates];
    [builder copy__WithOrgApacheLuceneUtilAutomatonAutomaton:a];
    for (JavaLangInteger *boxed__ in nil_chk(prevAcceptStates)) {
      jint s = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      [builder addEpsilonWithInt:s withInt:numStates];
    }
    prevAcceptStates = OrgApacheLuceneUtilAutomatonOperations_toSetWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(a, numStates);
  }
  return [builder finish];
}

id<JavaUtilSet> OrgApacheLuceneUtilAutomatonOperations_toSetWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *a, jint offset) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  jint numStates = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates];
  JavaUtilBitSet *isAccept = [a getAcceptStates];
  id<JavaUtilSet> result = [new_JavaUtilHashSet_init() autorelease];
  jint upto = 0;
  while (upto < numStates && (upto = [((JavaUtilBitSet *) nil_chk(isAccept)) nextSetBitWithInt:upto]) != -1) {
    [result addWithId:JavaLangInteger_valueOfWithInt_(offset + upto)];
    upto++;
  }
  return result;
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonOperations_complementWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *a, jint maxDeterminizedStates) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  a = OrgApacheLuceneUtilAutomatonOperations_totalizeWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonOperations_determinizeWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(a, maxDeterminizedStates));
  jint numStates = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates];
  for (jint p = 0; p < numStates; p++) {
    [a setAcceptWithInt:p withBoolean:![a isAcceptWithInt:p]];
  }
  return OrgApacheLuceneUtilAutomatonOperations_removeDeadStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonOperations_intersectionWithOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a1, OrgApacheLuceneUtilAutomatonAutomaton *a2) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  if (a1 == a2) {
    return a1;
  }
  if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a1)) getNumStates] == 0) {
    return a1;
  }
  if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a2)) getNumStates] == 0) {
    return a2;
  }
  IOSObjectArray *transitions1 = [a1 getSortedTransitions];
  IOSObjectArray *transitions2 = [a2 getSortedTransitions];
  OrgApacheLuceneUtilAutomatonAutomaton *c = [new_OrgApacheLuceneUtilAutomatonAutomaton_init() autorelease];
  [c createState];
  JavaUtilLinkedList *worklist = [new_JavaUtilLinkedList_init() autorelease];
  JavaUtilHashMap *newstates = [new_JavaUtilHashMap_init() autorelease];
  OrgApacheLuceneUtilAutomatonStatePair *p = [new_OrgApacheLuceneUtilAutomatonStatePair_initWithInt_withInt_withInt_(0, 0, 0) autorelease];
  [worklist addWithId:p];
  [newstates putWithId:p withId:p];
  while ([worklist size] > 0) {
    p = [worklist removeFirst];
    [c setAcceptWithInt:((OrgApacheLuceneUtilAutomatonStatePair *) nil_chk(p))->s_ withBoolean:[a1 isAcceptWithInt:p->s1_] && [a2 isAcceptWithInt:p->s2_]];
    IOSObjectArray *t1 = IOSObjectArray_Get(nil_chk(transitions1), p->s1_);
    IOSObjectArray *t2 = IOSObjectArray_Get(nil_chk(transitions2), p->s2_);
    for (jint n1 = 0, b2 = 0; n1 < ((IOSObjectArray *) nil_chk(t1))->size_; n1++) {
      while (b2 < ((IOSObjectArray *) nil_chk(t2))->size_ && ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t2, b2)))->max_ < ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t1, n1)))->min_) b2++;
      for (jint n2 = b2; n2 < t2->size_ && ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t1, n1)))->max_ >= ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t2, n2)))->min_; n2++) if (((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t2, n2)))->max_ >= ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t1, n1)))->min_) {
        OrgApacheLuceneUtilAutomatonStatePair *q = [new_OrgApacheLuceneUtilAutomatonStatePair_initWithInt_withInt_(((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t1, n1)))->dest_, ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t2, n2)))->dest_) autorelease];
        OrgApacheLuceneUtilAutomatonStatePair *r = [newstates getWithId:q];
        if (r == nil) {
          q->s_ = [c createState];
          [worklist addWithId:q];
          [newstates putWithId:q withId:q];
          r = q;
        }
        jint min = ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t1, n1)))->min_ > ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t2, n2)))->min_ ? ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t1, n1)))->min_ : ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t2, n2)))->min_;
        jint max = ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t1, n1)))->max_ < ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t2, n2)))->max_ ? ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t1, n1)))->max_ : ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(IOSObjectArray_Get(t2, n2)))->max_;
        [c addTransitionWithInt:p->s_ withInt:((OrgApacheLuceneUtilAutomatonStatePair *) nil_chk(r))->s_ withInt:min withInt:max];
      }
    }
  }
  [c finishState];
  return OrgApacheLuceneUtilAutomatonOperations_removeDeadStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(c);
}

jboolean OrgApacheLuceneUtilAutomatonOperations_hasDeadStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  JavaUtilBitSet *liveStates = OrgApacheLuceneUtilAutomatonOperations_getLiveStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
  jint numLive = [((JavaUtilBitSet *) nil_chk(liveStates)) cardinality];
  jint numStates = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates];
  JreAssert((numLive <= numStates), (JreStrcat("$I$IC@", @"numLive=", numLive, @" numStates=", numStates, ' ', liveStates)));
  return numLive < numStates;
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonOperations_union__WithJavaUtilCollection_(id<JavaUtilCollection> l) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  OrgApacheLuceneUtilAutomatonAutomaton *result = [new_OrgApacheLuceneUtilAutomatonAutomaton_init() autorelease];
  [result createState];
  for (OrgApacheLuceneUtilAutomatonAutomaton * __strong a in nil_chk(l)) {
    [result copy__WithOrgApacheLuceneUtilAutomatonAutomaton:a];
  }
  jint stateOffset = 1;
  for (OrgApacheLuceneUtilAutomatonAutomaton * __strong a in l) {
    if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates] == 0) {
      continue;
    }
    [result addEpsilonWithInt:0 withInt:stateOffset];
    stateOffset += [a getNumStates];
  }
  [result finishState];
  return OrgApacheLuceneUtilAutomatonOperations_removeDeadStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(result);
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonOperations_determinizeWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *a, jint maxDeterminizedStates) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) isDeterministic]) {
    return a;
  }
  if ([a getNumStates] <= 1) {
    return a;
  }
  OrgApacheLuceneUtilAutomatonAutomaton_Builder *b = [new_OrgApacheLuceneUtilAutomatonAutomaton_Builder_init() autorelease];
  OrgApacheLuceneUtilAutomatonSortedIntSet_FrozenIntSet *initialset = [new_OrgApacheLuceneUtilAutomatonSortedIntSet_FrozenIntSet_initWithInt_withInt_(0, 0) autorelease];
  [b createState];
  JavaUtilLinkedList *worklist = [new_JavaUtilLinkedList_init() autorelease];
  id<JavaUtilMap> newstate = [new_JavaUtilHashMap_init() autorelease];
  [worklist addWithId:initialset];
  [b setAcceptWithInt:0 withBoolean:[a isAcceptWithInt:0]];
  [newstate putWithId:initialset withId:JavaLangInteger_valueOfWithInt_(0)];
  OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet *points = [new_OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_init() autorelease];
  OrgApacheLuceneUtilAutomatonSortedIntSet *statesSet = [new_OrgApacheLuceneUtilAutomatonSortedIntSet_initWithInt_(5) autorelease];
  OrgApacheLuceneUtilAutomatonTransition *t = [new_OrgApacheLuceneUtilAutomatonTransition_init() autorelease];
  while ([worklist size] > 0) {
    OrgApacheLuceneUtilAutomatonSortedIntSet_FrozenIntSet *s = [worklist removeFirst];
    for (jint i = 0; i < ((IOSIntArray *) nil_chk(((OrgApacheLuceneUtilAutomatonSortedIntSet_FrozenIntSet *) nil_chk(s))->values_))->size_; i++) {
      jint s0 = IOSIntArray_Get(s->values_, i);
      jint numTransitions = [a getNumTransitionsWithInt:s0];
      [a initTransitionWithInt:s0 withOrgApacheLuceneUtilAutomatonTransition:t];
      for (jint j = 0; j < numTransitions; j++) {
        [a getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
        [points addWithOrgApacheLuceneUtilAutomatonTransition:t];
      }
    }
    if (points->count_ == 0) {
      continue;
    }
    [points sort];
    jint lastPoint = -1;
    jint accCount = 0;
    jint r = s->state_;
    for (jint i = 0; i < points->count_; i++) {
      jint point = ((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(IOSObjectArray_Get(nil_chk(points->points_), i)))->point_;
      if (statesSet->upto_ > 0) {
        JreAssert((lastPoint != -1), (@"org/apache/lucene/util/automaton/Operations.java:735 condition failed: assert lastPoint != -1;"));
        [statesSet computeHash];
        JavaLangInteger *q = [newstate getWithId:statesSet];
        if (q == nil) {
          q = JavaLangInteger_valueOfWithInt_([b createState]);
          if ([q intValue] >= maxDeterminizedStates) {
            @throw [new_OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_initWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(a, maxDeterminizedStates) autorelease];
          }
          OrgApacheLuceneUtilAutomatonSortedIntSet_FrozenIntSet *p = [statesSet freezeWithInt:[q intValue]];
          [worklist addWithId:p];
          [b setAcceptWithInt:[q intValue] withBoolean:accCount > 0];
          [newstate putWithId:p withId:q];
        }
        else {
          JreAssert(((accCount > 0 ? YES : NO) == [b isAcceptWithInt:[q intValue]]), (JreStrcat("$I$Z$@", @"accCount=", accCount, @" vs existing accept=", [b isAcceptWithInt:[q intValue]], @" states=", statesSet)));
        }
        [b addTransitionWithInt:r withInt:[((JavaLangInteger *) nil_chk(q)) intValue] withInt:lastPoint withInt:point - 1];
      }
      IOSIntArray *transitions = ((OrgApacheLuceneUtilAutomatonOperations_TransitionList *) nil_chk(((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(IOSObjectArray_Get(points->points_, i)))->ends_))->transitions_;
      jint limit = ((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(IOSObjectArray_Get(points->points_, i)))->ends_->next_;
      for (jint j = 0; j < limit; j += 3) {
        jint dest = IOSIntArray_Get(nil_chk(transitions), j);
        [statesSet decrWithInt:dest];
        accCount -= [a isAcceptWithInt:dest] ? 1 : 0;
      }
      ((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(IOSObjectArray_Get(points->points_, i)))->ends_->next_ = 0;
      transitions = ((OrgApacheLuceneUtilAutomatonOperations_TransitionList *) nil_chk(((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(IOSObjectArray_Get(points->points_, i)))->starts_))->transitions_;
      limit = ((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(IOSObjectArray_Get(points->points_, i)))->starts_->next_;
      for (jint j = 0; j < limit; j += 3) {
        jint dest = IOSIntArray_Get(nil_chk(transitions), j);
        [statesSet incrWithInt:dest];
        accCount += [a isAcceptWithInt:dest] ? 1 : 0;
      }
      lastPoint = point;
      ((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(IOSObjectArray_Get(points->points_, i)))->starts_->next_ = 0;
    }
    [points reset];
    JreAssert((statesSet->upto_ == 0), (JreStrcat("$I", @"upto=", statesSet->upto_)));
  }
  OrgApacheLuceneUtilAutomatonAutomaton *result = [b finish];
  JreAssert(([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(result)) isDeterministic]), (@"org/apache/lucene/util/automaton/Operations.java:788 condition failed: assert result.isDeterministic();"));
  return result;
}

jboolean OrgApacheLuceneUtilAutomatonOperations_isEmptyWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates] == 0) {
    return YES;
  }
  if ([a isAcceptWithInt:0] == NO && [a getNumTransitionsWithInt:0] == 0) {
    return YES;
  }
  if ([a isAcceptWithInt:0] == YES) {
    return NO;
  }
  JavaUtilLinkedList *workList = [new_JavaUtilLinkedList_init() autorelease];
  JavaUtilBitSet *seen = [new_JavaUtilBitSet_initWithInt_([a getNumStates]) autorelease];
  [workList addWithId:JavaLangInteger_valueOfWithInt_(0)];
  [seen setWithInt:0];
  OrgApacheLuceneUtilAutomatonTransition *t = [new_OrgApacheLuceneUtilAutomatonTransition_init() autorelease];
  while ([workList isEmpty] == NO) {
    jint state = [((JavaLangInteger *) nil_chk([workList removeFirst])) intValue];
    if ([a isAcceptWithInt:state]) {
      return NO;
    }
    jint count = [a initTransitionWithInt:state withOrgApacheLuceneUtilAutomatonTransition:t];
    for (jint i = 0; i < count; i++) {
      [a getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
      if ([seen getWithInt:t->dest_] == NO) {
        [workList addWithId:JavaLangInteger_valueOfWithInt_(t->dest_)];
        [seen setWithInt:t->dest_];
      }
    }
  }
  return YES;
}

jboolean OrgApacheLuceneUtilAutomatonOperations_isTotalWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  return OrgApacheLuceneUtilAutomatonOperations_isTotalWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_withInt_(a, JavaLangCharacter_MIN_CODE_POINT, JavaLangCharacter_MAX_CODE_POINT);
}

jboolean OrgApacheLuceneUtilAutomatonOperations_isTotalWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *a, jint minAlphabet, jint maxAlphabet) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) isAcceptWithInt:0] && [a getNumTransitionsWithInt:0] == 1) {
    OrgApacheLuceneUtilAutomatonTransition *t = [new_OrgApacheLuceneUtilAutomatonTransition_init() autorelease];
    [a getTransitionWithInt:0 withInt:0 withOrgApacheLuceneUtilAutomatonTransition:t];
    return t->dest_ == 0 && t->min_ == minAlphabet && t->max_ == maxAlphabet;
  }
  return NO;
}

JavaUtilBitSet *OrgApacheLuceneUtilAutomatonOperations_getLiveStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  JavaUtilBitSet *live = OrgApacheLuceneUtilAutomatonOperations_getLiveStatesFromInitialWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
  [((JavaUtilBitSet *) nil_chk(live)) and__WithJavaUtilBitSet:OrgApacheLuceneUtilAutomatonOperations_getLiveStatesToAcceptWithOrgApacheLuceneUtilAutomatonAutomaton_(a)];
  return live;
}

JavaUtilBitSet *OrgApacheLuceneUtilAutomatonOperations_getLiveStatesFromInitialWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  jint numStates = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates];
  JavaUtilBitSet *live = [new_JavaUtilBitSet_initWithInt_(numStates) autorelease];
  if (numStates == 0) {
    return live;
  }
  JavaUtilLinkedList *workList = [new_JavaUtilLinkedList_init() autorelease];
  [live setWithInt:0];
  [workList addWithId:JavaLangInteger_valueOfWithInt_(0)];
  OrgApacheLuceneUtilAutomatonTransition *t = [new_OrgApacheLuceneUtilAutomatonTransition_init() autorelease];
  while ([workList isEmpty] == NO) {
    jint s = [((JavaLangInteger *) nil_chk([workList removeFirst])) intValue];
    jint count = [a initTransitionWithInt:s withOrgApacheLuceneUtilAutomatonTransition:t];
    for (jint i = 0; i < count; i++) {
      [a getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
      if ([live getWithInt:t->dest_] == NO) {
        [live setWithInt:t->dest_];
        [workList addWithId:JavaLangInteger_valueOfWithInt_(t->dest_)];
      }
    }
  }
  return live;
}

JavaUtilBitSet *OrgApacheLuceneUtilAutomatonOperations_getLiveStatesToAcceptWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  OrgApacheLuceneUtilAutomatonAutomaton_Builder *builder = [new_OrgApacheLuceneUtilAutomatonAutomaton_Builder_init() autorelease];
  OrgApacheLuceneUtilAutomatonTransition *t = [new_OrgApacheLuceneUtilAutomatonTransition_init() autorelease];
  jint numStates = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates];
  for (jint s = 0; s < numStates; s++) {
    [builder createState];
  }
  for (jint s = 0; s < numStates; s++) {
    jint count = [a initTransitionWithInt:s withOrgApacheLuceneUtilAutomatonTransition:t];
    for (jint i = 0; i < count; i++) {
      [a getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
      [builder addTransitionWithInt:t->dest_ withInt:s withInt:t->min_ withInt:t->max_];
    }
  }
  OrgApacheLuceneUtilAutomatonAutomaton *a2 = [builder finish];
  JavaUtilLinkedList *workList = [new_JavaUtilLinkedList_init() autorelease];
  JavaUtilBitSet *live = [new_JavaUtilBitSet_initWithInt_(numStates) autorelease];
  JavaUtilBitSet *acceptBits = [a getAcceptStates];
  jint s = 0;
  while (s < numStates && (s = [((JavaUtilBitSet *) nil_chk(acceptBits)) nextSetBitWithInt:s]) != -1) {
    [live setWithInt:s];
    [workList addWithId:JavaLangInteger_valueOfWithInt_(s)];
    s++;
  }
  while ([workList isEmpty] == NO) {
    s = [((JavaLangInteger *) nil_chk([workList removeFirst])) intValue];
    jint count = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a2)) initTransitionWithInt:s withOrgApacheLuceneUtilAutomatonTransition:t];
    for (jint i = 0; i < count; i++) {
      [a2 getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
      if ([live getWithInt:t->dest_] == NO) {
        [live setWithInt:t->dest_];
        [workList addWithId:JavaLangInteger_valueOfWithInt_(t->dest_)];
      }
    }
  }
  return live;
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonOperations_removeDeadStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  jint numStates = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates];
  JavaUtilBitSet *liveSet = OrgApacheLuceneUtilAutomatonOperations_getLiveStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(a);
  IOSIntArray *map = [IOSIntArray arrayWithLength:numStates];
  OrgApacheLuceneUtilAutomatonAutomaton *result = [new_OrgApacheLuceneUtilAutomatonAutomaton_init() autorelease];
  for (jint i = 0; i < numStates; i++) {
    if ([((JavaUtilBitSet *) nil_chk(liveSet)) getWithInt:i]) {
      *IOSIntArray_GetRef(map, i) = [result createState];
      [result setAcceptWithInt:IOSIntArray_Get(map, i) withBoolean:[a isAcceptWithInt:i]];
    }
  }
  OrgApacheLuceneUtilAutomatonTransition *t = [new_OrgApacheLuceneUtilAutomatonTransition_init() autorelease];
  for (jint i = 0; i < numStates; i++) {
    if ([((JavaUtilBitSet *) nil_chk(liveSet)) getWithInt:i]) {
      jint numTransitions = [a initTransitionWithInt:i withOrgApacheLuceneUtilAutomatonTransition:t];
      for (jint j = 0; j < numTransitions; j++) {
        [a getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
        if ([liveSet getWithInt:t->dest_]) {
          [result addTransitionWithInt:IOSIntArray_Get(map, i) withInt:IOSIntArray_Get(map, t->dest_) withInt:t->min_ withInt:t->max_];
        }
      }
    }
  }
  [result finishState];
  JreAssert((OrgApacheLuceneUtilAutomatonOperations_hasDeadStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(result) == NO), (@"org/apache/lucene/util/automaton/Operations.java:1011 condition failed: assert hasDeadStates(result) == false;"));
  return result;
}

jint OrgApacheLuceneUtilAutomatonOperations_findIndexWithInt_withIntArray_(jint c, IOSIntArray *points) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  jint a = 0;
  jint b = ((IOSIntArray *) nil_chk(points))->size_;
  while (b - a > 1) {
    jint d = JreURShift32((a + b), 1);
    if (IOSIntArray_Get(points, d) > c) b = d;
    else if (IOSIntArray_Get(points, d) < c) a = d;
    else return d;
  }
  return a;
}

jboolean OrgApacheLuceneUtilAutomatonOperations_isFiniteWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates] == 0) {
    return YES;
  }
  return OrgApacheLuceneUtilAutomatonOperations_isFiniteWithOrgApacheLuceneUtilAutomatonTransition_withOrgApacheLuceneUtilAutomatonAutomaton_withInt_withJavaUtilBitSet_withJavaUtilBitSet_([new_OrgApacheLuceneUtilAutomatonTransition_init() autorelease], a, 0, [new_JavaUtilBitSet_initWithInt_([a getNumStates]) autorelease], [new_JavaUtilBitSet_initWithInt_([a getNumStates]) autorelease]);
}

jboolean OrgApacheLuceneUtilAutomatonOperations_isFiniteWithOrgApacheLuceneUtilAutomatonTransition_withOrgApacheLuceneUtilAutomatonAutomaton_withInt_withJavaUtilBitSet_withJavaUtilBitSet_(OrgApacheLuceneUtilAutomatonTransition *scratch, OrgApacheLuceneUtilAutomatonAutomaton *a, jint state, JavaUtilBitSet *path, JavaUtilBitSet *visited) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  [((JavaUtilBitSet *) nil_chk(path)) setWithInt:state];
  jint numTransitions = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) initTransitionWithInt:state withOrgApacheLuceneUtilAutomatonTransition:scratch];
  for (jint t = 0; t < numTransitions; t++) {
    [a getTransitionWithInt:state withInt:t withOrgApacheLuceneUtilAutomatonTransition:scratch];
    if ([path getWithInt:((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(scratch))->dest_] || (![((JavaUtilBitSet *) nil_chk(visited)) getWithInt:scratch->dest_] && !OrgApacheLuceneUtilAutomatonOperations_isFiniteWithOrgApacheLuceneUtilAutomatonTransition_withOrgApacheLuceneUtilAutomatonAutomaton_withInt_withJavaUtilBitSet_withJavaUtilBitSet_(scratch, a, scratch->dest_, path, visited))) {
      return NO;
    }
  }
  [path clearWithInt:state];
  [((JavaUtilBitSet *) nil_chk(visited)) setWithInt:state];
  return YES;
}

OrgApacheLuceneUtilBytesRef *OrgApacheLuceneUtilAutomatonOperations_getCommonPrefixBytesRefWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  OrgApacheLuceneUtilBytesRefBuilder *builder = [new_OrgApacheLuceneUtilBytesRefBuilder_init() autorelease];
  JavaUtilHashSet *visited = [new_JavaUtilHashSet_init() autorelease];
  jint s = 0;
  jboolean done;
  OrgApacheLuceneUtilAutomatonTransition *t = [new_OrgApacheLuceneUtilAutomatonTransition_init() autorelease];
  do {
    done = YES;
    [visited addWithId:JavaLangInteger_valueOfWithInt_(s)];
    if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) isAcceptWithInt:s] == NO && [a getNumTransitionsWithInt:s] == 1) {
      [a getTransitionWithInt:s withInt:0 withOrgApacheLuceneUtilAutomatonTransition:t];
      if (t->min_ == t->max_ && ![visited containsWithId:JavaLangInteger_valueOfWithInt_(t->dest_)]) {
        [builder appendWithByte:(jbyte) t->min_];
        s = t->dest_;
        done = NO;
      }
    }
  }
  while (!done);
  return [builder get];
}

OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilAutomatonOperations_getSingletonWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) isDeterministic] == NO) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"input automaton must be deterministic") autorelease];
  }
  OrgApacheLuceneUtilIntsRefBuilder *builder = [new_OrgApacheLuceneUtilIntsRefBuilder_init() autorelease];
  JavaUtilHashSet *visited = [new_JavaUtilHashSet_init() autorelease];
  jint s = 0;
  OrgApacheLuceneUtilAutomatonTransition *t = [new_OrgApacheLuceneUtilAutomatonTransition_init() autorelease];
  while (YES) {
    [visited addWithId:JavaLangInteger_valueOfWithInt_(s)];
    if ([a isAcceptWithInt:s] == NO) {
      if ([a getNumTransitionsWithInt:s] == 1) {
        [a getTransitionWithInt:s withInt:0 withOrgApacheLuceneUtilAutomatonTransition:t];
        if (t->min_ == t->max_ && ![visited containsWithId:JavaLangInteger_valueOfWithInt_(t->dest_)]) {
          [builder appendWithInt:t->min_];
          s = t->dest_;
          continue;
        }
      }
    }
    else if ([a getNumTransitionsWithInt:s] == 0) {
      return [builder get];
    }
    return nil;
  }
}

OrgApacheLuceneUtilBytesRef *OrgApacheLuceneUtilAutomatonOperations_getCommonSuffixBytesRefWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *a, jint maxDeterminizedStates) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  OrgApacheLuceneUtilAutomatonAutomaton *r = OrgApacheLuceneUtilAutomatonOperations_determinizeWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(OrgApacheLuceneUtilAutomatonOperations_reverseWithOrgApacheLuceneUtilAutomatonAutomaton_(a), maxDeterminizedStates);
  OrgApacheLuceneUtilBytesRef *ref = OrgApacheLuceneUtilAutomatonOperations_getCommonPrefixBytesRefWithOrgApacheLuceneUtilAutomatonAutomaton_(r);
  OrgApacheLuceneUtilAutomatonOperations_reverseBytesWithOrgApacheLuceneUtilBytesRef_(ref);
  return ref;
}

void OrgApacheLuceneUtilAutomatonOperations_reverseBytesWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *ref) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  if (((OrgApacheLuceneUtilBytesRef *) nil_chk(ref))->length_ <= 1) return;
  jint num = JreRShift32(ref->length_, 1);
  for (jint i = ref->offset_; i < (ref->offset_ + num); i++) {
    jbyte b = IOSByteArray_Get(nil_chk(ref->bytes_), i);
    *IOSByteArray_GetRef(ref->bytes_, i) = IOSByteArray_Get(ref->bytes_, ref->offset_ * 2 + ref->length_ - i - 1);
    *IOSByteArray_GetRef(ref->bytes_, ref->offset_ * 2 + ref->length_ - i - 1) = b;
  }
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonOperations_reverseWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  return OrgApacheLuceneUtilAutomatonOperations_reverseWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaUtilSet_(a, nil);
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonOperations_reverseWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaUtilSet_(OrgApacheLuceneUtilAutomatonAutomaton *a, id<JavaUtilSet> initialStates) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  if (OrgApacheLuceneUtilAutomatonOperations_isEmptyWithOrgApacheLuceneUtilAutomatonAutomaton_(a)) {
    return [new_OrgApacheLuceneUtilAutomatonAutomaton_init() autorelease];
  }
  jint numStates = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates];
  OrgApacheLuceneUtilAutomatonAutomaton_Builder *builder = [new_OrgApacheLuceneUtilAutomatonAutomaton_Builder_init() autorelease];
  [builder createState];
  for (jint s = 0; s < numStates; s++) {
    [builder createState];
  }
  [builder setAcceptWithInt:1 withBoolean:YES];
  OrgApacheLuceneUtilAutomatonTransition *t = [new_OrgApacheLuceneUtilAutomatonTransition_init() autorelease];
  for (jint s = 0; s < numStates; s++) {
    jint numTransitions = [a getNumTransitionsWithInt:s];
    [a initTransitionWithInt:s withOrgApacheLuceneUtilAutomatonTransition:t];
    for (jint i = 0; i < numTransitions; i++) {
      [a getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
      [builder addTransitionWithInt:t->dest_ + 1 withInt:s + 1 withInt:t->min_ withInt:t->max_];
    }
  }
  OrgApacheLuceneUtilAutomatonAutomaton *result = [builder finish];
  jint s = 0;
  JavaUtilBitSet *acceptStates = [a getAcceptStates];
  while (s < numStates && (s = [((JavaUtilBitSet *) nil_chk(acceptStates)) nextSetBitWithInt:s]) != -1) {
    [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(result)) addEpsilonWithInt:0 withInt:s + 1];
    if (initialStates != nil) {
      [initialStates addWithId:JavaLangInteger_valueOfWithInt_(s + 1)];
    }
    s++;
  }
  [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(result)) finishState];
  return result;
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonOperations_totalizeWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  OrgApacheLuceneUtilAutomatonAutomaton *result = [new_OrgApacheLuceneUtilAutomatonAutomaton_init() autorelease];
  jint numStates = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates];
  for (jint i = 0; i < numStates; i++) {
    [result createState];
    [result setAcceptWithInt:i withBoolean:[a isAcceptWithInt:i]];
  }
  jint deadState = [result createState];
  [result addTransitionWithInt:deadState withInt:deadState withInt:JavaLangCharacter_MIN_CODE_POINT withInt:JavaLangCharacter_MAX_CODE_POINT];
  OrgApacheLuceneUtilAutomatonTransition *t = [new_OrgApacheLuceneUtilAutomatonTransition_init() autorelease];
  for (jint i = 0; i < numStates; i++) {
    jint maxi = JavaLangCharacter_MIN_CODE_POINT;
    jint count = [a initTransitionWithInt:i withOrgApacheLuceneUtilAutomatonTransition:t];
    for (jint j = 0; j < count; j++) {
      [a getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
      [result addTransitionWithInt:i withInt:t->dest_ withInt:t->min_ withInt:t->max_];
      if (t->min_ > maxi) {
        [result addTransitionWithInt:i withInt:deadState withInt:maxi withInt:t->min_ - 1];
      }
      if (t->max_ + 1 > maxi) {
        maxi = t->max_ + 1;
      }
    }
    if (maxi <= JavaLangCharacter_MAX_CODE_POINT) {
      [result addTransitionWithInt:i withInt:deadState withInt:maxi withInt:JavaLangCharacter_MAX_CODE_POINT];
    }
  }
  [result finishState];
  return result;
}

IOSIntArray *OrgApacheLuceneUtilAutomatonOperations_topoSortStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *a) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getNumStates] == 0) {
    return [IOSIntArray arrayWithLength:0];
  }
  jint numStates = [a getNumStates];
  IOSIntArray *states = [IOSIntArray arrayWithLength:numStates];
  JavaUtilBitSet *visited = [new_JavaUtilBitSet_initWithInt_(numStates) autorelease];
  jint upto = OrgApacheLuceneUtilAutomatonOperations_topoSortStatesRecurseWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaUtilBitSet_withIntArray_withInt_withInt_(a, visited, states, 0, 0);
  if (upto < states->size_) {
    IOSIntArray *newStates = [IOSIntArray arrayWithLength:upto];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(states, 0, newStates, 0, upto);
    states = newStates;
  }
  for (jint i = 0; i < states->size_ / 2; i++) {
    jint s = IOSIntArray_Get(states, i);
    *IOSIntArray_GetRef(states, i) = IOSIntArray_Get(states, states->size_ - 1 - i);
    *IOSIntArray_GetRef(states, states->size_ - 1 - i) = s;
  }
  return states;
}

jint OrgApacheLuceneUtilAutomatonOperations_topoSortStatesRecurseWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaUtilBitSet_withIntArray_withInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *a, JavaUtilBitSet *visited, IOSIntArray *states, jint upto, jint state) {
  OrgApacheLuceneUtilAutomatonOperations_initialize();
  OrgApacheLuceneUtilAutomatonTransition *t = [new_OrgApacheLuceneUtilAutomatonTransition_init() autorelease];
  jint count = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) initTransitionWithInt:state withOrgApacheLuceneUtilAutomatonTransition:t];
  for (jint i = 0; i < count; i++) {
    [a getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
    if (![((JavaUtilBitSet *) nil_chk(visited)) getWithInt:t->dest_]) {
      [visited setWithInt:t->dest_];
      upto = OrgApacheLuceneUtilAutomatonOperations_topoSortStatesRecurseWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaUtilBitSet_withIntArray_withInt_withInt_(a, visited, states, upto, t->dest_);
    }
  }
  *IOSIntArray_GetRef(nil_chk(states), upto) = state;
  upto++;
  return upto;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonOperations)

@implementation OrgApacheLuceneUtilAutomatonOperations_TransitionList

- (void)addWithOrgApacheLuceneUtilAutomatonTransition:(OrgApacheLuceneUtilAutomatonTransition *)t {
  if (((IOSIntArray *) nil_chk(transitions_))->size_ < next_ + 3) {
    JreStrongAssign(&transitions_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(transitions_, next_ + 3));
  }
  *IOSIntArray_GetRef(nil_chk(transitions_), next_) = ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(t))->dest_;
  *IOSIntArray_GetRef(transitions_, next_ + 1) = t->min_;
  *IOSIntArray_GetRef(transitions_, next_ + 2) = t->max_;
  next_ += 3;
}

- (instancetype)init {
  OrgApacheLuceneUtilAutomatonOperations_TransitionList_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(transitions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addWithOrgApacheLuceneUtilAutomatonTransition:", "add", "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "transitions_", NULL, 0x0, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "next_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonOperations_TransitionList = { 2, "TransitionList", "org.apache.lucene.util.automaton", "Operations", 0x1a, 2, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilAutomatonOperations_TransitionList;
}

@end

void OrgApacheLuceneUtilAutomatonOperations_TransitionList_init(OrgApacheLuceneUtilAutomatonOperations_TransitionList *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->transitions_, [IOSIntArray newArrayWithLength:3]);
}

OrgApacheLuceneUtilAutomatonOperations_TransitionList *new_OrgApacheLuceneUtilAutomatonOperations_TransitionList_init() {
  OrgApacheLuceneUtilAutomatonOperations_TransitionList *self = [OrgApacheLuceneUtilAutomatonOperations_TransitionList alloc];
  OrgApacheLuceneUtilAutomatonOperations_TransitionList_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonOperations_TransitionList)

@implementation OrgApacheLuceneUtilAutomatonOperations_PointTransitions

- (jint)compareToWithId:(OrgApacheLuceneUtilAutomatonOperations_PointTransitions *)other {
  check_class_cast(other, [OrgApacheLuceneUtilAutomatonOperations_PointTransitions class]);
  return point_ - ((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(other))->point_;
}

- (void)resetWithInt:(jint)point {
  self->point_ = point;
  ((OrgApacheLuceneUtilAutomatonOperations_TransitionList *) nil_chk(ends_))->next_ = 0;
  ((OrgApacheLuceneUtilAutomatonOperations_TransitionList *) nil_chk(starts_))->next_ = 0;
}

- (jboolean)isEqual:(id)other {
  return ((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) check_class_cast(other, [OrgApacheLuceneUtilAutomatonOperations_PointTransitions class]))))->point_ == point_;
}

- (NSUInteger)hash {
  return point_;
}

- (instancetype)init {
  OrgApacheLuceneUtilAutomatonOperations_PointTransitions_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(ends_);
  RELEASE_(starts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "resetWithInt:", "reset", "V", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "point_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "ends_", NULL, 0x10, "Lorg.apache.lucene.util.automaton.Operations$TransitionList;", NULL, NULL, .constantValue.asLong = 0 },
    { "starts_", NULL, 0x10, "Lorg.apache.lucene.util.automaton.Operations$TransitionList;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonOperations_PointTransitions = { 2, "PointTransitions", "org.apache.lucene.util.automaton", "Operations", 0x1a, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/util/automaton/Operations$PointTransitions;>;" };
  return &_OrgApacheLuceneUtilAutomatonOperations_PointTransitions;
}

@end

void OrgApacheLuceneUtilAutomatonOperations_PointTransitions_init(OrgApacheLuceneUtilAutomatonOperations_PointTransitions *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->ends_, new_OrgApacheLuceneUtilAutomatonOperations_TransitionList_init());
  JreStrongAssignAndConsume(&self->starts_, new_OrgApacheLuceneUtilAutomatonOperations_TransitionList_init());
}

OrgApacheLuceneUtilAutomatonOperations_PointTransitions *new_OrgApacheLuceneUtilAutomatonOperations_PointTransitions_init() {
  OrgApacheLuceneUtilAutomatonOperations_PointTransitions *self = [OrgApacheLuceneUtilAutomatonOperations_PointTransitions alloc];
  OrgApacheLuceneUtilAutomatonOperations_PointTransitions_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonOperations_PointTransitions)

@implementation OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet

- (OrgApacheLuceneUtilAutomatonOperations_PointTransitions *)nextWithInt:(jint)point {
  return OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_nextWithInt_(self, point);
}

- (OrgApacheLuceneUtilAutomatonOperations_PointTransitions *)findWithInt:(jint)point {
  return OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_findWithInt_(self, point);
}

- (void)reset {
  if (useHash_) {
    [((JavaUtilHashMap *) nil_chk(map_)) clear];
    useHash_ = NO;
  }
  count_ = 0;
}

- (void)sort {
  if (count_ > 1) OrgApacheLuceneUtilArrayUtil_timSortWithJavaLangComparableArray_withInt_withInt_(points_, 0, count_);
}

- (void)addWithOrgApacheLuceneUtilAutomatonTransition:(OrgApacheLuceneUtilAutomatonTransition *)t {
  [((OrgApacheLuceneUtilAutomatonOperations_TransitionList *) nil_chk(((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_findWithInt_(self, ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(t))->min_)))->starts_)) addWithOrgApacheLuceneUtilAutomatonTransition:t];
  [((OrgApacheLuceneUtilAutomatonOperations_TransitionList *) nil_chk(((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_findWithInt_(self, 1 + t->max_)))->ends_)) addWithOrgApacheLuceneUtilAutomatonTransition:t];
}

- (NSString *)description {
  JavaLangStringBuilder *s = [new_JavaLangStringBuilder_init() autorelease];
  for (jint i = 0; i < count_; i++) {
    if (i > 0) {
      [s appendWithChar:' '];
    }
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([s appendWithInt:((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(IOSObjectArray_Get(nil_chk(points_), i)))->point_])) appendWithChar:':'])) appendWithInt:((OrgApacheLuceneUtilAutomatonOperations_TransitionList *) nil_chk(((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(IOSObjectArray_Get(points_, i)))->starts_))->next_ / 3])) appendWithChar:','])) appendWithInt:((OrgApacheLuceneUtilAutomatonOperations_TransitionList *) nil_chk(((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(IOSObjectArray_Get(points_, i)))->ends_))->next_ / 3];
  }
  return [s description];
}

- (instancetype)init {
  OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(points_);
  RELEASE_(map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "nextWithInt:", "next", "Lorg.apache.lucene.util.automaton.Operations$PointTransitions;", 0x2, NULL, NULL },
    { "findWithInt:", "find", "Lorg.apache.lucene.util.automaton.Operations$PointTransitions;", 0x2, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "sort", NULL, "V", 0x1, NULL, NULL },
    { "addWithOrgApacheLuceneUtilAutomatonTransition:", "add", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "count_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "points_", NULL, 0x0, "[Lorg.apache.lucene.util.automaton.Operations$PointTransitions;", NULL, NULL, .constantValue.asLong = 0 },
    { "HASHMAP_CUTOVER", "HASHMAP_CUTOVER", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_HASHMAP_CUTOVER },
    { "map_", NULL, 0x12, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/Integer;Lorg/apache/lucene/util/automaton/Operations$PointTransitions;>;", .constantValue.asLong = 0 },
    { "useHash_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet = { 2, "PointTransitionSet", "org.apache.lucene.util.automaton", "Operations", 0x1a, 7, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet;
}

@end

OrgApacheLuceneUtilAutomatonOperations_PointTransitions *OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_nextWithInt_(OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet *self, jint point) {
  if (self->count_ == ((IOSObjectArray *) nil_chk(self->points_))->size_) {
    IOSObjectArray *newArray = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(1 + self->count_, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF_)) type:OrgApacheLuceneUtilAutomatonOperations_PointTransitions_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->points_, 0, newArray, 0, self->count_);
    JreStrongAssign(&self->points_, newArray);
  }
  OrgApacheLuceneUtilAutomatonOperations_PointTransitions *points0 = IOSObjectArray_Get(self->points_, self->count_);
  if (points0 == nil) {
    points0 = IOSObjectArray_SetAndConsume(self->points_, self->count_, new_OrgApacheLuceneUtilAutomatonOperations_PointTransitions_init());
  }
  [((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(points0)) resetWithInt:point];
  self->count_++;
  return points0;
}

OrgApacheLuceneUtilAutomatonOperations_PointTransitions *OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_findWithInt_(OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet *self, jint point) {
  if (self->useHash_) {
    JavaLangInteger *pi = JavaLangInteger_valueOfWithInt_(point);
    OrgApacheLuceneUtilAutomatonOperations_PointTransitions *p = [((JavaUtilHashMap *) nil_chk(self->map_)) getWithId:pi];
    if (p == nil) {
      p = OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_nextWithInt_(self, point);
      [self->map_ putWithId:pi withId:p];
    }
    return p;
  }
  else {
    for (jint i = 0; i < self->count_; i++) {
      if (((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(IOSObjectArray_Get(nil_chk(self->points_), i)))->point_ == point) {
        return IOSObjectArray_Get(self->points_, i);
      }
    }
    OrgApacheLuceneUtilAutomatonOperations_PointTransitions *p = OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_nextWithInt_(self, point);
    if (self->count_ == OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_HASHMAP_CUTOVER) {
      JreAssert(([((JavaUtilHashMap *) nil_chk(self->map_)) size] == 0), (@"org/apache/lucene/util/automaton/Operations.java:613 condition failed: assert map.size() == 0;"));
      for (jint i = 0; i < self->count_; i++) {
        [self->map_ putWithId:JavaLangInteger_valueOfWithInt_(((OrgApacheLuceneUtilAutomatonOperations_PointTransitions *) nil_chk(IOSObjectArray_Get(nil_chk(self->points_), i)))->point_) withId:IOSObjectArray_Get(self->points_, i)];
      }
      self->useHash_ = YES;
    }
    return p;
  }
}

void OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_init(OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->points_, [IOSObjectArray newArrayWithLength:5 type:OrgApacheLuceneUtilAutomatonOperations_PointTransitions_class_()]);
  JreStrongAssignAndConsume(&self->map_, new_JavaUtilHashMap_init());
  self->useHash_ = NO;
}

OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet *new_OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_init() {
  OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet *self = [OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet alloc];
  OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonOperations_PointTransitionSet)
