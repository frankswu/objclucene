//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/automaton/LevenshteinAutomata.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/Iterator.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeSet.h"
#include "org/apache/lucene/util/UnicodeUtil.h"
#include "org/apache/lucene/util/automaton/Automata.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/Lev1ParametricDescription.h"
#include "org/apache/lucene/util/automaton/Lev1TParametricDescription.h"
#include "org/apache/lucene/util/automaton/Lev2ParametricDescription.h"
#include "org/apache/lucene/util/automaton/Lev2TParametricDescription.h"
#include "org/apache/lucene/util/automaton/LevenshteinAutomata.h"

@interface OrgApacheLuceneUtilAutomatonLevenshteinAutomata ()

+ (IOSIntArray *)codePointsWithNSString:(NSString *)input;

@end

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneUtilAutomatonLevenshteinAutomata_codePointsWithNSString_(NSString *input);

@interface OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription () {
 @public
  IOSIntArray *minErrors_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription, minErrors_, IOSIntArray *)

static IOSLongArray *OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription_MASKS_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription, MASKS_, IOSLongArray *)

@implementation OrgApacheLuceneUtilAutomatonLevenshteinAutomata

- (instancetype)initWithNSString:(NSString *)input
                     withBoolean:(jboolean)withTranspositions {
  OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithNSString_withBoolean_(self, input, withTranspositions);
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)word
                         withInt:(jint)alphaMax
                     withBoolean:(jboolean)withTranspositions {
  OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithIntArray_withInt_withBoolean_(self, word, alphaMax, withTranspositions);
  return self;
}

+ (IOSIntArray *)codePointsWithNSString:(NSString *)input {
  return OrgApacheLuceneUtilAutomatonLevenshteinAutomata_codePointsWithNSString_(input);
}

- (OrgApacheLuceneUtilAutomatonAutomaton *)toAutomatonWithInt:(jint)n
                                                 withNSString:(NSString *)prefix {
  JreAssert((prefix != nil), (@"org/apache/lucene/util/automaton/LevenshteinAutomata.java:144 condition failed: assert prefix != null;"));
  if (n == 0) {
    return OrgApacheLuceneUtilAutomatonAutomata_makeStringWithNSString_(JreStrcat("$$", prefix, OrgApacheLuceneUtilUnicodeUtil_newStringWithIntArray_withInt_withInt_(word_, 0, ((IOSIntArray *) nil_chk(word_))->size_)));
  }
  if (n >= ((IOSObjectArray *) nil_chk(descriptions_))->size_) return nil;
  jint range = 2 * n + 1;
  OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription *description_ = IOSObjectArray_Get(descriptions_, n);
  jint numStates = [((OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription *) nil_chk(description_)) size];
  OrgApacheLuceneUtilAutomatonAutomaton *a = [new_OrgApacheLuceneUtilAutomatonAutomaton_init() autorelease];
  jint lastState;
  if (prefix != nil) {
    lastState = [a createState];
    for (jint i = 0, cp = 0; i < ((jint) [prefix length]); i += JavaLangCharacter_charCountWithInt_(cp)) {
      jint state = [a createState];
      cp = [prefix codePointAt:i];
      [a addTransitionWithInt:lastState withInt:state withInt:cp withInt:cp];
      lastState = state;
    }
  }
  else {
    lastState = [a createState];
  }
  jint stateOffset = lastState;
  [a setAcceptWithInt:lastState withBoolean:[description_ isAcceptWithInt:0]];
  for (jint i = 1; i < numStates; i++) {
    jint state = [a createState];
    [a setAcceptWithInt:state withBoolean:[description_ isAcceptWithInt:i]];
  }
  for (jint k = 0; k < numStates; k++) {
    jint xpos = [description_ getPositionWithInt:k];
    if (xpos < 0) continue;
    jint end = xpos + JavaLangMath_minWithInt_withInt_(((IOSIntArray *) nil_chk(word_))->size_ - xpos, range);
    for (jint x = 0; x < ((IOSIntArray *) nil_chk(alphabet_))->size_; x++) {
      jint ch = IOSIntArray_Get(alphabet_, x);
      jint cvec = [self getVectorWithInt:ch withInt:xpos withInt:end];
      jint dest = [description_ transitionWithInt:k withInt:xpos withInt:cvec];
      if (dest >= 0) {
        [a addTransitionWithInt:stateOffset + k withInt:stateOffset + dest withInt:ch];
      }
    }
    jint dest = [description_ transitionWithInt:k withInt:xpos withInt:0];
    if (dest >= 0) {
      for (jint r = 0; r < numRanges_; r++) {
        [a addTransitionWithInt:stateOffset + k withInt:stateOffset + dest withInt:IOSIntArray_Get(nil_chk(rangeLower_), r) withInt:IOSIntArray_Get(nil_chk(rangeUpper_), r)];
      }
    }
  }
  [a finishState];
  JreAssert(([a isDeterministic]), (@"org/apache/lucene/util/automaton/LevenshteinAutomata.java:211 condition failed: assert a.isDeterministic();"));
  return a;
}

- (jint)getVectorWithInt:(jint)x
                 withInt:(jint)pos
                 withInt:(jint)end {
  jint vector = 0;
  for (jint i = pos; i < end; i++) {
    JreLShiftAssignInt(&vector, 1);
    if (IOSIntArray_Get(nil_chk(word_), i) == x) vector |= 1;
  }
  return vector;
}

- (void)dealloc {
  RELEASE_(word_);
  RELEASE_(alphabet_);
  RELEASE_(rangeLower_);
  RELEASE_(rangeUpper_);
  RELEASE_(descriptions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withBoolean:", "LevenshteinAutomata", NULL, 0x1, NULL, NULL },
    { "initWithIntArray:withInt:withBoolean:", "LevenshteinAutomata", NULL, 0x1, NULL, NULL },
    { "codePointsWithNSString:", "codePoints", "[I", 0xa, NULL, NULL },
    { "toAutomatonWithInt:withNSString:", "toAutomaton", "Lorg.apache.lucene.util.automaton.Automaton;", 0x1, NULL, NULL },
    { "getVectorWithInt:withInt:withInt:", "getVector", "I", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAXIMUM_SUPPORTED_DISTANCE", "MAXIMUM_SUPPORTED_DISTANCE", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheLuceneUtilAutomatonLevenshteinAutomata_MAXIMUM_SUPPORTED_DISTANCE },
    { "word_", NULL, 0x10, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "alphabet_", NULL, 0x10, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "alphaMax_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "rangeLower_", NULL, 0x10, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "rangeUpper_", NULL, 0x10, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "numRanges_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "descriptions_", NULL, 0x0, "[Lorg.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription;"};
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonLevenshteinAutomata = { 2, "LevenshteinAutomata", "org.apache.lucene.util.automaton", NULL, 0x1, 5, methods, 8, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneUtilAutomatonLevenshteinAutomata;
}

@end

void OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithNSString_withBoolean_(OrgApacheLuceneUtilAutomatonLevenshteinAutomata *self, NSString *input, jboolean withTranspositions) {
  OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithIntArray_withInt_withBoolean_(self, OrgApacheLuceneUtilAutomatonLevenshteinAutomata_codePointsWithNSString_(input), JavaLangCharacter_MAX_CODE_POINT, withTranspositions);
}

OrgApacheLuceneUtilAutomatonLevenshteinAutomata *new_OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithNSString_withBoolean_(NSString *input, jboolean withTranspositions) {
  OrgApacheLuceneUtilAutomatonLevenshteinAutomata *self = [OrgApacheLuceneUtilAutomatonLevenshteinAutomata alloc];
  OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithNSString_withBoolean_(self, input, withTranspositions);
  return self;
}

void OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithIntArray_withInt_withBoolean_(OrgApacheLuceneUtilAutomatonLevenshteinAutomata *self, IOSIntArray *word, jint alphaMax, jboolean withTranspositions) {
  NSObject_init(self);
  self->numRanges_ = 0;
  JreStrongAssign(&self->word_, word);
  self->alphaMax_ = alphaMax;
  id<JavaUtilSortedSet> set = [new_JavaUtilTreeSet_init() autorelease];
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(word))->size_; i++) {
    jint v = IOSIntArray_Get(word, i);
    if (v > alphaMax) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"alphaMax exceeded by symbol ", v, @" in word")) autorelease];
    }
    [set addWithId:JavaLangInteger_valueOfWithInt_(v)];
  }
  JreStrongAssignAndConsume(&self->alphabet_, [IOSIntArray newArrayWithLength:[set size]]);
  id<JavaUtilIterator> iterator = [set iterator];
  for (jint i = 0; i < self->alphabet_->size_; i++) *IOSIntArray_GetRef(self->alphabet_, i) = [((JavaLangInteger *) nil_chk([((id<JavaUtilIterator>) nil_chk(iterator)) next])) intValue];
  JreStrongAssignAndConsume(&self->rangeLower_, [IOSIntArray newArrayWithLength:self->alphabet_->size_ + 2]);
  JreStrongAssignAndConsume(&self->rangeUpper_, [IOSIntArray newArrayWithLength:self->alphabet_->size_ + 2]);
  jint lower = 0;
  for (jint i = 0; i < self->alphabet_->size_; i++) {
    jint higher = IOSIntArray_Get(self->alphabet_, i);
    if (higher > lower) {
      *IOSIntArray_GetRef(self->rangeLower_, self->numRanges_) = lower;
      *IOSIntArray_GetRef(self->rangeUpper_, self->numRanges_) = higher - 1;
      self->numRanges_++;
    }
    lower = higher + 1;
  }
  if (lower <= alphaMax) {
    *IOSIntArray_GetRef(self->rangeLower_, self->numRanges_) = lower;
    *IOSIntArray_GetRef(self->rangeUpper_, self->numRanges_) = alphaMax;
    self->numRanges_++;
  }
  JreStrongAssignAndConsume(&self->descriptions_, [IOSObjectArray newArrayWithObjects:(id[]){ nil, withTranspositions ? [new_OrgApacheLuceneUtilAutomatonLev1TParametricDescription_initWithInt_(word->size_) autorelease] : [new_OrgApacheLuceneUtilAutomatonLev1ParametricDescription_initWithInt_(word->size_) autorelease], withTranspositions ? [new_OrgApacheLuceneUtilAutomatonLev2TParametricDescription_initWithInt_(word->size_) autorelease] : [new_OrgApacheLuceneUtilAutomatonLev2ParametricDescription_initWithInt_(word->size_) autorelease] } count:3 type:OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription_class_()]);
}

OrgApacheLuceneUtilAutomatonLevenshteinAutomata *new_OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithIntArray_withInt_withBoolean_(IOSIntArray *word, jint alphaMax, jboolean withTranspositions) {
  OrgApacheLuceneUtilAutomatonLevenshteinAutomata *self = [OrgApacheLuceneUtilAutomatonLevenshteinAutomata alloc];
  OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithIntArray_withInt_withBoolean_(self, word, alphaMax, withTranspositions);
  return self;
}

IOSIntArray *OrgApacheLuceneUtilAutomatonLevenshteinAutomata_codePointsWithNSString_(NSString *input) {
  OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initialize();
  jint length = JavaLangCharacter_codePointCountWithJavaLangCharSequence_withInt_withInt_(input, 0, ((jint) [((NSString *) nil_chk(input)) length]));
  IOSIntArray *word = [IOSIntArray arrayWithLength:length];
  for (jint i = 0, j = 0, cp = 0; i < ((jint) [input length]); i += JavaLangCharacter_charCountWithInt_(cp)) {
    *IOSIntArray_GetRef(word, j++) = cp = [input codePointAt:i];
  }
  return word;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonLevenshteinAutomata)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription)

@implementation OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription

- (instancetype)initWithInt:(jint)w
                    withInt:(jint)n
               withIntArray:(IOSIntArray *)minErrors {
  OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription_initWithInt_withInt_withIntArray_(self, w, n, minErrors);
  return self;
}

- (jint)size {
  return ((IOSIntArray *) nil_chk(minErrors_))->size_ * (w_ + 1);
}

- (jboolean)isAcceptWithInt:(jint)absState {
  jint state = absState / (w_ + 1);
  jint offset = absState % (w_ + 1);
  JreAssert((offset >= 0), (@"org/apache/lucene/util/automaton/LevenshteinAutomata.java:266 condition failed: assert offset >= 0;"));
  return w_ - offset + IOSIntArray_Get(nil_chk(minErrors_), state) <= n_;
}

- (jint)getPositionWithInt:(jint)absState {
  return absState % (w_ + 1);
}

- (jint)transitionWithInt:(jint)state
                  withInt:(jint)position
                  withInt:(jint)vector {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)unpackWithLongArray:(IOSLongArray *)data
                    withInt:(jint)index
                    withInt:(jint)bitsPerValue {
  jlong bitLoc = bitsPerValue * index;
  jint dataLoc = (jint) (JreRShift64(bitLoc, 6));
  jint bitStart = (jint) (bitLoc & 63);
  if (bitStart + bitsPerValue <= 64) {
    return (jint) ((JreRShift64(IOSLongArray_Get(nil_chk(data), dataLoc), bitStart)) & IOSLongArray_Get(nil_chk(OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription_MASKS_), bitsPerValue - 1));
  }
  else {
    jint part = 64 - bitStart;
    return (jint) (((JreRShift64(IOSLongArray_Get(nil_chk(data), dataLoc), bitStart)) & IOSLongArray_Get(nil_chk(OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription_MASKS_), part - 1)) + (JreLShift64((IOSLongArray_Get(data, 1 + dataLoc) & IOSLongArray_Get(OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription_MASKS_, bitsPerValue - part - 1)), part)));
  }
}

- (void)dealloc {
  RELEASE_(minErrors_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription_MASKS_, [IOSLongArray newArrayWithLongs:(jlong[]){ (jint) 0x1, (jint) 0x3, (jint) 0x7, (jint) 0xf, (jint) 0x1f, (jint) 0x3f, (jint) 0x7f, (jint) 0xff, (jint) 0x1ff, (jint) 0x3ff, (jint) 0x7ff, (jint) 0xfff, (jint) 0x1fff, (jint) 0x3fff, (jint) 0x7fff, (jint) 0xffff, (jint) 0x1ffff, (jint) 0x3ffff, (jint) 0x7ffff, (jint) 0xfffff, (jint) 0x1fffff, (jint) 0x3fffff, (jint) 0x7fffff, (jint) 0xffffff, (jint) 0x1ffffff, (jint) 0x3ffffff, (jint) 0x7ffffff, (jint) 0xfffffff, (jint) 0x1fffffff, (jint) 0x3fffffff, (jlong) 0x7fffffffLL, (jlong) 0xffffffffLL, (jlong) 0x1ffffffffLL, (jlong) 0x3ffffffffLL, (jlong) 0x7ffffffffLL, (jlong) 0xfffffffffLL, (jlong) 0x1fffffffffLL, (jlong) 0x3fffffffffLL, (jlong) 0x7fffffffffLL, (jlong) 0xffffffffffLL, (jlong) 0x1ffffffffffLL, (jlong) 0x3ffffffffffLL, (jlong) 0x7ffffffffffLL, (jlong) 0xfffffffffffLL, (jlong) 0x1fffffffffffLL, (jlong) 0x3fffffffffffLL, (jlong) 0x7fffffffffffLL, (jlong) 0xffffffffffffLL, (jlong) 0x1ffffffffffffLL, (jlong) 0x3ffffffffffffLL, (jlong) 0x7ffffffffffffLL, (jlong) 0xfffffffffffffLL, (jlong) 0x1fffffffffffffLL, (jlong) 0x3fffffffffffffLL, (jlong) 0x7fffffffffffffLL, (jlong) 0xffffffffffffffLL, (jlong) 0x1ffffffffffffffLL, (jlong) 0x3ffffffffffffffLL, (jlong) 0x7ffffffffffffffLL, (jlong) 0xfffffffffffffffLL, (jlong) 0x1fffffffffffffffLL, (jlong) 0x3fffffffffffffffLL, (jlong) 0x7fffffffffffffffLL } count:63]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withIntArray:", "ParametricDescription", NULL, 0x0, NULL, NULL },
    { "size", NULL, "I", 0x0, NULL, NULL },
    { "isAcceptWithInt:", "isAccept", "Z", 0x0, NULL, NULL },
    { "getPositionWithInt:", "getPosition", "I", 0x0, NULL, NULL },
    { "transitionWithInt:withInt:withInt:", "transition", "I", 0x400, NULL, NULL },
    { "unpackWithLongArray:withInt:withInt:", "unpack", "I", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "w_", NULL, 0x14, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "n_", NULL, 0x14, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "minErrors_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "MASKS_", NULL, 0x1a, "[J", &OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription_MASKS_, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription = { 2, "ParametricDescription", "org.apache.lucene.util.automaton", "LevenshteinAutomata", 0x408, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription;
}

@end

void OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription_initWithInt_withInt_withIntArray_(OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription *self, jint w, jint n, IOSIntArray *minErrors) {
  NSObject_init(self);
  self->w_ = w;
  self->n_ = n;
  JreStrongAssign(&self->minErrors_, minErrors);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription)
