//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/PriorityQueue.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/PriorityQueue.h"

@interface OrgApacheLuceneUtilPriorityQueue () {
 @public
  jint size_;
  jint maxSize_;
  IOSObjectArray *heap_;
}

- (jboolean)upHeapWithInt:(jint)origPos;

- (void)downHeapWithInt:(jint)i;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilPriorityQueue, heap_, IOSObjectArray *)

__attribute__((unused)) static id OrgApacheLuceneUtilPriorityQueue_addWithId_(OrgApacheLuceneUtilPriorityQueue *self, id element);

__attribute__((unused)) static id OrgApacheLuceneUtilPriorityQueue_updateTop(OrgApacheLuceneUtilPriorityQueue *self);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilPriorityQueue_upHeapWithInt_(OrgApacheLuceneUtilPriorityQueue *self, jint origPos);

__attribute__((unused)) static void OrgApacheLuceneUtilPriorityQueue_downHeapWithInt_(OrgApacheLuceneUtilPriorityQueue *self, jint i);

@implementation OrgApacheLuceneUtilPriorityQueue

- (instancetype)initWithInt:(jint)maxSize {
  OrgApacheLuceneUtilPriorityQueue_initWithInt_(self, maxSize);
  return self;
}

- (instancetype)initWithInt:(jint)maxSize
                withBoolean:(jboolean)prepopulate {
  OrgApacheLuceneUtilPriorityQueue_initWithInt_withBoolean_(self, maxSize, prepopulate);
  return self;
}

- (jboolean)lessThanWithId:(id)a
                    withId:(id)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getSentinelObject {
  return nil;
}

- (id)addWithId:(id)element {
  return OrgApacheLuceneUtilPriorityQueue_addWithId_(self, element);
}

- (id)insertWithOverflowWithId:(id)element {
  if (size_ < maxSize_) {
    OrgApacheLuceneUtilPriorityQueue_addWithId_(self, element);
    return nil;
  }
  else if (size_ > 0 && ![self lessThanWithId:element withId:IOSObjectArray_Get(nil_chk(heap_), 1)]) {
    id ret = IOSObjectArray_Get(heap_, 1);
    IOSObjectArray_Set(heap_, 1, element);
    OrgApacheLuceneUtilPriorityQueue_updateTop(self);
    return ret;
  }
  else {
    return element;
  }
}

- (id)top {
  return IOSObjectArray_Get(nil_chk(heap_), 1);
}

- (id)pop {
  if (size_ > 0) {
    id result = IOSObjectArray_Get(nil_chk(heap_), 1);
    IOSObjectArray_Set(heap_, 1, IOSObjectArray_Get(heap_, size_));
    IOSObjectArray_Set(heap_, size_, nil);
    size_--;
    OrgApacheLuceneUtilPriorityQueue_downHeapWithInt_(self, 1);
    return result;
  }
  else {
    return nil;
  }
}

- (id)updateTop {
  return OrgApacheLuceneUtilPriorityQueue_updateTop(self);
}

- (id)updateTopWithId:(id)newTop {
  IOSObjectArray_Set(nil_chk(heap_), 1, newTop);
  return OrgApacheLuceneUtilPriorityQueue_updateTop(self);
}

- (jint)size {
  return size_;
}

- (void)clear {
  for (jint i = 0; i <= size_; i++) {
    IOSObjectArray_Set(nil_chk(heap_), i, nil);
  }
  size_ = 0;
}

- (jboolean)removeWithId:(id)element {
  for (jint i = 1; i <= size_; i++) {
    if (IOSObjectArray_Get(nil_chk(heap_), i) == element) {
      IOSObjectArray_Set(heap_, i, IOSObjectArray_Get(heap_, size_));
      IOSObjectArray_Set(heap_, size_, nil);
      size_--;
      if (i <= size_) {
        if (!OrgApacheLuceneUtilPriorityQueue_upHeapWithInt_(self, i)) {
          OrgApacheLuceneUtilPriorityQueue_downHeapWithInt_(self, i);
        }
      }
      return true;
    }
  }
  return false;
}

- (jboolean)upHeapWithInt:(jint)origPos {
  return OrgApacheLuceneUtilPriorityQueue_upHeapWithInt_(self, origPos);
}

- (void)downHeapWithInt:(jint)i {
  OrgApacheLuceneUtilPriorityQueue_downHeapWithInt_(self, i);
}

- (IOSObjectArray *)getHeapArray {
  return heap_;
}

- (void)dealloc {
  RELEASE_(heap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "PriorityQueue", NULL, 0x1, NULL, NULL },
    { "initWithInt:withBoolean:", "PriorityQueue", NULL, 0x1, NULL, NULL },
    { "lessThanWithId:withId:", "lessThan", "Z", 0x404, NULL, "(TT;TT;)Z" },
    { "getSentinelObject", NULL, "TT;", 0x4, NULL, "()TT;" },
    { "addWithId:", "add", "TT;", 0x11, NULL, "(TT;)TT;" },
    { "insertWithOverflowWithId:", "insertWithOverflow", "TT;", 0x1, NULL, "(TT;)TT;" },
    { "top", NULL, "TT;", 0x11, NULL, "()TT;" },
    { "pop", NULL, "TT;", 0x11, NULL, "()TT;" },
    { "updateTop", NULL, "TT;", 0x11, NULL, "()TT;" },
    { "updateTopWithId:", "updateTop", "TT;", 0x11, NULL, "(TT;)TT;" },
    { "size", NULL, "I", 0x11, NULL, NULL },
    { "clear", NULL, "V", 0x11, NULL, NULL },
    { "removeWithId:", "remove", "Z", 0x11, NULL, "(TT;)Z" },
    { "upHeapWithInt:", "upHeap", "Z", 0x12, NULL, NULL },
    { "downHeapWithInt:", "downHeap", "V", 0x12, NULL, NULL },
    { "getHeapArray", NULL, "[Ljava.lang.Object;", 0x14, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "size_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "maxSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "heap_", NULL, 0x12, "[Ljava.lang.Object;", NULL, "[TT;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPriorityQueue = { 2, "PriorityQueue", "org.apache.lucene.util", NULL, 0x401, 16, methods, 3, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_OrgApacheLuceneUtilPriorityQueue;
}

@end

void OrgApacheLuceneUtilPriorityQueue_initWithInt_(OrgApacheLuceneUtilPriorityQueue *self, jint maxSize) {
  OrgApacheLuceneUtilPriorityQueue_initWithInt_withBoolean_(self, maxSize, true);
}

void OrgApacheLuceneUtilPriorityQueue_initWithInt_withBoolean_(OrgApacheLuceneUtilPriorityQueue *self, jint maxSize, jboolean prepopulate) {
  NSObject_init(self);
  self->size_ = 0;
  jint heapSize;
  if (0 == maxSize) {
    heapSize = 2;
  }
  else {
    heapSize = maxSize + 1;
    if (heapSize > JreLoadStatic(OrgApacheLuceneUtilArrayUtil, MAX_ARRAY_LENGTH_)) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"maxSize must be <= ", (JreLoadStatic(OrgApacheLuceneUtilArrayUtil, MAX_ARRAY_LENGTH_) - 1), @"; got: ", maxSize)) autorelease];
    }
  }
  IOSObjectArray *h = (IOSObjectArray *) check_class_cast([IOSObjectArray arrayWithLength:heapSize type:NSObject_class_()], [IOSObjectArray class]);
  JreStrongAssign(&self->heap_, h);
  self->maxSize_ = maxSize;
  if (prepopulate) {
    id sentinel = [self getSentinelObject];
    if (sentinel != nil) {
      IOSObjectArray_Set(self->heap_, 1, sentinel);
      for (jint i = 2; i < self->heap_->size_; i++) {
        IOSObjectArray_Set(self->heap_, i, [self getSentinelObject]);
      }
      self->size_ = maxSize;
    }
  }
}

id OrgApacheLuceneUtilPriorityQueue_addWithId_(OrgApacheLuceneUtilPriorityQueue *self, id element) {
  self->size_++;
  IOSObjectArray_Set(nil_chk(self->heap_), self->size_, element);
  OrgApacheLuceneUtilPriorityQueue_upHeapWithInt_(self, self->size_);
  return IOSObjectArray_Get(self->heap_, 1);
}

id OrgApacheLuceneUtilPriorityQueue_updateTop(OrgApacheLuceneUtilPriorityQueue *self) {
  OrgApacheLuceneUtilPriorityQueue_downHeapWithInt_(self, 1);
  return IOSObjectArray_Get(nil_chk(self->heap_), 1);
}

jboolean OrgApacheLuceneUtilPriorityQueue_upHeapWithInt_(OrgApacheLuceneUtilPriorityQueue *self, jint origPos) {
  jint i = origPos;
  id node = IOSObjectArray_Get(nil_chk(self->heap_), i);
  jint j = JreURShift32(i, 1);
  while (j > 0 && [self lessThanWithId:node withId:IOSObjectArray_Get(self->heap_, j)]) {
    IOSObjectArray_Set(self->heap_, i, IOSObjectArray_Get(self->heap_, j));
    i = j;
    j = JreURShift32(j, 1);
  }
  IOSObjectArray_Set(self->heap_, i, node);
  return i != origPos;
}

void OrgApacheLuceneUtilPriorityQueue_downHeapWithInt_(OrgApacheLuceneUtilPriorityQueue *self, jint i) {
  id node = IOSObjectArray_Get(nil_chk(self->heap_), i);
  jint j = JreLShift32(i, 1);
  jint k = j + 1;
  if (k <= self->size_ && [self lessThanWithId:IOSObjectArray_Get(self->heap_, k) withId:IOSObjectArray_Get(self->heap_, j)]) {
    j = k;
  }
  while (j <= self->size_ && [self lessThanWithId:IOSObjectArray_Get(self->heap_, j) withId:node]) {
    IOSObjectArray_Set(self->heap_, i, IOSObjectArray_Get(self->heap_, j));
    i = j;
    j = JreLShift32(i, 1);
    k = j + 1;
    if (k <= self->size_ && [self lessThanWithId:IOSObjectArray_Get(self->heap_, k) withId:IOSObjectArray_Get(self->heap_, j)]) {
      j = k;
    }
  }
  IOSObjectArray_Set(self->heap_, i, node);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPriorityQueue)
