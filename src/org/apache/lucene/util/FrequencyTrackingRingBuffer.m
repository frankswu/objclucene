//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/FrequencyTrackingRingBuffer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/FrequencyTrackingRingBuffer.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

@class OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag;

@interface OrgApacheLuceneUtilFrequencyTrackingRingBuffer () {
 @public
  jint maxSize_;
  IOSIntArray *buffer_;
  jint position_;
  OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *frequencies_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFrequencyTrackingRingBuffer, buffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFrequencyTrackingRingBuffer, frequencies_, OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *)

inline jlong OrgApacheLuceneUtilFrequencyTrackingRingBuffer_get_BASE_RAM_BYTES_USED();
static jlong OrgApacheLuceneUtilFrequencyTrackingRingBuffer_BASE_RAM_BYTES_USED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilFrequencyTrackingRingBuffer, BASE_RAM_BYTES_USED, jlong)

/*!
 @brief A bag of integers.
 Since in the context of the ring buffer the maximum size is known up-front
 there is no need to worry about resizing the underlying storage.
 */
@interface OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag : NSObject < OrgApacheLuceneUtilAccountable > {
 @public
  IOSIntArray *keys_;
  IOSIntArray *freqs_;
  jint mask_;
}

- (instancetype)initWithInt:(jint)maxSize;

- (jlong)ramBytesUsed;

- (id<JavaUtilCollection>)getChildResources;

/*!
 @brief Return the frequency of the give key in the bag.
 */
- (jint)frequencyWithInt:(jint)key;

/*!
 @brief Increment the frequency of the given key by 1 and return its new frequency.
 */
- (jint)addWithInt:(jint)key;

/*!
 @brief Decrement the frequency of the given key by one, or do nothing if the
 key is not present in the bag.
 Returns true iff the key was contained
 in the bag. 
 */
- (jboolean)removeWithInt:(jint)key;

- (void)relocateAdjacentKeysWithInt:(jint)freeSlot;

/*!
 @brief Given a chain of occupied slots between <code>chainStart</code>
 and <code>chainEnd</code>, return whether <code>slot</code> is
 between the start and end of the chain.
 */
+ (jboolean)betweenWithInt:(jint)chainStart
                   withInt:(jint)chainEnd
                   withInt:(jint)slot;

- (id<JavaUtilMap>)asMap;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag, keys_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag, freqs_, IOSIntArray *)

inline jlong OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_get_BASE_RAM_BYTES_USED();
static jlong OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_BASE_RAM_BYTES_USED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag, BASE_RAM_BYTES_USED, jlong)

__attribute__((unused)) static void OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *self, jint maxSize);

__attribute__((unused)) static OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *new_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(jint maxSize) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *create_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(jint maxSize);

__attribute__((unused)) static void OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_relocateAdjacentKeysWithInt_(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *self, jint freeSlot);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_betweenWithInt_withInt_withInt_(jint chainStart, jint chainEnd, jint slot);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilFrequencyTrackingRingBuffer)

@implementation OrgApacheLuceneUtilFrequencyTrackingRingBuffer

- (instancetype)initWithInt:(jint)maxSize
                    withInt:(jint)sentinel {
  OrgApacheLuceneUtilFrequencyTrackingRingBuffer_initWithInt_withInt_(self, maxSize, sentinel);
  return self;
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneUtilFrequencyTrackingRingBuffer_BASE_RAM_BYTES_USED + [((OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *) nil_chk(frequencies_)) ramBytesUsed] + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithIntArray_(buffer_);
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (void)addWithInt:(jint)i {
  jint removed = IOSIntArray_Get(nil_chk(buffer_), position_);
  jboolean removedFromBag = [((OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *) nil_chk(frequencies_)) removeWithInt:removed];
  JreAssert((removedFromBag), (@"org/apache/lucene/util/FrequencyTrackingRingBuffer.java:84 condition failed: assert removedFromBag;"));
  *IOSIntArray_GetRef(buffer_, position_) = i;
  [frequencies_ addWithInt:i];
  position_ += 1;
  if (position_ == maxSize_) {
    position_ = 0;
  }
}

- (jint)frequencyWithInt:(jint)key {
  return [((OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *) nil_chk(frequencies_)) frequencyWithInt:key];
}

- (id<JavaUtilMap>)asFrequencyMap {
  return [((OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *) nil_chk(frequencies_)) asMap];
}

- (void)dealloc {
  RELEASE_(buffer_);
  RELEASE_(frequencies_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilFrequencyTrackingRingBuffer class]) {
    OrgApacheLuceneUtilFrequencyTrackingRingBuffer_BASE_RAM_BYTES_USED = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_class_());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilFrequencyTrackingRingBuffer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "FrequencyTrackingRingBuffer", NULL, 0x1, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "getChildResources", NULL, "Ljava.util.Collection;", 0x1, NULL, "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;" },
    { "addWithInt:", "add", "V", 0x1, NULL, NULL },
    { "frequencyWithInt:", "frequency", "I", 0x1, NULL, NULL },
    { "asFrequencyMap", NULL, "Ljava.util.Map;", 0x0, NULL, "()Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/Integer;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_RAM_BYTES_USED", "BASE_RAM_BYTES_USED", 0x1a, "J", &OrgApacheLuceneUtilFrequencyTrackingRingBuffer_BASE_RAM_BYTES_USED, NULL, .constantValue.asLong = 0 },
    { "maxSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "buffer_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "position_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "frequencies_", NULL, 0x12, "Lorg.apache.lucene.util.FrequencyTrackingRingBuffer$IntBag;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.util.FrequencyTrackingRingBuffer$IntBag;"};
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFrequencyTrackingRingBuffer = { 2, "FrequencyTrackingRingBuffer", "org.apache.lucene.util", NULL, 0x11, 6, methods, 5, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneUtilFrequencyTrackingRingBuffer;
}

@end

void OrgApacheLuceneUtilFrequencyTrackingRingBuffer_initWithInt_withInt_(OrgApacheLuceneUtilFrequencyTrackingRingBuffer *self, jint maxSize, jint sentinel) {
  NSObject_init(self);
  if (maxSize < 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"maxSize must be at least 2");
  }
  self->maxSize_ = maxSize;
  JreStrongAssignAndConsume(&self->buffer_, [IOSIntArray newArrayWithLength:maxSize]);
  self->position_ = 0;
  JreStrongAssignAndConsume(&self->frequencies_, new_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(maxSize));
  JavaUtilArrays_fillWithIntArray_withInt_(self->buffer_, sentinel);
  for (jint i = 0; i < maxSize; ++i) {
    [self->frequencies_ addWithInt:sentinel];
  }
  JreAssert(([self->frequencies_ frequencyWithInt:sentinel] == maxSize), (@"org/apache/lucene/util/FrequencyTrackingRingBuffer.java:61 condition failed: assert frequencies.frequency(sentinel) == maxSize;"));
}

OrgApacheLuceneUtilFrequencyTrackingRingBuffer *new_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_initWithInt_withInt_(jint maxSize, jint sentinel) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFrequencyTrackingRingBuffer, initWithInt_withInt_, maxSize, sentinel)
}

OrgApacheLuceneUtilFrequencyTrackingRingBuffer *create_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_initWithInt_withInt_(jint maxSize, jint sentinel) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFrequencyTrackingRingBuffer, initWithInt_withInt_, maxSize, sentinel)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFrequencyTrackingRingBuffer)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag)

@implementation OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag

- (instancetype)initWithInt:(jint)maxSize {
  OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(self, maxSize);
  return self;
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_BASE_RAM_BYTES_USED + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithIntArray_(keys_) + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithIntArray_(freqs_);
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (jint)frequencyWithInt:(jint)key {
  for (jint slot = key & mask_; ; slot = (slot + 1) & mask_) {
    if (IOSIntArray_Get(nil_chk(keys_), slot) == key) {
      return IOSIntArray_Get(nil_chk(freqs_), slot);
    }
    else if (IOSIntArray_Get(nil_chk(freqs_), slot) == 0) {
      return 0;
    }
  }
}

- (jint)addWithInt:(jint)key {
  for (jint slot = key & mask_; ; slot = (slot + 1) & mask_) {
    if (IOSIntArray_Get(nil_chk(freqs_), slot) == 0) {
      *IOSIntArray_GetRef(nil_chk(keys_), slot) = key;
      return *IOSIntArray_GetRef(freqs_, slot) = 1;
    }
    else if (IOSIntArray_Get(nil_chk(keys_), slot) == key) {
      return ++(*IOSIntArray_GetRef(freqs_, slot));
    }
  }
}

- (jboolean)removeWithInt:(jint)key {
  for (jint slot = key & mask_; ; slot = (slot + 1) & mask_) {
    if (IOSIntArray_Get(nil_chk(freqs_), slot) == 0) {
      return false;
    }
    else if (IOSIntArray_Get(nil_chk(keys_), slot) == key) {
      jint newFreq = --(*IOSIntArray_GetRef(freqs_, slot));
      if (newFreq == 0) {
        OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_relocateAdjacentKeysWithInt_(self, slot);
      }
      return true;
    }
  }
}

- (void)relocateAdjacentKeysWithInt:(jint)freeSlot {
  OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_relocateAdjacentKeysWithInt_(self, freeSlot);
}

+ (jboolean)betweenWithInt:(jint)chainStart
                   withInt:(jint)chainEnd
                   withInt:(jint)slot {
  return OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_betweenWithInt_withInt_withInt_(chainStart, chainEnd, slot);
}

- (id<JavaUtilMap>)asMap {
  id<JavaUtilMap> map = create_JavaUtilHashMap_init();
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(keys_))->size_; ++i) {
    if (IOSIntArray_Get(nil_chk(freqs_), i) > 0) {
      [map putWithId:JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(keys_, i)) withId:JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(freqs_, i))];
    }
  }
  return map;
}

- (void)dealloc {
  RELEASE_(keys_);
  RELEASE_(freqs_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag class]) {
    OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_BASE_RAM_BYTES_USED = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_class_());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "IntBag", NULL, 0x0, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "getChildResources", NULL, "Ljava.util.Collection;", 0x1, NULL, "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;" },
    { "frequencyWithInt:", "frequency", "I", 0x0, NULL, NULL },
    { "addWithInt:", "add", "I", 0x0, NULL, NULL },
    { "removeWithInt:", "remove", "Z", 0x0, NULL, NULL },
    { "relocateAdjacentKeysWithInt:", "relocateAdjacentKeys", "V", 0x2, NULL, NULL },
    { "betweenWithInt:withInt:withInt:", "between", "Z", 0xa, NULL, NULL },
    { "asMap", NULL, "Ljava.util.Map;", 0x0, NULL, "()Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/Integer;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_RAM_BYTES_USED", "BASE_RAM_BYTES_USED", 0x1a, "J", &OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_BASE_RAM_BYTES_USED, NULL, .constantValue.asLong = 0 },
    { "keys_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "freqs_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "mask_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag = { 2, "IntBag", "org.apache.lucene.util", "FrequencyTrackingRingBuffer", 0xa, 9, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag;
}

@end

void OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *self, jint maxSize) {
  NSObject_init(self);
  jint capacity = JavaLangMath_maxWithInt_withInt_(2, maxSize * 3 / 2);
  capacity = JreLShift32(JavaLangInteger_highestOneBitWithInt_(capacity - 1), 1);
  JreAssert((capacity > maxSize), (@"org/apache/lucene/util/FrequencyTrackingRingBuffer.java:125 condition failed: assert capacity > maxSize;"));
  JreStrongAssignAndConsume(&self->keys_, [IOSIntArray newArrayWithLength:capacity]);
  JreStrongAssignAndConsume(&self->freqs_, [IOSIntArray newArrayWithLength:capacity]);
  self->mask_ = capacity - 1;
}

OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *new_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(jint maxSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag, initWithInt_, maxSize)
}

OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *create_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(jint maxSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag, initWithInt_, maxSize)
}

void OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_relocateAdjacentKeysWithInt_(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *self, jint freeSlot) {
  for (jint slot = (freeSlot + 1) & self->mask_; ; slot = (slot + 1) & self->mask_) {
    jint freq = IOSIntArray_Get(nil_chk(self->freqs_), slot);
    if (freq == 0) {
      break;
    }
    jint key = IOSIntArray_Get(nil_chk(self->keys_), slot);
    jint expectedSlot = key & self->mask_;
    if (OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_betweenWithInt_withInt_withInt_(expectedSlot, slot, freeSlot)) {
      *IOSIntArray_GetRef(self->keys_, freeSlot) = key;
      *IOSIntArray_GetRef(self->freqs_, freeSlot) = freq;
      *IOSIntArray_GetRef(self->freqs_, slot) = 0;
      freeSlot = slot;
    }
  }
}

jboolean OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_betweenWithInt_withInt_withInt_(jint chainStart, jint chainEnd, jint slot) {
  OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initialize();
  if (chainStart <= chainEnd) {
    return chainStart <= slot && slot <= chainEnd;
  }
  else {
    return slot >= chainStart || slot <= chainEnd;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag)
