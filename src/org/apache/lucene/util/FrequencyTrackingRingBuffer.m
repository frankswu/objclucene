//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/FrequencyTrackingRingBuffer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/FrequencyTrackingRingBuffer.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

@class OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag;

@interface OrgApacheLuceneUtilFrequencyTrackingRingBuffer () {
 @public
  jint maxSize_;
  IOSIntArray *buffer_;
  jint position_;
  OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *frequencies_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFrequencyTrackingRingBuffer, buffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFrequencyTrackingRingBuffer, frequencies_, OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *)

static jlong OrgApacheLuceneUtilFrequencyTrackingRingBuffer_BASE_RAM_BYTES_USED_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneUtilFrequencyTrackingRingBuffer, BASE_RAM_BYTES_USED_, jlong)

@interface OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag : NSObject < OrgApacheLuceneUtilAccountable > {
 @public
  IOSIntArray *keys_;
  IOSIntArray *freqs_;
  jint mask_;
}

- (instancetype)initWithInt:(jint)maxSize;

- (jlong)ramBytesUsed;

- (jint)frequencyWithInt:(jint)key;

- (jint)addWithInt:(jint)key;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag, keys_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag, freqs_, IOSIntArray *)

static jlong OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_BASE_RAM_BYTES_USED_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag, BASE_RAM_BYTES_USED_, jlong)

__attribute__((unused)) static void OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *self, jint maxSize);

__attribute__((unused)) static OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *new_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(jint maxSize) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilFrequencyTrackingRingBuffer)

@implementation OrgApacheLuceneUtilFrequencyTrackingRingBuffer

- (instancetype)initWithInt:(jint)maxSize
                    withInt:(jint)sentinel {
  OrgApacheLuceneUtilFrequencyTrackingRingBuffer_initWithInt_withInt_(self, maxSize, sentinel);
  return self;
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneUtilFrequencyTrackingRingBuffer_BASE_RAM_BYTES_USED_ + [((OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *) nil_chk(frequencies_)) ramBytesUsed] + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithIntArray_(buffer_);
}

- (void)dealloc {
  RELEASE_(buffer_);
  RELEASE_(frequencies_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilFrequencyTrackingRingBuffer class]) {
    OrgApacheLuceneUtilFrequencyTrackingRingBuffer_BASE_RAM_BYTES_USED_ = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_class_());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilFrequencyTrackingRingBuffer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "FrequencyTrackingRingBuffer", NULL, 0x1, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_RAM_BYTES_USED_", NULL, 0x1a, "J", &OrgApacheLuceneUtilFrequencyTrackingRingBuffer_BASE_RAM_BYTES_USED_, NULL, .constantValue.asLong = 0 },
    { "maxSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "buffer_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "position_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "frequencies_", NULL, 0x12, "Lorg.apache.lucene.util.FrequencyTrackingRingBuffer$IntBag;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apache.lucene.util.FrequencyTrackingRingBuffer$IntBag;"};
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFrequencyTrackingRingBuffer = { 2, "FrequencyTrackingRingBuffer", "org.apache.lucene.util", NULL, 0x11, 2, methods, 5, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheLuceneUtilFrequencyTrackingRingBuffer;
}

@end

void OrgApacheLuceneUtilFrequencyTrackingRingBuffer_initWithInt_withInt_(OrgApacheLuceneUtilFrequencyTrackingRingBuffer *self, jint maxSize, jint sentinel) {
  NSObject_init(self);
  if (maxSize < 2) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"maxSize must be at least 2") autorelease];
  }
  self->maxSize_ = maxSize;
  JreStrongAssignAndConsume(&self->buffer_, [IOSIntArray newArrayWithLength:maxSize]);
  self->position_ = 0;
  JreStrongAssignAndConsume(&self->frequencies_, new_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(maxSize));
  JavaUtilArrays_fillWithIntArray_withInt_(self->buffer_, sentinel);
  for (jint i = 0; i < maxSize; ++i) {
    [self->frequencies_ addWithInt:sentinel];
  }
  JreAssert(([self->frequencies_ frequencyWithInt:sentinel] == maxSize), (@"org/apache/lucene/util/FrequencyTrackingRingBuffer.java:61 condition failed: assert frequencies.frequency(sentinel) == maxSize;"));
}

OrgApacheLuceneUtilFrequencyTrackingRingBuffer *new_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_initWithInt_withInt_(jint maxSize, jint sentinel) {
  OrgApacheLuceneUtilFrequencyTrackingRingBuffer *self = [OrgApacheLuceneUtilFrequencyTrackingRingBuffer alloc];
  OrgApacheLuceneUtilFrequencyTrackingRingBuffer_initWithInt_withInt_(self, maxSize, sentinel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFrequencyTrackingRingBuffer)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag)

@implementation OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag

- (instancetype)initWithInt:(jint)maxSize {
  OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(self, maxSize);
  return self;
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_BASE_RAM_BYTES_USED_ + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithIntArray_(keys_) + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithIntArray_(freqs_);
}

- (jint)frequencyWithInt:(jint)key {
  for (jint slot = key & mask_; ; slot = (slot + 1) & mask_) {
    if (IOSIntArray_Get(nil_chk(keys_), slot) == key) {
      return IOSIntArray_Get(nil_chk(freqs_), slot);
    }
    else if (IOSIntArray_Get(nil_chk(freqs_), slot) == 0) {
      return 0;
    }
  }
}

- (jint)addWithInt:(jint)key {
  for (jint slot = key & mask_; ; slot = (slot + 1) & mask_) {
    if (IOSIntArray_Get(nil_chk(freqs_), slot) == 0) {
      *IOSIntArray_GetRef(nil_chk(keys_), slot) = key;
      return *IOSIntArray_GetRef(freqs_, slot) = 1;
    }
    else if (IOSIntArray_Get(nil_chk(keys_), slot) == key) {
      return ++(*IOSIntArray_GetRef(freqs_, slot));
    }
  }
}

- (void)dealloc {
  RELEASE_(keys_);
  RELEASE_(freqs_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag class]) {
    OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_BASE_RAM_BYTES_USED_ = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_class_());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "IntBag", NULL, 0x0, NULL, NULL },
    { "ramBytesUsed", NULL, "J", 0x1, NULL, NULL },
    { "frequencyWithInt:", "frequency", "I", 0x0, NULL, NULL },
    { "addWithInt:", "add", "I", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_RAM_BYTES_USED_", NULL, 0x1a, "J", &OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_BASE_RAM_BYTES_USED_, NULL, .constantValue.asLong = 0 },
    { "keys_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "freqs_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "mask_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag = { 2, "IntBag", "org.apache.lucene.util", "FrequencyTrackingRingBuffer", 0xa, 4, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag;
}

@end

void OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *self, jint maxSize) {
  NSObject_init(self);
  jint capacity = JavaLangMath_maxWithInt_withInt_(2, maxSize * 3 / 2);
  capacity = JreLShift32(JavaLangInteger_highestOneBitWithInt_(capacity - 1), 1);
  JreAssert((capacity > maxSize), (@"org/apache/lucene/util/FrequencyTrackingRingBuffer.java:125 condition failed: assert capacity > maxSize;"));
  JreStrongAssignAndConsume(&self->keys_, [IOSIntArray newArrayWithLength:capacity]);
  JreStrongAssignAndConsume(&self->freqs_, [IOSIntArray newArrayWithLength:capacity]);
  self->mask_ = capacity - 1;
}

OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *new_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(jint maxSize) {
  OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag *self = [OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag alloc];
  OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag_initWithInt_(self, maxSize);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFrequencyTrackingRingBuffer_IntBag)
