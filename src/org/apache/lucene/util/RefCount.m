//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/RefCount.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/apache/lucene/util/RefCount.h"

@interface OrgApacheLuceneUtilRefCount () {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *refCount_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilRefCount, refCount_, JavaUtilConcurrentAtomicAtomicInteger *)

@implementation OrgApacheLuceneUtilRefCount

- (instancetype)initWithId:(id)object {
  OrgApacheLuceneUtilRefCount_initWithId_(self, object);
  return self;
}

- (void)release__ {
}

- (void)decRef {
  jint rc = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(refCount_)) decrementAndGet];
  if (rc == 0) {
    jboolean success = NO;
    @try {
      [self release__];
      success = YES;
    }
    @finally {
      if (!success) {
        [refCount_ incrementAndGet];
      }
    }
  }
  else if (rc < 0) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$", @"too many decRef calls: refCount is ", rc, @" after decrement")) autorelease];
  }
}

- (id)get {
  return object_;
}

- (void)incRef {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(refCount_)) incrementAndGet];
}

- (void)dealloc {
  RELEASE_(refCount_);
  RELEASE_(object_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:", "RefCount", NULL, 0x1, NULL, "(TT;)V" },
    { "release__", "release", "V", 0x4, "Ljava.io.IOException;", NULL },
    { "decRef", NULL, "V", 0x11, "Ljava.io.IOException;", NULL },
    { "get", NULL, "TT;", 0x11, NULL, "()TT;" },
    { "incRef", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "refCount_", NULL, 0x12, "Ljava.util.concurrent.atomic.AtomicInteger;", NULL, NULL, .constantValue.asLong = 0 },
    { "object_", NULL, 0x14, "TT;", NULL, "TT;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilRefCount = { 2, "RefCount", "org.apache.lucene.util", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_OrgApacheLuceneUtilRefCount;
}

@end

void OrgApacheLuceneUtilRefCount_initWithId_(OrgApacheLuceneUtilRefCount *self, id object) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->refCount_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1));
  JreStrongAssign(&self->object_, object);
}

OrgApacheLuceneUtilRefCount *new_OrgApacheLuceneUtilRefCount_initWithId_(id object) {
  OrgApacheLuceneUtilRefCount *self = [OrgApacheLuceneUtilRefCount alloc];
  OrgApacheLuceneUtilRefCount_initWithId_(self, object);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilRefCount)
