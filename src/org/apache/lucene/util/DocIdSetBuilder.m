//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/DocIdSetBuilder.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BitDocIdSet.h"
#include "org/apache/lucene/util/BitSet.h"
#include "org/apache/lucene/util/DocIdSetBuilder.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/util/IntArrayDocIdSet.h"
#include "org/apache/lucene/util/LSBRadixSorter.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

@interface OrgApacheLuceneUtilDocIdSetBuilder () {
 @public
  jint maxDoc_;
  jint threshold_;
  IOSIntArray *buffer_;
  jint bufferSize_;
  OrgApacheLuceneUtilBitSet *bitSet_;
}

- (void)upgradeToBitSet;

- (void)growBufferWithInt:(jint)minSize;

+ (jint)dedupWithIntArray:(IOSIntArray *)arr
                  withInt:(jint)length;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilDocIdSetBuilder, buffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilDocIdSetBuilder, bitSet_, OrgApacheLuceneUtilBitSet *)

__attribute__((unused)) static void OrgApacheLuceneUtilDocIdSetBuilder_upgradeToBitSet(OrgApacheLuceneUtilDocIdSetBuilder *self);

__attribute__((unused)) static void OrgApacheLuceneUtilDocIdSetBuilder_growBufferWithInt_(OrgApacheLuceneUtilDocIdSetBuilder *self, jint minSize);

__attribute__((unused)) static jint OrgApacheLuceneUtilDocIdSetBuilder_dedupWithIntArray_withInt_(IOSIntArray *arr, jint length);

@implementation OrgApacheLuceneUtilDocIdSetBuilder

- (instancetype)initWithInt:(jint)maxDoc {
  OrgApacheLuceneUtilDocIdSetBuilder_initWithInt_(self, maxDoc);
  return self;
}

- (void)upgradeToBitSet {
  OrgApacheLuceneUtilDocIdSetBuilder_upgradeToBitSet(self);
}

- (void)growBufferWithInt:(jint)minSize {
  OrgApacheLuceneUtilDocIdSetBuilder_growBufferWithInt_(self, minSize);
}

- (void)addWithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)iter {
  [self growWithInt:(jint) JavaLangMath_minWithLong_withLong_(JavaLangInteger_MAX_VALUE, [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(iter)) cost])];
  if (bitSet_ != nil) {
    [bitSet_ or__WithOrgApacheLuceneSearchDocIdSetIterator:iter];
  }
  else {
    while (YES) {
      JreAssert((((IOSIntArray *) nil_chk(buffer_))->size_ <= threshold_), (@"org/apache/lucene/util/DocIdSetBuilder.java:90 condition failed: assert buffer.length <= threshold;"));
      jint end = buffer_->size_;
      for (jint i = bufferSize_; i < end; ++i) {
        jint doc = [iter nextDoc];
        if (doc == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
          bufferSize_ = i;
          return;
        }
        *IOSIntArray_GetRef(buffer_, bufferSize_++) = doc;
      }
      bufferSize_ = end;
      if (bufferSize_ + 1 >= threshold_) {
        break;
      }
      OrgApacheLuceneUtilDocIdSetBuilder_growBufferWithInt_(self, bufferSize_ + 1);
    }
    OrgApacheLuceneUtilDocIdSetBuilder_upgradeToBitSet(self);
    for (jint doc = [iter nextDoc]; doc != OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS; doc = [iter nextDoc]) {
      [((OrgApacheLuceneUtilBitSet *) nil_chk(bitSet_)) setWithInt:doc];
    }
  }
}

- (void)growWithInt:(jint)numDocs {
  if (bitSet_ == nil) {
    jlong newLength = bufferSize_ + numDocs;
    if (newLength < threshold_) {
      OrgApacheLuceneUtilDocIdSetBuilder_growBufferWithInt_(self, (jint) newLength);
    }
    else {
      OrgApacheLuceneUtilDocIdSetBuilder_upgradeToBitSet(self);
    }
  }
}

+ (jint)dedupWithIntArray:(IOSIntArray *)arr
                  withInt:(jint)length {
  return OrgApacheLuceneUtilDocIdSetBuilder_dedupWithIntArray_withInt_(arr, length);
}

- (OrgApacheLuceneSearchDocIdSet *)build {
  return [self buildWithLong:-1];
}

- (OrgApacheLuceneSearchDocIdSet *)buildWithLong:(jlong)costHint {
  @try {
    if (bitSet_ != nil) {
      if (costHint == -1) {
        return [new_OrgApacheLuceneUtilBitDocIdSet_initWithOrgApacheLuceneUtilBitSet_(bitSet_) autorelease];
      }
      else {
        return [new_OrgApacheLuceneUtilBitDocIdSet_initWithOrgApacheLuceneUtilBitSet_withLong_(bitSet_, costHint) autorelease];
      }
    }
    else {
      OrgApacheLuceneUtilLSBRadixSorter *sorter = [new_OrgApacheLuceneUtilLSBRadixSorter_init() autorelease];
      [sorter sortWithIntArray:buffer_ withInt:0 withInt:bufferSize_];
      jint l = OrgApacheLuceneUtilDocIdSetBuilder_dedupWithIntArray_withInt_(buffer_, bufferSize_);
      JreAssert((l <= bufferSize_), (@"org/apache/lucene/util/DocIdSetBuilder.java:192 condition failed: assert l <= bufferSize;"));
      JreStrongAssign(&buffer_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(buffer_, l + 1));
      *IOSIntArray_GetRef(nil_chk(buffer_), l) = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
      return [new_OrgApacheLuceneUtilIntArrayDocIdSet_initWithIntArray_withInt_(buffer_, l) autorelease];
    }
  }
  @finally {
    JreStrongAssign(&self->buffer_, nil);
    self->bufferSize_ = 0;
    JreStrongAssign(&self->bitSet_, nil);
  }
}

- (void)dealloc {
  RELEASE_(buffer_);
  RELEASE_(bitSet_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "DocIdSetBuilder", NULL, 0x1, NULL, NULL },
    { "upgradeToBitSet", NULL, "V", 0x2, NULL, NULL },
    { "growBufferWithInt:", "growBuffer", "V", 0x2, NULL, NULL },
    { "addWithOrgApacheLuceneSearchDocIdSetIterator:", "add", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "growWithInt:", "grow", "V", 0x1, NULL, NULL },
    { "dedupWithIntArray:withInt:", "dedup", "I", 0xa, NULL, NULL },
    { "build", NULL, "Lorg.apache.lucene.search.DocIdSet;", 0x1, NULL, NULL },
    { "buildWithLong:", "build", "Lorg.apache.lucene.search.DocIdSet;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "maxDoc_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "threshold_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "buffer_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "bufferSize_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "bitSet_", NULL, 0x2, "Lorg.apache.lucene.util.BitSet;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilDocIdSetBuilder = { 2, "DocIdSetBuilder", "org.apache.lucene.util", NULL, 0x11, 8, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheLuceneUtilDocIdSetBuilder;
}

@end

void OrgApacheLuceneUtilDocIdSetBuilder_initWithInt_(OrgApacheLuceneUtilDocIdSetBuilder *self, jint maxDoc) {
  NSObject_init(self);
  self->maxDoc_ = maxDoc;
  self->threshold_ = JreURShift32(maxDoc, 7);
  JreStrongAssignAndConsume(&self->buffer_, [IOSIntArray newArrayWithLength:0]);
  self->bufferSize_ = 0;
  JreStrongAssign(&self->bitSet_, nil);
}

OrgApacheLuceneUtilDocIdSetBuilder *new_OrgApacheLuceneUtilDocIdSetBuilder_initWithInt_(jint maxDoc) {
  OrgApacheLuceneUtilDocIdSetBuilder *self = [OrgApacheLuceneUtilDocIdSetBuilder alloc];
  OrgApacheLuceneUtilDocIdSetBuilder_initWithInt_(self, maxDoc);
  return self;
}

void OrgApacheLuceneUtilDocIdSetBuilder_upgradeToBitSet(OrgApacheLuceneUtilDocIdSetBuilder *self) {
  JreAssert((self->bitSet_ == nil), (@"org/apache/lucene/util/DocIdSetBuilder.java:58 condition failed: assert bitSet == null;"));
  JreStrongAssignAndConsume(&self->bitSet_, new_OrgApacheLuceneUtilFixedBitSet_initWithInt_(self->maxDoc_));
  for (jint i = 0; i < self->bufferSize_; ++i) {
    [self->bitSet_ setWithInt:IOSIntArray_Get(nil_chk(self->buffer_), i)];
  }
  JreStrongAssign(&self->buffer_, nil);
  self->bufferSize_ = 0;
}

void OrgApacheLuceneUtilDocIdSetBuilder_growBufferWithInt_(OrgApacheLuceneUtilDocIdSetBuilder *self, jint minSize) {
  JreAssert((minSize < self->threshold_), (@"org/apache/lucene/util/DocIdSetBuilder.java:69 condition failed: assert minSize < threshold;"));
  if (((IOSIntArray *) nil_chk(self->buffer_))->size_ < minSize) {
    jint nextSize = JavaLangMath_minWithInt_withInt_(self->threshold_, OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(minSize, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT));
    IOSIntArray *newBuffer = [IOSIntArray arrayWithLength:nextSize];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buffer_, 0, newBuffer, 0, self->buffer_->size_);
    JreStrongAssign(&self->buffer_, newBuffer);
  }
}

jint OrgApacheLuceneUtilDocIdSetBuilder_dedupWithIntArray_withInt_(IOSIntArray *arr, jint length) {
  OrgApacheLuceneUtilDocIdSetBuilder_initialize();
  if (length == 0) {
    return 0;
  }
  jint l = 1;
  jint previous = IOSIntArray_Get(nil_chk(arr), 0);
  for (jint i = 1; i < length; ++i) {
    jint value = IOSIntArray_Get(arr, i);
    JreAssert((value >= previous), (@"org/apache/lucene/util/DocIdSetBuilder.java:160 condition failed: assert value >= previous;"));
    if (value != previous) {
      *IOSIntArray_GetRef(arr, l++) = value;
      previous = value;
    }
  }
  return l;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilDocIdSetBuilder)
