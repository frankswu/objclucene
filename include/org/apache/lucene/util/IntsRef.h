//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/IntsRef.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgApacheLuceneUtilIntsRef_INCLUDE_ALL")
#if OrgApacheLuceneUtilIntsRef_RESTRICT
#define OrgApacheLuceneUtilIntsRef_INCLUDE_ALL 0
#else
#define OrgApacheLuceneUtilIntsRef_INCLUDE_ALL 1
#endif
#undef OrgApacheLuceneUtilIntsRef_RESTRICT

#if !defined (_OrgApacheLuceneUtilIntsRef_) && (OrgApacheLuceneUtilIntsRef_INCLUDE_ALL || OrgApacheLuceneUtilIntsRef_INCLUDE)
#define _OrgApacheLuceneUtilIntsRef_

#define JavaLangComparable_RESTRICT 1
#define JavaLangComparable_INCLUDE 1
#include "java/lang/Comparable.h"

@class IOSIntArray;

@interface OrgApacheLuceneUtilIntsRef : NSObject < JavaLangComparable, NSCopying > {
 @public
  IOSIntArray *ints_;
  jint offset_;
  jint length_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)capacity;

- (instancetype)initWithIntArray:(IOSIntArray *)ints
                         withInt:(jint)offset
                         withInt:(jint)length;

- (OrgApacheLuceneUtilIntsRef *)clone;

- (jint)compareToWithId:(OrgApacheLuceneUtilIntsRef *)other;

+ (OrgApacheLuceneUtilIntsRef *)deepCopyOfWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)other;

- (jboolean)isEqual:(id)other;

- (NSUInteger)hash;

- (jboolean)intsEqualsWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)other;

- (jboolean)isValid;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneUtilIntsRef)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilIntsRef, ints_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *OrgApacheLuceneUtilIntsRef_EMPTY_INTS_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneUtilIntsRef, EMPTY_INTS_, IOSIntArray *)

FOUNDATION_EXPORT void OrgApacheLuceneUtilIntsRef_init(OrgApacheLuceneUtilIntsRef *self);

FOUNDATION_EXPORT OrgApacheLuceneUtilIntsRef *new_OrgApacheLuceneUtilIntsRef_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheLuceneUtilIntsRef_initWithInt_(OrgApacheLuceneUtilIntsRef *self, jint capacity);

FOUNDATION_EXPORT OrgApacheLuceneUtilIntsRef *new_OrgApacheLuceneUtilIntsRef_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheLuceneUtilIntsRef_initWithIntArray_withInt_withInt_(OrgApacheLuceneUtilIntsRef *self, IOSIntArray *ints, jint offset, jint length);

FOUNDATION_EXPORT OrgApacheLuceneUtilIntsRef *new_OrgApacheLuceneUtilIntsRef_initWithIntArray_withInt_withInt_(IOSIntArray *ints, jint offset, jint length) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilIntsRef_deepCopyOfWithOrgApacheLuceneUtilIntsRef_(OrgApacheLuceneUtilIntsRef *other);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilIntsRef)

#endif

#pragma pop_macro("OrgApacheLuceneUtilIntsRef_INCLUDE_ALL")
