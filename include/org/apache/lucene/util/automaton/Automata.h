//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/automaton/Automata.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgApacheLuceneUtilAutomatonAutomata_INCLUDE_ALL")
#if OrgApacheLuceneUtilAutomatonAutomata_RESTRICT
#define OrgApacheLuceneUtilAutomatonAutomata_INCLUDE_ALL 0
#else
#define OrgApacheLuceneUtilAutomatonAutomata_INCLUDE_ALL 1
#endif
#undef OrgApacheLuceneUtilAutomatonAutomata_RESTRICT

#if !defined (_OrgApacheLuceneUtilAutomatonAutomata_) && (OrgApacheLuceneUtilAutomatonAutomata_INCLUDE_ALL || OrgApacheLuceneUtilAutomatonAutomata_INCLUDE)
#define _OrgApacheLuceneUtilAutomatonAutomata_

@class IOSIntArray;
@class OrgApacheLuceneUtilAutomatonAutomaton;
@class OrgApacheLuceneUtilBytesRef;
@protocol JavaUtilCollection;

@interface OrgApacheLuceneUtilAutomatonAutomata : NSObject

#pragma mark Public

+ (jint)appendAnyCharWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                       withInt:(jint)state;

+ (jint)appendCharWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                    withInt:(jint)state
                                                    withInt:(jint)c;

+ (OrgApacheLuceneUtilAutomatonAutomaton *)makeAnyBinary;

+ (OrgApacheLuceneUtilAutomatonAutomaton *)makeAnyChar;

+ (OrgApacheLuceneUtilAutomatonAutomaton *)makeAnyString;

+ (OrgApacheLuceneUtilAutomatonAutomaton *)makeBinaryWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term;

+ (OrgApacheLuceneUtilAutomatonAutomaton *)makeBinaryIntervalWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)min
                                                                                 withBoolean:(jboolean)minInclusive
                                                             withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)max
                                                                                 withBoolean:(jboolean)maxInclusive;

+ (OrgApacheLuceneUtilAutomatonAutomaton *)makeCharWithInt:(jint)c;

+ (OrgApacheLuceneUtilAutomatonAutomaton *)makeCharRangeWithInt:(jint)min
                                                        withInt:(jint)max;

+ (OrgApacheLuceneUtilAutomatonAutomaton *)makeDecimalIntervalWithInt:(jint)min
                                                              withInt:(jint)max
                                                              withInt:(jint)digits;

+ (OrgApacheLuceneUtilAutomatonAutomaton *)makeEmpty;

+ (OrgApacheLuceneUtilAutomatonAutomaton *)makeEmptyString;

+ (OrgApacheLuceneUtilAutomatonAutomaton *)makeStringWithIntArray:(IOSIntArray *)word
                                                          withInt:(jint)offset
                                                          withInt:(jint)length;

+ (OrgApacheLuceneUtilAutomatonAutomaton *)makeStringWithNSString:(NSString *)s;

+ (OrgApacheLuceneUtilAutomatonAutomaton *)makeStringUnionWithJavaUtilCollection:(id<JavaUtilCollection>)utf8Strings;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilAutomatonAutomata)

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonAutomata_makeEmpty();

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonAutomata_makeEmptyString();

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonAutomata_makeAnyString();

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonAutomata_makeAnyBinary();

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonAutomata_makeAnyChar();

FOUNDATION_EXPORT jint OrgApacheLuceneUtilAutomatonAutomata_appendAnyCharWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *a, jint state);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonAutomata_makeCharWithInt_(jint c);

FOUNDATION_EXPORT jint OrgApacheLuceneUtilAutomatonAutomata_appendCharWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *a, jint state, jint c);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonAutomata_makeCharRangeWithInt_withInt_(jint min, jint max);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonAutomata_makeBinaryIntervalWithOrgApacheLuceneUtilBytesRef_withBoolean_withOrgApacheLuceneUtilBytesRef_withBoolean_(OrgApacheLuceneUtilBytesRef *min, jboolean minInclusive, OrgApacheLuceneUtilBytesRef *max, jboolean maxInclusive);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonAutomata_makeDecimalIntervalWithInt_withInt_withInt_(jint min, jint max, jint digits);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonAutomata_makeStringWithNSString_(NSString *s);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonAutomata_makeBinaryWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *term);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonAutomata_makeStringWithIntArray_withInt_withInt_(IOSIntArray *word, jint offset, jint length);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonAutomata_makeStringUnionWithJavaUtilCollection_(id<JavaUtilCollection> utf8Strings);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonAutomata)

#endif

#pragma pop_macro("OrgApacheLuceneUtilAutomatonAutomata_INCLUDE_ALL")
