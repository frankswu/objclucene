//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/PagedGrowableWriter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgApacheLuceneUtilPackedPagedGrowableWriter_INCLUDE_ALL")
#if OrgApacheLuceneUtilPackedPagedGrowableWriter_RESTRICT
#define OrgApacheLuceneUtilPackedPagedGrowableWriter_INCLUDE_ALL 0
#else
#define OrgApacheLuceneUtilPackedPagedGrowableWriter_INCLUDE_ALL 1
#endif
#undef OrgApacheLuceneUtilPackedPagedGrowableWriter_RESTRICT

#if !defined (_OrgApacheLuceneUtilPackedPagedGrowableWriter_) && (OrgApacheLuceneUtilPackedPagedGrowableWriter_INCLUDE_ALL || OrgApacheLuceneUtilPackedPagedGrowableWriter_INCLUDE)
#define _OrgApacheLuceneUtilPackedPagedGrowableWriter_

#define OrgApacheLuceneUtilPackedAbstractPagedMutable_RESTRICT 1
#define OrgApacheLuceneUtilPackedAbstractPagedMutable_INCLUDE 1
#include "org/apache/lucene/util/packed/AbstractPagedMutable.h"

@class OrgApacheLuceneUtilPackedPackedInts_Mutable;

@interface OrgApacheLuceneUtilPackedPagedGrowableWriter : OrgApacheLuceneUtilPackedAbstractPagedMutable {
 @public
  jfloat acceptableOverheadRatio_;
}

#pragma mark Public

- (instancetype)initWithLong:(jlong)size
                     withInt:(jint)pageSize
                     withInt:(jint)startBitsPerValue
                   withFloat:(jfloat)acceptableOverheadRatio;

#pragma mark Protected

- (jlong)baseRamBytesUsed;

- (OrgApacheLuceneUtilPackedPackedInts_Mutable *)newMutableWithInt:(jint)valueCount
                                                           withInt:(jint)bitsPerValue OBJC_METHOD_FAMILY_NONE;

- (OrgApacheLuceneUtilPackedPagedGrowableWriter *)newUnfilledCopyWithLong:(jlong)newSize OBJC_METHOD_FAMILY_NONE;

#pragma mark Package-Private

- (instancetype)initWithLong:(jlong)size
                     withInt:(jint)pageSize
                     withInt:(jint)startBitsPerValue
                   withFloat:(jfloat)acceptableOverheadRatio
                 withBoolean:(jboolean)fillPages;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilPackedPagedGrowableWriter)

FOUNDATION_EXPORT void OrgApacheLuceneUtilPackedPagedGrowableWriter_initWithLong_withInt_withInt_withFloat_(OrgApacheLuceneUtilPackedPagedGrowableWriter *self, jlong size, jint pageSize, jint startBitsPerValue, jfloat acceptableOverheadRatio);

FOUNDATION_EXPORT OrgApacheLuceneUtilPackedPagedGrowableWriter *new_OrgApacheLuceneUtilPackedPagedGrowableWriter_initWithLong_withInt_withInt_withFloat_(jlong size, jint pageSize, jint startBitsPerValue, jfloat acceptableOverheadRatio) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheLuceneUtilPackedPagedGrowableWriter_initWithLong_withInt_withInt_withFloat_withBoolean_(OrgApacheLuceneUtilPackedPagedGrowableWriter *self, jlong size, jint pageSize, jint startBitsPerValue, jfloat acceptableOverheadRatio, jboolean fillPages);

FOUNDATION_EXPORT OrgApacheLuceneUtilPackedPagedGrowableWriter *new_OrgApacheLuceneUtilPackedPagedGrowableWriter_initWithLong_withInt_withInt_withFloat_withBoolean_(jlong size, jint pageSize, jint startBitsPerValue, jfloat acceptableOverheadRatio, jboolean fillPages) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilPackedPagedGrowableWriter)

#endif

#pragma pop_macro("OrgApacheLuceneUtilPackedPagedGrowableWriter_INCLUDE_ALL")
