//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/GrowableWriter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgApacheLuceneUtilPackedGrowableWriter_INCLUDE_ALL")
#if OrgApacheLuceneUtilPackedGrowableWriter_RESTRICT
#define OrgApacheLuceneUtilPackedGrowableWriter_INCLUDE_ALL 0
#else
#define OrgApacheLuceneUtilPackedGrowableWriter_INCLUDE_ALL 1
#endif
#undef OrgApacheLuceneUtilPackedGrowableWriter_RESTRICT

#if !defined (_OrgApacheLuceneUtilPackedGrowableWriter_) && (OrgApacheLuceneUtilPackedGrowableWriter_INCLUDE_ALL || OrgApacheLuceneUtilPackedGrowableWriter_INCLUDE)
#define _OrgApacheLuceneUtilPackedGrowableWriter_

#define OrgApacheLuceneUtilPackedPackedInts_RESTRICT 1
#define OrgApacheLuceneUtilPackedPackedInts_Mutable_INCLUDE 1
#include "org/apache/lucene/util/packed/PackedInts.h"

@class IOSLongArray;
@class OrgApacheLuceneStoreDataOutput;

@interface OrgApacheLuceneUtilPackedGrowableWriter : OrgApacheLuceneUtilPackedPackedInts_Mutable

#pragma mark Public

- (instancetype)initWithInt:(jint)startBitsPerValue
                    withInt:(jint)valueCount
                  withFloat:(jfloat)acceptableOverheadRatio;

- (void)clear;

- (void)fillWithInt:(jint)fromIndex
            withInt:(jint)toIndex
           withLong:(jlong)val;

- (jlong)getWithInt:(jint)index;

- (jint)getWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len;

- (jint)getBitsPerValue;

- (OrgApacheLuceneUtilPackedPackedInts_Mutable *)getMutable;

- (jlong)ramBytesUsed;

- (OrgApacheLuceneUtilPackedGrowableWriter *)resizeWithInt:(jint)newSize;

- (void)saveWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg;

- (void)setWithInt:(jint)index
          withLong:(jlong)value;

- (jint)setWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len;

- (jint)size;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilPackedGrowableWriter)

FOUNDATION_EXPORT void OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_(OrgApacheLuceneUtilPackedGrowableWriter *self, jint startBitsPerValue, jint valueCount, jfloat acceptableOverheadRatio);

FOUNDATION_EXPORT OrgApacheLuceneUtilPackedGrowableWriter *new_OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_(jint startBitsPerValue, jint valueCount, jfloat acceptableOverheadRatio) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilPackedGrowableWriter)

#endif

#pragma pop_macro("OrgApacheLuceneUtilPackedGrowableWriter_INCLUDE_ALL")
