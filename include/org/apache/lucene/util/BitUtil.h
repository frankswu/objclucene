//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/BitUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgApacheLuceneUtilBitUtil_INCLUDE_ALL")
#if OrgApacheLuceneUtilBitUtil_RESTRICT
#define OrgApacheLuceneUtilBitUtil_INCLUDE_ALL 0
#else
#define OrgApacheLuceneUtilBitUtil_INCLUDE_ALL 1
#endif
#undef OrgApacheLuceneUtilBitUtil_RESTRICT

#if !defined (_OrgApacheLuceneUtilBitUtil_) && (OrgApacheLuceneUtilBitUtil_INCLUDE_ALL || OrgApacheLuceneUtilBitUtil_INCLUDE)
#define _OrgApacheLuceneUtilBitUtil_

@class IOSLongArray;

@interface OrgApacheLuceneUtilBitUtil : NSObject

#pragma mark Public

+ (jint)bitCountWithByte:(jbyte)b;

+ (jint)bitListWithByte:(jbyte)b;

+ (jlong)deinterleaveWithLong:(jlong)b;

+ (jlong)flipFlopWithLong:(jlong)b;

+ (jlong)interleaveWithLong:(jlong)v1
                   withLong:(jlong)v2;

+ (jint)nextHighestPowerOfTwoWithInt:(jint)v;

+ (jlong)nextHighestPowerOfTwoWithLong:(jlong)v;

+ (jlong)pop_andnotWithLongArray:(IOSLongArray *)arr1
                   withLongArray:(IOSLongArray *)arr2
                         withInt:(jint)wordOffset
                         withInt:(jint)numWords;

+ (jlong)pop_arrayWithLongArray:(IOSLongArray *)arr
                        withInt:(jint)wordOffset
                        withInt:(jint)numWords;

+ (jlong)pop_intersectWithLongArray:(IOSLongArray *)arr1
                      withLongArray:(IOSLongArray *)arr2
                            withInt:(jint)wordOffset
                            withInt:(jint)numWords;

+ (jlong)pop_unionWithLongArray:(IOSLongArray *)arr1
                  withLongArray:(IOSLongArray *)arr2
                        withInt:(jint)wordOffset
                        withInt:(jint)numWords;

+ (jlong)pop_xorWithLongArray:(IOSLongArray *)arr1
                withLongArray:(IOSLongArray *)arr2
                      withInt:(jint)wordOffset
                      withInt:(jint)numWords;

+ (jint)zigZagDecodeWithInt:(jint)i;

+ (jlong)zigZagDecodeWithLong:(jlong)l;

+ (jint)zigZagEncodeWithInt:(jint)i;

+ (jlong)zigZagEncodeWithLong:(jlong)l;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneUtilBitUtil)

FOUNDATION_EXPORT jint OrgApacheLuceneUtilBitUtil_bitCountWithByte_(jbyte b);

FOUNDATION_EXPORT jint OrgApacheLuceneUtilBitUtil_bitListWithByte_(jbyte b);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(IOSLongArray *arr, jint wordOffset, jint numWords);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilBitUtil_pop_intersectWithLongArray_withLongArray_withInt_withInt_(IOSLongArray *arr1, IOSLongArray *arr2, jint wordOffset, jint numWords);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilBitUtil_pop_unionWithLongArray_withLongArray_withInt_withInt_(IOSLongArray *arr1, IOSLongArray *arr2, jint wordOffset, jint numWords);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilBitUtil_pop_andnotWithLongArray_withLongArray_withInt_withInt_(IOSLongArray *arr1, IOSLongArray *arr2, jint wordOffset, jint numWords);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilBitUtil_pop_xorWithLongArray_withLongArray_withInt_withInt_(IOSLongArray *arr1, IOSLongArray *arr2, jint wordOffset, jint numWords);

FOUNDATION_EXPORT jint OrgApacheLuceneUtilBitUtil_nextHighestPowerOfTwoWithInt_(jint v);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilBitUtil_nextHighestPowerOfTwoWithLong_(jlong v);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilBitUtil_interleaveWithLong_withLong_(jlong v1, jlong v2);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilBitUtil_deinterleaveWithLong_(jlong b);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilBitUtil_flipFlopWithLong_(jlong b);

FOUNDATION_EXPORT jint OrgApacheLuceneUtilBitUtil_zigZagEncodeWithInt_(jint i);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilBitUtil_zigZagEncodeWithLong_(jlong l);

FOUNDATION_EXPORT jint OrgApacheLuceneUtilBitUtil_zigZagDecodeWithInt_(jint i);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilBitUtil_zigZagDecodeWithLong_(jlong l);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilBitUtil)

#endif

#pragma pop_macro("OrgApacheLuceneUtilBitUtil_INCLUDE_ALL")
