//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgApacheLuceneAnalysisPatternPatternTokenizer_INCLUDE_ALL")
#if OrgApacheLuceneAnalysisPatternPatternTokenizer_RESTRICT
#define OrgApacheLuceneAnalysisPatternPatternTokenizer_INCLUDE_ALL 0
#else
#define OrgApacheLuceneAnalysisPatternPatternTokenizer_INCLUDE_ALL 1
#endif
#undef OrgApacheLuceneAnalysisPatternPatternTokenizer_RESTRICT

#if !defined (_OrgApacheLuceneAnalysisPatternPatternTokenizer_) && (OrgApacheLuceneAnalysisPatternPatternTokenizer_INCLUDE_ALL || OrgApacheLuceneAnalysisPatternPatternTokenizer_INCLUDE)
#define _OrgApacheLuceneAnalysisPatternPatternTokenizer_

#define OrgApacheLuceneAnalysisTokenizer_RESTRICT 1
#define OrgApacheLuceneAnalysisTokenizer_INCLUDE 1
#include "org/apache/lucene/analysis/Tokenizer.h"

@class IOSCharArray;
@class JavaUtilRegexPattern;
@class OrgApacheLuceneUtilAttributeFactory;

@interface OrgApacheLuceneAnalysisPatternPatternTokenizer : OrgApacheLuceneAnalysisTokenizer {
 @public
  IOSCharArray *buffer_;
}

#pragma mark Public

- (instancetype)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory
                                   withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                                    withInt:(jint)group;

- (instancetype)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                     withInt:(jint)group;

- (void)end;

- (jboolean)incrementToken;

- (void)reset;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisPatternPatternTokenizer)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternTokenizer, buffer_, IOSCharArray *)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithJavaUtilRegexPattern_withInt_(OrgApacheLuceneAnalysisPatternPatternTokenizer *self, JavaUtilRegexPattern *pattern, jint group);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisPatternPatternTokenizer *new_OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithJavaUtilRegexPattern_withInt_(JavaUtilRegexPattern *pattern, jint group) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withJavaUtilRegexPattern_withInt_(OrgApacheLuceneAnalysisPatternPatternTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory, JavaUtilRegexPattern *pattern, jint group);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisPatternPatternTokenizer *new_OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withJavaUtilRegexPattern_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, JavaUtilRegexPattern *pattern, jint group) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisPatternPatternTokenizer)

#endif

#pragma pop_macro("OrgApacheLuceneAnalysisPatternPatternTokenizer_INCLUDE_ALL")
