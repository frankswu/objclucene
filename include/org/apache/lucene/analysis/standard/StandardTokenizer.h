//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStandardTokenizer")
#ifdef RESTRICT_OrgApacheLuceneAnalysisStandardStandardTokenizer
#define INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStandardTokenizer 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStandardTokenizer 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisStandardStandardTokenizer

#if !defined (OrgApacheLuceneAnalysisStandardStandardTokenizer_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStandardTokenizer || defined(INCLUDE_OrgApacheLuceneAnalysisStandardStandardTokenizer))
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_

#define RESTRICT_OrgApacheLuceneAnalysisTokenizer 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenizer 1
#include "org/apache/lucene/analysis/Tokenizer.h"

@class IOSObjectArray;
@class OrgApacheLuceneUtilAttributeFactory;

/*!
 @brief A grammar-based tokenizer constructed with JFlex.
 <p>
 This class implements the Word Break rules from the
 Unicode Text Segmentation algorithm, as specified in 
 <a href="http://unicode.org/reports/tr29/">Unicode Standard Annex #29</a>.
 <p>Many applications have specific tokenizer needs.  If this tokenizer does
 not suit your application, please consider copying this source code
 directory to your project and maintaining your own grammar-based tokenizer.
 */
@interface OrgApacheLuceneAnalysisStandardStandardTokenizer : OrgApacheLuceneAnalysisTokenizer

+ (jint)ALPHANUM;

+ (jint)APOSTROPHE;

+ (jint)ACRONYM;

+ (jint)COMPANY;

+ (jint)EMAIL;

+ (jint)HOST;

+ (jint)NUM;

+ (jint)CJ;

+ (jint)ACRONYM_DEP;

+ (jint)SOUTHEAST_ASIAN;

+ (jint)IDEOGRAPHIC;

+ (jint)HIRAGANA;

+ (jint)KATAKANA;

+ (jint)HANGUL;

+ (IOSObjectArray *)TOKEN_TYPES;

+ (jint)MAX_TOKEN_LENGTH_LIMIT;

#pragma mark Public

/*!
 @brief Creates a new instance of the <code>org.apache.lucene.analysis.standard.StandardTokenizer</code>.
 Attaches
 the <code>input</code> to the newly created JFlex scanner.
 See http://issues.apache.org/jira/browse/LUCENE-1068
 */
- (instancetype)init;

/*!
 @brief Creates a new StandardTokenizer with a given <code>org.apache.lucene.util.AttributeFactory</code>
 */
- (instancetype)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory;

- (void)close;

- (void)end;

/*!
 - seealso: #setMaxTokenLength
 */
- (jint)getMaxTokenLength;

- (jboolean)incrementToken;

- (void)reset;

/*!
 @brief Set the max allowed token length.
 No tokens longer than this are emitted.
 @throws IllegalArgumentException if the given length is outside of the
 range [1, #MAX_TOKEN_LENGTH_LIMIT].
 */
- (void)setMaxTokenLengthWithInt:(jint)length;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneAnalysisStandardStandardTokenizer)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_ALPHANUM();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_ALPHANUM 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, ALPHANUM, jint)

/*!
 */
inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_APOSTROPHE();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_APOSTROPHE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, APOSTROPHE, jint)

/*!
 */
inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_ACRONYM();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_ACRONYM 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, ACRONYM, jint)

/*!
 */
inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_COMPANY();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_COMPANY 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, COMPANY, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_EMAIL();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_EMAIL 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, EMAIL, jint)

/*!
 */
inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_HOST();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_HOST 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, HOST, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_NUM();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_NUM 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, NUM, jint)

/*!
 */
inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_CJ();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_CJ 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, CJ, jint)

/*!
 */
inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_ACRONYM_DEP();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_ACRONYM_DEP 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, ACRONYM_DEP, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_SOUTHEAST_ASIAN();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_SOUTHEAST_ASIAN 9
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, SOUTHEAST_ASIAN, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_IDEOGRAPHIC();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_IDEOGRAPHIC 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, IDEOGRAPHIC, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_HIRAGANA();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_HIRAGANA 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, HIRAGANA, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_KATAKANA();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_KATAKANA 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, KATAKANA, jint)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_HANGUL();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_HANGUL 13
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, HANGUL, jint)

/*!
 @brief String token types that correspond to token type int constants
 */
inline IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer_get_TOKEN_TYPES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer_TOKEN_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStandardTokenizer, TOKEN_TYPES, IOSObjectArray *)

inline jint OrgApacheLuceneAnalysisStandardStandardTokenizer_get_MAX_TOKEN_LENGTH_LIMIT();
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_MAX_TOKEN_LENGTH_LIMIT 1048576
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStandardTokenizer, MAX_TOKEN_LENGTH_LIMIT, jint)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisStandardStandardTokenizer_init(OrgApacheLuceneAnalysisStandardStandardTokenizer *self);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStandardTokenizer *new_OrgApacheLuceneAnalysisStandardStandardTokenizer_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStandardTokenizer *create_OrgApacheLuceneAnalysisStandardStandardTokenizer_init();

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneAnalysisStandardStandardTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStandardTokenizer *new_OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneUtilAttributeFactory *factory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStandardTokenizer *create_OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneUtilAttributeFactory *factory);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisStandardStandardTokenizer)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStandardTokenizer")
