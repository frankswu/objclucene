//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgApacheLuceneAnalysisStandardStandardTokenizer_INCLUDE_ALL")
#if OrgApacheLuceneAnalysisStandardStandardTokenizer_RESTRICT
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_INCLUDE_ALL 0
#else
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_INCLUDE_ALL 1
#endif
#undef OrgApacheLuceneAnalysisStandardStandardTokenizer_RESTRICT

#if !defined (_OrgApacheLuceneAnalysisStandardStandardTokenizer_) && (OrgApacheLuceneAnalysisStandardStandardTokenizer_INCLUDE_ALL || OrgApacheLuceneAnalysisStandardStandardTokenizer_INCLUDE)
#define _OrgApacheLuceneAnalysisStandardStandardTokenizer_

#define OrgApacheLuceneAnalysisTokenizer_RESTRICT 1
#define OrgApacheLuceneAnalysisTokenizer_INCLUDE 1
#include "org/apache/lucene/analysis/Tokenizer.h"

@class IOSObjectArray;
@class OrgApacheLuceneUtilAttributeFactory;

#define OrgApacheLuceneAnalysisStandardStandardTokenizer_ALPHANUM 0
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_APOSTROPHE 1
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_ACRONYM 2
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_COMPANY 3
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_EMAIL 4
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_HOST 5
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_NUM 6
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_CJ 7
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_ACRONYM_DEP 8
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_SOUTHEAST_ASIAN 9
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_IDEOGRAPHIC 10
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_HIRAGANA 11
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_KATAKANA 12
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_HANGUL 13
#define OrgApacheLuceneAnalysisStandardStandardTokenizer_MAX_TOKEN_LENGTH_LIMIT 1048576

@interface OrgApacheLuceneAnalysisStandardStandardTokenizer : OrgApacheLuceneAnalysisTokenizer

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory;

- (void)close;

- (void)end;

- (jint)getMaxTokenLength;

- (jboolean)incrementToken;

- (void)reset;

- (void)setMaxTokenLengthWithInt:(jint)length;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneAnalysisStandardStandardTokenizer)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, ALPHANUM, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, APOSTROPHE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, ACRONYM, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, COMPANY, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, EMAIL, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, HOST, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, NUM, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, CJ, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, ACRONYM_DEP, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, SOUTHEAST_ASIAN, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, IDEOGRAPHIC, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, HIRAGANA, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, KATAKANA, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, HANGUL, jint)

FOUNDATION_EXPORT IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer_TOKEN_TYPES_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, TOKEN_TYPES_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, MAX_TOKEN_LENGTH_LIMIT, jint)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisStandardStandardTokenizer_init(OrgApacheLuceneAnalysisStandardStandardTokenizer *self);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStandardTokenizer *new_OrgApacheLuceneAnalysisStandardStandardTokenizer_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneAnalysisStandardStandardTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStandardTokenizer *new_OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneUtilAttributeFactory *factory) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisStandardStandardTokenizer)

#endif

#pragma pop_macro("OrgApacheLuceneAnalysisStandardStandardTokenizer_INCLUDE_ALL")
