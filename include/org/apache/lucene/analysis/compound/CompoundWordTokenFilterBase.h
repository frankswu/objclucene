//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase")
#ifdef RESTRICT_OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase
#define INCLUDE_ALL_OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase

#if !defined (OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase || defined(INCLUDE_OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase))
#define OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_

#define RESTRICT_OrgApacheLuceneAnalysisTokenFilter 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenFilter 1
#include "org/apache/lucene/analysis/TokenFilter.h"

@class JavaUtilLinkedList;
@class OrgApacheLuceneAnalysisTokenStream;
@class OrgApacheLuceneAnalysisUtilCharArraySet;
@protocol OrgApacheLuceneAnalysisTokenattributesCharTermAttribute;
@protocol OrgApacheLuceneAnalysisTokenattributesOffsetAttribute;

/*!
 @brief Base class for decomposition token filters.
 */
@interface OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase : OrgApacheLuceneAnalysisTokenFilter {
 @public
  OrgApacheLuceneAnalysisUtilCharArraySet *dictionary_;
  JavaUtilLinkedList *tokens_;
  jint minWordSize_;
  jint minSubwordSize_;
  jint maxSubwordSize_;
  jboolean onlyLongestMatch_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAtt_;
}

+ (jint)DEFAULT_MIN_WORD_SIZE;

+ (jint)DEFAULT_MIN_SUBWORD_SIZE;

+ (jint)DEFAULT_MAX_SUBWORD_SIZE;

#pragma mark Public

- (jboolean)incrementToken;

- (void)reset;

#pragma mark Protected

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
               withOrgApacheLuceneAnalysisUtilCharArraySet:(OrgApacheLuceneAnalysisUtilCharArraySet *)dictionary;

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
               withOrgApacheLuceneAnalysisUtilCharArraySet:(OrgApacheLuceneAnalysisUtilCharArraySet *)dictionary
                                               withBoolean:(jboolean)onlyLongestMatch;

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
               withOrgApacheLuceneAnalysisUtilCharArraySet:(OrgApacheLuceneAnalysisUtilCharArraySet *)dictionary
                                                   withInt:(jint)minWordSize
                                                   withInt:(jint)minSubwordSize
                                                   withInt:(jint)maxSubwordSize
                                               withBoolean:(jboolean)onlyLongestMatch;

/*!
 @brief Decomposes the current <code>termAtt</code> and places <code>CompoundToken</code> instances in the <code>tokens</code> list.
 The original token may not be placed in the list, as it is automatically passed through this filter.
 */
- (void)decompose;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase, dictionary_, OrgApacheLuceneAnalysisUtilCharArraySet *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase, tokens_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase, offsetAtt_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)

/*!
 @brief The default for minimal word length that gets decomposed
 */
inline jint OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_get_DEFAULT_MIN_WORD_SIZE();
#define OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_DEFAULT_MIN_WORD_SIZE 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase, DEFAULT_MIN_WORD_SIZE, jint)

/*!
 @brief The default for minimal length of subwords that get propagated to the output of this filter
 */
inline jint OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_get_DEFAULT_MIN_SUBWORD_SIZE();
#define OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_DEFAULT_MIN_SUBWORD_SIZE 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase, DEFAULT_MIN_SUBWORD_SIZE, jint)

/*!
 @brief The default for maximal length of subwords that get propagated to the output of this filter
 */
inline jint OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_get_DEFAULT_MAX_SUBWORD_SIZE();
#define OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_DEFAULT_MAX_SUBWORD_SIZE 15
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase, DEFAULT_MAX_SUBWORD_SIZE, jint)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisUtilCharArraySet_withBoolean_(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase *self, OrgApacheLuceneAnalysisTokenStream *input, OrgApacheLuceneAnalysisUtilCharArraySet *dictionary, jboolean onlyLongestMatch);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisUtilCharArraySet_(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase *self, OrgApacheLuceneAnalysisTokenStream *input, OrgApacheLuceneAnalysisUtilCharArraySet *dictionary);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisUtilCharArraySet_withInt_withInt_withInt_withBoolean_(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase *self, OrgApacheLuceneAnalysisTokenStream *input, OrgApacheLuceneAnalysisUtilCharArraySet *dictionary, jint minWordSize, jint minSubwordSize, jint maxSubwordSize, jboolean onlyLongestMatch);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase)

#endif

#if !defined (OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_CompoundToken_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase || defined(INCLUDE_OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_CompoundToken))
#define OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_CompoundToken_

@class OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase;
@protocol JavaLangCharSequence;

/*!
 @brief Helper class to hold decompounded token information
 */
@interface OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_CompoundToken : NSObject {
 @public
  id<JavaLangCharSequence> txt_;
  jint startOffset_, endOffset_;
}

#pragma mark Public

/*!
 @brief Construct the compound token based on a slice of the current <code>CompoundWordTokenFilterBase.termAtt</code>.
 */
- (instancetype)initWithOrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase:(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase *)outer$
                                                                           withInt:(jint)offset
                                                                           withInt:(jint)length;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_CompoundToken)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_CompoundToken, txt_, id<JavaLangCharSequence>)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_CompoundToken_initWithOrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_withInt_withInt_(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_CompoundToken *self, OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase *outer$, jint offset, jint length);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_CompoundToken *new_OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_CompoundToken_initWithOrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_withInt_withInt_(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase *outer$, jint offset, jint length) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_CompoundToken *create_OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_CompoundToken_initWithOrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_withInt_withInt_(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase *outer$, jint offset, jint length);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase_CompoundToken)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisCompoundCompoundWordTokenFilterBase")
