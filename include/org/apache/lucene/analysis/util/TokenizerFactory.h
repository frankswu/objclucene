//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/util/TokenizerFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgApacheLuceneAnalysisUtilTokenizerFactory_INCLUDE_ALL")
#if OrgApacheLuceneAnalysisUtilTokenizerFactory_RESTRICT
#define OrgApacheLuceneAnalysisUtilTokenizerFactory_INCLUDE_ALL 0
#else
#define OrgApacheLuceneAnalysisUtilTokenizerFactory_INCLUDE_ALL 1
#endif
#undef OrgApacheLuceneAnalysisUtilTokenizerFactory_RESTRICT

#if !defined (_OrgApacheLuceneAnalysisUtilTokenizerFactory_) && (OrgApacheLuceneAnalysisUtilTokenizerFactory_INCLUDE_ALL || OrgApacheLuceneAnalysisUtilTokenizerFactory_INCLUDE)
#define _OrgApacheLuceneAnalysisUtilTokenizerFactory_

#define OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory_RESTRICT 1
#define OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory_INCLUDE 1
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"

@class IOSClass;
@class JavaLangClassLoader;
@class OrgApacheLuceneAnalysisTokenizer;
@class OrgApacheLuceneUtilAttributeFactory;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface OrgApacheLuceneAnalysisUtilTokenizerFactory : OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory

#pragma mark Public

+ (id<JavaUtilSet>)availableTokenizers;

- (OrgApacheLuceneAnalysisTokenizer *)create;

- (OrgApacheLuceneAnalysisTokenizer *)createWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory;

+ (OrgApacheLuceneAnalysisUtilTokenizerFactory *)forNameWithNSString:(NSString *)name
                                                     withJavaUtilMap:(id<JavaUtilMap>)args;

+ (IOSClass *)lookupClassWithNSString:(NSString *)name;

+ (void)reloadTokenizersWithJavaLangClassLoader:(JavaLangClassLoader *)classloader;

#pragma mark Protected

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)args;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneAnalysisUtilTokenizerFactory)

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilTokenizerFactory *OrgApacheLuceneAnalysisUtilTokenizerFactory_forNameWithNSString_withJavaUtilMap_(NSString *name, id<JavaUtilMap> args);

FOUNDATION_EXPORT IOSClass *OrgApacheLuceneAnalysisUtilTokenizerFactory_lookupClassWithNSString_(NSString *name);

FOUNDATION_EXPORT id<JavaUtilSet> OrgApacheLuceneAnalysisUtilTokenizerFactory_availableTokenizers();

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilTokenizerFactory_reloadTokenizersWithJavaLangClassLoader_(JavaLangClassLoader *classloader);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilTokenizerFactory_initWithJavaUtilMap_(OrgApacheLuceneAnalysisUtilTokenizerFactory *self, id<JavaUtilMap> args);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisUtilTokenizerFactory)

#endif

#pragma pop_macro("OrgApacheLuceneAnalysisUtilTokenizerFactory_INCLUDE_ALL")
