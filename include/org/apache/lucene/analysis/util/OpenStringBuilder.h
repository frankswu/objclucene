//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/util/OpenStringBuilder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgApacheLuceneAnalysisUtilOpenStringBuilder_INCLUDE_ALL")
#if OrgApacheLuceneAnalysisUtilOpenStringBuilder_RESTRICT
#define OrgApacheLuceneAnalysisUtilOpenStringBuilder_INCLUDE_ALL 0
#else
#define OrgApacheLuceneAnalysisUtilOpenStringBuilder_INCLUDE_ALL 1
#endif
#undef OrgApacheLuceneAnalysisUtilOpenStringBuilder_RESTRICT

#if !defined (_OrgApacheLuceneAnalysisUtilOpenStringBuilder_) && (OrgApacheLuceneAnalysisUtilOpenStringBuilder_INCLUDE_ALL || OrgApacheLuceneAnalysisUtilOpenStringBuilder_INCLUDE)
#define _OrgApacheLuceneAnalysisUtilOpenStringBuilder_

#define JavaLangAppendable_RESTRICT 1
#define JavaLangAppendable_INCLUDE 1
#include "java/lang/Appendable.h"

#define JavaLangCharSequence_RESTRICT 1
#define JavaLangCharSequence_INCLUDE 1
#include "java/lang/CharSequence.h"

@class IOSCharArray;

@interface OrgApacheLuceneAnalysisUtilOpenStringBuilder : NSObject < JavaLangAppendable, JavaLangCharSequence > {
 @public
  IOSCharArray *buf_;
  jint len_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithCharArray:(IOSCharArray *)arr
                          withInt:(jint)len;

- (instancetype)initWithInt:(jint)size;

- (id<JavaLangAppendable>)appendWithChar:(jchar)c;

- (id<JavaLangAppendable>)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq;

- (id<JavaLangAppendable>)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                                 withInt:(jint)start
                                                 withInt:(jint)end;

- (jint)capacity;

- (jchar)charAtWithInt:(jint)index;

- (void)flush;

- (IOSCharArray *)getArray;

- (jint)length;

- (void)reserveWithInt:(jint)num;

- (void)reset;

- (void)setWithCharArray:(IOSCharArray *)arr
                 withInt:(jint)end;

- (void)setCharAtWithInt:(jint)index
                withChar:(jchar)ch;

- (void)setLengthWithInt:(jint)len;

- (jint)size;

- (id<JavaLangCharSequence>)subSequenceFrom:(jint)start
                                         to:(jint)end;

- (IOSCharArray *)toCharArray;

- (NSString *)description;

- (void)unsafeWriteWithChar:(jchar)b;

- (void)unsafeWriteWithCharArray:(IOSCharArray *)b
                         withInt:(jint)off
                         withInt:(jint)len;

- (void)unsafeWriteWithInt:(jint)b;

- (void)writeWithChar:(jchar)b;

- (void)writeWithCharArray:(IOSCharArray *)b;

- (void)writeWithCharArray:(IOSCharArray *)b
                   withInt:(jint)off
                   withInt:(jint)len;

- (void)writeWithInt:(jint)b;

- (void)writeWithOrgApacheLuceneAnalysisUtilOpenStringBuilder:(OrgApacheLuceneAnalysisUtilOpenStringBuilder *)arr;

- (void)writeWithNSString:(NSString *)s;

#pragma mark Protected

- (void)resizeWithInt:(jint)len;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisUtilOpenStringBuilder)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisUtilOpenStringBuilder, buf_, IOSCharArray *)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilOpenStringBuilder_init(OrgApacheLuceneAnalysisUtilOpenStringBuilder *self);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilOpenStringBuilder *new_OrgApacheLuceneAnalysisUtilOpenStringBuilder_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilOpenStringBuilder_initWithInt_(OrgApacheLuceneAnalysisUtilOpenStringBuilder *self, jint size);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilOpenStringBuilder *new_OrgApacheLuceneAnalysisUtilOpenStringBuilder_initWithInt_(jint size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilOpenStringBuilder_initWithCharArray_withInt_(OrgApacheLuceneAnalysisUtilOpenStringBuilder *self, IOSCharArray *arr, jint len);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilOpenStringBuilder *new_OrgApacheLuceneAnalysisUtilOpenStringBuilder_initWithCharArray_withInt_(IOSCharArray *arr, jint len) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisUtilOpenStringBuilder)

#endif

#pragma pop_macro("OrgApacheLuceneAnalysisUtilOpenStringBuilder_INCLUDE_ALL")
