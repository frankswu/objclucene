//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgApacheLuceneAnalysisUtilCharTokenizer_INCLUDE_ALL")
#if OrgApacheLuceneAnalysisUtilCharTokenizer_RESTRICT
#define OrgApacheLuceneAnalysisUtilCharTokenizer_INCLUDE_ALL 0
#else
#define OrgApacheLuceneAnalysisUtilCharTokenizer_INCLUDE_ALL 1
#endif
#undef OrgApacheLuceneAnalysisUtilCharTokenizer_RESTRICT

#if !defined (_OrgApacheLuceneAnalysisUtilCharTokenizer_) && (OrgApacheLuceneAnalysisUtilCharTokenizer_INCLUDE_ALL || OrgApacheLuceneAnalysisUtilCharTokenizer_INCLUDE)
#define _OrgApacheLuceneAnalysisUtilCharTokenizer_

#define OrgApacheLuceneAnalysisTokenizer_RESTRICT 1
#define OrgApacheLuceneAnalysisTokenizer_INCLUDE 1
#include "org/apache/lucene/analysis/Tokenizer.h"

@class OrgApacheLuceneUtilAttributeFactory;

@interface OrgApacheLuceneAnalysisUtilCharTokenizer : OrgApacheLuceneAnalysisTokenizer

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory;

- (void)end;

- (jboolean)incrementToken;

- (void)reset;

#pragma mark Protected

- (jboolean)isTokenCharWithInt:(jint)c;

- (jint)normalizeWithInt:(jint)c;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisUtilCharTokenizer)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilCharTokenizer_init(OrgApacheLuceneAnalysisUtilCharTokenizer *self);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilCharTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneAnalysisUtilCharTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisUtilCharTokenizer)

#endif

#pragma pop_macro("OrgApacheLuceneAnalysisUtilCharTokenizer_INCLUDE_ALL")
