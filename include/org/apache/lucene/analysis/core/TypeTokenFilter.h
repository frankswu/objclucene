//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgApacheLuceneAnalysisCoreTypeTokenFilter_INCLUDE_ALL")
#if OrgApacheLuceneAnalysisCoreTypeTokenFilter_RESTRICT
#define OrgApacheLuceneAnalysisCoreTypeTokenFilter_INCLUDE_ALL 0
#else
#define OrgApacheLuceneAnalysisCoreTypeTokenFilter_INCLUDE_ALL 1
#endif
#undef OrgApacheLuceneAnalysisCoreTypeTokenFilter_RESTRICT

#if !defined (_OrgApacheLuceneAnalysisCoreTypeTokenFilter_) && (OrgApacheLuceneAnalysisCoreTypeTokenFilter_INCLUDE_ALL || OrgApacheLuceneAnalysisCoreTypeTokenFilter_INCLUDE)
#define _OrgApacheLuceneAnalysisCoreTypeTokenFilter_

#define OrgApacheLuceneAnalysisUtilFilteringTokenFilter_RESTRICT 1
#define OrgApacheLuceneAnalysisUtilFilteringTokenFilter_INCLUDE 1
#include "org/apache/lucene/analysis/util/FilteringTokenFilter.h"

@class OrgApacheLuceneAnalysisTokenStream;
@protocol JavaUtilSet;

@interface OrgApacheLuceneAnalysisCoreTypeTokenFilter : OrgApacheLuceneAnalysisUtilFilteringTokenFilter

#pragma mark Public

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                           withJavaUtilSet:(id<JavaUtilSet>)stopTypes;

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                           withJavaUtilSet:(id<JavaUtilSet>)stopTypes
                                               withBoolean:(jboolean)useWhiteList;

#pragma mark Protected

- (jboolean)accept;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisCoreTypeTokenFilter)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCoreTypeTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_(OrgApacheLuceneAnalysisCoreTypeTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes, jboolean useWhiteList);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreTypeTokenFilter *new_OrgApacheLuceneAnalysisCoreTypeTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_(OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes, jboolean useWhiteList) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCoreTypeTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_(OrgApacheLuceneAnalysisCoreTypeTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreTypeTokenFilter *new_OrgApacheLuceneAnalysisCoreTypeTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_(OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisCoreTypeTokenFilter)

#endif

#pragma pop_macro("OrgApacheLuceneAnalysisCoreTypeTokenFilter_INCLUDE_ALL")
