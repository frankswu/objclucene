//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgApacheLuceneSearchSpansSpanNearQuery_INCLUDE_ALL")
#if OrgApacheLuceneSearchSpansSpanNearQuery_RESTRICT
#define OrgApacheLuceneSearchSpansSpanNearQuery_INCLUDE_ALL 0
#else
#define OrgApacheLuceneSearchSpansSpanNearQuery_INCLUDE_ALL 1
#endif
#undef OrgApacheLuceneSearchSpansSpanNearQuery_RESTRICT

#if !defined (_OrgApacheLuceneSearchSpansSpanNearQuery_) && (OrgApacheLuceneSearchSpansSpanNearQuery_INCLUDE_ALL || OrgApacheLuceneSearchSpansSpanNearQuery_INCLUDE)
#define _OrgApacheLuceneSearchSpansSpanNearQuery_

#define OrgApacheLuceneSearchSpansSpanQuery_RESTRICT 1
#define OrgApacheLuceneSearchSpansSpanQuery_INCLUDE 1
#include "org/apache/lucene/search/spans/SpanQuery.h"

@class IOSObjectArray;
@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchQuery;
@class OrgApacheLuceneSearchSpansSpanWeight;
@protocol JavaUtilList;

@interface OrgApacheLuceneSearchSpansSpanNearQuery : OrgApacheLuceneSearchSpansSpanQuery < NSCopying > {
 @public
  id<JavaUtilList> clauses_;
  jint slop_;
  jboolean inOrder_;
  NSString *field_;
}

#pragma mark Public

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanQueryArray:(IOSObjectArray *)clauses
                                                         withInt:(jint)slop
                                                     withBoolean:(jboolean)inOrder;

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanQueryArray:(IOSObjectArray *)clausesIn
                                                         withInt:(jint)slop
                                                     withBoolean:(jboolean)inOrder
                                                     withBoolean:(jboolean)collectPayloads;

- (OrgApacheLuceneSearchSpansSpanNearQuery *)clone;

- (OrgApacheLuceneSearchSpansSpanWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                                 withBoolean:(jboolean)needsScores;

- (jboolean)isEqual:(id)o;

- (IOSObjectArray *)getClauses;

- (NSString *)getField;

- (jint)getSlop;

- (NSUInteger)hash;

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader;

- (NSString *)toStringWithNSString:(NSString *)field;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanNearQuery)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNearQuery, clauses_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNearQuery, field_, NSString *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(OrgApacheLuceneSearchSpansSpanNearQuery *self, IOSObjectArray *clauses, jint slop, jboolean inOrder);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery *new_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(IOSObjectArray *clauses, jint slop, jboolean inOrder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_withBoolean_(OrgApacheLuceneSearchSpansSpanNearQuery *self, IOSObjectArray *clausesIn, jint slop, jboolean inOrder, jboolean collectPayloads);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery *new_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_withBoolean_(IOSObjectArray *clausesIn, jint slop, jboolean inOrder, jboolean collectPayloads) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanNearQuery)

#endif

#if !defined (_OrgApacheLuceneSearchSpansSpanNearQuery_Builder_) && (OrgApacheLuceneSearchSpansSpanNearQuery_INCLUDE_ALL || OrgApacheLuceneSearchSpansSpanNearQuery_Builder_INCLUDE)
#define _OrgApacheLuceneSearchSpansSpanNearQuery_Builder_

@interface OrgApacheLuceneSearchSpansSpanNearQuery_Builder : NSObject

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanNearQuery_Builder)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanNearQuery_Builder_init(OrgApacheLuceneSearchSpansSpanNearQuery_Builder *self);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery_Builder *new_OrgApacheLuceneSearchSpansSpanNearQuery_Builder_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanNearQuery_Builder)

#endif

#if !defined (_OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_) && (OrgApacheLuceneSearchSpansSpanNearQuery_INCLUDE_ALL || OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_INCLUDE)
#define _OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_

#define OrgApacheLuceneSearchSpansSpanWeight_RESTRICT 1
#define OrgApacheLuceneSearchSpansSpanWeight_INCLUDE 1
#include "org/apache/lucene/search/spans/SpanWeight.h"

@class OrgApacheLuceneIndexLeafReaderContext;
@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchSpansSpanNearQuery;
@class OrgApacheLuceneSearchSpansSpanWeight_PostingsEnum;
@class OrgApacheLuceneSearchSpansSpans;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight : OrgApacheLuceneSearchSpansSpanWeight {
 @public
  id<JavaUtilList> subWeights_;
}

#pragma mark Public

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanNearQuery:(OrgApacheLuceneSearchSpansSpanNearQuery *)outer$
                                               withJavaUtilList:(id<JavaUtilList>)subWeights
                         withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                withJavaUtilMap:(id<JavaUtilMap>)terms;

- (void)extractTermContextsWithJavaUtilMap:(id<JavaUtilMap>)contexts;

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms;

- (OrgApacheLuceneSearchSpansSpans *)getSpansWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                 withOrgApacheLuceneSearchSpansSpanWeight_PostingsEnum:(OrgApacheLuceneSearchSpansSpanWeight_PostingsEnum *)requiredPostings;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight, subWeights_, id<JavaUtilList>)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight *self, OrgApacheLuceneSearchSpansSpanNearQuery *outer$, id<JavaUtilList> subWeights, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight *new_OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchSpansSpanNearQuery *outer$, id<JavaUtilList> subWeights, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight)

#endif

#if !defined (_OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_) && (OrgApacheLuceneSearchSpansSpanNearQuery_INCLUDE_ALL || OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_INCLUDE)
#define _OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_

#define OrgApacheLuceneSearchSpansSpans_RESTRICT 1
#define OrgApacheLuceneSearchSpansSpans_INCLUDE 1
#include "org/apache/lucene/search/spans/Spans.h"

@interface OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans : OrgApacheLuceneSearchSpansSpans {
 @public
  jint doc_;
  jint pos_;
  jint width_;
}

#pragma mark Public

- (jint)advanceWithInt:(jint)target;

- (jlong)cost;

- (jint)docID;

- (jint)endPosition;

- (jint)nextDoc;

- (jint)nextStartPosition;

- (jint)skipToPositionWithInt:(jint)position;

- (jint)startPosition;

- (jint)width;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_init(OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans *self);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans *new_OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans)

#endif

#pragma pop_macro("OrgApacheLuceneSearchSpansSpanNearQuery_INCLUDE_ALL")
