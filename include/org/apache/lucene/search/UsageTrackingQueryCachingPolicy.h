//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_INCLUDE_ALL")
#if OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_RESTRICT
#define OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_INCLUDE_ALL 0
#else
#define OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_INCLUDE_ALL 1
#endif
#undef OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_RESTRICT

#if !defined (_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_) && (OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_INCLUDE_ALL || OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_INCLUDE)
#define _OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_

#define OrgApacheLuceneSearchQueryCachingPolicy_RESTRICT 1
#define OrgApacheLuceneSearchQueryCachingPolicy_INCLUDE 1
#include "org/apache/lucene/search/QueryCachingPolicy.h"

@class OrgApacheLuceneIndexLeafReaderContext;
@class OrgApacheLuceneSearchQuery;

@interface OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy : NSObject < OrgApacheLuceneSearchQueryCachingPolicy >

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)minIndexSize
                  withFloat:(jfloat)minSizeRatio
                    withInt:(jint)historySize;

- (void)onUseWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

- (jboolean)shouldCacheWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
            withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

#pragma mark Protected

- (jint)minFrequencyToCacheWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

#pragma mark Package-Private

- (jint)frequencyWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

+ (jboolean)isCheapWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

+ (jboolean)isCostlyWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy)

FOUNDATION_EXPORT jboolean OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_isCostlyWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query);

FOUNDATION_EXPORT jboolean OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_isCheapWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query);

FOUNDATION_EXPORT void OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithInt_withFloat_withInt_(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *self, jint minIndexSize, jfloat minSizeRatio, jint historySize);

FOUNDATION_EXPORT OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *new_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithInt_withFloat_withInt_(jint minIndexSize, jfloat minSizeRatio, jint historySize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_init(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *self);

FOUNDATION_EXPORT OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *new_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy)

#endif

#pragma pop_macro("OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_INCLUDE_ALL")
