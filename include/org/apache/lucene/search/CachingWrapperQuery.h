//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/CachingWrapperQuery.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchCachingWrapperQuery")
#ifdef RESTRICT_OrgApacheLuceneSearchCachingWrapperQuery
#define INCLUDE_ALL_OrgApacheLuceneSearchCachingWrapperQuery 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchCachingWrapperQuery 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchCachingWrapperQuery

#if !defined (OrgApacheLuceneSearchCachingWrapperQuery_) && (INCLUDE_ALL_OrgApacheLuceneSearchCachingWrapperQuery || defined(INCLUDE_OrgApacheLuceneSearchCachingWrapperQuery))
#define OrgApacheLuceneSearchCachingWrapperQuery_

#define RESTRICT_OrgApacheLuceneSearchQuery 1
#define INCLUDE_OrgApacheLuceneSearchQuery 1
#include "org/apache/lucene/search/Query.h"

#define RESTRICT_OrgApacheLuceneUtilAccountable 1
#define INCLUDE_OrgApacheLuceneUtilAccountable 1
#include "org/apache/lucene/util/Accountable.h"

@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneIndexLeafReader;
@class OrgApacheLuceneSearchDocIdSet;
@class OrgApacheLuceneSearchDocIdSetIterator;
@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchWeight;
@protocol JavaUtilCollection;
@protocol OrgApacheLuceneSearchQueryCachingPolicy;

/*!
 @brief Wraps another <code>Query</code>'s result and caches it when scores are not
 needed.
 The purpose is to allow queries to simply care about matching and
 scoring, and then wrap with this class to add caching.
 */
@interface OrgApacheLuceneSearchCachingWrapperQuery : OrgApacheLuceneSearchQuery < OrgApacheLuceneUtilAccountable > {
 @public
  jint hitCount_, missCount_;
}

#pragma mark Public

/*!
 @brief Same as <code>CachingWrapperQuery.CachingWrapperQuery(Query,QueryCachingPolicy)</code>
 but enforces the use of the
 <code>QueryCachingPolicy.CacheOnLargeSegments.DEFAULT</code> policy.
 */
- (instancetype)initWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

/*!
 @brief Wraps another query's result and caches it according to the provided policy.
 @param query Query to cache results of
 @param policy policy defining which filters should be cached on which segments
 */
- (instancetype)initWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
       withOrgApacheLuceneSearchQueryCachingPolicy:(id<OrgApacheLuceneSearchQueryCachingPolicy>)policy;

- (OrgApacheLuceneSearchCachingWrapperQuery *)clone;

- (OrgApacheLuceneSearchWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                        withBoolean:(jboolean)needsScores;

- (jboolean)isEqual:(id)o;

- (jfloat)getBoost;

- (id<JavaUtilCollection>)getChildResources;

/*!
 @brief Gets the contained query.
 @return the contained query.
 */
- (OrgApacheLuceneSearchQuery *)getQuery;

- (NSUInteger)hash;

- (jlong)ramBytesUsed;

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader;

- (void)setBoostWithFloat:(jfloat)b;

- (NSString *)toStringWithNSString:(NSString *)field;

#pragma mark Protected

/*!
 @brief Default cache implementation: uses <code>RoaringDocIdSet</code>.
 */
- (OrgApacheLuceneSearchDocIdSet *)cacheImplWithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)iterator
                                                   withOrgApacheLuceneIndexLeafReader:(OrgApacheLuceneIndexLeafReader *)reader;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchCachingWrapperQuery)

FOUNDATION_EXPORT void OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchQueryCachingPolicy_(OrgApacheLuceneSearchCachingWrapperQuery *self, OrgApacheLuceneSearchQuery *query, id<OrgApacheLuceneSearchQueryCachingPolicy> policy);

FOUNDATION_EXPORT OrgApacheLuceneSearchCachingWrapperQuery *new_OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchQueryCachingPolicy_(OrgApacheLuceneSearchQuery *query, id<OrgApacheLuceneSearchQueryCachingPolicy> policy) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchCachingWrapperQuery *create_OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchQueryCachingPolicy_(OrgApacheLuceneSearchQuery *query, id<OrgApacheLuceneSearchQueryCachingPolicy> policy);

FOUNDATION_EXPORT void OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchCachingWrapperQuery *self, OrgApacheLuceneSearchQuery *query);

FOUNDATION_EXPORT OrgApacheLuceneSearchCachingWrapperQuery *new_OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchCachingWrapperQuery *create_OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchCachingWrapperQuery)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchCachingWrapperQuery")
