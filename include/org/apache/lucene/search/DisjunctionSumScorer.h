//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/DisjunctionSumScorer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchDisjunctionSumScorer")
#ifdef RESTRICT_OrgApacheLuceneSearchDisjunctionSumScorer
#define INCLUDE_ALL_OrgApacheLuceneSearchDisjunctionSumScorer 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchDisjunctionSumScorer 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchDisjunctionSumScorer

#if !defined (OrgApacheLuceneSearchDisjunctionSumScorer_) && (INCLUDE_ALL_OrgApacheLuceneSearchDisjunctionSumScorer || defined(INCLUDE_OrgApacheLuceneSearchDisjunctionSumScorer))
#define OrgApacheLuceneSearchDisjunctionSumScorer_

#define RESTRICT_OrgApacheLuceneSearchDisjunctionScorer 1
#define INCLUDE_OrgApacheLuceneSearchDisjunctionScorer 1
#include "org/apache/lucene/search/DisjunctionScorer.h"

@class IOSFloatArray;
@class OrgApacheLuceneSearchDisiWrapper;
@class OrgApacheLuceneSearchWeight;
@protocol JavaUtilList;

/*!
 @brief A Scorer for OR like queries, counterpart of <code>ConjunctionScorer</code>.
 This Scorer implements <code>Scorer.advance(int)</code> and uses advance() on the given Scorers. 
 */
@interface OrgApacheLuceneSearchDisjunctionSumScorer : OrgApacheLuceneSearchDisjunctionScorer

#pragma mark Protected

- (jfloat)scoreWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)topList;

#pragma mark Package-Private

/*!
 @brief Construct a <code>DisjunctionScorer</code>.
 @param weight The weight to be used.
 @param subScorers Array of at least two subscorers.
 @param coord Table of coordination factors
 */
- (instancetype)initWithOrgApacheLuceneSearchWeight:(OrgApacheLuceneSearchWeight *)weight
                                   withJavaUtilList:(id<JavaUtilList>)subScorers
                                     withFloatArray:(IOSFloatArray *)coord
                                        withBoolean:(jboolean)needsScores;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchDisjunctionSumScorer)

FOUNDATION_EXPORT void OrgApacheLuceneSearchDisjunctionSumScorer_initWithOrgApacheLuceneSearchWeight_withJavaUtilList_withFloatArray_withBoolean_(OrgApacheLuceneSearchDisjunctionSumScorer *self, OrgApacheLuceneSearchWeight *weight, id<JavaUtilList> subScorers, IOSFloatArray *coord, jboolean needsScores);

FOUNDATION_EXPORT OrgApacheLuceneSearchDisjunctionSumScorer *new_OrgApacheLuceneSearchDisjunctionSumScorer_initWithOrgApacheLuceneSearchWeight_withJavaUtilList_withFloatArray_withBoolean_(OrgApacheLuceneSearchWeight *weight, id<JavaUtilList> subScorers, IOSFloatArray *coord, jboolean needsScores) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchDisjunctionSumScorer *create_OrgApacheLuceneSearchDisjunctionSumScorer_initWithOrgApacheLuceneSearchWeight_withJavaUtilList_withFloatArray_withBoolean_(OrgApacheLuceneSearchWeight *weight, id<JavaUtilList> subScorers, IOSFloatArray *coord, jboolean needsScores);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchDisjunctionSumScorer)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchDisjunctionSumScorer")
