//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/MultiTermQueryConstantScoreWrapper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper")
#ifdef RESTRICT_OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper
#define INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper

#if !defined (OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper_) && (INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper || defined(INCLUDE_OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper))
#define OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper_

#define RESTRICT_OrgApacheLuceneSearchQuery 1
#define INCLUDE_OrgApacheLuceneSearchQuery 1
#include "org/apache/lucene/search/Query.h"

@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchMultiTermQuery;
@class OrgApacheLuceneSearchWeight;

/*!
 @brief This class also provides the functionality behind
 <code>MultiTermQuery.CONSTANT_SCORE_REWRITE</code>.
 It tries to rewrite per-segment as a boolean query
 that returns a constant score and otherwise fills a
 bit set with matches and builds a Scorer on top of
 this bit set.
 */
@interface OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper : OrgApacheLuceneSearchQuery {
 @public
  OrgApacheLuceneSearchMultiTermQuery *query_;
}

#pragma mark Public

- (OrgApacheLuceneSearchWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                        withBoolean:(jboolean)needsScores;

- (jboolean)isEqual:(id)o;

/*!
 @brief Returns the field name for this query
 */
- (NSString *)getField;

- (NSUInteger)hash;

- (NSString *)toStringWithNSString:(NSString *)field;

#pragma mark Protected

/*!
 @brief Wrap a <code>MultiTermQuery</code> as a Filter.
 */
- (instancetype)initWithOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper, query_, id)

FOUNDATION_EXPORT void OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper_initWithOrgApacheLuceneSearchMultiTermQuery_(OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper *self, OrgApacheLuceneSearchMultiTermQuery *query);

FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper *new_OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper_initWithOrgApacheLuceneSearchMultiTermQuery_(OrgApacheLuceneSearchMultiTermQuery *query) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper *create_OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper_initWithOrgApacheLuceneSearchMultiTermQuery_(OrgApacheLuceneSearchMultiTermQuery *query);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper")
