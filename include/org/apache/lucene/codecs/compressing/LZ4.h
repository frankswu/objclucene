//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/compressing/LZ4.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneCodecsCompressingLZ4")
#ifdef RESTRICT_OrgApacheLuceneCodecsCompressingLZ4
#define INCLUDE_ALL_OrgApacheLuceneCodecsCompressingLZ4 0
#else
#define INCLUDE_ALL_OrgApacheLuceneCodecsCompressingLZ4 1
#endif
#undef RESTRICT_OrgApacheLuceneCodecsCompressingLZ4

#if !defined (OrgApacheLuceneCodecsCompressingLZ4_) && (INCLUDE_ALL_OrgApacheLuceneCodecsCompressingLZ4 || defined(INCLUDE_OrgApacheLuceneCodecsCompressingLZ4))
#define OrgApacheLuceneCodecsCompressingLZ4_

@class IOSByteArray;
@class OrgApacheLuceneCodecsCompressingLZ4_HCHashTable;
@class OrgApacheLuceneCodecsCompressingLZ4_HashTable;
@class OrgApacheLuceneStoreDataInput;
@class OrgApacheLuceneStoreDataOutput;

/*!
 @brief LZ4 compression and decompression routines.
 http://code.google.com/p/lz4/
 http://fastcompression.blogspot.fr/p/lz4.html
 */
@interface OrgApacheLuceneCodecsCompressingLZ4 : NSObject

+ (jint)MEMORY_USAGE;

+ (jint)MIN_MATCH;

+ (jint)MAX_DISTANCE;

+ (jint)LAST_LITERALS;

+ (jint)HASH_LOG_HC;

+ (jint)HASH_TABLE_SIZE_HC;

+ (jint)OPTIMAL_ML;

#pragma mark Public

/*!
 @brief Compress <code>bytes[off:off+len]</code> into <code>out</code> using
 at most 16KB of memory.
 <code>ht</code> shouldn't be shared across threads
 but can safely be reused.
 */
+ (void)compressWithByteArray:(IOSByteArray *)bytes
                      withInt:(jint)off
                      withInt:(jint)len
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
withOrgApacheLuceneCodecsCompressingLZ4_HashTable:(OrgApacheLuceneCodecsCompressingLZ4_HashTable *)ht;

/*!
 @brief Compress <code>bytes[off:off+len]</code> into <code>out</code>.
 Compared to
 <code>LZ4.compress(byte[],int,int,DataOutput,HashTable)</code>, this method
 is slower and uses more memory (~ 256KB per thread) but should provide
 better compression ratios (especially on large inputs) because it chooses
 the best match among up to 256 candidates and then performs trade-offs to
 fix overlapping matches. <code>ht</code> shouldn't be shared across threads
 but can safely be reused.
 */
+ (void)compressHCWithByteArray:(IOSByteArray *)src
                        withInt:(jint)srcOff
                        withInt:(jint)srcLen
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
withOrgApacheLuceneCodecsCompressingLZ4_HCHashTable:(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *)ht;

/*!
 @brief Decompress at least <code>decompressedLen</code> bytes into
 <code>dest[dOff:]</code>.
 Please note that <code>dest</code> must be large
 enough to be able to hold <b>all</b> decompressed data (meaning that you
 need to know the total decompressed length).
 */
+ (jint)decompressWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)compressed
                                            withInt:(jint)decompressedLen
                                      withByteArray:(IOSByteArray *)dest
                                            withInt:(jint)dOff;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsCompressingLZ4)

inline jint OrgApacheLuceneCodecsCompressingLZ4_get_MEMORY_USAGE();
#define OrgApacheLuceneCodecsCompressingLZ4_MEMORY_USAGE 14
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsCompressingLZ4, MEMORY_USAGE, jint)

inline jint OrgApacheLuceneCodecsCompressingLZ4_get_MIN_MATCH();
#define OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsCompressingLZ4, MIN_MATCH, jint)

inline jint OrgApacheLuceneCodecsCompressingLZ4_get_MAX_DISTANCE();
#define OrgApacheLuceneCodecsCompressingLZ4_MAX_DISTANCE 65536
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsCompressingLZ4, MAX_DISTANCE, jint)

inline jint OrgApacheLuceneCodecsCompressingLZ4_get_LAST_LITERALS();
#define OrgApacheLuceneCodecsCompressingLZ4_LAST_LITERALS 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsCompressingLZ4, LAST_LITERALS, jint)

inline jint OrgApacheLuceneCodecsCompressingLZ4_get_HASH_LOG_HC();
#define OrgApacheLuceneCodecsCompressingLZ4_HASH_LOG_HC 15
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsCompressingLZ4, HASH_LOG_HC, jint)

inline jint OrgApacheLuceneCodecsCompressingLZ4_get_HASH_TABLE_SIZE_HC();
#define OrgApacheLuceneCodecsCompressingLZ4_HASH_TABLE_SIZE_HC 32768
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsCompressingLZ4, HASH_TABLE_SIZE_HC, jint)

inline jint OrgApacheLuceneCodecsCompressingLZ4_get_OPTIMAL_ML();
#define OrgApacheLuceneCodecsCompressingLZ4_OPTIMAL_ML 18
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsCompressingLZ4, OPTIMAL_ML, jint)

FOUNDATION_EXPORT jint OrgApacheLuceneCodecsCompressingLZ4_decompressWithOrgApacheLuceneStoreDataInput_withInt_withByteArray_withInt_(OrgApacheLuceneStoreDataInput *compressed, jint decompressedLen, IOSByteArray *dest, jint dOff);

FOUNDATION_EXPORT void OrgApacheLuceneCodecsCompressingLZ4_compressWithByteArray_withInt_withInt_withOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneCodecsCompressingLZ4_HashTable_(IOSByteArray *bytes, jint off, jint len, OrgApacheLuceneStoreDataOutput *outArg, OrgApacheLuceneCodecsCompressingLZ4_HashTable *ht);

FOUNDATION_EXPORT void OrgApacheLuceneCodecsCompressingLZ4_compressHCWithByteArray_withInt_withInt_withOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneCodecsCompressingLZ4_HCHashTable_(IOSByteArray *src, jint srcOff, jint srcLen, OrgApacheLuceneStoreDataOutput *outArg, OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *ht);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsCompressingLZ4)

#endif

#if !defined (OrgApacheLuceneCodecsCompressingLZ4_HashTable_) && (INCLUDE_ALL_OrgApacheLuceneCodecsCompressingLZ4 || defined(INCLUDE_OrgApacheLuceneCodecsCompressingLZ4_HashTable))
#define OrgApacheLuceneCodecsCompressingLZ4_HashTable_

@interface OrgApacheLuceneCodecsCompressingLZ4_HashTable : NSObject

#pragma mark Package-Private

- (instancetype)init;

- (void)resetWithInt:(jint)len;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsCompressingLZ4_HashTable)

FOUNDATION_EXPORT void OrgApacheLuceneCodecsCompressingLZ4_HashTable_init(OrgApacheLuceneCodecsCompressingLZ4_HashTable *self);

FOUNDATION_EXPORT OrgApacheLuceneCodecsCompressingLZ4_HashTable *new_OrgApacheLuceneCodecsCompressingLZ4_HashTable_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneCodecsCompressingLZ4_HashTable *create_OrgApacheLuceneCodecsCompressingLZ4_HashTable_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsCompressingLZ4_HashTable)

#endif

#if !defined (OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_) && (INCLUDE_ALL_OrgApacheLuceneCodecsCompressingLZ4 || defined(INCLUDE_OrgApacheLuceneCodecsCompressingLZ4_HCHashTable))
#define OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_

@class IOSByteArray;
@class OrgApacheLuceneCodecsCompressingLZ4_Match;

@interface OrgApacheLuceneCodecsCompressingLZ4_HCHashTable : NSObject {
 @public
  jint nextToUpdate_;
}

+ (jint)MAX_ATTEMPTS;

+ (jint)MASK;

#pragma mark Package-Private

- (instancetype)init;

- (void)insertWithInt:(jint)off
        withByteArray:(IOSByteArray *)bytes;

- (jboolean)insertAndFindBestMatchWithByteArray:(IOSByteArray *)buf
                                        withInt:(jint)off
                                        withInt:(jint)matchLimit
  withOrgApacheLuceneCodecsCompressingLZ4_Match:(OrgApacheLuceneCodecsCompressingLZ4_Match *)match;

- (jboolean)insertAndFindWiderMatchWithByteArray:(IOSByteArray *)buf
                                         withInt:(jint)off
                                         withInt:(jint)startLimit
                                         withInt:(jint)matchLimit
                                         withInt:(jint)minLen
   withOrgApacheLuceneCodecsCompressingLZ4_Match:(OrgApacheLuceneCodecsCompressingLZ4_Match *)match;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable)

inline jint OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_get_MAX_ATTEMPTS();
#define OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_MAX_ATTEMPTS 256
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable, MAX_ATTEMPTS, jint)

inline jint OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_get_MASK();
#define OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_MASK 65535
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable, MASK, jint)

FOUNDATION_EXPORT void OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_init(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *self);

FOUNDATION_EXPORT OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *new_OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *create_OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneCodecsCompressingLZ4")
